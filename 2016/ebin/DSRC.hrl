%% Generated by the Erlang ASN.1 compiler. Version: 5.3.1
%% Purpose: Erlang record definitions for each named and unnamed
%% SEQUENCE and SET, and macro definitions for each value
%% definition in module DSRC.

-ifndef(_DSRC_HRL_).
-define(_DSRC_HRL_, true).

-record('RegionalExtension', {
  regionId,
  regExtValue
}).

-record('PartIIcontent', {
  'partII-Id',
  'partII-Value'
}).

-record('MessageFrame', {
  messageId,
  value
  %% with extension mark
}).

-record('BasicSafetyMessage', {
  coreData,
  partII = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('BasicSafetyMessage_partII_SEQOF', {
  'partII-Id',
  'partII-Value'
}).

-record('BasicSafetyMessage_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('CommonSafetyRequest', {
  timeStamp = asn1_NOVALUE,
  msgCnt = asn1_NOVALUE,
  id = asn1_NOVALUE,
  requests,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('CommonSafetyRequest_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('EmergencyVehicleAlert', {
  timeStamp = asn1_NOVALUE,
  id = asn1_NOVALUE,
  rsaMsg,
  responseType = asn1_NOVALUE,
  details = asn1_NOVALUE,
  mass = asn1_NOVALUE,
  basicType = asn1_NOVALUE,
  vehicleType = asn1_NOVALUE,
  responseEquip = asn1_NOVALUE,
  responderType = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('EmergencyVehicleAlert_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('IntersectionCollision', {
  msgCnt,
  id,
  timeStamp = asn1_NOVALUE,
  partOne = asn1_NOVALUE,
  path = asn1_NOVALUE,
  pathPrediction = asn1_NOVALUE,
  intersectionID,
  laneNumber,
  eventFlag,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('IntersectionCollision_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('MapData', {
  timeStamp = asn1_NOVALUE,
  msgIssueRevision,
  layerType = asn1_NOVALUE,
  layerID = asn1_NOVALUE,
  intersections = asn1_NOVALUE,
  roadSegments = asn1_NOVALUE,
  dataParameters = asn1_NOVALUE,
  restrictionList = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('MapData_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('NMEAcorrections', {
  timeStamp = asn1_NOVALUE,
  rev = asn1_NOVALUE,
  msg = asn1_NOVALUE,
  wdCount = asn1_NOVALUE,
  payload,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('NMEAcorrections_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('PersonalSafetyMessage', {
  basicType,
  secMark,
  msgCnt,
  id,
  position,
  accuracy,
  speed,
  heading,
  accelSet = asn1_NOVALUE,
  pathHistory = asn1_NOVALUE,
  pathPrediction = asn1_NOVALUE,
  propulsion = asn1_NOVALUE,
  useState = asn1_NOVALUE,
  crossRequest = asn1_NOVALUE,
  crossState = asn1_NOVALUE,
  clusterSize = asn1_NOVALUE,
  clusterRadius = asn1_NOVALUE,
  eventResponderType = asn1_NOVALUE,
  activityType = asn1_NOVALUE,
  activitySubType = asn1_NOVALUE,
  assistType = asn1_NOVALUE,
  sizing = asn1_NOVALUE,
  attachment = asn1_NOVALUE,
  attachmentRadius = asn1_NOVALUE,
  animalType = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('PersonalSafetyMessage_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('ProbeDataManagement', {
  timeStamp = asn1_NOVALUE,
  sample,
  directions,
  term,
  snapshot,
  txInterval,
  dataElements = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('ProbeDataManagement_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('ProbeVehicleData', {
  timeStamp = asn1_NOVALUE,
  segNum = asn1_NOVALUE,
  probeID = asn1_NOVALUE,
  startVector,
  vehicleType,
  snapshots,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('ProbeVehicleData_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('RoadSideAlert', {
  msgCnt,
  timeStamp = asn1_NOVALUE,
  typeEvent,
  description = asn1_NOVALUE,
  priority = asn1_NOVALUE,
  heading = asn1_NOVALUE,
  extent = asn1_NOVALUE,
  position = asn1_NOVALUE,
  furtherInfoID = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('RoadSideAlert_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('RTCMcorrections', {
  msgCnt,
  rev,
  timeStamp = asn1_NOVALUE,
  anchorPoint = asn1_NOVALUE,
  rtcmHeader = asn1_NOVALUE,
  msgs,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('RTCMcorrections_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('SPAT', {
  timeStamp = asn1_NOVALUE,
  name = asn1_NOVALUE,
  intersections,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SPAT_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('SignalRequestMessage', {
  timeStamp = asn1_NOVALUE,
  second,
  sequenceNumber = asn1_NOVALUE,
  requests = asn1_NOVALUE,
  requestor,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SignalRequestMessage_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('SignalStatusMessage', {
  timeStamp = asn1_NOVALUE,
  second,
  sequenceNumber = asn1_NOVALUE,
  status,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SignalStatusMessage_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('TravelerInformation', {
  msgCnt,
  timeStamp = asn1_NOVALUE,
  packetID = asn1_NOVALUE,
  urlB = asn1_NOVALUE,
  dataFrames,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TravelerInformation_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('TestMessage00', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage00_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage01', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage01_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage02', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage02_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage03', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage03_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage04', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage04_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage05', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage05_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage06', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage06_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage07', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage07_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage08', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage08_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage09', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage09_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage10', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage10_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage11', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage11_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage12', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage12_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage13', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage13_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage14', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage14_regional', {
  regionId,
  regExtValue
}).

-record('TestMessage15', {
  header = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('TestMessage15_regional', {
  regionId,
  regExtValue
}).

-record('AccelerationSet4Way', {
  long,
  lat,
  vert,
  yaw
}).

-record('AccelSteerYawRateConfidence', {
  yawRate,
  acceleration,
  steeringWheelAngle
}).

-record('AdvisorySpeed', {
  type,
  speed = asn1_NOVALUE,
  confidence = asn1_NOVALUE,
  distance = asn1_NOVALUE,
  class = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('AdvisorySpeed_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('AntennaOffsetSet', {
  antOffsetX,
  antOffsetY,
  antOffsetZ
}).

-record('BrakeSystemStatus', {
  wheelBrakes,
  traction,
  abs,
  scs,
  brakeBoost,
  auxBrakes
}).

-record('BSMcoreData', {
  msgCnt,
  id,
  secMark,
  lat,
  long,
  elev,
  accuracy,
  transmission,
  speed,
  heading,
  angle,
  accelSet,
  brakes,
  size
}).

-record('BumperHeights', {
  front,
  rear
}).

-record('Circle', {
  center,
  radius,
  units
}).

-record('ComputedLane', {
  referenceLaneId,
  offsetXaxis,
  offsetYaxis,
  rotateXY = asn1_NOVALUE,
  scaleXaxis = asn1_NOVALUE,
  scaleYaxis = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('ComputedLane_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('ConfidenceSet', {
  accelConfidence = asn1_NOVALUE,
  speedConfidence = asn1_NOVALUE,
  timeConfidence = asn1_NOVALUE,
  posConfidence = asn1_NOVALUE,
  steerConfidence = asn1_NOVALUE,
  headingConfidence = asn1_NOVALUE,
  throttleConfidence = asn1_NOVALUE
  %% with extension mark
}).

-record('ConnectingLane', {
  lane,
  maneuver = asn1_NOVALUE
}).

-record('Connection', {
  connectingLane,
  remoteIntersection = asn1_NOVALUE,
  signalGroup = asn1_NOVALUE,
  userClass = asn1_NOVALUE,
  connectionID = asn1_NOVALUE
}).

-record('ConnectionManeuverAssist', {
  connectionID,
  queueLength = asn1_NOVALUE,
  availableStorageLength = asn1_NOVALUE,
  waitOnStop = asn1_NOVALUE,
  pedBicycleDetect = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('ConnectionManeuverAssist_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('DataParameters', {
  processMethod = asn1_NOVALUE,
  processAgency = asn1_NOVALUE,
  lastCheckedDate = asn1_NOVALUE,
  geoidUsed = asn1_NOVALUE
  %% with extension mark
}).

-record('DDate', {
  year,
  month,
  day
}).

-record('DDateTime', {
  year = asn1_NOVALUE,
  month = asn1_NOVALUE,
  day = asn1_NOVALUE,
  hour = asn1_NOVALUE,
  minute = asn1_NOVALUE,
  second = asn1_NOVALUE,
  offset = asn1_NOVALUE
}).

-record('DFullTime', {
  year,
  month,
  day,
  hour,
  minute
}).

-record('DMonthDay', {
  month,
  day
}).

-record('DTime', {
  hour,
  minute,
  second,
  offset = asn1_NOVALUE
}).

-record('DYearMonth', {
  year,
  month
}).

-record('DisabledVehicle', {
  statusDetails,
  locationDetails = asn1_NOVALUE
  %% with extension mark
}).

-record('EmergencyDetails', {
  sspRights,
  sirenUse,
  lightsUse,
  multi,
  events = asn1_NOVALUE,
  responseType = asn1_NOVALUE
  %% with extension mark
}).

-record('EventDescription', {
  typeEvent,
  description = asn1_NOVALUE,
  priority = asn1_NOVALUE,
  heading = asn1_NOVALUE,
  extent = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('EventDescription_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('FullPositionVector', {
  utcTime = asn1_NOVALUE,
  long,
  lat,
  elevation = asn1_NOVALUE,
  heading = asn1_NOVALUE,
  speed = asn1_NOVALUE,
  posAccuracy = asn1_NOVALUE,
  timeConfidence = asn1_NOVALUE,
  posConfidence = asn1_NOVALUE,
  speedConfidence = asn1_NOVALUE
  %% with extension mark
}).

-record('GenericLane', {
  laneID,
  name = asn1_NOVALUE,
  ingressApproach = asn1_NOVALUE,
  egressApproach = asn1_NOVALUE,
  laneAttributes,
  maneuvers = asn1_NOVALUE,
  nodeList,
  connectsTo = asn1_NOVALUE,
  overlays = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('GenericLane_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('GeographicalPath', {
  name = asn1_NOVALUE,
  id = asn1_NOVALUE,
  anchor = asn1_NOVALUE,
  laneWidth = asn1_NOVALUE,
  directionality = asn1_NOVALUE,
  closedPath = asn1_NOVALUE,
  direction = asn1_NOVALUE,
  description = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('GeographicalPath_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('GeometricProjection', {
  direction,
  extent = asn1_NOVALUE,
  laneWidth = asn1_NOVALUE,
  circle,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('GeometricProjection_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('Header', {
  year = asn1_NOVALUE,
  timeStamp = asn1_NOVALUE,
  secMark = asn1_NOVALUE,
  msgIssueRevision = asn1_NOVALUE
  %% with extension mark
}).

-record('IntersectionGeometry', {
  name = asn1_NOVALUE,
  id,
  revision,
  refPoint,
  laneWidth = asn1_NOVALUE,
  speedLimits = asn1_NOVALUE,
  laneSet,
  preemptPriorityData = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('IntersectionGeometry_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('IntersectionReferenceID', {
  region = asn1_NOVALUE,
  id
}).

-record('IntersectionState', {
  name = asn1_NOVALUE,
  id,
  revision,
  status,
  moy = asn1_NOVALUE,
  timeStamp = asn1_NOVALUE,
  enabledLanes = asn1_NOVALUE,
  states,
  maneuverAssistList = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('IntersectionState_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('ExitService_SEQOF', {
  item
}).

-record('GenericSignage_SEQOF', {
  item
}).

-record('SpeedLimit_SEQOF', {
  item
}).

-record('WorkZone_SEQOF', {
  item
}).

-record('J1939data', {
  tires = asn1_NOVALUE,
  axles = asn1_NOVALUE,
  trailerWeight = asn1_NOVALUE,
  cargoWeight = asn1_NOVALUE,
  steeringAxleTemperature = asn1_NOVALUE,
  driveAxleLocation = asn1_NOVALUE,
  driveAxleLiftAirPressure = asn1_NOVALUE,
  driveAxleTemperature = asn1_NOVALUE,
  driveAxleLubePressure = asn1_NOVALUE,
  steeringAxleLubePressure = asn1_NOVALUE
  %% with extension mark
}).

-record('TireData', {
  location = asn1_NOVALUE,
  pressure = asn1_NOVALUE,
  temp = asn1_NOVALUE,
  wheelSensorStatus = asn1_NOVALUE,
  wheelEndElectFault = asn1_NOVALUE,
  leakageRate = asn1_NOVALUE,
  detection = asn1_NOVALUE
  %% with extension mark
}).

-record('AxleWeightSet', {
  location = asn1_NOVALUE,
  weight = asn1_NOVALUE
  %% with extension mark
}).

-record('LaneAttributes', {
  directionalUse,
  sharedWith,
  laneType,
  regional = asn1_NOVALUE
}).

-record('LaneAttributes_regional', {
  regionId,
  regExtValue
}).

-record('LaneDataAttribute_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('MovementEvent', {
  eventState,
  timing = asn1_NOVALUE,
  speeds = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('MovementEvent_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('MovementState', {
  movementName = asn1_NOVALUE,
  signalGroup,
  'state-time-speed',
  maneuverAssistList = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('MovementState_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('Node-LL-24B', {
  lon,
  lat
}).

-record('Node-LL-28B', {
  lon,
  lat
}).

-record('Node-LL-32B', {
  lon,
  lat
}).

-record('Node-LL-36B', {
  lon,
  lat
}).

-record('Node-LL-44B', {
  lon,
  lat
}).

-record('Node-LL-48B', {
  lon,
  lat
}).

-record('Node-LLmD-64b', {
  lon,
  lat
}).

-record('Node-XY-20b', {
  x,
  y
}).

-record('Node-XY-22b', {
  x,
  y
}).

-record('Node-XY-24b', {
  x,
  y
}).

-record('Node-XY-26b', {
  x,
  y
}).

-record('Node-XY-28b', {
  x,
  y
}).

-record('Node-XY-32b', {
  x,
  y
}).

-record('NodeAttributeSetLL', {
  localNode = asn1_NOVALUE,
  disabled = asn1_NOVALUE,
  enabled = asn1_NOVALUE,
  data = asn1_NOVALUE,
  dWidth = asn1_NOVALUE,
  dElevation = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('NodeAttributeSetLL_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('NodeAttributeSetXY', {
  localNode = asn1_NOVALUE,
  disabled = asn1_NOVALUE,
  enabled = asn1_NOVALUE,
  data = asn1_NOVALUE,
  dWidth = asn1_NOVALUE,
  dElevation = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('NodeAttributeSetXY_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('NodeLL', {
  delta,
  attributes = asn1_NOVALUE
  %% with extension mark
}).

-record('NodeOffsetPointLL_regional', {
  regionId,
  regExtValue
}).

-record('NodeOffsetPointXY_regional', {
  regionId,
  regExtValue
}).

-record('NodeXY', {
  delta,
  attributes = asn1_NOVALUE
  %% with extension mark
}).

-record('ObstacleDetection', {
  obDist,
  obDirect,
  description = asn1_NOVALUE,
  locationDetails = asn1_NOVALUE,
  dateTime,
  vertEvent = asn1_NOVALUE
  %% with extension mark
}).

-record('OffsetSystem', {
  scale = asn1_NOVALUE,
  offset
}).

-record('PathHistory', {
  initialPosition = asn1_NOVALUE,
  currGNSSstatus = asn1_NOVALUE,
  crumbData
  %% with extension mark
}).

-record('PathHistoryPoint', {
  latOffset,
  lonOffset,
  elevationOffset,
  timeOffset,
  speed = asn1_NOVALUE,
  posAccuracy = asn1_NOVALUE,
  heading = asn1_NOVALUE
  %% with extension mark
}).

-record('PathPrediction', {
  radiusOfCurve,
  confidence
  %% with extension mark
}).

-record('PivotPointDescription', {
  pivotOffset,
  pivotAngle,
  pivots
  %% with extension mark
}).

-record('Position3D', {
  lat,
  long,
  elevation = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('Position3D_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('PositionalAccuracy', {
  semiMajor,
  semiMinor,
  orientation
}).

-record('PositionConfidenceSet', {
  pos,
  elevation
}).

-record('SignalControlZone', {
  zone
  %% with extension mark
}).

-record('SignalControlZone_zone', {
  regionId,
  regExtValue
}).

-record('PrivilegedEvents', {
  sspRights,
  event
  %% with extension mark
}).

-record('RegionOffsets', {
  xOffset,
  yOffset,
  zOffset = asn1_NOVALUE
}).

-record('RegionPointSet', {
  anchor = asn1_NOVALUE,
  scale = asn1_NOVALUE,
  nodeList
  %% with extension mark
}).

-record('RegulatorySpeedLimit', {
  type,
  speed
}).

-record('RequestorDescription', {
  id,
  type = asn1_NOVALUE,
  position = asn1_NOVALUE,
  name = asn1_NOVALUE,
  routeName = asn1_NOVALUE,
  transitStatus = asn1_NOVALUE,
  transitOccupancy = asn1_NOVALUE,
  transitSchedule = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('RequestorDescription_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('RequestorPositionVector', {
  position,
  heading = asn1_NOVALUE,
  speed = asn1_NOVALUE
  %% with extension mark
}).

-record('RequestorType', {
  role,
  subrole = asn1_NOVALUE,
  request = asn1_NOVALUE,
  iso3883 = asn1_NOVALUE,
  hpmsType = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('RequestorType_regional', {
  regionId,
  regExtValue
}).

-record('RestrictionClassAssignment', {
  id,
  users
}).

-record('RestrictionUserType_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('RoadSegmentReferenceID', {
  region = asn1_NOVALUE,
  id
}).

-record('RoadSegment', {
  name = asn1_NOVALUE,
  id,
  revision,
  refPoint,
  laneWidth = asn1_NOVALUE,
  speedLimits = asn1_NOVALUE,
  roadLaneSet,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('RoadSegment_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('RoadSignID', {
  position,
  viewAngle,
  mutcdCode = asn1_NOVALUE,
  crc = asn1_NOVALUE
}).

-record('RTCMheader', {
  status,
  offsetSet
}).

-record('RTCMPackage', {
  rtcmHeader = asn1_NOVALUE,
  msgs
  %% with extension mark
}).

-record('Sample', {
  sampleStart,
  sampleEnd
}).

-record('ShapePointSet', {
  anchor = asn1_NOVALUE,
  laneWidth = asn1_NOVALUE,
  directionality = asn1_NOVALUE,
  nodeList
  %% with extension mark
}).

-record('SignalRequesterInfo', {
  id,
  request,
  sequenceNumber,
  role = asn1_NOVALUE,
  typeData = asn1_NOVALUE
  %% with extension mark
}).

-record('SignalRequestPackage', {
  request,
  minute = asn1_NOVALUE,
  second = asn1_NOVALUE,
  duration = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SignalRequestPackage_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('SignalRequest', {
  id,
  requestID,
  requestType,
  inBoundLane,
  outBoundLane = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SignalRequest_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('SignalStatusPackage', {
  requester = asn1_NOVALUE,
  inboundOn,
  outboundOn = asn1_NOVALUE,
  minute = asn1_NOVALUE,
  second = asn1_NOVALUE,
  duration = asn1_NOVALUE,
  status,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SignalStatusPackage_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('SignalStatus', {
  sequenceNumber,
  id,
  sigStatus,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SignalStatus_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('SnapshotDistance', {
  distance1,
  speed1,
  distance2,
  speed2
}).

-record('Snapshot', {
  thePosition,
  safetyExt = asn1_NOVALUE,
  dataSet = asn1_NOVALUE
  %% with extension mark
}).

-record('SnapshotTime', {
  speed1,
  time1,
  speed2,
  time2
}).

-record('SpecialVehicleExtensions', {
  vehicleAlerts = asn1_NOVALUE,
  description = asn1_NOVALUE,
  trailers = asn1_NOVALUE
  %% with extension mark
}).

-record('SpeedandHeadingandThrottleConfidence', {
  heading,
  speed,
  throttle
}).

-record('SpeedProfile', {
  speedReports
  %% with extension mark
}).

-record('SupplementalVehicleExtensions', {
  classification = asn1_NOVALUE,
  classDetails = asn1_NOVALUE,
  vehicleData = asn1_NOVALUE,
  weatherReport = asn1_NOVALUE,
  weatherProbe = asn1_NOVALUE,
  obstacle = asn1_NOVALUE,
  status = asn1_NOVALUE,
  speedProfile = asn1_NOVALUE,
  theRTCM = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('SupplementalVehicleExtensions_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('TimeChangeDetails', {
  startTime = asn1_NOVALUE,
  minEndTime,
  maxEndTime = asn1_NOVALUE,
  likelyTime = asn1_NOVALUE,
  confidence = asn1_NOVALUE,
  nextTime = asn1_NOVALUE
}).

-record('TrailerData', {
  sspRights,
  connection,
  units
  %% with extension mark
}).

-record('TrailerHistoryPoint', {
  pivotAngle,
  timeOffset,
  positionOffset,
  elevationOffset = asn1_NOVALUE,
  heading = asn1_NOVALUE
  %% with extension mark
}).

-record('TrailerUnitDescription', {
  isDolly,
  width,
  length,
  height = asn1_NOVALUE,
  mass = asn1_NOVALUE,
  bumperHeights = asn1_NOVALUE,
  centerOfGravity = asn1_NOVALUE,
  frontPivot,
  rearPivot = asn1_NOVALUE,
  rearWheelOffset = asn1_NOVALUE,
  positionOffset,
  elevationOffset = asn1_NOVALUE,
  crumbData = asn1_NOVALUE
  %% with extension mark
}).

-record('TransmissionAndSpeed', {
  transmisson,
  speed
}).

-record('TravelerDataFrame', {
  sspTimRights,
  frameType,
  msgId,
  startYear = asn1_NOVALUE,
  startTime,
  duratonTime,
  priority,
  sspLocationRights,
  regions,
  sspMsgRights1,
  sspMsgRights2,
  content,
  url = asn1_NOVALUE
  %% with extension mark
}).

-record('ValidRegion', {
  direction,
  extent = asn1_NOVALUE,
  area
}).

-record('VehicleClassification', {
  keyType = asn1_NOVALUE,
  role = asn1_NOVALUE,
  iso3883 = asn1_NOVALUE,
  hpmsType = asn1_NOVALUE,
  vehicleType = asn1_NOVALUE,
  responseEquip = asn1_NOVALUE,
  responderType = asn1_NOVALUE,
  fuelType = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleClassification_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('VehicleData', {
  height = asn1_NOVALUE,
  bumpers = asn1_NOVALUE,
  mass = asn1_NOVALUE,
  trailerWeight = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleIdent', {
  name = asn1_NOVALUE,
  vin = asn1_NOVALUE,
  ownerCode = asn1_NOVALUE,
  id = asn1_NOVALUE,
  vehicleType = asn1_NOVALUE,
  vehicleClass = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleSafetyExtensions', {
  events = asn1_NOVALUE,
  pathHistory = asn1_NOVALUE,
  pathPrediction = asn1_NOVALUE,
  lights = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleSize', {
  width,
  length
}).

-record('VehicleStatusRequest', {
  dataType,
  subType = asn1_NOVALUE,
  sendOnLessThenValue = asn1_NOVALUE,
  sendOnMoreThenValue = asn1_NOVALUE,
  sendAll = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleStatus', {
  lights = asn1_NOVALUE,
  lightBar = asn1_NOVALUE,
  wipers = asn1_NOVALUE,
  brakeStatus = asn1_NOVALUE,
  brakePressure = asn1_NOVALUE,
  roadFriction = asn1_NOVALUE,
  sunData = asn1_NOVALUE,
  rainData = asn1_NOVALUE,
  airTemp = asn1_NOVALUE,
  airPres = asn1_NOVALUE,
  steering = asn1_NOVALUE,
  accelSets = asn1_NOVALUE,
  object = asn1_NOVALUE,
  fullPos = asn1_NOVALUE,
  throttlePos = asn1_NOVALUE,
  speedHeadC = asn1_NOVALUE,
  speedC = asn1_NOVALUE,
  vehicleData = asn1_NOVALUE,
  vehicleIdent = asn1_NOVALUE,
  j1939data = asn1_NOVALUE,
  weatherReport = asn1_NOVALUE,
  gnssStatus = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleStatus_steering', {
  angle,
  confidence = asn1_NOVALUE,
  rate = asn1_NOVALUE,
  wheels = asn1_NOVALUE
}).

-record('VehicleStatus_accelSets', {
  accel4way = asn1_NOVALUE,
  vertAccelThres = asn1_NOVALUE,
  yawRateCon = asn1_NOVALUE,
  hozAccelCon = asn1_NOVALUE,
  confidenceSet = asn1_NOVALUE
}).

-record('VehicleStatus_object', {
  obDist,
  obDirect,
  dateTime
}).

-record('VehicleStatus_vehicleData', {
  height,
  bumpers,
  mass,
  trailerWeight,
  type
}).

-record('VehicleStatus_weatherReport', {
  isRaining,
  rainRate = asn1_NOVALUE,
  precipSituation = asn1_NOVALUE,
  solarRadiation = asn1_NOVALUE,
  friction = asn1_NOVALUE
}).

-record('VerticalOffset_regional', {
  regionId,
  regExtValue
}).

-record('WeatherProbe', {
  airTemp = asn1_NOVALUE,
  airPressure = asn1_NOVALUE,
  rainRates = asn1_NOVALUE
  %% with extension mark
}).

-record('WeatherReport', {
  isRaining,
  rainRate = asn1_NOVALUE,
  precipSituation = asn1_NOVALUE,
  solarRadiation = asn1_NOVALUE,
  friction = asn1_NOVALUE,
  roadFriction = asn1_NOVALUE
  %% with extension mark
}).

-record('WiperSet', {
  statusFront,
  rateFront,
  statusRear = asn1_NOVALUE,
  rateRear = asn1_NOVALUE
}).

-define('vehicleSafetyExt', 0).
-define('specialVehicleExt', 1).
-define('supplementalVehicleExt', 2).
-define('unknownVehicleClass', 0).
-define('specialVehicleClass', 1).
-define('passenger-Vehicle-TypeUnknown', 10).
-define('passenger-Vehicle-TypeOther', 11).
-define('lightTruck-Vehicle-TypeUnknown', 20).
-define('lightTruck-Vehicle-TypeOther', 21).
-define('truck-Vehicle-TypeUnknown', 25).
-define('truck-Vehicle-TypeOther', 26).
-define('truck-axleCnt2', 27).
-define('truck-axleCnt3', 28).
-define('truck-axleCnt4', 29).
-define('truck-axleCnt4Trailer', 30).
-define('truck-axleCnt5Trailer', 31).
-define('truck-axleCnt6Trailer', 32).
-define('truck-axleCnt5MultiTrailer', 33).
-define('truck-axleCnt6MultiTrailer', 34).
-define('truck-axleCnt7MultiTrailer', 35).
-define('motorcycle-TypeUnknown', 40).
-define('motorcycle-TypeOther', 41).
-define('motorcycle-Cruiser-Standard', 42).
-define('motorcycle-SportUnclad', 43).
-define('motorcycle-SportTouring', 44).
-define('motorcycle-SuperSport', 45).
-define('motorcycle-Touring', 46).
-define('motorcycle-Trike', 47).
-define('motorcycle-wPassengers', 48).
-define('transit-TypeUnknown', 50).
-define('transit-TypeOther', 51).
-define('transit-BRT', 52).
-define('transit-ExpressBus', 53).
-define('transit-LocalBus', 54).
-define('transit-SchoolBus', 55).
-define('transit-FixedGuideway', 56).
-define('transit-Paratransit', 57).
-define('transit-Paratransit-Ambulance', 58).
-define('emergency-TypeUnknown', 60).
-define('emergency-TypeOther', 61).
-define('emergency-Fire-Light-Vehicle', 62).
-define('emergency-Fire-Heavy-Vehicle', 63).
-define('emergency-Fire-Paramedic-Vehicle', 64).
-define('emergency-Fire-Ambulance-Vehicle', 65).
-define('emergency-Police-Light-Vehicle', 66).
-define('emergency-Police-Heavy-Vehicle', 67).
-define('emergency-Other-Responder', 68).
-define('emergency-Other-Ambulance', 69).
-define('otherTraveler-TypeUnknown', 80).
-define('otherTraveler-TypeOther', 81).
-define('otherTraveler-Pedestrian', 82).
-define('otherTraveler-Visually-Disabled', 83).
-define('otherTraveler-Physically-Disabled', 84).
-define('otherTraveler-Bicycle', 85).
-define('otherTraveler-Vulnerable-Roadworker', 86).
-define('infrastructure-TypeUnknown', 90).
-define('infrastructure-Fixed', 91).
-define('infrastructure-Movable', 92).
-define('equipped-CargoTrailer', 93).
-define('reservedMessageId-D', 0).
-define('alaCarteMessage-D', 1).
-define('basicSafetyMessage-D', 2).
-define('basicSafetyMessageVerbose-D', 3).
-define('commonSafetyRequest-D', 4).
-define('emergencyVehicleAlert-D', 5).
-define('intersectionCollision-D', 6).
-define('mapData-D', 7).
-define('nmeaCorrections-D', 8).
-define('probeDataManagement-D', 9).
-define('probeVehicleData-D', 10).
-define('roadSideAlert-D', 11).
-define('rtcmCorrections-D', 12).
-define('signalPhaseAndTimingMessage-D', 13).
-define('signalRequestMessage-D', 14).
-define('signalStatusMessage-D', 15).
-define('travelerInformation-D', 16).
-define('uperFrame-D', 17).
-define('mapData', 18).
-define('signalPhaseAndTimingMessage', 19).
-define('basicSafetyMessage', 20).
-define('commonSafetyRequest', 21).
-define('emergencyVehicleAlert', 22).
-define('intersectionCollision', 23).
-define('nmeaCorrections', 24).
-define('probeDataManagement', 25).
-define('probeVehicleData', 26).
-define('roadSideAlert', 27).
-define('rtcmCorrections', 28).
-define('signalRequestMessage', 29).
-define('signalStatusMessage', 30).
-define('travelerInformation', 31).
-define('personalSafetyMessage', 32).
-define('testMessage00', 240).
-define('testMessage01', 241).
-define('testMessage02', 242).
-define('testMessage03', 243).
-define('testMessage04', 244).
-define('testMessage05', 245).
-define('testMessage06', 246).
-define('testMessage07', 247).
-define('testMessage08', 248).
-define('testMessage09', 249).
-define('testMessage10', 250).
-define('testMessage11', 251).
-define('testMessage12', 252).
-define('testMessage13', 253).
-define('testMessage14', 254).
-define('testMessage15', 255).
-define('unknownFuel', 0).
-define('gasoline', 1).
-define('ethanol', 2).
-define('diesel', 3).
-define('electric', 4).
-define('hybrid', 5).
-define('hydrogen', 6).
-define('natGasLiquid', 7).
-define('natGasComp', 8).
-define('propane', 9).
-define('noRegion', 0).
-define('addGrpA', 1).
-define('addGrpB', 2).
-define('addGrpC', 3).
-endif. %% _DSRC_HRL_
