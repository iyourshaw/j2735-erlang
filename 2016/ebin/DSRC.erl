%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in DSRC.

-module('DSRC').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("DSRC.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'DSRC'},
            {options,[{i,"./ebin"},uper,jer,verbose,{i,"./asn"},{outdir,"./ebin"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_MessageFrame/1,
enc_BasicSafetyMessage/1,
'enc_PartII-Id'/1,
enc_CommonSafetyRequest/1,
enc_EmergencyVehicleAlert/1,
enc_IntersectionCollision/1,
enc_MapData/1,
enc_NMEAcorrections/1,
enc_PersonalSafetyMessage/1,
enc_ProbeDataManagement/1,
enc_ProbeVehicleData/1,
enc_RoadSideAlert/1,
enc_RTCMcorrections/1,
enc_SPAT/1,
enc_SignalRequestMessage/1,
enc_SignalStatusMessage/1,
enc_TravelerInformation/1,
enc_TestMessage00/1,
enc_TestMessage01/1,
enc_TestMessage02/1,
enc_TestMessage03/1,
enc_TestMessage04/1,
enc_TestMessage05/1,
enc_TestMessage06/1,
enc_TestMessage07/1,
enc_TestMessage08/1,
enc_TestMessage09/1,
enc_TestMessage10/1,
enc_TestMessage11/1,
enc_TestMessage12/1,
enc_TestMessage13/1,
enc_TestMessage14/1,
enc_TestMessage15/1,
enc_AccelerationSet4Way/1,
enc_AccelSteerYawRateConfidence/1,
enc_AdvisorySpeed/1,
enc_AdvisorySpeedList/1,
enc_AntennaOffsetSet/1,
enc_ApproachOrLane/1,
enc_BrakeSystemStatus/1,
enc_BSMcoreData/1,
enc_BumperHeights/1,
enc_Circle/1,
enc_ComputedLane/1,
enc_ConfidenceSet/1,
enc_ConnectingLane/1,
enc_Connection/1,
enc_ConnectionManeuverAssist/1,
enc_ConnectsToList/1,
enc_DataParameters/1,
enc_DDate/1,
enc_DDateTime/1,
enc_DFullTime/1,
enc_DMonthDay/1,
enc_DTime/1,
enc_DYearMonth/1,
enc_DisabledVehicle/1,
enc_EmergencyDetails/1,
enc_EnabledLaneList/1,
enc_EventDescription/1,
enc_FullPositionVector/1,
enc_GenericLane/1,
enc_GeographicalPath/1,
enc_GeometricProjection/1,
enc_Header/1,
enc_IntersectionAccessPoint/1,
enc_IntersectionGeometry/1,
enc_IntersectionGeometryList/1,
enc_IntersectionReferenceID/1,
enc_IntersectionState/1,
enc_IntersectionStateList/1,
enc_ExitService/1,
enc_GenericSignage/1,
enc_SpeedLimit/1,
enc_WorkZone/1,
enc_J1939data/1,
enc_TireDataList/1,
enc_TireData/1,
enc_AxleWeightList/1,
enc_AxleWeightSet/1,
enc_LaneAttributes/1,
enc_LaneDataAttribute/1,
enc_LaneDataAttributeList/1,
enc_LaneList/1,
enc_LaneTypeAttributes/1,
enc_ManeuverAssistList/1,
enc_MovementEventList/1,
enc_MovementEvent/1,
enc_MovementList/1,
enc_MovementState/1,
'enc_Node-LL-24B'/1,
'enc_Node-LL-28B'/1,
'enc_Node-LL-32B'/1,
'enc_Node-LL-36B'/1,
'enc_Node-LL-44B'/1,
'enc_Node-LL-48B'/1,
'enc_Node-LLmD-64b'/1,
'enc_Node-XY-20b'/1,
'enc_Node-XY-22b'/1,
'enc_Node-XY-24b'/1,
'enc_Node-XY-26b'/1,
'enc_Node-XY-28b'/1,
'enc_Node-XY-32b'/1,
enc_NodeAttributeLLList/1,
enc_NodeAttributeSetLL/1,
enc_NodeAttributeSetXY/1,
enc_NodeAttributeXYList/1,
enc_NodeListLL/1,
enc_NodeListXY/1,
enc_NodeLL/1,
enc_NodeOffsetPointLL/1,
enc_NodeOffsetPointXY/1,
enc_NodeSetLL/1,
enc_NodeSetXY/1,
enc_NodeXY/1,
enc_ObstacleDetection/1,
enc_OffsetSystem/1,
enc_OverlayLaneList/1,
enc_PathHistory/1,
enc_PathHistoryPointList/1,
enc_PathHistoryPoint/1,
enc_PathPrediction/1,
enc_PivotPointDescription/1,
enc_Position3D/1,
enc_PositionalAccuracy/1,
enc_PositionConfidenceSet/1,
enc_PreemptPriorityList/1,
enc_SignalControlZone/1,
enc_PrivilegedEvents/1,
enc_PropelledInformation/1,
enc_RegionList/1,
enc_RegionOffsets/1,
enc_RegionPointSet/1,
enc_RegulatorySpeedLimit/1,
enc_RequestedItemList/1,
enc_RequestorDescription/1,
enc_RequestorPositionVector/1,
enc_RequestorType/1,
enc_RestrictionClassAssignment/1,
enc_RestrictionClassList/1,
enc_RestrictionUserTypeList/1,
enc_RestrictionUserType/1,
enc_RoadLaneSetList/1,
enc_RoadSegmentList/1,
enc_RoadSegmentReferenceID/1,
enc_RoadSegment/1,
enc_RoadSignID/1,
enc_RTCMheader/1,
enc_RTCMmessageList/1,
enc_RTCMPackage/1,
enc_Sample/1,
enc_SegmentAttributeLLList/1,
enc_SegmentAttributeXYList/1,
enc_ShapePointSet/1,
enc_SignalRequesterInfo/1,
enc_SignalRequestList/1,
enc_SignalRequestPackage/1,
enc_SignalRequest/1,
enc_SignalStatusList/1,
enc_SignalStatusPackageList/1,
enc_SignalStatusPackage/1,
enc_SignalStatus/1,
enc_SnapshotDistance/1,
enc_Snapshot/1,
enc_SnapshotTime/1,
enc_SpecialVehicleExtensions/1,
enc_SpeedandHeadingandThrottleConfidence/1,
enc_SpeedLimitList/1,
enc_SpeedProfileMeasurementList/1,
enc_SpeedProfile/1,
enc_SupplementalVehicleExtensions/1,
enc_TimeChangeDetails/1,
enc_TrailerData/1,
enc_TrailerHistoryPointList/1,
enc_TrailerHistoryPoint/1,
enc_TrailerUnitDescriptionList/1,
enc_TrailerUnitDescription/1,
enc_TransmissionAndSpeed/1,
enc_TravelerDataFrameList/1,
enc_TravelerDataFrame/1,
enc_ValidRegion/1,
enc_VehicleClassification/1,
enc_VehicleData/1,
enc_VehicleIdent/1,
enc_VehicleID/1,
enc_VehicleSafetyExtensions/1,
enc_VehicleSize/1,
enc_VehicleStatusRequest/1,
enc_VehicleStatusRequestList/1,
enc_VehicleStatus/1,
enc_VerticalOffset/1,
enc_WeatherProbe/1,
enc_WeatherReport/1,
enc_WiperSet/1,
enc_Acceleration/1,
enc_AccelerationConfidence/1,
enc_AdvisorySpeedType/1,
enc_AllowedManeuvers/1,
enc_AmbientAirPressure/1,
enc_AmbientAirTemperature/1,
enc_Angle/1,
enc_AnimalPropelledType/1,
enc_AnimalType/1,
enc_AntiLockBrakeStatus/1,
enc_ApproachID/1,
enc_Attachment/1,
enc_AttachmentRadius/1,
enc_AuxiliaryBrakeStatus/1,
enc_BasicVehicleClass/1,
enc_BasicVehicleRole/1,
enc_BrakeAppliedPressure/1,
enc_BrakeAppliedStatus/1,
enc_BrakeBoostApplied/1,
enc_BumperHeight/1,
enc_CoarseHeading/1,
enc_CodeWord/1,
enc_CoefficientOfFriction/1,
enc_Confidence/1,
enc_Count/1,
enc_DDay/1,
enc_DeltaAngle/1,
enc_DeltaTime/1,
enc_DescriptiveName/1,
enc_DHour/1,
enc_DirectionOfUse/1,
enc_DistanceUnits/1,
enc_DMinute/1,
enc_DMonth/1,
enc_DOffset/1,
enc_DrivenLineOffsetLg/1,
enc_DrivenLineOffsetSm/1,
enc_DrivingWheelAngle/1,
enc_DSecond/1,
enc_DSRCmsgID/1,
enc_Duration/1,
enc_DYear/1,
enc_ElevationConfidence/1,
enc_Elevation/1,
enc_Extent/1,
enc_ExteriorLights/1,
enc_FuelType/1,
enc_FurtherInfoID/1,
enc_GNSSstatus/1,
enc_GrossDistance/1,
enc_GrossSpeed/1,
enc_HeadingConfidence/1,
enc_Heading/1,
enc_HeadingSlice/1,
enc_IntersectionID/1,
enc_IntersectionStatusObject/1,
enc_IsDolly/1,
enc_Iso3833VehicleType/1,
enc_ITIStextPhrase/1,
enc_AxleLocation/1,
enc_AxleWeight/1,
enc_CargoWeight/1,
enc_DriveAxleLiftAirPressure/1,
enc_DriveAxleLocation/1,
enc_DriveAxleLubePressure/1,
enc_DriveAxleTemperature/1,
enc_SteeringAxleLubePressure/1,
enc_SteeringAxleTemperature/1,
enc_TireLeakageRate/1,
enc_TireLocation/1,
enc_TirePressureThresholdDetection/1,
enc_TirePressure/1,
enc_TireTemp/1,
enc_TrailerWeight/1,
enc_WheelEndElectFault/1,
enc_WheelSensorStatus/1,
'enc_LaneAttributes-Barrier'/1,
'enc_LaneAttributes-Bike'/1,
'enc_LaneAttributes-Crosswalk'/1,
'enc_LaneAttributes-Parking'/1,
'enc_LaneAttributes-Sidewalk'/1,
'enc_LaneAttributes-Striping'/1,
'enc_LaneAttributes-TrackedVehicle'/1,
'enc_LaneAttributes-Vehicle'/1,
enc_LaneConnectionID/1,
enc_LaneDirection/1,
enc_LaneID/1,
enc_LaneSharing/1,
enc_LaneWidth/1,
enc_Latitude/1,
enc_LayerID/1,
enc_LayerType/1,
enc_LightbarInUse/1,
enc_Longitude/1,
'enc_Location-quality'/1,
'enc_Location-tech'/1,
enc_MergeDivergeNodeAngle/1,
enc_MessageBLOB/1,
enc_MinuteOfTheYear/1,
enc_MinutesDuration/1,
enc_MotorizedPropelledType/1,
enc_MovementPhaseState/1,
enc_MsgCount/1,
enc_MsgCRC/1,
enc_MultiVehicleResponse/1,
enc_MUTCDCode/1,
'enc_NMEA-MsgType'/1,
'enc_NMEA-Payload'/1,
'enc_NMEA-Revision'/1,
enc_NodeAttributeLL/1,
enc_NodeAttributeXY/1,
enc_NumberOfParticipantsInCluster/1,
enc_ObjectCount/1,
enc_ObstacleDirection/1,
enc_ObstacleDistance/1,
'enc_Offset-B09'/1,
'enc_Offset-B10'/1,
'enc_Offset-B11'/1,
'enc_Offset-B12'/1,
'enc_Offset-B13'/1,
'enc_Offset-B14'/1,
'enc_Offset-B16'/1,
'enc_OffsetLL-B12'/1,
'enc_OffsetLL-B14'/1,
'enc_OffsetLL-B16'/1,
'enc_OffsetLL-B18'/1,
'enc_OffsetLL-B22'/1,
'enc_OffsetLL-B24'/1,
enc_PayloadData/1,
enc_PedestrianBicycleDetect/1,
enc_HumanPropelledType/1,
enc_PersonalAssistive/1,
enc_PersonalClusterRadius/1,
enc_PersonalCrossingInProgress/1,
enc_PersonalCrossingRequest/1,
enc_PersonalDeviceUsageState/1,
enc_PersonalDeviceUserType/1,
enc_PivotingAllowed/1,
enc_PositionConfidence/1,
enc_PrioritizationResponseStatus/1,
enc_Priority/1,
enc_PriorityRequestType/1,
enc_PrivilegedEventFlags/1,
enc_ProbeSegmentNumber/1,
enc_PublicSafetyAndRoadWorkerActivity/1,
enc_PublicSafetyDirectingTrafficSubType/1,
enc_PublicSafetyEventResponderWorkerType/1,
enc_RadiusOfCurvature/1,
'enc_Radius-B12'/1,
enc_RainSensor/1,
enc_RegionId/1,
enc_RequestedItem/1,
enc_RequestID/1,
enc_RequestImportanceLevel/1,
enc_RequestSubRole/1,
enc_ResponseType/1,
enc_RestrictionAppliesTo/1,
enc_RestrictionClassID/1,
enc_RoadRegulatorID/1,
enc_RoadSegmentID/1,
enc_RoadwayCrownAngle/1,
'enc_RTCM-Revision'/1,
enc_RTCMmessage/1,
'enc_Scale-B12'/1,
enc_SecondOfTime/1,
enc_SegmentAttributeLL/1,
enc_SegmentAttributeXY/1,
enc_SemiMajorAxisAccuracy/1,
enc_SemiMajorAxisOrientation/1,
enc_SemiMinorAxisAccuracy/1,
enc_SignalGroupID/1,
enc_SignalReqScheme/1,
enc_SignPrority/1,
enc_SirenInUse/1,
enc_SpeedAdvice/1,
enc_SpeedConfidence/1,
enc_SpeedLimitType/1,
enc_SpeedProfileMeasurement/1,
enc_Speed/1,
enc_SSPindex/1,
enc_StabilityControlStatus/1,
enc_StationID/1,
enc_SteeringWheelAngleConfidence/1,
enc_SteeringWheelAngleRateOfChange/1,
enc_SteeringWheelAngle/1,
enc_SunSensor/1,
enc_TemporaryID/1,
enc_TermDistance/1,
enc_TermTime/1,
enc_ThrottleConfidence/1,
enc_ThrottlePosition/1,
enc_TimeConfidence/1,
enc_TimeIntervalConfidence/1,
enc_TimeMark/1,
enc_TimeOffset/1,
enc_TractionControlStatus/1,
enc_TrailerMass/1,
enc_TransitStatus/1,
enc_TransitVehicleOccupancy/1,
enc_TransitVehicleStatus/1,
enc_TransmissionState/1,
enc_TravelerInfoType/1,
enc_UniqueMSGID/1,
'enc_URL-Base'/1,
'enc_URL-Link'/1,
'enc_URL-Short'/1,
enc_UserSizeAndBehaviour/1,
enc_VehicleEventFlags/1,
enc_VehicleHeight/1,
enc_VehicleLength/1,
enc_VehicleMass/1,
enc_VehicleStatusDeviceTypeTag/1,
enc_VehicleType/1,
enc_VehicleWidth/1,
enc_Velocity/1,
enc_VerticalAccelerationThreshold/1,
enc_VerticalAcceleration/1,
'enc_VertOffset-B07'/1,
'enc_VertOffset-B08'/1,
'enc_VertOffset-B09'/1,
'enc_VertOffset-B10'/1,
'enc_VertOffset-B11'/1,
'enc_VertOffset-B12'/1,
enc_VINstring/1,
enc_WaitOnStopline/1,
enc_WiperRate/1,
enc_WiperStatus/1,
enc_YawRateConfidence/1,
enc_YawRate/1,
enc_ZoneLength/1,
enc_Zoom/1
]).

-export([
dec_MessageFrame/1,
dec_BasicSafetyMessage/1,
'dec_PartII-Id'/1,
dec_CommonSafetyRequest/1,
dec_EmergencyVehicleAlert/1,
dec_IntersectionCollision/1,
dec_MapData/1,
dec_NMEAcorrections/1,
dec_PersonalSafetyMessage/1,
dec_ProbeDataManagement/1,
dec_ProbeVehicleData/1,
dec_RoadSideAlert/1,
dec_RTCMcorrections/1,
dec_SPAT/1,
dec_SignalRequestMessage/1,
dec_SignalStatusMessage/1,
dec_TravelerInformation/1,
dec_TestMessage00/1,
dec_TestMessage01/1,
dec_TestMessage02/1,
dec_TestMessage03/1,
dec_TestMessage04/1,
dec_TestMessage05/1,
dec_TestMessage06/1,
dec_TestMessage07/1,
dec_TestMessage08/1,
dec_TestMessage09/1,
dec_TestMessage10/1,
dec_TestMessage11/1,
dec_TestMessage12/1,
dec_TestMessage13/1,
dec_TestMessage14/1,
dec_TestMessage15/1,
dec_AccelerationSet4Way/1,
dec_AccelSteerYawRateConfidence/1,
dec_AdvisorySpeed/1,
dec_AdvisorySpeedList/1,
dec_AntennaOffsetSet/1,
dec_ApproachOrLane/1,
dec_BrakeSystemStatus/1,
dec_BSMcoreData/1,
dec_BumperHeights/1,
dec_Circle/1,
dec_ComputedLane/1,
dec_ConfidenceSet/1,
dec_ConnectingLane/1,
dec_Connection/1,
dec_ConnectionManeuverAssist/1,
dec_ConnectsToList/1,
dec_DataParameters/1,
dec_DDate/1,
dec_DDateTime/1,
dec_DFullTime/1,
dec_DMonthDay/1,
dec_DTime/1,
dec_DYearMonth/1,
dec_DisabledVehicle/1,
dec_EmergencyDetails/1,
dec_EnabledLaneList/1,
dec_EventDescription/1,
dec_FullPositionVector/1,
dec_GenericLane/1,
dec_GeographicalPath/1,
dec_GeometricProjection/1,
dec_Header/1,
dec_IntersectionAccessPoint/1,
dec_IntersectionGeometry/1,
dec_IntersectionGeometryList/1,
dec_IntersectionReferenceID/1,
dec_IntersectionState/1,
dec_IntersectionStateList/1,
dec_ExitService/1,
dec_GenericSignage/1,
dec_SpeedLimit/1,
dec_WorkZone/1,
dec_J1939data/1,
dec_TireDataList/1,
dec_TireData/1,
dec_AxleWeightList/1,
dec_AxleWeightSet/1,
dec_LaneAttributes/1,
dec_LaneDataAttribute/1,
dec_LaneDataAttributeList/1,
dec_LaneList/1,
dec_LaneTypeAttributes/1,
dec_ManeuverAssistList/1,
dec_MovementEventList/1,
dec_MovementEvent/1,
dec_MovementList/1,
dec_MovementState/1,
'dec_Node-LL-24B'/1,
'dec_Node-LL-28B'/1,
'dec_Node-LL-32B'/1,
'dec_Node-LL-36B'/1,
'dec_Node-LL-44B'/1,
'dec_Node-LL-48B'/1,
'dec_Node-LLmD-64b'/1,
'dec_Node-XY-20b'/1,
'dec_Node-XY-22b'/1,
'dec_Node-XY-24b'/1,
'dec_Node-XY-26b'/1,
'dec_Node-XY-28b'/1,
'dec_Node-XY-32b'/1,
dec_NodeAttributeLLList/1,
dec_NodeAttributeSetLL/1,
dec_NodeAttributeSetXY/1,
dec_NodeAttributeXYList/1,
dec_NodeListLL/1,
dec_NodeListXY/1,
dec_NodeLL/1,
dec_NodeOffsetPointLL/1,
dec_NodeOffsetPointXY/1,
dec_NodeSetLL/1,
dec_NodeSetXY/1,
dec_NodeXY/1,
dec_ObstacleDetection/1,
dec_OffsetSystem/1,
dec_OverlayLaneList/1,
dec_PathHistory/1,
dec_PathHistoryPointList/1,
dec_PathHistoryPoint/1,
dec_PathPrediction/1,
dec_PivotPointDescription/1,
dec_Position3D/1,
dec_PositionalAccuracy/1,
dec_PositionConfidenceSet/1,
dec_PreemptPriorityList/1,
dec_SignalControlZone/1,
dec_PrivilegedEvents/1,
dec_PropelledInformation/1,
dec_RegionList/1,
dec_RegionOffsets/1,
dec_RegionPointSet/1,
dec_RegulatorySpeedLimit/1,
dec_RequestedItemList/1,
dec_RequestorDescription/1,
dec_RequestorPositionVector/1,
dec_RequestorType/1,
dec_RestrictionClassAssignment/1,
dec_RestrictionClassList/1,
dec_RestrictionUserTypeList/1,
dec_RestrictionUserType/1,
dec_RoadLaneSetList/1,
dec_RoadSegmentList/1,
dec_RoadSegmentReferenceID/1,
dec_RoadSegment/1,
dec_RoadSignID/1,
dec_RTCMheader/1,
dec_RTCMmessageList/1,
dec_RTCMPackage/1,
dec_Sample/1,
dec_SegmentAttributeLLList/1,
dec_SegmentAttributeXYList/1,
dec_ShapePointSet/1,
dec_SignalRequesterInfo/1,
dec_SignalRequestList/1,
dec_SignalRequestPackage/1,
dec_SignalRequest/1,
dec_SignalStatusList/1,
dec_SignalStatusPackageList/1,
dec_SignalStatusPackage/1,
dec_SignalStatus/1,
dec_SnapshotDistance/1,
dec_Snapshot/1,
dec_SnapshotTime/1,
dec_SpecialVehicleExtensions/1,
dec_SpeedandHeadingandThrottleConfidence/1,
dec_SpeedLimitList/1,
dec_SpeedProfileMeasurementList/1,
dec_SpeedProfile/1,
dec_SupplementalVehicleExtensions/1,
dec_TimeChangeDetails/1,
dec_TrailerData/1,
dec_TrailerHistoryPointList/1,
dec_TrailerHistoryPoint/1,
dec_TrailerUnitDescriptionList/1,
dec_TrailerUnitDescription/1,
dec_TransmissionAndSpeed/1,
dec_TravelerDataFrameList/1,
dec_TravelerDataFrame/1,
dec_ValidRegion/1,
dec_VehicleClassification/1,
dec_VehicleData/1,
dec_VehicleIdent/1,
dec_VehicleID/1,
dec_VehicleSafetyExtensions/1,
dec_VehicleSize/1,
dec_VehicleStatusRequest/1,
dec_VehicleStatusRequestList/1,
dec_VehicleStatus/1,
dec_VerticalOffset/1,
dec_WeatherProbe/1,
dec_WeatherReport/1,
dec_WiperSet/1,
dec_Acceleration/1,
dec_AccelerationConfidence/1,
dec_AdvisorySpeedType/1,
dec_AllowedManeuvers/1,
dec_AmbientAirPressure/1,
dec_AmbientAirTemperature/1,
dec_Angle/1,
dec_AnimalPropelledType/1,
dec_AnimalType/1,
dec_AntiLockBrakeStatus/1,
dec_ApproachID/1,
dec_Attachment/1,
dec_AttachmentRadius/1,
dec_AuxiliaryBrakeStatus/1,
dec_BasicVehicleClass/1,
dec_BasicVehicleRole/1,
dec_BrakeAppliedPressure/1,
dec_BrakeAppliedStatus/1,
dec_BrakeBoostApplied/1,
dec_BumperHeight/1,
dec_CoarseHeading/1,
dec_CodeWord/1,
dec_CoefficientOfFriction/1,
dec_Confidence/1,
dec_Count/1,
dec_DDay/1,
dec_DeltaAngle/1,
dec_DeltaTime/1,
dec_DescriptiveName/1,
dec_DHour/1,
dec_DirectionOfUse/1,
dec_DistanceUnits/1,
dec_DMinute/1,
dec_DMonth/1,
dec_DOffset/1,
dec_DrivenLineOffsetLg/1,
dec_DrivenLineOffsetSm/1,
dec_DrivingWheelAngle/1,
dec_DSecond/1,
dec_DSRCmsgID/1,
dec_Duration/1,
dec_DYear/1,
dec_ElevationConfidence/1,
dec_Elevation/1,
dec_Extent/1,
dec_ExteriorLights/1,
dec_FuelType/1,
dec_FurtherInfoID/1,
dec_GNSSstatus/1,
dec_GrossDistance/1,
dec_GrossSpeed/1,
dec_HeadingConfidence/1,
dec_Heading/1,
dec_HeadingSlice/1,
dec_IntersectionID/1,
dec_IntersectionStatusObject/1,
dec_IsDolly/1,
dec_Iso3833VehicleType/1,
dec_ITIStextPhrase/1,
dec_AxleLocation/1,
dec_AxleWeight/1,
dec_CargoWeight/1,
dec_DriveAxleLiftAirPressure/1,
dec_DriveAxleLocation/1,
dec_DriveAxleLubePressure/1,
dec_DriveAxleTemperature/1,
dec_SteeringAxleLubePressure/1,
dec_SteeringAxleTemperature/1,
dec_TireLeakageRate/1,
dec_TireLocation/1,
dec_TirePressureThresholdDetection/1,
dec_TirePressure/1,
dec_TireTemp/1,
dec_TrailerWeight/1,
dec_WheelEndElectFault/1,
dec_WheelSensorStatus/1,
'dec_LaneAttributes-Barrier'/1,
'dec_LaneAttributes-Bike'/1,
'dec_LaneAttributes-Crosswalk'/1,
'dec_LaneAttributes-Parking'/1,
'dec_LaneAttributes-Sidewalk'/1,
'dec_LaneAttributes-Striping'/1,
'dec_LaneAttributes-TrackedVehicle'/1,
'dec_LaneAttributes-Vehicle'/1,
dec_LaneConnectionID/1,
dec_LaneDirection/1,
dec_LaneID/1,
dec_LaneSharing/1,
dec_LaneWidth/1,
dec_Latitude/1,
dec_LayerID/1,
dec_LayerType/1,
dec_LightbarInUse/1,
dec_Longitude/1,
'dec_Location-quality'/1,
'dec_Location-tech'/1,
dec_MergeDivergeNodeAngle/1,
dec_MessageBLOB/1,
dec_MinuteOfTheYear/1,
dec_MinutesDuration/1,
dec_MotorizedPropelledType/1,
dec_MovementPhaseState/1,
dec_MsgCount/1,
dec_MsgCRC/1,
dec_MultiVehicleResponse/1,
dec_MUTCDCode/1,
'dec_NMEA-MsgType'/1,
'dec_NMEA-Payload'/1,
'dec_NMEA-Revision'/1,
dec_NodeAttributeLL/1,
dec_NodeAttributeXY/1,
dec_NumberOfParticipantsInCluster/1,
dec_ObjectCount/1,
dec_ObstacleDirection/1,
dec_ObstacleDistance/1,
'dec_Offset-B09'/1,
'dec_Offset-B10'/1,
'dec_Offset-B11'/1,
'dec_Offset-B12'/1,
'dec_Offset-B13'/1,
'dec_Offset-B14'/1,
'dec_Offset-B16'/1,
'dec_OffsetLL-B12'/1,
'dec_OffsetLL-B14'/1,
'dec_OffsetLL-B16'/1,
'dec_OffsetLL-B18'/1,
'dec_OffsetLL-B22'/1,
'dec_OffsetLL-B24'/1,
dec_PayloadData/1,
dec_PedestrianBicycleDetect/1,
dec_HumanPropelledType/1,
dec_PersonalAssistive/1,
dec_PersonalClusterRadius/1,
dec_PersonalCrossingInProgress/1,
dec_PersonalCrossingRequest/1,
dec_PersonalDeviceUsageState/1,
dec_PersonalDeviceUserType/1,
dec_PivotingAllowed/1,
dec_PositionConfidence/1,
dec_PrioritizationResponseStatus/1,
dec_Priority/1,
dec_PriorityRequestType/1,
dec_PrivilegedEventFlags/1,
dec_ProbeSegmentNumber/1,
dec_PublicSafetyAndRoadWorkerActivity/1,
dec_PublicSafetyDirectingTrafficSubType/1,
dec_PublicSafetyEventResponderWorkerType/1,
dec_RadiusOfCurvature/1,
'dec_Radius-B12'/1,
dec_RainSensor/1,
dec_RegionId/1,
dec_RequestedItem/1,
dec_RequestID/1,
dec_RequestImportanceLevel/1,
dec_RequestSubRole/1,
dec_ResponseType/1,
dec_RestrictionAppliesTo/1,
dec_RestrictionClassID/1,
dec_RoadRegulatorID/1,
dec_RoadSegmentID/1,
dec_RoadwayCrownAngle/1,
'dec_RTCM-Revision'/1,
dec_RTCMmessage/1,
'dec_Scale-B12'/1,
dec_SecondOfTime/1,
dec_SegmentAttributeLL/1,
dec_SegmentAttributeXY/1,
dec_SemiMajorAxisAccuracy/1,
dec_SemiMajorAxisOrientation/1,
dec_SemiMinorAxisAccuracy/1,
dec_SignalGroupID/1,
dec_SignalReqScheme/1,
dec_SignPrority/1,
dec_SirenInUse/1,
dec_SpeedAdvice/1,
dec_SpeedConfidence/1,
dec_SpeedLimitType/1,
dec_SpeedProfileMeasurement/1,
dec_Speed/1,
dec_SSPindex/1,
dec_StabilityControlStatus/1,
dec_StationID/1,
dec_SteeringWheelAngleConfidence/1,
dec_SteeringWheelAngleRateOfChange/1,
dec_SteeringWheelAngle/1,
dec_SunSensor/1,
dec_TemporaryID/1,
dec_TermDistance/1,
dec_TermTime/1,
dec_ThrottleConfidence/1,
dec_ThrottlePosition/1,
dec_TimeConfidence/1,
dec_TimeIntervalConfidence/1,
dec_TimeMark/1,
dec_TimeOffset/1,
dec_TractionControlStatus/1,
dec_TrailerMass/1,
dec_TransitStatus/1,
dec_TransitVehicleOccupancy/1,
dec_TransitVehicleStatus/1,
dec_TransmissionState/1,
dec_TravelerInfoType/1,
dec_UniqueMSGID/1,
'dec_URL-Base'/1,
'dec_URL-Link'/1,
'dec_URL-Short'/1,
dec_UserSizeAndBehaviour/1,
dec_VehicleEventFlags/1,
dec_VehicleHeight/1,
dec_VehicleLength/1,
dec_VehicleMass/1,
dec_VehicleStatusDeviceTypeTag/1,
dec_VehicleType/1,
dec_VehicleWidth/1,
dec_Velocity/1,
dec_VerticalAccelerationThreshold/1,
dec_VerticalAcceleration/1,
'dec_VertOffset-B07'/1,
'dec_VertOffset-B08'/1,
'dec_VertOffset-B09'/1,
'dec_VertOffset-B10'/1,
'dec_VertOffset-B11'/1,
'dec_VertOffset-B12'/1,
dec_VINstring/1,
dec_WaitOnStopline/1,
dec_WiperRate/1,
dec_WiperStatus/1,
dec_YawRateConfidence/1,
dec_YawRate/1,
dec_ZoneLength/1,
dec_Zoom/1
]).

-export([
vehicleSafetyExt/0,
specialVehicleExt/0,
supplementalVehicleExt/0,
unknownVehicleClass/0,
specialVehicleClass/0,
'passenger-Vehicle-TypeUnknown'/0,
'passenger-Vehicle-TypeOther'/0,
'lightTruck-Vehicle-TypeUnknown'/0,
'lightTruck-Vehicle-TypeOther'/0,
'truck-Vehicle-TypeUnknown'/0,
'truck-Vehicle-TypeOther'/0,
'truck-axleCnt2'/0,
'truck-axleCnt3'/0,
'truck-axleCnt4'/0,
'truck-axleCnt4Trailer'/0,
'truck-axleCnt5Trailer'/0,
'truck-axleCnt6Trailer'/0,
'truck-axleCnt5MultiTrailer'/0,
'truck-axleCnt6MultiTrailer'/0,
'truck-axleCnt7MultiTrailer'/0,
'motorcycle-TypeUnknown'/0,
'motorcycle-TypeOther'/0,
'motorcycle-Cruiser-Standard'/0,
'motorcycle-SportUnclad'/0,
'motorcycle-SportTouring'/0,
'motorcycle-SuperSport'/0,
'motorcycle-Touring'/0,
'motorcycle-Trike'/0,
'motorcycle-wPassengers'/0,
'transit-TypeUnknown'/0,
'transit-TypeOther'/0,
'transit-BRT'/0,
'transit-ExpressBus'/0,
'transit-LocalBus'/0,
'transit-SchoolBus'/0,
'transit-FixedGuideway'/0,
'transit-Paratransit'/0,
'transit-Paratransit-Ambulance'/0,
'emergency-TypeUnknown'/0,
'emergency-TypeOther'/0,
'emergency-Fire-Light-Vehicle'/0,
'emergency-Fire-Heavy-Vehicle'/0,
'emergency-Fire-Paramedic-Vehicle'/0,
'emergency-Fire-Ambulance-Vehicle'/0,
'emergency-Police-Light-Vehicle'/0,
'emergency-Police-Heavy-Vehicle'/0,
'emergency-Other-Responder'/0,
'emergency-Other-Ambulance'/0,
'otherTraveler-TypeUnknown'/0,
'otherTraveler-TypeOther'/0,
'otherTraveler-Pedestrian'/0,
'otherTraveler-Visually-Disabled'/0,
'otherTraveler-Physically-Disabled'/0,
'otherTraveler-Bicycle'/0,
'otherTraveler-Vulnerable-Roadworker'/0,
'infrastructure-TypeUnknown'/0,
'infrastructure-Fixed'/0,
'infrastructure-Movable'/0,
'equipped-CargoTrailer'/0,
'reservedMessageId-D'/0,
'alaCarteMessage-D'/0,
'basicSafetyMessage-D'/0,
'basicSafetyMessageVerbose-D'/0,
'commonSafetyRequest-D'/0,
'emergencyVehicleAlert-D'/0,
'intersectionCollision-D'/0,
'mapData-D'/0,
'nmeaCorrections-D'/0,
'probeDataManagement-D'/0,
'probeVehicleData-D'/0,
'roadSideAlert-D'/0,
'rtcmCorrections-D'/0,
'signalPhaseAndTimingMessage-D'/0,
'signalRequestMessage-D'/0,
'signalStatusMessage-D'/0,
'travelerInformation-D'/0,
'uperFrame-D'/0,
mapData/0,
signalPhaseAndTimingMessage/0,
basicSafetyMessage/0,
commonSafetyRequest/0,
emergencyVehicleAlert/0,
intersectionCollision/0,
nmeaCorrections/0,
probeDataManagement/0,
probeVehicleData/0,
roadSideAlert/0,
rtcmCorrections/0,
signalRequestMessage/0,
signalStatusMessage/0,
travelerInformation/0,
personalSafetyMessage/0,
testMessage00/0,
testMessage01/0,
testMessage02/0,
testMessage03/0,
testMessage04/0,
testMessage05/0,
testMessage06/0,
testMessage07/0,
testMessage08/0,
testMessage09/0,
testMessage10/0,
testMessage11/0,
testMessage12/0,
testMessage13/0,
testMessage14/0,
testMessage15/0,
unknownFuel/0,
gasoline/0,
ethanol/0,
diesel/0,
electric/0,
hybrid/0,
hydrogen/0,
natGasLiquid/0,
natGasComp/0,
propane/0,
noRegion/0,
addGrpA/0,
addGrpB/0,
addGrpC/0
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('DSRC', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('DSRC', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('MessageFrame', Data) -> enc_MessageFrame(Data);
encode_disp('BasicSafetyMessage', Data) -> enc_BasicSafetyMessage(Data);
encode_disp('PartII-Id', Data) -> 'enc_PartII-Id'(Data);
encode_disp('CommonSafetyRequest', Data) -> enc_CommonSafetyRequest(Data);
encode_disp('EmergencyVehicleAlert', Data) -> enc_EmergencyVehicleAlert(Data);
encode_disp('IntersectionCollision', Data) -> enc_IntersectionCollision(Data);
encode_disp('MapData', Data) -> enc_MapData(Data);
encode_disp('NMEAcorrections', Data) -> enc_NMEAcorrections(Data);
encode_disp('PersonalSafetyMessage', Data) -> enc_PersonalSafetyMessage(Data);
encode_disp('ProbeDataManagement', Data) -> enc_ProbeDataManagement(Data);
encode_disp('ProbeVehicleData', Data) -> enc_ProbeVehicleData(Data);
encode_disp('RoadSideAlert', Data) -> enc_RoadSideAlert(Data);
encode_disp('RTCMcorrections', Data) -> enc_RTCMcorrections(Data);
encode_disp('SPAT', Data) -> enc_SPAT(Data);
encode_disp('SignalRequestMessage', Data) -> enc_SignalRequestMessage(Data);
encode_disp('SignalStatusMessage', Data) -> enc_SignalStatusMessage(Data);
encode_disp('TravelerInformation', Data) -> enc_TravelerInformation(Data);
encode_disp('TestMessage00', Data) -> enc_TestMessage00(Data);
encode_disp('TestMessage01', Data) -> enc_TestMessage01(Data);
encode_disp('TestMessage02', Data) -> enc_TestMessage02(Data);
encode_disp('TestMessage03', Data) -> enc_TestMessage03(Data);
encode_disp('TestMessage04', Data) -> enc_TestMessage04(Data);
encode_disp('TestMessage05', Data) -> enc_TestMessage05(Data);
encode_disp('TestMessage06', Data) -> enc_TestMessage06(Data);
encode_disp('TestMessage07', Data) -> enc_TestMessage07(Data);
encode_disp('TestMessage08', Data) -> enc_TestMessage08(Data);
encode_disp('TestMessage09', Data) -> enc_TestMessage09(Data);
encode_disp('TestMessage10', Data) -> enc_TestMessage10(Data);
encode_disp('TestMessage11', Data) -> enc_TestMessage11(Data);
encode_disp('TestMessage12', Data) -> enc_TestMessage12(Data);
encode_disp('TestMessage13', Data) -> enc_TestMessage13(Data);
encode_disp('TestMessage14', Data) -> enc_TestMessage14(Data);
encode_disp('TestMessage15', Data) -> enc_TestMessage15(Data);
encode_disp('AccelerationSet4Way', Data) -> enc_AccelerationSet4Way(Data);
encode_disp('AccelSteerYawRateConfidence', Data) -> enc_AccelSteerYawRateConfidence(Data);
encode_disp('AdvisorySpeed', Data) -> enc_AdvisorySpeed(Data);
encode_disp('AdvisorySpeedList', Data) -> enc_AdvisorySpeedList(Data);
encode_disp('AntennaOffsetSet', Data) -> enc_AntennaOffsetSet(Data);
encode_disp('ApproachOrLane', Data) -> enc_ApproachOrLane(Data);
encode_disp('BrakeSystemStatus', Data) -> enc_BrakeSystemStatus(Data);
encode_disp('BSMcoreData', Data) -> enc_BSMcoreData(Data);
encode_disp('BumperHeights', Data) -> enc_BumperHeights(Data);
encode_disp('Circle', Data) -> enc_Circle(Data);
encode_disp('ComputedLane', Data) -> enc_ComputedLane(Data);
encode_disp('ConfidenceSet', Data) -> enc_ConfidenceSet(Data);
encode_disp('ConnectingLane', Data) -> enc_ConnectingLane(Data);
encode_disp('Connection', Data) -> enc_Connection(Data);
encode_disp('ConnectionManeuverAssist', Data) -> enc_ConnectionManeuverAssist(Data);
encode_disp('ConnectsToList', Data) -> enc_ConnectsToList(Data);
encode_disp('DataParameters', Data) -> enc_DataParameters(Data);
encode_disp('DDate', Data) -> enc_DDate(Data);
encode_disp('DDateTime', Data) -> enc_DDateTime(Data);
encode_disp('DFullTime', Data) -> enc_DFullTime(Data);
encode_disp('DMonthDay', Data) -> enc_DMonthDay(Data);
encode_disp('DTime', Data) -> enc_DTime(Data);
encode_disp('DYearMonth', Data) -> enc_DYearMonth(Data);
encode_disp('DisabledVehicle', Data) -> enc_DisabledVehicle(Data);
encode_disp('EmergencyDetails', Data) -> enc_EmergencyDetails(Data);
encode_disp('EnabledLaneList', Data) -> enc_EnabledLaneList(Data);
encode_disp('EventDescription', Data) -> enc_EventDescription(Data);
encode_disp('FullPositionVector', Data) -> enc_FullPositionVector(Data);
encode_disp('GenericLane', Data) -> enc_GenericLane(Data);
encode_disp('GeographicalPath', Data) -> enc_GeographicalPath(Data);
encode_disp('GeometricProjection', Data) -> enc_GeometricProjection(Data);
encode_disp('Header', Data) -> enc_Header(Data);
encode_disp('IntersectionAccessPoint', Data) -> enc_IntersectionAccessPoint(Data);
encode_disp('IntersectionGeometry', Data) -> enc_IntersectionGeometry(Data);
encode_disp('IntersectionGeometryList', Data) -> enc_IntersectionGeometryList(Data);
encode_disp('IntersectionReferenceID', Data) -> enc_IntersectionReferenceID(Data);
encode_disp('IntersectionState', Data) -> enc_IntersectionState(Data);
encode_disp('IntersectionStateList', Data) -> enc_IntersectionStateList(Data);
encode_disp('ExitService', Data) -> enc_ExitService(Data);
encode_disp('GenericSignage', Data) -> enc_GenericSignage(Data);
encode_disp('SpeedLimit', Data) -> enc_SpeedLimit(Data);
encode_disp('WorkZone', Data) -> enc_WorkZone(Data);
encode_disp('J1939data', Data) -> enc_J1939data(Data);
encode_disp('TireDataList', Data) -> enc_TireDataList(Data);
encode_disp('TireData', Data) -> enc_TireData(Data);
encode_disp('AxleWeightList', Data) -> enc_AxleWeightList(Data);
encode_disp('AxleWeightSet', Data) -> enc_AxleWeightSet(Data);
encode_disp('LaneAttributes', Data) -> enc_LaneAttributes(Data);
encode_disp('LaneDataAttribute', Data) -> enc_LaneDataAttribute(Data);
encode_disp('LaneDataAttributeList', Data) -> enc_LaneDataAttributeList(Data);
encode_disp('LaneList', Data) -> enc_LaneList(Data);
encode_disp('LaneTypeAttributes', Data) -> enc_LaneTypeAttributes(Data);
encode_disp('ManeuverAssistList', Data) -> enc_ManeuverAssistList(Data);
encode_disp('MovementEventList', Data) -> enc_MovementEventList(Data);
encode_disp('MovementEvent', Data) -> enc_MovementEvent(Data);
encode_disp('MovementList', Data) -> enc_MovementList(Data);
encode_disp('MovementState', Data) -> enc_MovementState(Data);
encode_disp('Node-LL-24B', Data) -> 'enc_Node-LL-24B'(Data);
encode_disp('Node-LL-28B', Data) -> 'enc_Node-LL-28B'(Data);
encode_disp('Node-LL-32B', Data) -> 'enc_Node-LL-32B'(Data);
encode_disp('Node-LL-36B', Data) -> 'enc_Node-LL-36B'(Data);
encode_disp('Node-LL-44B', Data) -> 'enc_Node-LL-44B'(Data);
encode_disp('Node-LL-48B', Data) -> 'enc_Node-LL-48B'(Data);
encode_disp('Node-LLmD-64b', Data) -> 'enc_Node-LLmD-64b'(Data);
encode_disp('Node-XY-20b', Data) -> 'enc_Node-XY-20b'(Data);
encode_disp('Node-XY-22b', Data) -> 'enc_Node-XY-22b'(Data);
encode_disp('Node-XY-24b', Data) -> 'enc_Node-XY-24b'(Data);
encode_disp('Node-XY-26b', Data) -> 'enc_Node-XY-26b'(Data);
encode_disp('Node-XY-28b', Data) -> 'enc_Node-XY-28b'(Data);
encode_disp('Node-XY-32b', Data) -> 'enc_Node-XY-32b'(Data);
encode_disp('NodeAttributeLLList', Data) -> enc_NodeAttributeLLList(Data);
encode_disp('NodeAttributeSetLL', Data) -> enc_NodeAttributeSetLL(Data);
encode_disp('NodeAttributeSetXY', Data) -> enc_NodeAttributeSetXY(Data);
encode_disp('NodeAttributeXYList', Data) -> enc_NodeAttributeXYList(Data);
encode_disp('NodeListLL', Data) -> enc_NodeListLL(Data);
encode_disp('NodeListXY', Data) -> enc_NodeListXY(Data);
encode_disp('NodeLL', Data) -> enc_NodeLL(Data);
encode_disp('NodeOffsetPointLL', Data) -> enc_NodeOffsetPointLL(Data);
encode_disp('NodeOffsetPointXY', Data) -> enc_NodeOffsetPointXY(Data);
encode_disp('NodeSetLL', Data) -> enc_NodeSetLL(Data);
encode_disp('NodeSetXY', Data) -> enc_NodeSetXY(Data);
encode_disp('NodeXY', Data) -> enc_NodeXY(Data);
encode_disp('ObstacleDetection', Data) -> enc_ObstacleDetection(Data);
encode_disp('OffsetSystem', Data) -> enc_OffsetSystem(Data);
encode_disp('OverlayLaneList', Data) -> enc_OverlayLaneList(Data);
encode_disp('PathHistory', Data) -> enc_PathHistory(Data);
encode_disp('PathHistoryPointList', Data) -> enc_PathHistoryPointList(Data);
encode_disp('PathHistoryPoint', Data) -> enc_PathHistoryPoint(Data);
encode_disp('PathPrediction', Data) -> enc_PathPrediction(Data);
encode_disp('PivotPointDescription', Data) -> enc_PivotPointDescription(Data);
encode_disp('Position3D', Data) -> enc_Position3D(Data);
encode_disp('PositionalAccuracy', Data) -> enc_PositionalAccuracy(Data);
encode_disp('PositionConfidenceSet', Data) -> enc_PositionConfidenceSet(Data);
encode_disp('PreemptPriorityList', Data) -> enc_PreemptPriorityList(Data);
encode_disp('SignalControlZone', Data) -> enc_SignalControlZone(Data);
encode_disp('PrivilegedEvents', Data) -> enc_PrivilegedEvents(Data);
encode_disp('PropelledInformation', Data) -> enc_PropelledInformation(Data);
encode_disp('RegionList', Data) -> enc_RegionList(Data);
encode_disp('RegionOffsets', Data) -> enc_RegionOffsets(Data);
encode_disp('RegionPointSet', Data) -> enc_RegionPointSet(Data);
encode_disp('RegulatorySpeedLimit', Data) -> enc_RegulatorySpeedLimit(Data);
encode_disp('RequestedItemList', Data) -> enc_RequestedItemList(Data);
encode_disp('RequestorDescription', Data) -> enc_RequestorDescription(Data);
encode_disp('RequestorPositionVector', Data) -> enc_RequestorPositionVector(Data);
encode_disp('RequestorType', Data) -> enc_RequestorType(Data);
encode_disp('RestrictionClassAssignment', Data) -> enc_RestrictionClassAssignment(Data);
encode_disp('RestrictionClassList', Data) -> enc_RestrictionClassList(Data);
encode_disp('RestrictionUserTypeList', Data) -> enc_RestrictionUserTypeList(Data);
encode_disp('RestrictionUserType', Data) -> enc_RestrictionUserType(Data);
encode_disp('RoadLaneSetList', Data) -> enc_RoadLaneSetList(Data);
encode_disp('RoadSegmentList', Data) -> enc_RoadSegmentList(Data);
encode_disp('RoadSegmentReferenceID', Data) -> enc_RoadSegmentReferenceID(Data);
encode_disp('RoadSegment', Data) -> enc_RoadSegment(Data);
encode_disp('RoadSignID', Data) -> enc_RoadSignID(Data);
encode_disp('RTCMheader', Data) -> enc_RTCMheader(Data);
encode_disp('RTCMmessageList', Data) -> enc_RTCMmessageList(Data);
encode_disp('RTCMPackage', Data) -> enc_RTCMPackage(Data);
encode_disp('Sample', Data) -> enc_Sample(Data);
encode_disp('SegmentAttributeLLList', Data) -> enc_SegmentAttributeLLList(Data);
encode_disp('SegmentAttributeXYList', Data) -> enc_SegmentAttributeXYList(Data);
encode_disp('ShapePointSet', Data) -> enc_ShapePointSet(Data);
encode_disp('SignalRequesterInfo', Data) -> enc_SignalRequesterInfo(Data);
encode_disp('SignalRequestList', Data) -> enc_SignalRequestList(Data);
encode_disp('SignalRequestPackage', Data) -> enc_SignalRequestPackage(Data);
encode_disp('SignalRequest', Data) -> enc_SignalRequest(Data);
encode_disp('SignalStatusList', Data) -> enc_SignalStatusList(Data);
encode_disp('SignalStatusPackageList', Data) -> enc_SignalStatusPackageList(Data);
encode_disp('SignalStatusPackage', Data) -> enc_SignalStatusPackage(Data);
encode_disp('SignalStatus', Data) -> enc_SignalStatus(Data);
encode_disp('SnapshotDistance', Data) -> enc_SnapshotDistance(Data);
encode_disp('Snapshot', Data) -> enc_Snapshot(Data);
encode_disp('SnapshotTime', Data) -> enc_SnapshotTime(Data);
encode_disp('SpecialVehicleExtensions', Data) -> enc_SpecialVehicleExtensions(Data);
encode_disp('SpeedandHeadingandThrottleConfidence', Data) -> enc_SpeedandHeadingandThrottleConfidence(Data);
encode_disp('SpeedLimitList', Data) -> enc_SpeedLimitList(Data);
encode_disp('SpeedProfileMeasurementList', Data) -> enc_SpeedProfileMeasurementList(Data);
encode_disp('SpeedProfile', Data) -> enc_SpeedProfile(Data);
encode_disp('SupplementalVehicleExtensions', Data) -> enc_SupplementalVehicleExtensions(Data);
encode_disp('TimeChangeDetails', Data) -> enc_TimeChangeDetails(Data);
encode_disp('TrailerData', Data) -> enc_TrailerData(Data);
encode_disp('TrailerHistoryPointList', Data) -> enc_TrailerHistoryPointList(Data);
encode_disp('TrailerHistoryPoint', Data) -> enc_TrailerHistoryPoint(Data);
encode_disp('TrailerUnitDescriptionList', Data) -> enc_TrailerUnitDescriptionList(Data);
encode_disp('TrailerUnitDescription', Data) -> enc_TrailerUnitDescription(Data);
encode_disp('TransmissionAndSpeed', Data) -> enc_TransmissionAndSpeed(Data);
encode_disp('TravelerDataFrameList', Data) -> enc_TravelerDataFrameList(Data);
encode_disp('TravelerDataFrame', Data) -> enc_TravelerDataFrame(Data);
encode_disp('ValidRegion', Data) -> enc_ValidRegion(Data);
encode_disp('VehicleClassification', Data) -> enc_VehicleClassification(Data);
encode_disp('VehicleData', Data) -> enc_VehicleData(Data);
encode_disp('VehicleIdent', Data) -> enc_VehicleIdent(Data);
encode_disp('VehicleID', Data) -> enc_VehicleID(Data);
encode_disp('VehicleSafetyExtensions', Data) -> enc_VehicleSafetyExtensions(Data);
encode_disp('VehicleSize', Data) -> enc_VehicleSize(Data);
encode_disp('VehicleStatusRequest', Data) -> enc_VehicleStatusRequest(Data);
encode_disp('VehicleStatusRequestList', Data) -> enc_VehicleStatusRequestList(Data);
encode_disp('VehicleStatus', Data) -> enc_VehicleStatus(Data);
encode_disp('VerticalOffset', Data) -> enc_VerticalOffset(Data);
encode_disp('WeatherProbe', Data) -> enc_WeatherProbe(Data);
encode_disp('WeatherReport', Data) -> enc_WeatherReport(Data);
encode_disp('WiperSet', Data) -> enc_WiperSet(Data);
encode_disp('Acceleration', Data) -> enc_Acceleration(Data);
encode_disp('AccelerationConfidence', Data) -> enc_AccelerationConfidence(Data);
encode_disp('AdvisorySpeedType', Data) -> enc_AdvisorySpeedType(Data);
encode_disp('AllowedManeuvers', Data) -> enc_AllowedManeuvers(Data);
encode_disp('AmbientAirPressure', Data) -> enc_AmbientAirPressure(Data);
encode_disp('AmbientAirTemperature', Data) -> enc_AmbientAirTemperature(Data);
encode_disp('Angle', Data) -> enc_Angle(Data);
encode_disp('AnimalPropelledType', Data) -> enc_AnimalPropelledType(Data);
encode_disp('AnimalType', Data) -> enc_AnimalType(Data);
encode_disp('AntiLockBrakeStatus', Data) -> enc_AntiLockBrakeStatus(Data);
encode_disp('ApproachID', Data) -> enc_ApproachID(Data);
encode_disp('Attachment', Data) -> enc_Attachment(Data);
encode_disp('AttachmentRadius', Data) -> enc_AttachmentRadius(Data);
encode_disp('AuxiliaryBrakeStatus', Data) -> enc_AuxiliaryBrakeStatus(Data);
encode_disp('BasicVehicleClass', Data) -> enc_BasicVehicleClass(Data);
encode_disp('BasicVehicleRole', Data) -> enc_BasicVehicleRole(Data);
encode_disp('BrakeAppliedPressure', Data) -> enc_BrakeAppliedPressure(Data);
encode_disp('BrakeAppliedStatus', Data) -> enc_BrakeAppliedStatus(Data);
encode_disp('BrakeBoostApplied', Data) -> enc_BrakeBoostApplied(Data);
encode_disp('BumperHeight', Data) -> enc_BumperHeight(Data);
encode_disp('CoarseHeading', Data) -> enc_CoarseHeading(Data);
encode_disp('CodeWord', Data) -> enc_CodeWord(Data);
encode_disp('CoefficientOfFriction', Data) -> enc_CoefficientOfFriction(Data);
encode_disp('Confidence', Data) -> enc_Confidence(Data);
encode_disp('Count', Data) -> enc_Count(Data);
encode_disp('DDay', Data) -> enc_DDay(Data);
encode_disp('DeltaAngle', Data) -> enc_DeltaAngle(Data);
encode_disp('DeltaTime', Data) -> enc_DeltaTime(Data);
encode_disp('DescriptiveName', Data) -> enc_DescriptiveName(Data);
encode_disp('DHour', Data) -> enc_DHour(Data);
encode_disp('DirectionOfUse', Data) -> enc_DirectionOfUse(Data);
encode_disp('DistanceUnits', Data) -> enc_DistanceUnits(Data);
encode_disp('DMinute', Data) -> enc_DMinute(Data);
encode_disp('DMonth', Data) -> enc_DMonth(Data);
encode_disp('DOffset', Data) -> enc_DOffset(Data);
encode_disp('DrivenLineOffsetLg', Data) -> enc_DrivenLineOffsetLg(Data);
encode_disp('DrivenLineOffsetSm', Data) -> enc_DrivenLineOffsetSm(Data);
encode_disp('DrivingWheelAngle', Data) -> enc_DrivingWheelAngle(Data);
encode_disp('DSecond', Data) -> enc_DSecond(Data);
encode_disp('DSRCmsgID', Data) -> enc_DSRCmsgID(Data);
encode_disp('Duration', Data) -> enc_Duration(Data);
encode_disp('DYear', Data) -> enc_DYear(Data);
encode_disp('ElevationConfidence', Data) -> enc_ElevationConfidence(Data);
encode_disp('Elevation', Data) -> enc_Elevation(Data);
encode_disp('Extent', Data) -> enc_Extent(Data);
encode_disp('ExteriorLights', Data) -> enc_ExteriorLights(Data);
encode_disp('FuelType', Data) -> enc_FuelType(Data);
encode_disp('FurtherInfoID', Data) -> enc_FurtherInfoID(Data);
encode_disp('GNSSstatus', Data) -> enc_GNSSstatus(Data);
encode_disp('GrossDistance', Data) -> enc_GrossDistance(Data);
encode_disp('GrossSpeed', Data) -> enc_GrossSpeed(Data);
encode_disp('HeadingConfidence', Data) -> enc_HeadingConfidence(Data);
encode_disp('Heading', Data) -> enc_Heading(Data);
encode_disp('HeadingSlice', Data) -> enc_HeadingSlice(Data);
encode_disp('IntersectionID', Data) -> enc_IntersectionID(Data);
encode_disp('IntersectionStatusObject', Data) -> enc_IntersectionStatusObject(Data);
encode_disp('IsDolly', Data) -> enc_IsDolly(Data);
encode_disp('Iso3833VehicleType', Data) -> enc_Iso3833VehicleType(Data);
encode_disp('ITIStextPhrase', Data) -> enc_ITIStextPhrase(Data);
encode_disp('AxleLocation', Data) -> enc_AxleLocation(Data);
encode_disp('AxleWeight', Data) -> enc_AxleWeight(Data);
encode_disp('CargoWeight', Data) -> enc_CargoWeight(Data);
encode_disp('DriveAxleLiftAirPressure', Data) -> enc_DriveAxleLiftAirPressure(Data);
encode_disp('DriveAxleLocation', Data) -> enc_DriveAxleLocation(Data);
encode_disp('DriveAxleLubePressure', Data) -> enc_DriveAxleLubePressure(Data);
encode_disp('DriveAxleTemperature', Data) -> enc_DriveAxleTemperature(Data);
encode_disp('SteeringAxleLubePressure', Data) -> enc_SteeringAxleLubePressure(Data);
encode_disp('SteeringAxleTemperature', Data) -> enc_SteeringAxleTemperature(Data);
encode_disp('TireLeakageRate', Data) -> enc_TireLeakageRate(Data);
encode_disp('TireLocation', Data) -> enc_TireLocation(Data);
encode_disp('TirePressureThresholdDetection', Data) -> enc_TirePressureThresholdDetection(Data);
encode_disp('TirePressure', Data) -> enc_TirePressure(Data);
encode_disp('TireTemp', Data) -> enc_TireTemp(Data);
encode_disp('TrailerWeight', Data) -> enc_TrailerWeight(Data);
encode_disp('WheelEndElectFault', Data) -> enc_WheelEndElectFault(Data);
encode_disp('WheelSensorStatus', Data) -> enc_WheelSensorStatus(Data);
encode_disp('LaneAttributes-Barrier', Data) -> 'enc_LaneAttributes-Barrier'(Data);
encode_disp('LaneAttributes-Bike', Data) -> 'enc_LaneAttributes-Bike'(Data);
encode_disp('LaneAttributes-Crosswalk', Data) -> 'enc_LaneAttributes-Crosswalk'(Data);
encode_disp('LaneAttributes-Parking', Data) -> 'enc_LaneAttributes-Parking'(Data);
encode_disp('LaneAttributes-Sidewalk', Data) -> 'enc_LaneAttributes-Sidewalk'(Data);
encode_disp('LaneAttributes-Striping', Data) -> 'enc_LaneAttributes-Striping'(Data);
encode_disp('LaneAttributes-TrackedVehicle', Data) -> 'enc_LaneAttributes-TrackedVehicle'(Data);
encode_disp('LaneAttributes-Vehicle', Data) -> 'enc_LaneAttributes-Vehicle'(Data);
encode_disp('LaneConnectionID', Data) -> enc_LaneConnectionID(Data);
encode_disp('LaneDirection', Data) -> enc_LaneDirection(Data);
encode_disp('LaneID', Data) -> enc_LaneID(Data);
encode_disp('LaneSharing', Data) -> enc_LaneSharing(Data);
encode_disp('LaneWidth', Data) -> enc_LaneWidth(Data);
encode_disp('Latitude', Data) -> enc_Latitude(Data);
encode_disp('LayerID', Data) -> enc_LayerID(Data);
encode_disp('LayerType', Data) -> enc_LayerType(Data);
encode_disp('LightbarInUse', Data) -> enc_LightbarInUse(Data);
encode_disp('Longitude', Data) -> enc_Longitude(Data);
encode_disp('Location-quality', Data) -> 'enc_Location-quality'(Data);
encode_disp('Location-tech', Data) -> 'enc_Location-tech'(Data);
encode_disp('MergeDivergeNodeAngle', Data) -> enc_MergeDivergeNodeAngle(Data);
encode_disp('MessageBLOB', Data) -> enc_MessageBLOB(Data);
encode_disp('MinuteOfTheYear', Data) -> enc_MinuteOfTheYear(Data);
encode_disp('MinutesDuration', Data) -> enc_MinutesDuration(Data);
encode_disp('MotorizedPropelledType', Data) -> enc_MotorizedPropelledType(Data);
encode_disp('MovementPhaseState', Data) -> enc_MovementPhaseState(Data);
encode_disp('MsgCount', Data) -> enc_MsgCount(Data);
encode_disp('MsgCRC', Data) -> enc_MsgCRC(Data);
encode_disp('MultiVehicleResponse', Data) -> enc_MultiVehicleResponse(Data);
encode_disp('MUTCDCode', Data) -> enc_MUTCDCode(Data);
encode_disp('NMEA-MsgType', Data) -> 'enc_NMEA-MsgType'(Data);
encode_disp('NMEA-Payload', Data) -> 'enc_NMEA-Payload'(Data);
encode_disp('NMEA-Revision', Data) -> 'enc_NMEA-Revision'(Data);
encode_disp('NodeAttributeLL', Data) -> enc_NodeAttributeLL(Data);
encode_disp('NodeAttributeXY', Data) -> enc_NodeAttributeXY(Data);
encode_disp('NumberOfParticipantsInCluster', Data) -> enc_NumberOfParticipantsInCluster(Data);
encode_disp('ObjectCount', Data) -> enc_ObjectCount(Data);
encode_disp('ObstacleDirection', Data) -> enc_ObstacleDirection(Data);
encode_disp('ObstacleDistance', Data) -> enc_ObstacleDistance(Data);
encode_disp('Offset-B09', Data) -> 'enc_Offset-B09'(Data);
encode_disp('Offset-B10', Data) -> 'enc_Offset-B10'(Data);
encode_disp('Offset-B11', Data) -> 'enc_Offset-B11'(Data);
encode_disp('Offset-B12', Data) -> 'enc_Offset-B12'(Data);
encode_disp('Offset-B13', Data) -> 'enc_Offset-B13'(Data);
encode_disp('Offset-B14', Data) -> 'enc_Offset-B14'(Data);
encode_disp('Offset-B16', Data) -> 'enc_Offset-B16'(Data);
encode_disp('OffsetLL-B12', Data) -> 'enc_OffsetLL-B12'(Data);
encode_disp('OffsetLL-B14', Data) -> 'enc_OffsetLL-B14'(Data);
encode_disp('OffsetLL-B16', Data) -> 'enc_OffsetLL-B16'(Data);
encode_disp('OffsetLL-B18', Data) -> 'enc_OffsetLL-B18'(Data);
encode_disp('OffsetLL-B22', Data) -> 'enc_OffsetLL-B22'(Data);
encode_disp('OffsetLL-B24', Data) -> 'enc_OffsetLL-B24'(Data);
encode_disp('PayloadData', Data) -> enc_PayloadData(Data);
encode_disp('PedestrianBicycleDetect', Data) -> enc_PedestrianBicycleDetect(Data);
encode_disp('HumanPropelledType', Data) -> enc_HumanPropelledType(Data);
encode_disp('PersonalAssistive', Data) -> enc_PersonalAssistive(Data);
encode_disp('PersonalClusterRadius', Data) -> enc_PersonalClusterRadius(Data);
encode_disp('PersonalCrossingInProgress', Data) -> enc_PersonalCrossingInProgress(Data);
encode_disp('PersonalCrossingRequest', Data) -> enc_PersonalCrossingRequest(Data);
encode_disp('PersonalDeviceUsageState', Data) -> enc_PersonalDeviceUsageState(Data);
encode_disp('PersonalDeviceUserType', Data) -> enc_PersonalDeviceUserType(Data);
encode_disp('PivotingAllowed', Data) -> enc_PivotingAllowed(Data);
encode_disp('PositionConfidence', Data) -> enc_PositionConfidence(Data);
encode_disp('PrioritizationResponseStatus', Data) -> enc_PrioritizationResponseStatus(Data);
encode_disp('Priority', Data) -> enc_Priority(Data);
encode_disp('PriorityRequestType', Data) -> enc_PriorityRequestType(Data);
encode_disp('PrivilegedEventFlags', Data) -> enc_PrivilegedEventFlags(Data);
encode_disp('ProbeSegmentNumber', Data) -> enc_ProbeSegmentNumber(Data);
encode_disp('PublicSafetyAndRoadWorkerActivity', Data) -> enc_PublicSafetyAndRoadWorkerActivity(Data);
encode_disp('PublicSafetyDirectingTrafficSubType', Data) -> enc_PublicSafetyDirectingTrafficSubType(Data);
encode_disp('PublicSafetyEventResponderWorkerType', Data) -> enc_PublicSafetyEventResponderWorkerType(Data);
encode_disp('RadiusOfCurvature', Data) -> enc_RadiusOfCurvature(Data);
encode_disp('Radius-B12', Data) -> 'enc_Radius-B12'(Data);
encode_disp('RainSensor', Data) -> enc_RainSensor(Data);
encode_disp('RegionId', Data) -> enc_RegionId(Data);
encode_disp('RequestedItem', Data) -> enc_RequestedItem(Data);
encode_disp('RequestID', Data) -> enc_RequestID(Data);
encode_disp('RequestImportanceLevel', Data) -> enc_RequestImportanceLevel(Data);
encode_disp('RequestSubRole', Data) -> enc_RequestSubRole(Data);
encode_disp('ResponseType', Data) -> enc_ResponseType(Data);
encode_disp('RestrictionAppliesTo', Data) -> enc_RestrictionAppliesTo(Data);
encode_disp('RestrictionClassID', Data) -> enc_RestrictionClassID(Data);
encode_disp('RoadRegulatorID', Data) -> enc_RoadRegulatorID(Data);
encode_disp('RoadSegmentID', Data) -> enc_RoadSegmentID(Data);
encode_disp('RoadwayCrownAngle', Data) -> enc_RoadwayCrownAngle(Data);
encode_disp('RTCM-Revision', Data) -> 'enc_RTCM-Revision'(Data);
encode_disp('RTCMmessage', Data) -> enc_RTCMmessage(Data);
encode_disp('Scale-B12', Data) -> 'enc_Scale-B12'(Data);
encode_disp('SecondOfTime', Data) -> enc_SecondOfTime(Data);
encode_disp('SegmentAttributeLL', Data) -> enc_SegmentAttributeLL(Data);
encode_disp('SegmentAttributeXY', Data) -> enc_SegmentAttributeXY(Data);
encode_disp('SemiMajorAxisAccuracy', Data) -> enc_SemiMajorAxisAccuracy(Data);
encode_disp('SemiMajorAxisOrientation', Data) -> enc_SemiMajorAxisOrientation(Data);
encode_disp('SemiMinorAxisAccuracy', Data) -> enc_SemiMinorAxisAccuracy(Data);
encode_disp('SignalGroupID', Data) -> enc_SignalGroupID(Data);
encode_disp('SignalReqScheme', Data) -> enc_SignalReqScheme(Data);
encode_disp('SignPrority', Data) -> enc_SignPrority(Data);
encode_disp('SirenInUse', Data) -> enc_SirenInUse(Data);
encode_disp('SpeedAdvice', Data) -> enc_SpeedAdvice(Data);
encode_disp('SpeedConfidence', Data) -> enc_SpeedConfidence(Data);
encode_disp('SpeedLimitType', Data) -> enc_SpeedLimitType(Data);
encode_disp('SpeedProfileMeasurement', Data) -> enc_SpeedProfileMeasurement(Data);
encode_disp('Speed', Data) -> enc_Speed(Data);
encode_disp('SSPindex', Data) -> enc_SSPindex(Data);
encode_disp('StabilityControlStatus', Data) -> enc_StabilityControlStatus(Data);
encode_disp('StationID', Data) -> enc_StationID(Data);
encode_disp('SteeringWheelAngleConfidence', Data) -> enc_SteeringWheelAngleConfidence(Data);
encode_disp('SteeringWheelAngleRateOfChange', Data) -> enc_SteeringWheelAngleRateOfChange(Data);
encode_disp('SteeringWheelAngle', Data) -> enc_SteeringWheelAngle(Data);
encode_disp('SunSensor', Data) -> enc_SunSensor(Data);
encode_disp('TemporaryID', Data) -> enc_TemporaryID(Data);
encode_disp('TermDistance', Data) -> enc_TermDistance(Data);
encode_disp('TermTime', Data) -> enc_TermTime(Data);
encode_disp('ThrottleConfidence', Data) -> enc_ThrottleConfidence(Data);
encode_disp('ThrottlePosition', Data) -> enc_ThrottlePosition(Data);
encode_disp('TimeConfidence', Data) -> enc_TimeConfidence(Data);
encode_disp('TimeIntervalConfidence', Data) -> enc_TimeIntervalConfidence(Data);
encode_disp('TimeMark', Data) -> enc_TimeMark(Data);
encode_disp('TimeOffset', Data) -> enc_TimeOffset(Data);
encode_disp('TractionControlStatus', Data) -> enc_TractionControlStatus(Data);
encode_disp('TrailerMass', Data) -> enc_TrailerMass(Data);
encode_disp('TransitStatus', Data) -> enc_TransitStatus(Data);
encode_disp('TransitVehicleOccupancy', Data) -> enc_TransitVehicleOccupancy(Data);
encode_disp('TransitVehicleStatus', Data) -> enc_TransitVehicleStatus(Data);
encode_disp('TransmissionState', Data) -> enc_TransmissionState(Data);
encode_disp('TravelerInfoType', Data) -> enc_TravelerInfoType(Data);
encode_disp('UniqueMSGID', Data) -> enc_UniqueMSGID(Data);
encode_disp('URL-Base', Data) -> 'enc_URL-Base'(Data);
encode_disp('URL-Link', Data) -> 'enc_URL-Link'(Data);
encode_disp('URL-Short', Data) -> 'enc_URL-Short'(Data);
encode_disp('UserSizeAndBehaviour', Data) -> enc_UserSizeAndBehaviour(Data);
encode_disp('VehicleEventFlags', Data) -> enc_VehicleEventFlags(Data);
encode_disp('VehicleHeight', Data) -> enc_VehicleHeight(Data);
encode_disp('VehicleLength', Data) -> enc_VehicleLength(Data);
encode_disp('VehicleMass', Data) -> enc_VehicleMass(Data);
encode_disp('VehicleStatusDeviceTypeTag', Data) -> enc_VehicleStatusDeviceTypeTag(Data);
encode_disp('VehicleType', Data) -> enc_VehicleType(Data);
encode_disp('VehicleWidth', Data) -> enc_VehicleWidth(Data);
encode_disp('Velocity', Data) -> enc_Velocity(Data);
encode_disp('VerticalAccelerationThreshold', Data) -> enc_VerticalAccelerationThreshold(Data);
encode_disp('VerticalAcceleration', Data) -> enc_VerticalAcceleration(Data);
encode_disp('VertOffset-B07', Data) -> 'enc_VertOffset-B07'(Data);
encode_disp('VertOffset-B08', Data) -> 'enc_VertOffset-B08'(Data);
encode_disp('VertOffset-B09', Data) -> 'enc_VertOffset-B09'(Data);
encode_disp('VertOffset-B10', Data) -> 'enc_VertOffset-B10'(Data);
encode_disp('VertOffset-B11', Data) -> 'enc_VertOffset-B11'(Data);
encode_disp('VertOffset-B12', Data) -> 'enc_VertOffset-B12'(Data);
encode_disp('VINstring', Data) -> enc_VINstring(Data);
encode_disp('WaitOnStopline', Data) -> enc_WaitOnStopline(Data);
encode_disp('WiperRate', Data) -> enc_WiperRate(Data);
encode_disp('WiperStatus', Data) -> enc_WiperStatus(Data);
encode_disp('YawRateConfidence', Data) -> enc_YawRateConfidence(Data);
encode_disp('YawRate', Data) -> enc_YawRate(Data);
encode_disp('ZoneLength', Data) -> enc_ZoneLength(Data);
encode_disp('Zoom', Data) -> enc_Zoom(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('MessageFrame', Data) -> dec_MessageFrame(Data);
decode_disp('BasicSafetyMessage', Data) -> dec_BasicSafetyMessage(Data);
decode_disp('PartII-Id', Data) -> 'dec_PartII-Id'(Data);
decode_disp('CommonSafetyRequest', Data) -> dec_CommonSafetyRequest(Data);
decode_disp('EmergencyVehicleAlert', Data) -> dec_EmergencyVehicleAlert(Data);
decode_disp('IntersectionCollision', Data) -> dec_IntersectionCollision(Data);
decode_disp('MapData', Data) -> dec_MapData(Data);
decode_disp('NMEAcorrections', Data) -> dec_NMEAcorrections(Data);
decode_disp('PersonalSafetyMessage', Data) -> dec_PersonalSafetyMessage(Data);
decode_disp('ProbeDataManagement', Data) -> dec_ProbeDataManagement(Data);
decode_disp('ProbeVehicleData', Data) -> dec_ProbeVehicleData(Data);
decode_disp('RoadSideAlert', Data) -> dec_RoadSideAlert(Data);
decode_disp('RTCMcorrections', Data) -> dec_RTCMcorrections(Data);
decode_disp('SPAT', Data) -> dec_SPAT(Data);
decode_disp('SignalRequestMessage', Data) -> dec_SignalRequestMessage(Data);
decode_disp('SignalStatusMessage', Data) -> dec_SignalStatusMessage(Data);
decode_disp('TravelerInformation', Data) -> dec_TravelerInformation(Data);
decode_disp('TestMessage00', Data) -> dec_TestMessage00(Data);
decode_disp('TestMessage01', Data) -> dec_TestMessage01(Data);
decode_disp('TestMessage02', Data) -> dec_TestMessage02(Data);
decode_disp('TestMessage03', Data) -> dec_TestMessage03(Data);
decode_disp('TestMessage04', Data) -> dec_TestMessage04(Data);
decode_disp('TestMessage05', Data) -> dec_TestMessage05(Data);
decode_disp('TestMessage06', Data) -> dec_TestMessage06(Data);
decode_disp('TestMessage07', Data) -> dec_TestMessage07(Data);
decode_disp('TestMessage08', Data) -> dec_TestMessage08(Data);
decode_disp('TestMessage09', Data) -> dec_TestMessage09(Data);
decode_disp('TestMessage10', Data) -> dec_TestMessage10(Data);
decode_disp('TestMessage11', Data) -> dec_TestMessage11(Data);
decode_disp('TestMessage12', Data) -> dec_TestMessage12(Data);
decode_disp('TestMessage13', Data) -> dec_TestMessage13(Data);
decode_disp('TestMessage14', Data) -> dec_TestMessage14(Data);
decode_disp('TestMessage15', Data) -> dec_TestMessage15(Data);
decode_disp('AccelerationSet4Way', Data) -> dec_AccelerationSet4Way(Data);
decode_disp('AccelSteerYawRateConfidence', Data) -> dec_AccelSteerYawRateConfidence(Data);
decode_disp('AdvisorySpeed', Data) -> dec_AdvisorySpeed(Data);
decode_disp('AdvisorySpeedList', Data) -> dec_AdvisorySpeedList(Data);
decode_disp('AntennaOffsetSet', Data) -> dec_AntennaOffsetSet(Data);
decode_disp('ApproachOrLane', Data) -> dec_ApproachOrLane(Data);
decode_disp('BrakeSystemStatus', Data) -> dec_BrakeSystemStatus(Data);
decode_disp('BSMcoreData', Data) -> dec_BSMcoreData(Data);
decode_disp('BumperHeights', Data) -> dec_BumperHeights(Data);
decode_disp('Circle', Data) -> dec_Circle(Data);
decode_disp('ComputedLane', Data) -> dec_ComputedLane(Data);
decode_disp('ConfidenceSet', Data) -> dec_ConfidenceSet(Data);
decode_disp('ConnectingLane', Data) -> dec_ConnectingLane(Data);
decode_disp('Connection', Data) -> dec_Connection(Data);
decode_disp('ConnectionManeuverAssist', Data) -> dec_ConnectionManeuverAssist(Data);
decode_disp('ConnectsToList', Data) -> dec_ConnectsToList(Data);
decode_disp('DataParameters', Data) -> dec_DataParameters(Data);
decode_disp('DDate', Data) -> dec_DDate(Data);
decode_disp('DDateTime', Data) -> dec_DDateTime(Data);
decode_disp('DFullTime', Data) -> dec_DFullTime(Data);
decode_disp('DMonthDay', Data) -> dec_DMonthDay(Data);
decode_disp('DTime', Data) -> dec_DTime(Data);
decode_disp('DYearMonth', Data) -> dec_DYearMonth(Data);
decode_disp('DisabledVehicle', Data) -> dec_DisabledVehicle(Data);
decode_disp('EmergencyDetails', Data) -> dec_EmergencyDetails(Data);
decode_disp('EnabledLaneList', Data) -> dec_EnabledLaneList(Data);
decode_disp('EventDescription', Data) -> dec_EventDescription(Data);
decode_disp('FullPositionVector', Data) -> dec_FullPositionVector(Data);
decode_disp('GenericLane', Data) -> dec_GenericLane(Data);
decode_disp('GeographicalPath', Data) -> dec_GeographicalPath(Data);
decode_disp('GeometricProjection', Data) -> dec_GeometricProjection(Data);
decode_disp('Header', Data) -> dec_Header(Data);
decode_disp('IntersectionAccessPoint', Data) -> dec_IntersectionAccessPoint(Data);
decode_disp('IntersectionGeometry', Data) -> dec_IntersectionGeometry(Data);
decode_disp('IntersectionGeometryList', Data) -> dec_IntersectionGeometryList(Data);
decode_disp('IntersectionReferenceID', Data) -> dec_IntersectionReferenceID(Data);
decode_disp('IntersectionState', Data) -> dec_IntersectionState(Data);
decode_disp('IntersectionStateList', Data) -> dec_IntersectionStateList(Data);
decode_disp('ExitService', Data) -> dec_ExitService(Data);
decode_disp('GenericSignage', Data) -> dec_GenericSignage(Data);
decode_disp('SpeedLimit', Data) -> dec_SpeedLimit(Data);
decode_disp('WorkZone', Data) -> dec_WorkZone(Data);
decode_disp('J1939data', Data) -> dec_J1939data(Data);
decode_disp('TireDataList', Data) -> dec_TireDataList(Data);
decode_disp('TireData', Data) -> dec_TireData(Data);
decode_disp('AxleWeightList', Data) -> dec_AxleWeightList(Data);
decode_disp('AxleWeightSet', Data) -> dec_AxleWeightSet(Data);
decode_disp('LaneAttributes', Data) -> dec_LaneAttributes(Data);
decode_disp('LaneDataAttribute', Data) -> dec_LaneDataAttribute(Data);
decode_disp('LaneDataAttributeList', Data) -> dec_LaneDataAttributeList(Data);
decode_disp('LaneList', Data) -> dec_LaneList(Data);
decode_disp('LaneTypeAttributes', Data) -> dec_LaneTypeAttributes(Data);
decode_disp('ManeuverAssistList', Data) -> dec_ManeuverAssistList(Data);
decode_disp('MovementEventList', Data) -> dec_MovementEventList(Data);
decode_disp('MovementEvent', Data) -> dec_MovementEvent(Data);
decode_disp('MovementList', Data) -> dec_MovementList(Data);
decode_disp('MovementState', Data) -> dec_MovementState(Data);
decode_disp('Node-LL-24B', Data) -> 'dec_Node-LL-24B'(Data);
decode_disp('Node-LL-28B', Data) -> 'dec_Node-LL-28B'(Data);
decode_disp('Node-LL-32B', Data) -> 'dec_Node-LL-32B'(Data);
decode_disp('Node-LL-36B', Data) -> 'dec_Node-LL-36B'(Data);
decode_disp('Node-LL-44B', Data) -> 'dec_Node-LL-44B'(Data);
decode_disp('Node-LL-48B', Data) -> 'dec_Node-LL-48B'(Data);
decode_disp('Node-LLmD-64b', Data) -> 'dec_Node-LLmD-64b'(Data);
decode_disp('Node-XY-20b', Data) -> 'dec_Node-XY-20b'(Data);
decode_disp('Node-XY-22b', Data) -> 'dec_Node-XY-22b'(Data);
decode_disp('Node-XY-24b', Data) -> 'dec_Node-XY-24b'(Data);
decode_disp('Node-XY-26b', Data) -> 'dec_Node-XY-26b'(Data);
decode_disp('Node-XY-28b', Data) -> 'dec_Node-XY-28b'(Data);
decode_disp('Node-XY-32b', Data) -> 'dec_Node-XY-32b'(Data);
decode_disp('NodeAttributeLLList', Data) -> dec_NodeAttributeLLList(Data);
decode_disp('NodeAttributeSetLL', Data) -> dec_NodeAttributeSetLL(Data);
decode_disp('NodeAttributeSetXY', Data) -> dec_NodeAttributeSetXY(Data);
decode_disp('NodeAttributeXYList', Data) -> dec_NodeAttributeXYList(Data);
decode_disp('NodeListLL', Data) -> dec_NodeListLL(Data);
decode_disp('NodeListXY', Data) -> dec_NodeListXY(Data);
decode_disp('NodeLL', Data) -> dec_NodeLL(Data);
decode_disp('NodeOffsetPointLL', Data) -> dec_NodeOffsetPointLL(Data);
decode_disp('NodeOffsetPointXY', Data) -> dec_NodeOffsetPointXY(Data);
decode_disp('NodeSetLL', Data) -> dec_NodeSetLL(Data);
decode_disp('NodeSetXY', Data) -> dec_NodeSetXY(Data);
decode_disp('NodeXY', Data) -> dec_NodeXY(Data);
decode_disp('ObstacleDetection', Data) -> dec_ObstacleDetection(Data);
decode_disp('OffsetSystem', Data) -> dec_OffsetSystem(Data);
decode_disp('OverlayLaneList', Data) -> dec_OverlayLaneList(Data);
decode_disp('PathHistory', Data) -> dec_PathHistory(Data);
decode_disp('PathHistoryPointList', Data) -> dec_PathHistoryPointList(Data);
decode_disp('PathHistoryPoint', Data) -> dec_PathHistoryPoint(Data);
decode_disp('PathPrediction', Data) -> dec_PathPrediction(Data);
decode_disp('PivotPointDescription', Data) -> dec_PivotPointDescription(Data);
decode_disp('Position3D', Data) -> dec_Position3D(Data);
decode_disp('PositionalAccuracy', Data) -> dec_PositionalAccuracy(Data);
decode_disp('PositionConfidenceSet', Data) -> dec_PositionConfidenceSet(Data);
decode_disp('PreemptPriorityList', Data) -> dec_PreemptPriorityList(Data);
decode_disp('SignalControlZone', Data) -> dec_SignalControlZone(Data);
decode_disp('PrivilegedEvents', Data) -> dec_PrivilegedEvents(Data);
decode_disp('PropelledInformation', Data) -> dec_PropelledInformation(Data);
decode_disp('RegionList', Data) -> dec_RegionList(Data);
decode_disp('RegionOffsets', Data) -> dec_RegionOffsets(Data);
decode_disp('RegionPointSet', Data) -> dec_RegionPointSet(Data);
decode_disp('RegulatorySpeedLimit', Data) -> dec_RegulatorySpeedLimit(Data);
decode_disp('RequestedItemList', Data) -> dec_RequestedItemList(Data);
decode_disp('RequestorDescription', Data) -> dec_RequestorDescription(Data);
decode_disp('RequestorPositionVector', Data) -> dec_RequestorPositionVector(Data);
decode_disp('RequestorType', Data) -> dec_RequestorType(Data);
decode_disp('RestrictionClassAssignment', Data) -> dec_RestrictionClassAssignment(Data);
decode_disp('RestrictionClassList', Data) -> dec_RestrictionClassList(Data);
decode_disp('RestrictionUserTypeList', Data) -> dec_RestrictionUserTypeList(Data);
decode_disp('RestrictionUserType', Data) -> dec_RestrictionUserType(Data);
decode_disp('RoadLaneSetList', Data) -> dec_RoadLaneSetList(Data);
decode_disp('RoadSegmentList', Data) -> dec_RoadSegmentList(Data);
decode_disp('RoadSegmentReferenceID', Data) -> dec_RoadSegmentReferenceID(Data);
decode_disp('RoadSegment', Data) -> dec_RoadSegment(Data);
decode_disp('RoadSignID', Data) -> dec_RoadSignID(Data);
decode_disp('RTCMheader', Data) -> dec_RTCMheader(Data);
decode_disp('RTCMmessageList', Data) -> dec_RTCMmessageList(Data);
decode_disp('RTCMPackage', Data) -> dec_RTCMPackage(Data);
decode_disp('Sample', Data) -> dec_Sample(Data);
decode_disp('SegmentAttributeLLList', Data) -> dec_SegmentAttributeLLList(Data);
decode_disp('SegmentAttributeXYList', Data) -> dec_SegmentAttributeXYList(Data);
decode_disp('ShapePointSet', Data) -> dec_ShapePointSet(Data);
decode_disp('SignalRequesterInfo', Data) -> dec_SignalRequesterInfo(Data);
decode_disp('SignalRequestList', Data) -> dec_SignalRequestList(Data);
decode_disp('SignalRequestPackage', Data) -> dec_SignalRequestPackage(Data);
decode_disp('SignalRequest', Data) -> dec_SignalRequest(Data);
decode_disp('SignalStatusList', Data) -> dec_SignalStatusList(Data);
decode_disp('SignalStatusPackageList', Data) -> dec_SignalStatusPackageList(Data);
decode_disp('SignalStatusPackage', Data) -> dec_SignalStatusPackage(Data);
decode_disp('SignalStatus', Data) -> dec_SignalStatus(Data);
decode_disp('SnapshotDistance', Data) -> dec_SnapshotDistance(Data);
decode_disp('Snapshot', Data) -> dec_Snapshot(Data);
decode_disp('SnapshotTime', Data) -> dec_SnapshotTime(Data);
decode_disp('SpecialVehicleExtensions', Data) -> dec_SpecialVehicleExtensions(Data);
decode_disp('SpeedandHeadingandThrottleConfidence', Data) -> dec_SpeedandHeadingandThrottleConfidence(Data);
decode_disp('SpeedLimitList', Data) -> dec_SpeedLimitList(Data);
decode_disp('SpeedProfileMeasurementList', Data) -> dec_SpeedProfileMeasurementList(Data);
decode_disp('SpeedProfile', Data) -> dec_SpeedProfile(Data);
decode_disp('SupplementalVehicleExtensions', Data) -> dec_SupplementalVehicleExtensions(Data);
decode_disp('TimeChangeDetails', Data) -> dec_TimeChangeDetails(Data);
decode_disp('TrailerData', Data) -> dec_TrailerData(Data);
decode_disp('TrailerHistoryPointList', Data) -> dec_TrailerHistoryPointList(Data);
decode_disp('TrailerHistoryPoint', Data) -> dec_TrailerHistoryPoint(Data);
decode_disp('TrailerUnitDescriptionList', Data) -> dec_TrailerUnitDescriptionList(Data);
decode_disp('TrailerUnitDescription', Data) -> dec_TrailerUnitDescription(Data);
decode_disp('TransmissionAndSpeed', Data) -> dec_TransmissionAndSpeed(Data);
decode_disp('TravelerDataFrameList', Data) -> dec_TravelerDataFrameList(Data);
decode_disp('TravelerDataFrame', Data) -> dec_TravelerDataFrame(Data);
decode_disp('ValidRegion', Data) -> dec_ValidRegion(Data);
decode_disp('VehicleClassification', Data) -> dec_VehicleClassification(Data);
decode_disp('VehicleData', Data) -> dec_VehicleData(Data);
decode_disp('VehicleIdent', Data) -> dec_VehicleIdent(Data);
decode_disp('VehicleID', Data) -> dec_VehicleID(Data);
decode_disp('VehicleSafetyExtensions', Data) -> dec_VehicleSafetyExtensions(Data);
decode_disp('VehicleSize', Data) -> dec_VehicleSize(Data);
decode_disp('VehicleStatusRequest', Data) -> dec_VehicleStatusRequest(Data);
decode_disp('VehicleStatusRequestList', Data) -> dec_VehicleStatusRequestList(Data);
decode_disp('VehicleStatus', Data) -> dec_VehicleStatus(Data);
decode_disp('VerticalOffset', Data) -> dec_VerticalOffset(Data);
decode_disp('WeatherProbe', Data) -> dec_WeatherProbe(Data);
decode_disp('WeatherReport', Data) -> dec_WeatherReport(Data);
decode_disp('WiperSet', Data) -> dec_WiperSet(Data);
decode_disp('Acceleration', Data) -> dec_Acceleration(Data);
decode_disp('AccelerationConfidence', Data) -> dec_AccelerationConfidence(Data);
decode_disp('AdvisorySpeedType', Data) -> dec_AdvisorySpeedType(Data);
decode_disp('AllowedManeuvers', Data) -> dec_AllowedManeuvers(Data);
decode_disp('AmbientAirPressure', Data) -> dec_AmbientAirPressure(Data);
decode_disp('AmbientAirTemperature', Data) -> dec_AmbientAirTemperature(Data);
decode_disp('Angle', Data) -> dec_Angle(Data);
decode_disp('AnimalPropelledType', Data) -> dec_AnimalPropelledType(Data);
decode_disp('AnimalType', Data) -> dec_AnimalType(Data);
decode_disp('AntiLockBrakeStatus', Data) -> dec_AntiLockBrakeStatus(Data);
decode_disp('ApproachID', Data) -> dec_ApproachID(Data);
decode_disp('Attachment', Data) -> dec_Attachment(Data);
decode_disp('AttachmentRadius', Data) -> dec_AttachmentRadius(Data);
decode_disp('AuxiliaryBrakeStatus', Data) -> dec_AuxiliaryBrakeStatus(Data);
decode_disp('BasicVehicleClass', Data) -> dec_BasicVehicleClass(Data);
decode_disp('BasicVehicleRole', Data) -> dec_BasicVehicleRole(Data);
decode_disp('BrakeAppliedPressure', Data) -> dec_BrakeAppliedPressure(Data);
decode_disp('BrakeAppliedStatus', Data) -> dec_BrakeAppliedStatus(Data);
decode_disp('BrakeBoostApplied', Data) -> dec_BrakeBoostApplied(Data);
decode_disp('BumperHeight', Data) -> dec_BumperHeight(Data);
decode_disp('CoarseHeading', Data) -> dec_CoarseHeading(Data);
decode_disp('CodeWord', Data) -> dec_CodeWord(Data);
decode_disp('CoefficientOfFriction', Data) -> dec_CoefficientOfFriction(Data);
decode_disp('Confidence', Data) -> dec_Confidence(Data);
decode_disp('Count', Data) -> dec_Count(Data);
decode_disp('DDay', Data) -> dec_DDay(Data);
decode_disp('DeltaAngle', Data) -> dec_DeltaAngle(Data);
decode_disp('DeltaTime', Data) -> dec_DeltaTime(Data);
decode_disp('DescriptiveName', Data) -> dec_DescriptiveName(Data);
decode_disp('DHour', Data) -> dec_DHour(Data);
decode_disp('DirectionOfUse', Data) -> dec_DirectionOfUse(Data);
decode_disp('DistanceUnits', Data) -> dec_DistanceUnits(Data);
decode_disp('DMinute', Data) -> dec_DMinute(Data);
decode_disp('DMonth', Data) -> dec_DMonth(Data);
decode_disp('DOffset', Data) -> dec_DOffset(Data);
decode_disp('DrivenLineOffsetLg', Data) -> dec_DrivenLineOffsetLg(Data);
decode_disp('DrivenLineOffsetSm', Data) -> dec_DrivenLineOffsetSm(Data);
decode_disp('DrivingWheelAngle', Data) -> dec_DrivingWheelAngle(Data);
decode_disp('DSecond', Data) -> dec_DSecond(Data);
decode_disp('DSRCmsgID', Data) -> dec_DSRCmsgID(Data);
decode_disp('Duration', Data) -> dec_Duration(Data);
decode_disp('DYear', Data) -> dec_DYear(Data);
decode_disp('ElevationConfidence', Data) -> dec_ElevationConfidence(Data);
decode_disp('Elevation', Data) -> dec_Elevation(Data);
decode_disp('Extent', Data) -> dec_Extent(Data);
decode_disp('ExteriorLights', Data) -> dec_ExteriorLights(Data);
decode_disp('FuelType', Data) -> dec_FuelType(Data);
decode_disp('FurtherInfoID', Data) -> dec_FurtherInfoID(Data);
decode_disp('GNSSstatus', Data) -> dec_GNSSstatus(Data);
decode_disp('GrossDistance', Data) -> dec_GrossDistance(Data);
decode_disp('GrossSpeed', Data) -> dec_GrossSpeed(Data);
decode_disp('HeadingConfidence', Data) -> dec_HeadingConfidence(Data);
decode_disp('Heading', Data) -> dec_Heading(Data);
decode_disp('HeadingSlice', Data) -> dec_HeadingSlice(Data);
decode_disp('IntersectionID', Data) -> dec_IntersectionID(Data);
decode_disp('IntersectionStatusObject', Data) -> dec_IntersectionStatusObject(Data);
decode_disp('IsDolly', Data) -> dec_IsDolly(Data);
decode_disp('Iso3833VehicleType', Data) -> dec_Iso3833VehicleType(Data);
decode_disp('ITIStextPhrase', Data) -> dec_ITIStextPhrase(Data);
decode_disp('AxleLocation', Data) -> dec_AxleLocation(Data);
decode_disp('AxleWeight', Data) -> dec_AxleWeight(Data);
decode_disp('CargoWeight', Data) -> dec_CargoWeight(Data);
decode_disp('DriveAxleLiftAirPressure', Data) -> dec_DriveAxleLiftAirPressure(Data);
decode_disp('DriveAxleLocation', Data) -> dec_DriveAxleLocation(Data);
decode_disp('DriveAxleLubePressure', Data) -> dec_DriveAxleLubePressure(Data);
decode_disp('DriveAxleTemperature', Data) -> dec_DriveAxleTemperature(Data);
decode_disp('SteeringAxleLubePressure', Data) -> dec_SteeringAxleLubePressure(Data);
decode_disp('SteeringAxleTemperature', Data) -> dec_SteeringAxleTemperature(Data);
decode_disp('TireLeakageRate', Data) -> dec_TireLeakageRate(Data);
decode_disp('TireLocation', Data) -> dec_TireLocation(Data);
decode_disp('TirePressureThresholdDetection', Data) -> dec_TirePressureThresholdDetection(Data);
decode_disp('TirePressure', Data) -> dec_TirePressure(Data);
decode_disp('TireTemp', Data) -> dec_TireTemp(Data);
decode_disp('TrailerWeight', Data) -> dec_TrailerWeight(Data);
decode_disp('WheelEndElectFault', Data) -> dec_WheelEndElectFault(Data);
decode_disp('WheelSensorStatus', Data) -> dec_WheelSensorStatus(Data);
decode_disp('LaneAttributes-Barrier', Data) -> 'dec_LaneAttributes-Barrier'(Data);
decode_disp('LaneAttributes-Bike', Data) -> 'dec_LaneAttributes-Bike'(Data);
decode_disp('LaneAttributes-Crosswalk', Data) -> 'dec_LaneAttributes-Crosswalk'(Data);
decode_disp('LaneAttributes-Parking', Data) -> 'dec_LaneAttributes-Parking'(Data);
decode_disp('LaneAttributes-Sidewalk', Data) -> 'dec_LaneAttributes-Sidewalk'(Data);
decode_disp('LaneAttributes-Striping', Data) -> 'dec_LaneAttributes-Striping'(Data);
decode_disp('LaneAttributes-TrackedVehicle', Data) -> 'dec_LaneAttributes-TrackedVehicle'(Data);
decode_disp('LaneAttributes-Vehicle', Data) -> 'dec_LaneAttributes-Vehicle'(Data);
decode_disp('LaneConnectionID', Data) -> dec_LaneConnectionID(Data);
decode_disp('LaneDirection', Data) -> dec_LaneDirection(Data);
decode_disp('LaneID', Data) -> dec_LaneID(Data);
decode_disp('LaneSharing', Data) -> dec_LaneSharing(Data);
decode_disp('LaneWidth', Data) -> dec_LaneWidth(Data);
decode_disp('Latitude', Data) -> dec_Latitude(Data);
decode_disp('LayerID', Data) -> dec_LayerID(Data);
decode_disp('LayerType', Data) -> dec_LayerType(Data);
decode_disp('LightbarInUse', Data) -> dec_LightbarInUse(Data);
decode_disp('Longitude', Data) -> dec_Longitude(Data);
decode_disp('Location-quality', Data) -> 'dec_Location-quality'(Data);
decode_disp('Location-tech', Data) -> 'dec_Location-tech'(Data);
decode_disp('MergeDivergeNodeAngle', Data) -> dec_MergeDivergeNodeAngle(Data);
decode_disp('MessageBLOB', Data) -> dec_MessageBLOB(Data);
decode_disp('MinuteOfTheYear', Data) -> dec_MinuteOfTheYear(Data);
decode_disp('MinutesDuration', Data) -> dec_MinutesDuration(Data);
decode_disp('MotorizedPropelledType', Data) -> dec_MotorizedPropelledType(Data);
decode_disp('MovementPhaseState', Data) -> dec_MovementPhaseState(Data);
decode_disp('MsgCount', Data) -> dec_MsgCount(Data);
decode_disp('MsgCRC', Data) -> dec_MsgCRC(Data);
decode_disp('MultiVehicleResponse', Data) -> dec_MultiVehicleResponse(Data);
decode_disp('MUTCDCode', Data) -> dec_MUTCDCode(Data);
decode_disp('NMEA-MsgType', Data) -> 'dec_NMEA-MsgType'(Data);
decode_disp('NMEA-Payload', Data) -> 'dec_NMEA-Payload'(Data);
decode_disp('NMEA-Revision', Data) -> 'dec_NMEA-Revision'(Data);
decode_disp('NodeAttributeLL', Data) -> dec_NodeAttributeLL(Data);
decode_disp('NodeAttributeXY', Data) -> dec_NodeAttributeXY(Data);
decode_disp('NumberOfParticipantsInCluster', Data) -> dec_NumberOfParticipantsInCluster(Data);
decode_disp('ObjectCount', Data) -> dec_ObjectCount(Data);
decode_disp('ObstacleDirection', Data) -> dec_ObstacleDirection(Data);
decode_disp('ObstacleDistance', Data) -> dec_ObstacleDistance(Data);
decode_disp('Offset-B09', Data) -> 'dec_Offset-B09'(Data);
decode_disp('Offset-B10', Data) -> 'dec_Offset-B10'(Data);
decode_disp('Offset-B11', Data) -> 'dec_Offset-B11'(Data);
decode_disp('Offset-B12', Data) -> 'dec_Offset-B12'(Data);
decode_disp('Offset-B13', Data) -> 'dec_Offset-B13'(Data);
decode_disp('Offset-B14', Data) -> 'dec_Offset-B14'(Data);
decode_disp('Offset-B16', Data) -> 'dec_Offset-B16'(Data);
decode_disp('OffsetLL-B12', Data) -> 'dec_OffsetLL-B12'(Data);
decode_disp('OffsetLL-B14', Data) -> 'dec_OffsetLL-B14'(Data);
decode_disp('OffsetLL-B16', Data) -> 'dec_OffsetLL-B16'(Data);
decode_disp('OffsetLL-B18', Data) -> 'dec_OffsetLL-B18'(Data);
decode_disp('OffsetLL-B22', Data) -> 'dec_OffsetLL-B22'(Data);
decode_disp('OffsetLL-B24', Data) -> 'dec_OffsetLL-B24'(Data);
decode_disp('PayloadData', Data) -> dec_PayloadData(Data);
decode_disp('PedestrianBicycleDetect', Data) -> dec_PedestrianBicycleDetect(Data);
decode_disp('HumanPropelledType', Data) -> dec_HumanPropelledType(Data);
decode_disp('PersonalAssistive', Data) -> dec_PersonalAssistive(Data);
decode_disp('PersonalClusterRadius', Data) -> dec_PersonalClusterRadius(Data);
decode_disp('PersonalCrossingInProgress', Data) -> dec_PersonalCrossingInProgress(Data);
decode_disp('PersonalCrossingRequest', Data) -> dec_PersonalCrossingRequest(Data);
decode_disp('PersonalDeviceUsageState', Data) -> dec_PersonalDeviceUsageState(Data);
decode_disp('PersonalDeviceUserType', Data) -> dec_PersonalDeviceUserType(Data);
decode_disp('PivotingAllowed', Data) -> dec_PivotingAllowed(Data);
decode_disp('PositionConfidence', Data) -> dec_PositionConfidence(Data);
decode_disp('PrioritizationResponseStatus', Data) -> dec_PrioritizationResponseStatus(Data);
decode_disp('Priority', Data) -> dec_Priority(Data);
decode_disp('PriorityRequestType', Data) -> dec_PriorityRequestType(Data);
decode_disp('PrivilegedEventFlags', Data) -> dec_PrivilegedEventFlags(Data);
decode_disp('ProbeSegmentNumber', Data) -> dec_ProbeSegmentNumber(Data);
decode_disp('PublicSafetyAndRoadWorkerActivity', Data) -> dec_PublicSafetyAndRoadWorkerActivity(Data);
decode_disp('PublicSafetyDirectingTrafficSubType', Data) -> dec_PublicSafetyDirectingTrafficSubType(Data);
decode_disp('PublicSafetyEventResponderWorkerType', Data) -> dec_PublicSafetyEventResponderWorkerType(Data);
decode_disp('RadiusOfCurvature', Data) -> dec_RadiusOfCurvature(Data);
decode_disp('Radius-B12', Data) -> 'dec_Radius-B12'(Data);
decode_disp('RainSensor', Data) -> dec_RainSensor(Data);
decode_disp('RegionId', Data) -> dec_RegionId(Data);
decode_disp('RequestedItem', Data) -> dec_RequestedItem(Data);
decode_disp('RequestID', Data) -> dec_RequestID(Data);
decode_disp('RequestImportanceLevel', Data) -> dec_RequestImportanceLevel(Data);
decode_disp('RequestSubRole', Data) -> dec_RequestSubRole(Data);
decode_disp('ResponseType', Data) -> dec_ResponseType(Data);
decode_disp('RestrictionAppliesTo', Data) -> dec_RestrictionAppliesTo(Data);
decode_disp('RestrictionClassID', Data) -> dec_RestrictionClassID(Data);
decode_disp('RoadRegulatorID', Data) -> dec_RoadRegulatorID(Data);
decode_disp('RoadSegmentID', Data) -> dec_RoadSegmentID(Data);
decode_disp('RoadwayCrownAngle', Data) -> dec_RoadwayCrownAngle(Data);
decode_disp('RTCM-Revision', Data) -> 'dec_RTCM-Revision'(Data);
decode_disp('RTCMmessage', Data) -> dec_RTCMmessage(Data);
decode_disp('Scale-B12', Data) -> 'dec_Scale-B12'(Data);
decode_disp('SecondOfTime', Data) -> dec_SecondOfTime(Data);
decode_disp('SegmentAttributeLL', Data) -> dec_SegmentAttributeLL(Data);
decode_disp('SegmentAttributeXY', Data) -> dec_SegmentAttributeXY(Data);
decode_disp('SemiMajorAxisAccuracy', Data) -> dec_SemiMajorAxisAccuracy(Data);
decode_disp('SemiMajorAxisOrientation', Data) -> dec_SemiMajorAxisOrientation(Data);
decode_disp('SemiMinorAxisAccuracy', Data) -> dec_SemiMinorAxisAccuracy(Data);
decode_disp('SignalGroupID', Data) -> dec_SignalGroupID(Data);
decode_disp('SignalReqScheme', Data) -> dec_SignalReqScheme(Data);
decode_disp('SignPrority', Data) -> dec_SignPrority(Data);
decode_disp('SirenInUse', Data) -> dec_SirenInUse(Data);
decode_disp('SpeedAdvice', Data) -> dec_SpeedAdvice(Data);
decode_disp('SpeedConfidence', Data) -> dec_SpeedConfidence(Data);
decode_disp('SpeedLimitType', Data) -> dec_SpeedLimitType(Data);
decode_disp('SpeedProfileMeasurement', Data) -> dec_SpeedProfileMeasurement(Data);
decode_disp('Speed', Data) -> dec_Speed(Data);
decode_disp('SSPindex', Data) -> dec_SSPindex(Data);
decode_disp('StabilityControlStatus', Data) -> dec_StabilityControlStatus(Data);
decode_disp('StationID', Data) -> dec_StationID(Data);
decode_disp('SteeringWheelAngleConfidence', Data) -> dec_SteeringWheelAngleConfidence(Data);
decode_disp('SteeringWheelAngleRateOfChange', Data) -> dec_SteeringWheelAngleRateOfChange(Data);
decode_disp('SteeringWheelAngle', Data) -> dec_SteeringWheelAngle(Data);
decode_disp('SunSensor', Data) -> dec_SunSensor(Data);
decode_disp('TemporaryID', Data) -> dec_TemporaryID(Data);
decode_disp('TermDistance', Data) -> dec_TermDistance(Data);
decode_disp('TermTime', Data) -> dec_TermTime(Data);
decode_disp('ThrottleConfidence', Data) -> dec_ThrottleConfidence(Data);
decode_disp('ThrottlePosition', Data) -> dec_ThrottlePosition(Data);
decode_disp('TimeConfidence', Data) -> dec_TimeConfidence(Data);
decode_disp('TimeIntervalConfidence', Data) -> dec_TimeIntervalConfidence(Data);
decode_disp('TimeMark', Data) -> dec_TimeMark(Data);
decode_disp('TimeOffset', Data) -> dec_TimeOffset(Data);
decode_disp('TractionControlStatus', Data) -> dec_TractionControlStatus(Data);
decode_disp('TrailerMass', Data) -> dec_TrailerMass(Data);
decode_disp('TransitStatus', Data) -> dec_TransitStatus(Data);
decode_disp('TransitVehicleOccupancy', Data) -> dec_TransitVehicleOccupancy(Data);
decode_disp('TransitVehicleStatus', Data) -> dec_TransitVehicleStatus(Data);
decode_disp('TransmissionState', Data) -> dec_TransmissionState(Data);
decode_disp('TravelerInfoType', Data) -> dec_TravelerInfoType(Data);
decode_disp('UniqueMSGID', Data) -> dec_UniqueMSGID(Data);
decode_disp('URL-Base', Data) -> 'dec_URL-Base'(Data);
decode_disp('URL-Link', Data) -> 'dec_URL-Link'(Data);
decode_disp('URL-Short', Data) -> 'dec_URL-Short'(Data);
decode_disp('UserSizeAndBehaviour', Data) -> dec_UserSizeAndBehaviour(Data);
decode_disp('VehicleEventFlags', Data) -> dec_VehicleEventFlags(Data);
decode_disp('VehicleHeight', Data) -> dec_VehicleHeight(Data);
decode_disp('VehicleLength', Data) -> dec_VehicleLength(Data);
decode_disp('VehicleMass', Data) -> dec_VehicleMass(Data);
decode_disp('VehicleStatusDeviceTypeTag', Data) -> dec_VehicleStatusDeviceTypeTag(Data);
decode_disp('VehicleType', Data) -> dec_VehicleType(Data);
decode_disp('VehicleWidth', Data) -> dec_VehicleWidth(Data);
decode_disp('Velocity', Data) -> dec_Velocity(Data);
decode_disp('VerticalAccelerationThreshold', Data) -> dec_VerticalAccelerationThreshold(Data);
decode_disp('VerticalAcceleration', Data) -> dec_VerticalAcceleration(Data);
decode_disp('VertOffset-B07', Data) -> 'dec_VertOffset-B07'(Data);
decode_disp('VertOffset-B08', Data) -> 'dec_VertOffset-B08'(Data);
decode_disp('VertOffset-B09', Data) -> 'dec_VertOffset-B09'(Data);
decode_disp('VertOffset-B10', Data) -> 'dec_VertOffset-B10'(Data);
decode_disp('VertOffset-B11', Data) -> 'dec_VertOffset-B11'(Data);
decode_disp('VertOffset-B12', Data) -> 'dec_VertOffset-B12'(Data);
decode_disp('VINstring', Data) -> dec_VINstring(Data);
decode_disp('WaitOnStopline', Data) -> dec_WaitOnStopline(Data);
decode_disp('WiperRate', Data) -> dec_WiperRate(Data);
decode_disp('WiperStatus', Data) -> dec_WiperStatus(Data);
decode_disp('YawRateConfidence', Data) -> dec_YawRateConfidence(Data);
decode_disp('YawRate', Data) -> dec_YawRate(Data);
decode_disp('ZoneLength', Data) -> dec_ZoneLength(Data);
decode_disp('Zoom', Data) -> dec_Zoom(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_MessageFrame(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute messageId(1) with type INTEGER
Enc3@element = Enc1@element,
if Enc3@element bsr 15 =:= 0 ->
<<0:1,Enc3@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute value(2) with type Type
Enc5@element = element(3, Val),
Enc6@output = enc_os_Type1(Enc5@element, Enc1@element),
Enc6@bin = complete(Enc6@output),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
encode_fragmented(Enc6@bin, 8)
end
end].


dec_MessageFrame(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute messageId(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:15,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute value(2) with type Type
{Tmpterm1, Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:7,V3@V5:V3@V3/binary-unit:8,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<1:1,0:1,V3@V4:14,V3@V6:V3@V4/binary-unit:8,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7}  = decode_fragmented(V3@V4, V3@Buf5, 8),
{V3@V6,V3@Buf7}
end,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
Term2 = dec_os_Type2(Tmpterm1, Term1),
Res1 = {'MessageFrame',Term1,Term2},
{Res1,Bytes5}.

enc_BasicSafetyMessage(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute coreData(1) with type BSMcoreData
Enc4@element = element(2, Val),
enc_BSMcoreData(Enc4@element)
end,
begin
%% attribute partII(2) with type SEQUENCE OF
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_BasicSafetyMessage_partII(Enc5@element)
end
end|begin
%% attribute regional(3) with type SEQUENCE OF
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_BasicSafetyMessage_regional(Enc7@element)
end
end].
enc_BasicSafetyMessage_partII(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_BasicSafetyMessage_partII_PartIIcontent(Comp) || Comp <- Val]]
end.

enc_BasicSafetyMessage_partII_PartIIcontent(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute partII-Id(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 6 =:= 0 ->
<<Enc2@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute partII-Value(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type3(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].
enc_BasicSafetyMessage_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_BasicSafetyMessage_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_BasicSafetyMessage_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_BasicSafetyMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute coreData(1) with type BSMcoreData
{Term1,Bytes3} = dec_BSMcoreData(Bytes2),

%% attribute partII(2) with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_BasicSafetyMessage_partII(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute regional(3) with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_BasicSafetyMessage_regional(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'BasicSafetyMessage',Term1,Term2,Term3},
{Res1,Bytes7}.


dec_BasicSafetyMessage_partII(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components5(V1@Add2, V1@Buf1, []).


dec_BasicSafetyMessage_partII_PartIIcontent(Bytes) ->

%% attribute partII-Id(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute partII-Value(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type6(Tmpterm1, Term1),
Res1 = {'PartIIcontent',Term1,Term2},
{Res1,Bytes2}.


dec_BasicSafetyMessage_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components7(V1@Add2, V1@Buf1, []).


dec_BasicSafetyMessage_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

'enc_PartII-Id'(Val) ->
if Val bsr 6 =:= 0 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_PartII-Id'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_CommonSafetyRequest(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
0 =< Enc6@element, Enc6@element < 527041 ->
<<Enc6@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute msgCnt(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 7 =:= 0 ->
<<Enc9@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute id(3) with type OCTET STRING
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = byte_size(Enc12@element),
if Enc13@len =:= 4 ->
Enc12@element
end
end
end
end,
begin
%% attribute requests(4) with type RequestedItemList
Enc15@element = element(5, Val),
enc_RequestedItemList(Enc15@element)
end|begin
%% attribute regional(5) with type SEQUENCE OF
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_CommonSafetyRequest_regional(Enc16@element)
end
end].
enc_CommonSafetyRequest_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_CommonSafetyRequest_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_CommonSafetyRequest_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_CommonSafetyRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute msgCnt(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute id(3) with type OCTET STRING
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv2 = binary:copy(V5@V0),
{V5@Conv2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute requests(4) with type RequestedItemList
{Term4,Bytes6} = dec_RequestedItemList(Bytes5),

%% attribute regional(5) with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_CommonSafetyRequest_regional(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'CommonSafetyRequest',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.


dec_CommonSafetyRequest_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components9(V1@Add2, V1@Buf1, []).


dec_CommonSafetyRequest_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_EmergencyVehicleAlert(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
Enc8@element = element(10, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(11, Val),
Enc10@element = element(12, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc12@element = element(2, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 527041 ->
<<Enc12@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute id(2) with type OCTET STRING
Enc15@element = element(3, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = byte_size(Enc15@element),
if Enc16@len =:= 4 ->
Enc15@element
end
end
end
end,
begin
%% attribute rsaMsg(3) with type RoadSideAlert
Enc18@element = element(4, Val),
enc_RoadSideAlert(Enc18@element)
end,
begin
%% attribute responseType(4) with type ENUMERATED
Enc19@element = element(5, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element =:= notInUseOrNotEquipped ->
<<0:1,0:3>>;
Enc19@element =:= emergency ->
<<0:1,1:3>>;
Enc19@element =:= nonEmergency ->
<<0:1,2:3>>;
Enc19@element =:= pursuit ->
<<0:1,3:3>>;
Enc19@element =:= stationary ->
<<0:1,4:3>>;
Enc19@element =:= slowMoving ->
<<0:1,5:3>>;
Enc19@element =:= stopAndGoMovement ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc19@element}}})
end
end,
begin
%% attribute details(5) with type EmergencyDetails
Enc22@element = element(6, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_EmergencyDetails(Enc22@element)
end
end,
begin
%% attribute mass(6) with type INTEGER
Enc24@element = element(7, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element bsr 8 =:= 0 ->
Enc24@element;
true ->
exit({error,{asn1,{illegal_integer,Enc24@element}}})
end
end,
begin
%% attribute basicType(7) with type ENUMERATED
Enc27@element = element(8, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
Enc27@element =:= none ->
<<0:1,0:4>>;
Enc27@element =:= unknown ->
<<0:1,1:4>>;
Enc27@element =:= special ->
<<0:1,2:4>>;
Enc27@element =:= moto ->
<<0:1,3:4>>;
Enc27@element =:= car ->
<<0:1,4:4>>;
Enc27@element =:= carOther ->
<<0:1,5:4>>;
Enc27@element =:= bus ->
<<0:1,6:4>>;
Enc27@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc27@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc27@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc27@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc27@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc27@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc27@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc27@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc27@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc27@element}}})
end
end,
begin
%% attribute vehicleType(8) with type ENUMERATED
Enc30@element = element(9, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
Enc30@element =:= 'all-vehicles' ->
<<0:1,0:6>>;
Enc30@element =:= bicycles ->
<<0:1,1:6>>;
Enc30@element =:= motorcycles ->
<<0:1,2:6>>;
Enc30@element =:= cars ->
<<0:1,3:6>>;
Enc30@element =:= 'light-vehicles' ->
<<0:1,4:6>>;
Enc30@element =:= 'cars-and-light-vehicles' ->
<<0:1,5:6>>;
Enc30@element =:= 'cars-with-trailers' ->
<<0:1,6:6>>;
Enc30@element =:= 'cars-with-recreational-trailers' ->
<<0:1,7:6>>;
Enc30@element =:= 'vehicles-with-trailers' ->
<<0:1,8:6>>;
Enc30@element =:= 'heavy-vehicles' ->
<<0:1,9:6>>;
Enc30@element =:= trucks ->
<<0:1,10:6>>;
Enc30@element =:= buses ->
<<0:1,11:6>>;
Enc30@element =:= 'articulated-buses' ->
<<0:1,12:6>>;
Enc30@element =:= 'school-buses' ->
<<0:1,13:6>>;
Enc30@element =:= 'vehicles-with-semi-trailers' ->
<<0:1,14:6>>;
Enc30@element =:= 'vehicles-with-double-trailers' ->
<<0:1,15:6>>;
Enc30@element =:= 'high-profile-vehicles' ->
<<0:1,16:6>>;
Enc30@element =:= 'wide-vehicles' ->
<<0:1,17:6>>;
Enc30@element =:= 'long-vehicles' ->
<<0:1,18:6>>;
Enc30@element =:= 'hazardous-loads' ->
<<0:1,19:6>>;
Enc30@element =:= 'exceptional-loads' ->
<<0:1,20:6>>;
Enc30@element =:= 'abnormal-loads' ->
<<0:1,21:6>>;
Enc30@element =:= convoys ->
<<0:1,22:6>>;
Enc30@element =:= 'maintenance-vehicles' ->
<<0:1,23:6>>;
Enc30@element =:= 'delivery-vehicles' ->
<<0:1,24:6>>;
Enc30@element =:= 'vehicles-with-even-numbered-license-plates' ->
<<0:1,25:6>>;
Enc30@element =:= 'vehicles-with-odd-numbered-license-plates' ->
<<0:1,26:6>>;
Enc30@element =:= 'vehicles-with-parking-permits' ->
<<0:1,27:6>>;
Enc30@element =:= 'vehicles-with-catalytic-converters' ->
<<0:1,28:6>>;
Enc30@element =:= 'vehicles-without-catalytic-converters' ->
<<0:1,29:6>>;
Enc30@element =:= 'gas-powered-vehicles' ->
<<0:1,30:6>>;
Enc30@element =:= 'diesel-powered-vehicles' ->
<<0:1,31:6>>;
Enc30@element =:= 'lPG-vehicles' ->
<<0:1,32:6>>;
Enc30@element =:= 'military-convoys' ->
<<0:1,33:6>>;
Enc30@element =:= 'military-vehicles' ->
<<0:1,34:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc30@element}}})
end
end,
begin
%% attribute responseEquip(9) with type ENUMERATED
Enc33@element = element(10, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
Enc33@element =:= 'ground-fire-suppression' ->
<<0:1,0:7>>;
Enc33@element =:= 'heavy-ground-equipment' ->
<<0:1,1:7>>;
Enc33@element =:= aircraft ->
<<0:1,2:7>>;
Enc33@element =:= 'marine-equipment' ->
<<0:1,3:7>>;
Enc33@element =:= 'support-equipment' ->
<<0:1,4:7>>;
Enc33@element =:= 'medical-rescue-unit' ->
<<0:1,5:7>>;
Enc33@element =:= other ->
<<0:1,6:7>>;
Enc33@element =:= 'ground-fire-suppression-other' ->
<<0:1,7:7>>;
Enc33@element =:= engine ->
<<0:1,8:7>>;
Enc33@element =:= 'truck-or-aerial' ->
<<0:1,9:7>>;
Enc33@element =:= quint ->
<<0:1,10:7>>;
Enc33@element =:= 'tanker-pumper-combination' ->
<<0:1,11:7>>;
Enc33@element =:= 'brush-truck' ->
<<0:1,12:7>>;
Enc33@element =:= 'aircraft-rescue-firefighting' ->
<<0:1,13:7>>;
Enc33@element =:= 'heavy-ground-equipment-other' ->
<<0:1,14:7>>;
Enc33@element =:= 'dozer-or-plow' ->
<<0:1,15:7>>;
Enc33@element =:= tractor ->
<<0:1,16:7>>;
Enc33@element =:= 'tanker-or-tender' ->
<<0:1,17:7>>;
Enc33@element =:= 'aircraft-other' ->
<<0:1,18:7>>;
Enc33@element =:= 'aircraft-fixed-wing-tanker' ->
<<0:1,19:7>>;
Enc33@element =:= helitanker ->
<<0:1,20:7>>;
Enc33@element =:= helicopter ->
<<0:1,21:7>>;
Enc33@element =:= 'marine-equipment-other' ->
<<0:1,22:7>>;
Enc33@element =:= 'fire-boat-with-pump' ->
<<0:1,23:7>>;
Enc33@element =:= 'boat-no-pump' ->
<<0:1,24:7>>;
Enc33@element =:= 'support-apparatus-other' ->
<<0:1,25:7>>;
Enc33@element =:= 'breathing-apparatus-support' ->
<<0:1,26:7>>;
Enc33@element =:= 'light-and-air-unit' ->
<<0:1,27:7>>;
Enc33@element =:= 'medical-rescue-unit-other' ->
<<0:1,28:7>>;
Enc33@element =:= 'rescue-unit' ->
<<0:1,29:7>>;
Enc33@element =:= 'urban-search-rescue-unit' ->
<<0:1,30:7>>;
Enc33@element =:= 'high-angle-rescue' ->
<<0:1,31:7>>;
Enc33@element =:= 'crash-fire-rescue' ->
<<0:1,32:7>>;
Enc33@element =:= 'bLS-unit' ->
<<0:1,33:7>>;
Enc33@element =:= 'aLS-unit' ->
<<0:1,34:7>>;
Enc33@element =:= 'mobile-command-post' ->
<<0:1,35:7>>;
Enc33@element =:= 'chief-officer-car' ->
<<0:1,36:7>>;
Enc33@element =:= 'hAZMAT-unit' ->
<<0:1,37:7>>;
Enc33@element =:= 'type-i-hand-crew' ->
<<0:1,38:7>>;
Enc33@element =:= 'type-ii-hand-crew' ->
<<0:1,39:7>>;
Enc33@element =:= 'privately-owned-vehicle' ->
<<0:1,40:7>>;
Enc33@element =:= 'other-apparatus-resource' ->
<<0:1,41:7>>;
Enc33@element =:= ambulance ->
<<0:1,42:7>>;
Enc33@element =:= 'bomb-squad-van' ->
<<0:1,43:7>>;
Enc33@element =:= 'combine-harvester' ->
<<0:1,44:7>>;
Enc33@element =:= 'construction-vehicle' ->
<<0:1,45:7>>;
Enc33@element =:= 'farm-tractor' ->
<<0:1,46:7>>;
Enc33@element =:= 'grass-cutting-machines' ->
<<0:1,47:7>>;
Enc33@element =:= 'hAZMAT-containment-tow' ->
<<0:1,48:7>>;
Enc33@element =:= 'heavy-tow' ->
<<0:1,49:7>>;
Enc33@element =:= 'hedge-cutting-machines' ->
<<0:1,50:7>>;
Enc33@element =:= 'light-tow' ->
<<0:1,51:7>>;
Enc33@element =:= 'mobile-crane' ->
<<0:1,52:7>>;
Enc33@element =:= 'refuse-collection-vehicle' ->
<<0:1,53:7>>;
Enc33@element =:= 'resurfacing-vehicle' ->
<<0:1,54:7>>;
Enc33@element =:= 'road-sweeper' ->
<<0:1,55:7>>;
Enc33@element =:= 'roadside-litter-collection-crews' ->
<<0:1,56:7>>;
Enc33@element =:= 'salvage-vehicle' ->
<<0:1,57:7>>;
Enc33@element =:= 'sand-truck' ->
<<0:1,58:7>>;
Enc33@element =:= snowplow ->
<<0:1,59:7>>;
Enc33@element =:= 'steam-roller' ->
<<0:1,60:7>>;
Enc33@element =:= 'swat-team-van' ->
<<0:1,61:7>>;
Enc33@element =:= 'track-laying-vehicle' ->
<<0:1,62:7>>;
Enc33@element =:= 'unknown-vehicle' ->
<<0:1,63:7>>;
Enc33@element =:= 'white-lining-vehicle' ->
<<0:1,64:7>>;
Enc33@element =:= 'dump-truck' ->
<<0:1,65:7>>;
Enc33@element =:= 'supervisor-vehicle' ->
<<0:1,66:7>>;
Enc33@element =:= 'snow-blower' ->
<<0:1,67:7>>;
Enc33@element =:= 'rotary-snow-blower' ->
<<0:1,68:7>>;
Enc33@element =:= 'road-grader' ->
<<0:1,69:7>>;
Enc33@element =:= 'steam-truck' ->
<<0:1,70:7>>;
Enc33@element =:= 'flatbed-tow' ->
<<0:1,71:7>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc33@element}}})
end
end,
begin
%% attribute responderType(10) with type ENUMERATED
Enc36@element = element(11, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
Enc36@element =:= 'emergency-vehicle-units' ->
<<0:1,0:4>>;
Enc36@element =:= 'federal-law-enforcement-units' ->
<<0:1,1:4>>;
Enc36@element =:= 'state-police-units' ->
<<0:1,2:4>>;
Enc36@element =:= 'county-police-units' ->
<<0:1,3:4>>;
Enc36@element =:= 'local-police-units' ->
<<0:1,4:4>>;
Enc36@element =:= 'ambulance-units' ->
<<0:1,5:4>>;
Enc36@element =:= 'rescue-units' ->
<<0:1,6:4>>;
Enc36@element =:= 'fire-units' ->
<<0:1,7:4>>;
Enc36@element =:= 'hAZMAT-units' ->
<<0:1,8:4>>;
Enc36@element =:= 'light-tow-unit' ->
<<0:1,9:4>>;
Enc36@element =:= 'heavy-tow-unit' ->
<<0:1,10:4>>;
Enc36@element =:= 'freeway-service-patrols' ->
<<0:1,11:4>>;
Enc36@element =:= 'transportation-response-units' ->
<<0:1,12:4>>;
Enc36@element =:= 'private-contractor-response-units' ->
<<0:1,13:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc36@element}}})
end
end|begin
%% attribute regional(11) with type SEQUENCE OF
Enc39@element = element(12, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
true ->
enc_EmergencyVehicleAlert_regional(Enc39@element)
end
end].
enc_EmergencyVehicleAlert_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_EmergencyVehicleAlert_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_EmergencyVehicleAlert_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_EmergencyVehicleAlert(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute id(2) with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V4@V0:4/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute rsaMsg(3) with type RoadSideAlert
{Term3,Bytes5} = dec_RoadSideAlert(Bytes4),

%% attribute responseType(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 7) band 1 of
1 ->
begin
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:3,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> notInUseOrNotEquipped;
1 -> emergency;
2 -> nonEmergency;
3 -> pursuit;
4 -> stationary;
5 -> slowMoving;
6 -> stopAndGoMovement;
_ -> exit({error,{asn1,{decode_enumerated,V5@V3}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<0:1,V5@V9:7,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10};
<<1:1,0:1,V5@V10:14,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<1:1,1:1,V5@V10:6,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
V5@Mul12 = V5@V10 * 16384,
{V5@Mul12,V5@Buf11}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute details(5) with type EmergencyDetails
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
dec_EmergencyDetails(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute mass(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes7,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute basicType(7) with type ENUMERATED
{Term7,Bytes9} = case (Opt bsr 4) band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:4,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute vehicleType(8) with type ENUMERATED
{Term8,Bytes10} = case (Opt bsr 3) band 1 of
1 ->
begin
{V8@V0,V8@Buf1} = case Bytes9 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Int5 = case V8@V3 of
0 -> 'all-vehicles';
1 -> bicycles;
2 -> motorcycles;
3 -> cars;
4 -> 'light-vehicles';
5 -> 'cars-and-light-vehicles';
6 -> 'cars-with-trailers';
7 -> 'cars-with-recreational-trailers';
8 -> 'vehicles-with-trailers';
9 -> 'heavy-vehicles';
10 -> trucks;
11 -> buses;
12 -> 'articulated-buses';
13 -> 'school-buses';
14 -> 'vehicles-with-semi-trailers';
15 -> 'vehicles-with-double-trailers';
16 -> 'high-profile-vehicles';
17 -> 'wide-vehicles';
18 -> 'long-vehicles';
19 -> 'hazardous-loads';
20 -> 'exceptional-loads';
21 -> 'abnormal-loads';
22 -> convoys;
23 -> 'maintenance-vehicles';
24 -> 'delivery-vehicles';
25 -> 'vehicles-with-even-numbered-license-plates';
26 -> 'vehicles-with-odd-numbered-license-plates';
27 -> 'vehicles-with-parking-permits';
28 -> 'vehicles-with-catalytic-converters';
29 -> 'vehicles-without-catalytic-converters';
30 -> 'gas-powered-vehicles';
31 -> 'diesel-powered-vehicles';
32 -> 'lPG-vehicles';
33 -> 'military-convoys';
34 -> 'military-vehicles';
_ -> exit({error,{asn1,{decode_enumerated,V8@V3}}})
end,
{V8@Int5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V6,V8@Buf7};
<<1:1,V8@Buf5/bitstring>> ->
{V8@V6,V8@Buf7} = case V8@Buf5 of
<<0:1,V8@V9:7,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10};
<<1:1,0:1,V8@V10:14,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
{V8@V10,V8@Buf11};
<<1:1,1:1,V8@V10:6,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
V8@Mul12 = V8@V10 * 16384,
{V8@Mul12,V8@Buf11}
end,
<<V8@V13:V8@V6/unit:8,V8@Buf14/bitstring>> = V8@Buf7,
{V8@V13,V8@Buf14}
end,
V8@Int15 = case V8@V3 of
_ -> {asn1_enum,V8@V3}
end,
{V8@Int15,V8@Buf4}
end,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute responseEquip(9) with type ENUMERATED
{Term9,Bytes11} = case (Opt bsr 2) band 1 of
1 ->
begin
{V9@V0,V9@Buf1} = case Bytes10 of
<<0:1,V9@V3:7,V9@Buf4/bitstring>> ->
V9@Int5 = case V9@V3 of
0 -> 'ground-fire-suppression';
1 -> 'heavy-ground-equipment';
2 -> aircraft;
3 -> 'marine-equipment';
4 -> 'support-equipment';
5 -> 'medical-rescue-unit';
6 -> other;
7 -> 'ground-fire-suppression-other';
8 -> engine;
9 -> 'truck-or-aerial';
10 -> quint;
11 -> 'tanker-pumper-combination';
12 -> 'brush-truck';
13 -> 'aircraft-rescue-firefighting';
14 -> 'heavy-ground-equipment-other';
15 -> 'dozer-or-plow';
16 -> tractor;
17 -> 'tanker-or-tender';
18 -> 'aircraft-other';
19 -> 'aircraft-fixed-wing-tanker';
20 -> helitanker;
21 -> helicopter;
22 -> 'marine-equipment-other';
23 -> 'fire-boat-with-pump';
24 -> 'boat-no-pump';
25 -> 'support-apparatus-other';
26 -> 'breathing-apparatus-support';
27 -> 'light-and-air-unit';
28 -> 'medical-rescue-unit-other';
29 -> 'rescue-unit';
30 -> 'urban-search-rescue-unit';
31 -> 'high-angle-rescue';
32 -> 'crash-fire-rescue';
33 -> 'bLS-unit';
34 -> 'aLS-unit';
35 -> 'mobile-command-post';
36 -> 'chief-officer-car';
37 -> 'hAZMAT-unit';
38 -> 'type-i-hand-crew';
39 -> 'type-ii-hand-crew';
40 -> 'privately-owned-vehicle';
41 -> 'other-apparatus-resource';
42 -> ambulance;
43 -> 'bomb-squad-van';
44 -> 'combine-harvester';
45 -> 'construction-vehicle';
46 -> 'farm-tractor';
47 -> 'grass-cutting-machines';
48 -> 'hAZMAT-containment-tow';
49 -> 'heavy-tow';
50 -> 'hedge-cutting-machines';
51 -> 'light-tow';
52 -> 'mobile-crane';
53 -> 'refuse-collection-vehicle';
54 -> 'resurfacing-vehicle';
55 -> 'road-sweeper';
56 -> 'roadside-litter-collection-crews';
57 -> 'salvage-vehicle';
58 -> 'sand-truck';
59 -> snowplow;
60 -> 'steam-roller';
61 -> 'swat-team-van';
62 -> 'track-laying-vehicle';
63 -> 'unknown-vehicle';
64 -> 'white-lining-vehicle';
65 -> 'dump-truck';
66 -> 'supervisor-vehicle';
67 -> 'snow-blower';
68 -> 'rotary-snow-blower';
69 -> 'road-grader';
70 -> 'steam-truck';
71 -> 'flatbed-tow';
_ -> exit({error,{asn1,{decode_enumerated,V9@V3}}})
end,
{V9@Int5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V6,V9@Buf7};
<<1:1,V9@Buf5/bitstring>> ->
{V9@V6,V9@Buf7} = case V9@Buf5 of
<<0:1,V9@V9:7,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10};
<<1:1,0:1,V9@V10:14,V9@Buf11/bitstring>> when V9@V10 =/= 0 ->
{V9@V10,V9@Buf11};
<<1:1,1:1,V9@V10:6,V9@Buf11/bitstring>> when V9@V10 =/= 0 ->
V9@Mul12 = V9@V10 * 16384,
{V9@Mul12,V9@Buf11}
end,
<<V9@V13:V9@V6/unit:8,V9@Buf14/bitstring>> = V9@Buf7,
{V9@V13,V9@Buf14}
end,
V9@Int15 = case V9@V3 of
_ -> {asn1_enum,V9@V3}
end,
{V9@Int15,V9@Buf4}
end,
{V9@V0,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute responderType(10) with type ENUMERATED
{Term10,Bytes12} = case (Opt bsr 1) band 1 of
1 ->
begin
{V10@V0,V10@Buf1} = case Bytes11 of
<<0:1,V10@V3:4,V10@Buf4/bitstring>> ->
V10@Int5 = case V10@V3 of
0 -> 'emergency-vehicle-units';
1 -> 'federal-law-enforcement-units';
2 -> 'state-police-units';
3 -> 'county-police-units';
4 -> 'local-police-units';
5 -> 'ambulance-units';
6 -> 'rescue-units';
7 -> 'fire-units';
8 -> 'hAZMAT-units';
9 -> 'light-tow-unit';
10 -> 'heavy-tow-unit';
11 -> 'freeway-service-patrols';
12 -> 'transportation-response-units';
13 -> 'private-contractor-response-units';
_ -> exit({error,{asn1,{decode_enumerated,V10@V3}}})
end,
{V10@Int5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V6,V10@Buf7};
<<1:1,V10@Buf5/bitstring>> ->
{V10@V6,V10@Buf7} = case V10@Buf5 of
<<0:1,V10@V9:7,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10};
<<1:1,0:1,V10@V10:14,V10@Buf11/bitstring>> when V10@V10 =/= 0 ->
{V10@V10,V10@Buf11};
<<1:1,1:1,V10@V10:6,V10@Buf11/bitstring>> when V10@V10 =/= 0 ->
V10@Mul12 = V10@V10 * 16384,
{V10@Mul12,V10@Buf11}
end,
<<V10@V13:V10@V6/unit:8,V10@Buf14/bitstring>> = V10@Buf7,
{V10@V13,V10@Buf14}
end,
V10@Int15 = case V10@V3 of
_ -> {asn1_enum,V10@V3}
end,
{V10@Int15,V10@Buf4}
end,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute regional(11) with type SEQUENCE OF
{Term11,Bytes13} = case Opt band 1 of
1 ->
dec_EmergencyVehicleAlert_regional(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% Extensions
{Extensions,Bytes14} = case Ext of
0 -> {<<>>,Bytes13};
1 ->
{V11@V0,V11@Buf1} = case Bytes13 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:7,V11@Buf7/bitstring>> when V11@V6 =/= 0 ->
{V11@V6,V11@Buf7};
<<1:1,0:1,V11@V7:14,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
{V11@V7,V11@Buf8};
<<1:1,1:1,V11@V7:6,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
V11@Mul9 = V11@V7 * 16384,
{V11@Mul9,V11@Buf8}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V10:V11@V0/bitstring-unit:1,V11@Buf11/bitstring>> = V11@Buf1,
{V11@V10,V11@Buf11}
end,
Bytes15= skipextensions(Bytes14, 1, Extensions),
Res1 = {'EmergencyVehicleAlert',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},
{Res1,Bytes15}.


dec_EmergencyVehicleAlert_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components10(V1@Add2, V1@Buf1, []).


dec_EmergencyVehicleAlert_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_IntersectionCollision(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(11, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute msgCnt(1) with type INTEGER
Enc7@element = element(2, Val),
if Enc7@element bsr 7 =:= 0 ->
<<Enc7@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute id(2) with type OCTET STRING
Enc9@element = element(3, Val),
Enc10@len = byte_size(Enc9@element),
if Enc10@len =:= 4 ->
Enc9@element
end
end,
begin
%% attribute timeStamp(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
0 =< Enc11@element, Enc11@element < 527041 ->
<<Enc11@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute partOne(4) with type BSMcoreData
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_BSMcoreData(Enc14@element)
end
end,
begin
%% attribute path(5) with type PathHistory
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathHistory(Enc16@element)
end
end,
begin
%% attribute pathPrediction(6) with type PathPrediction
Enc18@element = element(7, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathPrediction(Enc18@element)
end
end,
begin
%% attribute intersectionID(7) with type IntersectionReferenceID
Enc20@element = element(8, Val),
enc_IntersectionReferenceID(Enc20@element)
end,
begin
%% attribute laneNumber(8) with type ApproachOrLane
Enc21@element = element(9, Val),
enc_ApproachOrLane(Enc21@element)
end,
begin
%% attribute eventFlag(9) with type BIT STRING
Enc22@element = element(10, Val),
Enc23@bs = try bit_string_name2pos_11(Enc22@element) of
Enc23@positions ->
bitstring_from_positions(Enc23@positions, 13)
catch throw:invalid ->
adjust_trailing_zeroes(Enc22@element, 13)
end,
Enc23@bits = bit_size(Enc23@bs),
if Enc23@bits =:= 13 ->
[<<0:1>>|Enc23@bs];
Enc23@bits < 128 ->
[<<1:1,Enc23@bits:8>>|Enc23@bs];
Enc23@bits < 16384 ->
[<<1:1,2:2,Enc23@bits:14>>|Enc23@bs];
true ->
[<<1:1>>|encode_fragmented(Enc23@bs, 1)]
end
end|begin
%% attribute regional(10) with type SEQUENCE OF
Enc24@element = element(11, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionCollision_regional(Enc24@element)
end
end].
enc_IntersectionCollision_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_IntersectionCollision_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_IntersectionCollision_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_IntersectionCollision(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute msgCnt(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute id(2) with type OCTET STRING
{Term2,Bytes4} = begin
<<V4@V0:4/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute timeStamp(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:20,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute partOne(4) with type BSMcoreData
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
dec_BSMcoreData(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute path(5) with type PathHistory
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
dec_PathHistory(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute pathPrediction(6) with type PathPrediction
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
dec_PathPrediction(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute intersectionID(7) with type IntersectionReferenceID
{Term7,Bytes9} = dec_IntersectionReferenceID(Bytes8),

%% attribute laneNumber(8) with type ApproachOrLane
{Term8,Bytes10} = dec_ApproachOrLane(Bytes9),

%% attribute eventFlag(9) with type BIT STRING
{Term9,Bytes11} = begin
{V6@V0,V6@Buf1} = case Bytes10 of
<<0:1,V6@V3:13/binary-unit:1,V6@Buf4/bitstring>> ->
{V6@V3,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@V8:V6@V6/binary-unit:1,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<1:1,0:1,V6@V7:14,V6@V9:V6@V7/binary-unit:1,V6@Buf10/bitstring>> ->
{V6@V9,V6@Buf10};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> ->
{V6@V9,V6@Buf10}  = decode_fragmented(V6@V7, V6@Buf8, 1),
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
{V6@V11,V6@Buf12}  = {decode_named_bit_string(V6@V0, [{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]),V6@Buf1},
{V6@V11,V6@Buf12}
end,

%% attribute regional(10) with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_IntersectionCollision_regional(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V7@V0,V7@Buf1} = case Bytes12 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'IntersectionCollision',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.


dec_IntersectionCollision_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components12(V1@Add2, V1@Buf1, []).


dec_IntersectionCollision_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_MapData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
Enc8@element = element(10, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc10@element = element(2, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
0 =< Enc10@element, Enc10@element < 527041 ->
<<Enc10@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute msgIssueRevision(2) with type INTEGER
Enc13@element = element(3, Val),
if Enc13@element bsr 7 =:= 0 ->
<<Enc13@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute layerType(3) with type ENUMERATED
Enc15@element = element(4, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element =:= none ->
<<0:1,0:3>>;
Enc15@element =:= mixedContent ->
<<0:1,1:3>>;
Enc15@element =:= generalMapData ->
<<0:1,2:3>>;
Enc15@element =:= intersectionData ->
<<0:1,3:3>>;
Enc15@element =:= curveData ->
<<0:1,4:3>>;
Enc15@element =:= roadwaySectionData ->
<<0:1,5:3>>;
Enc15@element =:= parkingAreaData ->
<<0:1,6:3>>;
Enc15@element =:= sharedLaneData ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc15@element}}})
end
end,
begin
%% attribute layerID(4) with type INTEGER
Enc18@element = element(5, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
0 =< Enc18@element, Enc18@element < 101 ->
<<Enc18@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end,
begin
%% attribute intersections(5) with type IntersectionGeometryList
Enc21@element = element(6, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionGeometryList(Enc21@element)
end
end,
begin
%% attribute roadSegments(6) with type RoadSegmentList
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
enc_RoadSegmentList(Enc23@element)
end
end,
begin
%% attribute dataParameters(7) with type DataParameters
Enc25@element = element(8, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
enc_DataParameters(Enc25@element)
end
end,
begin
%% attribute restrictionList(8) with type RestrictionClassList
Enc27@element = element(9, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
enc_RestrictionClassList(Enc27@element)
end
end|begin
%% attribute regional(9) with type SEQUENCE OF
Enc29@element = element(10, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
enc_MapData_regional(Enc29@element)
end
end].
enc_MapData_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_MapData_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_MapData_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_MapData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute msgIssueRevision(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute layerType(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:3,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> none;
1 -> mixedContent;
2 -> generalMapData;
3 -> intersectionData;
4 -> curveData;
5 -> roadwaySectionData;
6 -> parkingAreaData;
7 -> sharedLaneData
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<0:1,V5@V9:7,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10};
<<1:1,0:1,V5@V10:14,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<1:1,1:1,V5@V10:6,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
V5@Mul12 = V5@V10 * 16384,
{V5@Mul12,V5@Buf11}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute layerID(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute intersections(5) with type IntersectionGeometryList
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
dec_IntersectionGeometryList(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute roadSegments(6) with type RoadSegmentList
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
dec_RoadSegmentList(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute dataParameters(7) with type DataParameters
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
dec_DataParameters(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute restrictionList(8) with type RestrictionClassList
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
dec_RestrictionClassList(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute regional(9) with type SEQUENCE OF
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_MapData_regional(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V7@V0,V7@Buf1} = case Bytes11 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'MapData',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.


dec_MapData_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components13(V1@Add2, V1@Buf1, []).


dec_MapData_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_NMEAcorrections(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
0 =< Enc7@element, Enc7@element < 527041 ->
<<Enc7@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute rev(2) with type ENUMERATED
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element =:= unknown ->
<<0:1,0:3>>;
Enc10@element =:= reserved ->
<<0:1,1:3>>;
Enc10@element =:= rev1 ->
<<0:1,2:3>>;
Enc10@element =:= rev2 ->
<<0:1,3:3>>;
Enc10@element =:= rev3 ->
<<0:1,4:3>>;
Enc10@element =:= rev4 ->
<<0:1,5:3>>;
Enc10@element =:= rev5 ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc10@element}}})
end
end,
begin
%% attribute msg(3) with type INTEGER
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 15 =:= 0 ->
<<Enc13@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute wdCount(4) with type INTEGER
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
Enc16@element bsr 10 =:= 0 ->
<<Enc16@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute payload(5) with type OCTET STRING
Enc19@element = element(6, Val),
Enc20@len = byte_size(Enc19@element),
Enc20@len@sub = Enc20@len - 1,
if 0 =< Enc20@len@sub, Enc20@len@sub < 1023 ->
[<<Enc20@len@sub:10>>|Enc19@element]
end
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_NMEAcorrections_regional(Enc21@element)
end
end].
enc_NMEAcorrections_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_NMEAcorrections_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_NMEAcorrections_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_NMEAcorrections(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute rev(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:3,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> unknown;
1 -> reserved;
2 -> rev1;
3 -> rev2;
4 -> rev3;
5 -> rev4;
6 -> rev5;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute msg(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:15,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute wdCount(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:10,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute payload(5) with type OCTET STRING
{Term5,Bytes7} = begin
<<V7@V0:10,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 1,
<<V7@V3:V7@Add2/binary-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
V7@Conv5 = binary:copy(V7@V3),
{V7@Conv5,V7@Buf4}
end,

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_NMEAcorrections_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'NMEAcorrections',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_NMEAcorrections_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components14(V1@Add2, V1@Buf1, []).


dec_NMEAcorrections_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_PersonalSafetyMessage(Val) ->
[begin
Enc1@element = element(10, Val),
Enc2@element = element(11, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(12, Val),
Enc4@element = element(13, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(14, Val),
Enc6@element = element(15, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(16, Val),
Enc8@element = element(17, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(18, Val),
Enc10@element = element(19, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(20, Val),
Enc12@element = element(21, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(22, Val),
Enc14@element = element(23, Val),
if Enc13@element =:= asn1_NOVALUE ->
if Enc14@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc14@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(24, Val),
Enc16@element = element(25, Val),
if Enc15@element =:= asn1_NOVALUE ->
if Enc16@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc16@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(26, Val),
Enc18@element = element(27, Val),
if Enc17@element =:= asn1_NOVALUE ->
if Enc18@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc18@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute basicType(1) with type ENUMERATED
Enc20@element = element(2, Val),
if Enc20@element =:= unavailable ->
<<0:1,0:3>>;
Enc20@element =:= aPEDESTRIAN ->
<<0:1,1:3>>;
Enc20@element =:= aPEDALCYCLIST ->
<<0:1,2:3>>;
Enc20@element =:= aPUBLICSAFETYWORKER ->
<<0:1,3:3>>;
Enc20@element =:= anANIMAL ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc20@element}}})
end
end,
begin
%% attribute secMark(2) with type INTEGER
Enc22@element = element(3, Val),
if Enc22@element bsr 16 =:= 0 ->
<<Enc22@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc22@element}}})
end
end,
begin
%% attribute msgCnt(3) with type INTEGER
Enc24@element = element(4, Val),
if Enc24@element bsr 7 =:= 0 ->
<<Enc24@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc24@element}}})
end
end,
begin
%% attribute id(4) with type OCTET STRING
Enc26@element = element(5, Val),
Enc27@len = byte_size(Enc26@element),
if Enc27@len =:= 4 ->
Enc26@element
end
end,
begin
%% attribute position(5) with type Position3D
Enc28@element = element(6, Val),
enc_Position3D(Enc28@element)
end,
begin
%% attribute accuracy(6) with type PositionalAccuracy
Enc29@element = element(7, Val),
enc_PositionalAccuracy(Enc29@element)
end,
begin
%% attribute speed(7) with type INTEGER
Enc30@element = element(8, Val),
if Enc30@element bsr 13 =:= 0 ->
<<Enc30@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc30@element}}})
end
end,
begin
%% attribute heading(8) with type INTEGER
Enc32@element = element(9, Val),
if 0 =< Enc32@element, Enc32@element < 28801 ->
<<Enc32@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc32@element}}})
end
end,
begin
%% attribute accelSet(9) with type AccelerationSet4Way
Enc34@element = element(10, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
enc_AccelerationSet4Way(Enc34@element)
end
end,
begin
%% attribute pathHistory(10) with type PathHistory
Enc36@element = element(11, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathHistory(Enc36@element)
end
end,
begin
%% attribute pathPrediction(11) with type PathPrediction
Enc38@element = element(12, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathPrediction(Enc38@element)
end
end,
begin
%% attribute propulsion(12) with type PropelledInformation
Enc40@element = element(13, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
enc_PropelledInformation(Enc40@element)
end
end,
begin
%% attribute useState(13) with type BIT STRING
Enc42@element = element(14, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc43@bs = try bit_string_name2pos_15(Enc42@element) of
Enc43@positions ->
bitstring_from_positions(Enc43@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Enc42@element, 9)
end,
Enc43@bits = bit_size(Enc43@bs),
if Enc43@bits =:= 9 ->
[<<0:1>>|Enc43@bs];
Enc43@bits < 128 ->
[<<1:1,Enc43@bits:8>>|Enc43@bs];
Enc43@bits < 16384 ->
[<<1:1,2:2,Enc43@bits:14>>|Enc43@bs];
true ->
[<<1:1>>|encode_fragmented(Enc43@bs, 1)]
end
end
end
end,
begin
%% attribute crossRequest(14) with type BOOLEAN
Enc45@element = element(15, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
Enc45@element =:= false ->
<<0:1>>;
Enc45@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc45@element}}})
end
end,
begin
%% attribute crossState(15) with type BOOLEAN
Enc48@element = element(16, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
Enc48@element =:= false ->
<<0:1>>;
Enc48@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc48@element}}})
end
end,
begin
%% attribute clusterSize(16) with type ENUMERATED
Enc51@element = element(17, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
Enc51@element =:= unavailable ->
<<0:1,0:2>>;
Enc51@element =:= small ->
<<0:1,1:2>>;
Enc51@element =:= medium ->
<<0:1,2:2>>;
Enc51@element =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc51@element}}})
end
end,
begin
%% attribute clusterRadius(17) with type INTEGER
Enc54@element = element(18, Val),
if Enc54@element =:= asn1_NOVALUE ->
[];
0 =< Enc54@element, Enc54@element < 101 ->
<<Enc54@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc54@element}}})
end
end,
begin
%% attribute eventResponderType(18) with type ENUMERATED
Enc57@element = element(19, Val),
if Enc57@element =:= asn1_NOVALUE ->
[];
Enc57@element =:= unavailable ->
<<0:1,0:3>>;
Enc57@element =:= towOperater ->
<<0:1,1:3>>;
Enc57@element =:= fireAndEMSWorker ->
<<0:1,2:3>>;
Enc57@element =:= aDOTWorker ->
<<0:1,3:3>>;
Enc57@element =:= lawEnforcement ->
<<0:1,4:3>>;
Enc57@element =:= hazmatResponder ->
<<0:1,5:3>>;
Enc57@element =:= animalControlWorker ->
<<0:1,6:3>>;
Enc57@element =:= otherPersonnel ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc57@element}}})
end
end,
begin
%% attribute activityType(19) with type BIT STRING
Enc60@element = element(20, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc61@bs = try bit_string_name2pos_16(Enc60@element) of
Enc61@positions ->
bitstring_from_positions(Enc61@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Enc60@element, 6)
end,
Enc61@bits = bit_size(Enc61@bs),
if Enc61@bits =:= 6 ->
[<<0:1>>|Enc61@bs];
Enc61@bits < 128 ->
[<<1:1,Enc61@bits:8>>|Enc61@bs];
Enc61@bits < 16384 ->
[<<1:1,2:2,Enc61@bits:14>>|Enc61@bs];
true ->
[<<1:1>>|encode_fragmented(Enc61@bs, 1)]
end
end
end
end,
begin
%% attribute activitySubType(20) with type BIT STRING
Enc63@element = element(21, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc64@bs = try bit_string_name2pos_17(Enc63@element) of
Enc64@positions ->
bitstring_from_positions(Enc64@positions, 7)
catch throw:invalid ->
adjust_trailing_zeroes(Enc63@element, 7)
end,
Enc64@bits = bit_size(Enc64@bs),
if Enc64@bits =:= 7 ->
[<<0:1>>|Enc64@bs];
Enc64@bits < 128 ->
[<<1:1,Enc64@bits:8>>|Enc64@bs];
Enc64@bits < 16384 ->
[<<1:1,2:2,Enc64@bits:14>>|Enc64@bs];
true ->
[<<1:1>>|encode_fragmented(Enc64@bs, 1)]
end
end
end
end,
begin
%% attribute assistType(21) with type BIT STRING
Enc66@element = element(22, Val),
if Enc66@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc67@bs = try bit_string_name2pos_18(Enc66@element) of
Enc67@positions ->
bitstring_from_positions(Enc67@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Enc66@element, 6)
end,
Enc67@bits = bit_size(Enc67@bs),
if Enc67@bits =:= 6 ->
[<<0:1>>|Enc67@bs];
Enc67@bits < 128 ->
[<<1:1,Enc67@bits:8>>|Enc67@bs];
Enc67@bits < 16384 ->
[<<1:1,2:2,Enc67@bits:14>>|Enc67@bs];
true ->
[<<1:1>>|encode_fragmented(Enc67@bs, 1)]
end
end
end
end,
begin
%% attribute sizing(22) with type BIT STRING
Enc69@element = element(23, Val),
if Enc69@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc70@bs = try bit_string_name2pos_19(Enc69@element) of
Enc70@positions ->
bitstring_from_positions(Enc70@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Enc69@element, 5)
end,
Enc70@bits = bit_size(Enc70@bs),
if Enc70@bits =:= 5 ->
[<<0:1>>|Enc70@bs];
Enc70@bits < 128 ->
[<<1:1,Enc70@bits:8>>|Enc70@bs];
Enc70@bits < 16384 ->
[<<1:1,2:2,Enc70@bits:14>>|Enc70@bs];
true ->
[<<1:1>>|encode_fragmented(Enc70@bs, 1)]
end
end
end
end,
begin
%% attribute attachment(23) with type ENUMERATED
Enc72@element = element(24, Val),
if Enc72@element =:= asn1_NOVALUE ->
[];
Enc72@element =:= unavailable ->
<<0:1,0:3>>;
Enc72@element =:= stroller ->
<<0:1,1:3>>;
Enc72@element =:= bicycleTrailer ->
<<0:1,2:3>>;
Enc72@element =:= cart ->
<<0:1,3:3>>;
Enc72@element =:= wheelchair ->
<<0:1,4:3>>;
Enc72@element =:= otherWalkAssistAttachments ->
<<0:1,5:3>>;
Enc72@element =:= pet ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc72@element}}})
end
end,
begin
%% attribute attachmentRadius(24) with type INTEGER
Enc75@element = element(25, Val),
if Enc75@element =:= asn1_NOVALUE ->
[];
0 =< Enc75@element, Enc75@element < 201 ->
Enc75@element;
true ->
exit({error,{asn1,{illegal_integer,Enc75@element}}})
end
end,
begin
%% attribute animalType(25) with type ENUMERATED
Enc78@element = element(26, Val),
if Enc78@element =:= asn1_NOVALUE ->
[];
Enc78@element =:= unavailable ->
<<0:1,0:2>>;
Enc78@element =:= serviceUse ->
<<0:1,1:2>>;
Enc78@element =:= pet ->
<<0:1,2:2>>;
Enc78@element =:= farm ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc78@element}}})
end
end|begin
%% attribute regional(26) with type SEQUENCE OF
Enc81@element = element(27, Val),
if Enc81@element =:= asn1_NOVALUE ->
[];
true ->
enc_PersonalSafetyMessage_regional(Enc81@element)
end
end].
enc_PersonalSafetyMessage_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_PersonalSafetyMessage_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_PersonalSafetyMessage_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_PersonalSafetyMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:18,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute basicType(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:3,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unavailable;
1 -> aPEDESTRIAN;
2 -> aPEDALCYCLIST;
3 -> aPUBLICSAFETYWORKER;
4 -> anANIMAL;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute secMark(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute msgCnt(3) with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute id(4) with type OCTET STRING
{Term4,Bytes6} = begin
<<V6@V0:4/binary-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Conv2 = binary:copy(V6@V0),
{V6@Conv2,V6@Buf1}
end,

%% attribute position(5) with type Position3D
{Term5,Bytes7} = dec_Position3D(Bytes6),

%% attribute accuracy(6) with type PositionalAccuracy
{Term6,Bytes8} = dec_PositionalAccuracy(Bytes7),

%% attribute speed(7) with type INTEGER
{Term7,Bytes9} = begin
<<V7@V0:13,V7@Buf1/bitstring>> = Bytes8,
{V7@V0,V7@Buf1}
end,

%% attribute heading(8) with type INTEGER
{Term8,Bytes10} = begin
<<V8@V0:15,V8@Buf1/bitstring>> = Bytes9,
{V8@V0,V8@Buf1}
end,

%% attribute accelSet(9) with type AccelerationSet4Way
{Term9,Bytes11} = case (Opt bsr 17) band 1 of
1 ->
dec_AccelerationSet4Way(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute pathHistory(10) with type PathHistory
{Term10,Bytes12} = case (Opt bsr 16) band 1 of
1 ->
dec_PathHistory(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute pathPrediction(11) with type PathPrediction
{Term11,Bytes13} = case (Opt bsr 15) band 1 of
1 ->
dec_PathPrediction(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute propulsion(12) with type PropelledInformation
{Term12,Bytes14} = case (Opt bsr 14) band 1 of
1 ->
dec_PropelledInformation(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute useState(13) with type BIT STRING
{Term13,Bytes15} = case (Opt bsr 13) band 1 of
1 ->
begin
{V9@V0,V9@Buf1} = case Bytes14 of
<<0:1,V9@V3:9/binary-unit:1,V9@Buf4/bitstring>> ->
{V9@V3,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@V8:V9@V6/binary-unit:1,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<1:1,0:1,V9@V7:14,V9@V9:V9@V7/binary-unit:1,V9@Buf10/bitstring>> ->
{V9@V9,V9@Buf10};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> ->
{V9@V9,V9@Buf10}  = decode_fragmented(V9@V7, V9@Buf8, 1),
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
{V9@V11,V9@Buf12}  = {decode_named_bit_string(V9@V0, [{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]),V9@Buf1},
{V9@V11,V9@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute crossRequest(14) with type BOOLEAN
{Term14,Bytes16} = case (Opt bsr 12) band 1 of
1 ->
begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes15,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute crossState(15) with type BOOLEAN
{Term15,Bytes17} = case (Opt bsr 11) band 1 of
1 ->
begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes16,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute clusterSize(16) with type ENUMERATED
{Term16,Bytes18} = case (Opt bsr 10) band 1 of
1 ->
begin
{V12@V0,V12@Buf1} = case Bytes17 of
<<0:1,V12@V3:2,V12@Buf4/bitstring>> ->
V12@Int5 = case V12@V3 of
0 -> unavailable;
1 -> small;
2 -> medium;
3 -> large
end,
{V12@Int5,V12@Buf4};
<<1:1,V12@Buf2/bitstring>> ->
{V12@V3,V12@Buf4} = case V12@Buf2 of
<<0:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V6,V12@Buf7};
<<1:1,V12@Buf5/bitstring>> ->
{V12@V6,V12@Buf7} = case V12@Buf5 of
<<0:1,V12@V9:7,V12@Buf10/bitstring>> when V12@V9 =/= 0 ->
{V12@V9,V12@Buf10};
<<1:1,0:1,V12@V10:14,V12@Buf11/bitstring>> when V12@V10 =/= 0 ->
{V12@V10,V12@Buf11};
<<1:1,1:1,V12@V10:6,V12@Buf11/bitstring>> when V12@V10 =/= 0 ->
V12@Mul12 = V12@V10 * 16384,
{V12@Mul12,V12@Buf11}
end,
<<V12@V13:V12@V6/unit:8,V12@Buf14/bitstring>> = V12@Buf7,
{V12@V13,V12@Buf14}
end,
V12@Int15 = case V12@V3 of
_ -> {asn1_enum,V12@V3}
end,
{V12@Int15,V12@Buf4}
end,
{V12@V0,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute clusterRadius(17) with type INTEGER
{Term17,Bytes19} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V13@V0:7,V13@Buf1/bitstring>> = Bytes18,
{V13@V0,V13@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute eventResponderType(18) with type ENUMERATED
{Term18,Bytes20} = case (Opt bsr 8) band 1 of
1 ->
begin
{V14@V0,V14@Buf1} = case Bytes19 of
<<0:1,V14@V3:3,V14@Buf4/bitstring>> ->
V14@Int5 = case V14@V3 of
0 -> unavailable;
1 -> towOperater;
2 -> fireAndEMSWorker;
3 -> aDOTWorker;
4 -> lawEnforcement;
5 -> hazmatResponder;
6 -> animalControlWorker;
7 -> otherPersonnel
end,
{V14@Int5,V14@Buf4};
<<1:1,V14@Buf2/bitstring>> ->
{V14@V3,V14@Buf4} = case V14@Buf2 of
<<0:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V6,V14@Buf7};
<<1:1,V14@Buf5/bitstring>> ->
{V14@V6,V14@Buf7} = case V14@Buf5 of
<<0:1,V14@V9:7,V14@Buf10/bitstring>> when V14@V9 =/= 0 ->
{V14@V9,V14@Buf10};
<<1:1,0:1,V14@V10:14,V14@Buf11/bitstring>> when V14@V10 =/= 0 ->
{V14@V10,V14@Buf11};
<<1:1,1:1,V14@V10:6,V14@Buf11/bitstring>> when V14@V10 =/= 0 ->
V14@Mul12 = V14@V10 * 16384,
{V14@Mul12,V14@Buf11}
end,
<<V14@V13:V14@V6/unit:8,V14@Buf14/bitstring>> = V14@Buf7,
{V14@V13,V14@Buf14}
end,
V14@Int15 = case V14@V3 of
_ -> {asn1_enum,V14@V3}
end,
{V14@Int15,V14@Buf4}
end,
{V14@V0,V14@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute activityType(19) with type BIT STRING
{Term19,Bytes21} = case (Opt bsr 7) band 1 of
1 ->
begin
{V15@V0,V15@Buf1} = case Bytes20 of
<<0:1,V15@V3:6/binary-unit:1,V15@Buf4/bitstring>> ->
{V15@V3,V15@Buf4};
<<1:1,V15@Buf2/bitstring>> ->
{V15@V3,V15@Buf4} = case V15@Buf2 of
<<0:1,V15@V6:7,V15@V8:V15@V6/binary-unit:1,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<1:1,0:1,V15@V7:14,V15@V9:V15@V7/binary-unit:1,V15@Buf10/bitstring>> ->
{V15@V9,V15@Buf10};
<<1:1,1:1,V15@V7:6,V15@Buf8/bitstring>> ->
{V15@V9,V15@Buf10}  = decode_fragmented(V15@V7, V15@Buf8, 1),
{V15@V9,V15@Buf10}
end,
{V15@V3,V15@Buf4}
end,
{V15@V11,V15@Buf12}  = {decode_named_bit_string(V15@V0, [{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]),V15@Buf1},
{V15@V11,V15@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute activitySubType(20) with type BIT STRING
{Term20,Bytes22} = case (Opt bsr 6) band 1 of
1 ->
begin
{V16@V0,V16@Buf1} = case Bytes21 of
<<0:1,V16@V3:7/binary-unit:1,V16@Buf4/bitstring>> ->
{V16@V3,V16@Buf4};
<<1:1,V16@Buf2/bitstring>> ->
{V16@V3,V16@Buf4} = case V16@Buf2 of
<<0:1,V16@V6:7,V16@V8:V16@V6/binary-unit:1,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<1:1,0:1,V16@V7:14,V16@V9:V16@V7/binary-unit:1,V16@Buf10/bitstring>> ->
{V16@V9,V16@Buf10};
<<1:1,1:1,V16@V7:6,V16@Buf8/bitstring>> ->
{V16@V9,V16@Buf10}  = decode_fragmented(V16@V7, V16@Buf8, 1),
{V16@V9,V16@Buf10}
end,
{V16@V3,V16@Buf4}
end,
{V16@V11,V16@Buf12}  = {decode_named_bit_string(V16@V0, [{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]),V16@Buf1},
{V16@V11,V16@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute assistType(21) with type BIT STRING
{Term21,Bytes23} = case (Opt bsr 5) band 1 of
1 ->
begin
{V17@V0,V17@Buf1} = case Bytes22 of
<<0:1,V17@V3:6/binary-unit:1,V17@Buf4/bitstring>> ->
{V17@V3,V17@Buf4};
<<1:1,V17@Buf2/bitstring>> ->
{V17@V3,V17@Buf4} = case V17@Buf2 of
<<0:1,V17@V6:7,V17@V8:V17@V6/binary-unit:1,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<1:1,0:1,V17@V7:14,V17@V9:V17@V7/binary-unit:1,V17@Buf10/bitstring>> ->
{V17@V9,V17@Buf10};
<<1:1,1:1,V17@V7:6,V17@Buf8/bitstring>> ->
{V17@V9,V17@Buf10}  = decode_fragmented(V17@V7, V17@Buf8, 1),
{V17@V9,V17@Buf10}
end,
{V17@V3,V17@Buf4}
end,
{V17@V11,V17@Buf12}  = {decode_named_bit_string(V17@V0, [{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]),V17@Buf1},
{V17@V11,V17@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute sizing(22) with type BIT STRING
{Term22,Bytes24} = case (Opt bsr 4) band 1 of
1 ->
begin
{V18@V0,V18@Buf1} = case Bytes23 of
<<0:1,V18@V3:5/binary-unit:1,V18@Buf4/bitstring>> ->
{V18@V3,V18@Buf4};
<<1:1,V18@Buf2/bitstring>> ->
{V18@V3,V18@Buf4} = case V18@Buf2 of
<<0:1,V18@V6:7,V18@V8:V18@V6/binary-unit:1,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<1:1,0:1,V18@V7:14,V18@V9:V18@V7/binary-unit:1,V18@Buf10/bitstring>> ->
{V18@V9,V18@Buf10};
<<1:1,1:1,V18@V7:6,V18@Buf8/bitstring>> ->
{V18@V9,V18@Buf10}  = decode_fragmented(V18@V7, V18@Buf8, 1),
{V18@V9,V18@Buf10}
end,
{V18@V3,V18@Buf4}
end,
{V18@V11,V18@Buf12}  = {decode_named_bit_string(V18@V0, [{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]),V18@Buf1},
{V18@V11,V18@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute attachment(23) with type ENUMERATED
{Term23,Bytes25} = case (Opt bsr 3) band 1 of
1 ->
begin
{V19@V0,V19@Buf1} = case Bytes24 of
<<0:1,V19@V3:3,V19@Buf4/bitstring>> ->
V19@Int5 = case V19@V3 of
0 -> unavailable;
1 -> stroller;
2 -> bicycleTrailer;
3 -> cart;
4 -> wheelchair;
5 -> otherWalkAssistAttachments;
6 -> pet;
_ -> exit({error,{asn1,{decode_enumerated,V19@V3}}})
end,
{V19@Int5,V19@Buf4};
<<1:1,V19@Buf2/bitstring>> ->
{V19@V3,V19@Buf4} = case V19@Buf2 of
<<0:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V6,V19@Buf7};
<<1:1,V19@Buf5/bitstring>> ->
{V19@V6,V19@Buf7} = case V19@Buf5 of
<<0:1,V19@V9:7,V19@Buf10/bitstring>> when V19@V9 =/= 0 ->
{V19@V9,V19@Buf10};
<<1:1,0:1,V19@V10:14,V19@Buf11/bitstring>> when V19@V10 =/= 0 ->
{V19@V10,V19@Buf11};
<<1:1,1:1,V19@V10:6,V19@Buf11/bitstring>> when V19@V10 =/= 0 ->
V19@Mul12 = V19@V10 * 16384,
{V19@Mul12,V19@Buf11}
end,
<<V19@V13:V19@V6/unit:8,V19@Buf14/bitstring>> = V19@Buf7,
{V19@V13,V19@Buf14}
end,
V19@Int15 = case V19@V3 of
_ -> {asn1_enum,V19@V3}
end,
{V19@Int15,V19@Buf4}
end,
{V19@V0,V19@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes24}
end,

%% attribute attachmentRadius(24) with type INTEGER
{Term24,Bytes26} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V20@V0:8,V20@Buf1/bitstring>> = Bytes25,
{V20@V0,V20@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute animalType(25) with type ENUMERATED
{Term25,Bytes27} = case (Opt bsr 1) band 1 of
1 ->
begin
{V21@V0,V21@Buf1} = case Bytes26 of
<<0:1,V21@V3:2,V21@Buf4/bitstring>> ->
V21@Int5 = case V21@V3 of
0 -> unavailable;
1 -> serviceUse;
2 -> pet;
3 -> farm
end,
{V21@Int5,V21@Buf4};
<<1:1,V21@Buf2/bitstring>> ->
{V21@V3,V21@Buf4} = case V21@Buf2 of
<<0:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V6,V21@Buf7};
<<1:1,V21@Buf5/bitstring>> ->
{V21@V6,V21@Buf7} = case V21@Buf5 of
<<0:1,V21@V9:7,V21@Buf10/bitstring>> when V21@V9 =/= 0 ->
{V21@V9,V21@Buf10};
<<1:1,0:1,V21@V10:14,V21@Buf11/bitstring>> when V21@V10 =/= 0 ->
{V21@V10,V21@Buf11};
<<1:1,1:1,V21@V10:6,V21@Buf11/bitstring>> when V21@V10 =/= 0 ->
V21@Mul12 = V21@V10 * 16384,
{V21@Mul12,V21@Buf11}
end,
<<V21@V13:V21@V6/unit:8,V21@Buf14/bitstring>> = V21@Buf7,
{V21@V13,V21@Buf14}
end,
V21@Int15 = case V21@V3 of
_ -> {asn1_enum,V21@V3}
end,
{V21@Int15,V21@Buf4}
end,
{V21@V0,V21@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes26}
end,

%% attribute regional(26) with type SEQUENCE OF
{Term26,Bytes28} = case Opt band 1 of
1 ->
dec_PersonalSafetyMessage_regional(Bytes27);
0 ->
{asn1_NOVALUE,Bytes27}
end,

%% Extensions
{Extensions,Bytes29} = case Ext of
0 -> {<<>>,Bytes28};
1 ->
{V22@V0,V22@Buf1} = case Bytes28 of
<<0:1,V22@V3:6,V22@Buf4/bitstring>> ->
V22@Add5 = V22@V3 + 1,
{V22@Add5,V22@Buf4};
<<1:1,V22@Buf2/bitstring>> ->
{V22@V3,V22@Buf4} = case V22@Buf2 of
<<0:1,V22@V6:7,V22@Buf7/bitstring>> when V22@V6 =/= 0 ->
{V22@V6,V22@Buf7};
<<1:1,0:1,V22@V7:14,V22@Buf8/bitstring>> when V22@V7 =/= 0 ->
{V22@V7,V22@Buf8};
<<1:1,1:1,V22@V7:6,V22@Buf8/bitstring>> when V22@V7 =/= 0 ->
V22@Mul9 = V22@V7 * 16384,
{V22@Mul9,V22@Buf8}
end,
{V22@V3,V22@Buf4}
end,
<<V22@V10:V22@V0/bitstring-unit:1,V22@Buf11/bitstring>> = V22@Buf1,
{V22@V10,V22@Buf11}
end,
Bytes30= skipextensions(Bytes29, 1, Extensions),
Res1 = {'PersonalSafetyMessage',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26},
{Res1,Bytes30}.


dec_PersonalSafetyMessage_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components20(V1@Add2, V1@Buf1, []).


dec_PersonalSafetyMessage_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_ProbeDataManagement(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(8, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(9, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 527041 ->
<<Enc5@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute sample(2) with type Sample
Enc8@element = element(3, Val),
enc_Sample(Enc8@element)
end,
begin
%% attribute directions(3) with type BIT STRING
Enc9@element = element(4, Val),
Enc10@bs = try bit_string_name2pos_21(Enc9@element) of
Enc10@positions ->
bitstring_from_positions(Enc10@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc9@element, 16)
end,
Enc10@bits = bit_size(Enc10@bs),
if Enc10@bits =:= 16 ->
Enc10@bs
end
end,
begin
%% attribute term(4) with type CHOICE
Enc11@element = element(5, Val),
enc_ProbeDataManagement_term(Enc11@element)
end,
begin
%% attribute snapshot(5) with type CHOICE
Enc12@element = element(6, Val),
enc_ProbeDataManagement_snapshot(Enc12@element)
end,
begin
%% attribute txInterval(6) with type INTEGER
Enc13@element = element(7, Val),
if 0 =< Enc13@element, Enc13@element < 62 ->
<<Enc13@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute dataElements(7) with type VehicleStatusRequestList
Enc15@element = element(8, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatusRequestList(Enc15@element)
end
end|begin
%% attribute regional(8) with type SEQUENCE OF
Enc17@element = element(9, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ProbeDataManagement_regional(Enc17@element)
end
end].
enc_ProbeDataManagement_term(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= termtime ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 1800 ->
<<0:1,ChoiceVal@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= termDistance ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 30000 ->
<<1:1,ChoiceVal@sub:15>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end
end.
enc_ProbeDataManagement_snapshot(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= snapshotTime ->
[<<0:1>>|enc_SnapshotTime(ChoiceVal)];
ChoiceTag =:= snapshotDistance ->
[<<1:1>>|enc_SnapshotDistance(ChoiceVal)]
end.
enc_ProbeDataManagement_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ProbeDataManagement_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ProbeDataManagement_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ProbeDataManagement(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute sample(2) with type Sample
{Term2,Bytes4} = dec_Sample(Bytes3),

%% attribute directions(3) with type BIT STRING
{Term3,Bytes5} = begin
<<V4@V0:16/binary-unit:1,V4@Buf1/bitstring>> = Bytes4,
{V4@V2,V4@Buf3}  = {decode_named_bit_string(V4@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute term(4) with type CHOICE
{Term4,Bytes6} = dec_ProbeDataManagement_term(Bytes5),

%% attribute snapshot(5) with type CHOICE
{Term5,Bytes7} = dec_ProbeDataManagement_snapshot(Bytes6),

%% attribute txInterval(6) with type INTEGER
{Term6,Bytes8} = begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes7,
{V5@V0,V5@Buf1}
end,

%% attribute dataElements(7) with type VehicleStatusRequestList
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
dec_VehicleStatusRequestList(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute regional(8) with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
dec_ProbeDataManagement_regional(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V6@V0,V6@Buf1} = case Bytes10 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
Res1 = {'ProbeDataManagement',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
{Res1,Bytes12}.


dec_ProbeDataManagement_term(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end
end,
{{termtime,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end
end,
{{termDistance,Val},NewBytes}
end.

dec_ProbeDataManagement_snapshot(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_SnapshotTime(Bytes1)
end,
{{snapshotTime,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SnapshotDistance(Bytes1)
end,
{{snapshotDistance,Val},NewBytes}
end.

dec_ProbeDataManagement_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components22(V1@Add2, V1@Buf1, []).


dec_ProbeDataManagement_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_ProbeVehicleData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
0 =< Enc6@element, Enc6@element < 527041 ->
<<Enc6@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute segNum(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 15 =:= 0 ->
<<Enc9@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute probeID(3) with type VehicleIdent
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleIdent(Enc12@element)
end
end,
begin
%% attribute startVector(4) with type FullPositionVector
Enc14@element = element(5, Val),
enc_FullPositionVector(Enc14@element)
end,
begin
%% attribute vehicleType(5) with type VehicleClassification
Enc15@element = element(6, Val),
enc_VehicleClassification(Enc15@element)
end,
begin
%% attribute snapshots(6) with type SEQUENCE OF
Enc16@element = element(7, Val),
enc_ProbeVehicleData_snapshots(Enc16@element)
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc17@element = element(8, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ProbeVehicleData_regional(Enc17@element)
end
end].
enc_ProbeVehicleData_snapshots(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_Snapshot(Comp) || Comp <- Val]]
end.

enc_ProbeVehicleData_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ProbeVehicleData_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ProbeVehicleData_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ProbeVehicleData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute segNum(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:15,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute probeID(3) with type VehicleIdent
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_VehicleIdent(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute startVector(4) with type FullPositionVector
{Term4,Bytes6} = dec_FullPositionVector(Bytes5),

%% attribute vehicleType(5) with type VehicleClassification
{Term5,Bytes7} = dec_VehicleClassification(Bytes6),

%% attribute snapshots(6) with type SEQUENCE OF
{Term6,Bytes8} = dec_ProbeVehicleData_snapshots(Bytes7),

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_ProbeVehicleData_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V5@V0,V5@Buf1} = case Bytes9 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'ProbeVehicleData',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_ProbeVehicleData_snapshots(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components23(V1@Add2, V1@Buf1, []).


dec_ProbeVehicleData_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components24(V1@Add2, V1@Buf1, []).


dec_ProbeVehicleData_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_RoadSideAlert(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(8, Val),
Enc6@element = element(9, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(10, Val),
Enc8@element = element(11, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute msgCnt(1) with type INTEGER
Enc10@element = element(2, Val),
if Enc10@element bsr 7 =:= 0 ->
<<Enc10@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute timeStamp(2) with type INTEGER
Enc12@element = element(3, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 527041 ->
<<Enc12@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute typeEvent(3) with type INTEGER
Enc15@element = element(4, Val),
if Enc15@element bsr 16 =:= 0 ->
<<Enc15@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end,
begin
%% attribute description(4) with type SEQUENCE OF
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_RoadSideAlert_description(Enc17@element)
end
end,
begin
%% attribute priority(5) with type OCTET STRING
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@len = byte_size(Enc19@element),
if Enc20@len =:= 1 ->
Enc19@element
end
end
end
end,
begin
%% attribute heading(6) with type BIT STRING
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@bs = try bit_string_name2pos_21(Enc22@element) of
Enc23@positions ->
bitstring_from_positions(Enc23@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc22@element, 16)
end,
Enc23@bits = bit_size(Enc23@bs),
if Enc23@bits =:= 16 ->
Enc23@bs
end
end
end
end,
begin
%% attribute extent(7) with type ENUMERATED
Enc25@element = element(8, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
Enc25@element =:= useInstantlyOnly ->
<<0:4>>;
Enc25@element =:= useFor3meters ->
<<1:4>>;
Enc25@element =:= useFor10meters ->
<<2:4>>;
Enc25@element =:= useFor50meters ->
<<3:4>>;
Enc25@element =:= useFor100meters ->
<<4:4>>;
Enc25@element =:= useFor500meters ->
<<5:4>>;
Enc25@element =:= useFor1000meters ->
<<6:4>>;
Enc25@element =:= useFor5000meters ->
<<7:4>>;
Enc25@element =:= useFor10000meters ->
<<8:4>>;
Enc25@element =:= useFor50000meters ->
<<9:4>>;
Enc25@element =:= useFor100000meters ->
<<10:4>>;
Enc25@element =:= useFor500000meters ->
<<11:4>>;
Enc25@element =:= useFor1000000meters ->
<<12:4>>;
Enc25@element =:= useFor5000000meters ->
<<13:4>>;
Enc25@element =:= useFor10000000meters ->
<<14:4>>;
Enc25@element =:= forever ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc25@element}}})
end
end,
begin
%% attribute position(8) with type FullPositionVector
Enc28@element = element(9, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
enc_FullPositionVector(Enc28@element)
end
end,
begin
%% attribute furtherInfoID(9) with type OCTET STRING
Enc30@element = element(10, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@len = byte_size(Enc30@element),
if Enc31@len =:= 2 ->
Enc30@element
end
end
end
end|begin
%% attribute regional(10) with type SEQUENCE OF
Enc33@element = element(11, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
true ->
enc_RoadSideAlert_regional(Enc33@element)
end
end].
enc_RoadSideAlert_description(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp bsr 16 =:= 0 ->
<<Comp:16>>;
true ->
exit({error,{asn1,{illegal_integer,Comp}}})
end || Comp <- Val]]
end.

enc_RoadSideAlert_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_RoadSideAlert_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_RoadSideAlert_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_RoadSideAlert(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute msgCnt(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute timeStamp(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V4@V0:20,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute typeEvent(3) with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute description(4) with type SEQUENCE OF
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
dec_RoadSideAlert_description(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute priority(5) with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V6@V0:1/binary-unit:8,V6@Buf1/bitstring>> = Bytes6,
V6@Conv2 = binary:copy(V6@V0),
{V6@Conv2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute heading(6) with type BIT STRING
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V7@V0:16/binary-unit:1,V7@Buf1/bitstring>> = Bytes7,
{V7@V2,V7@Buf3}  = {decode_named_bit_string(V7@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V7@Buf1},
{V7@V2,V7@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute extent(7) with type ENUMERATED
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V8@V0:4,V8@Buf1/bitstring>> = Bytes8,
V8@Int2 = case V8@V0 of
0 -> useInstantlyOnly;
1 -> useFor3meters;
2 -> useFor10meters;
3 -> useFor50meters;
4 -> useFor100meters;
5 -> useFor500meters;
6 -> useFor1000meters;
7 -> useFor5000meters;
8 -> useFor10000meters;
9 -> useFor50000meters;
10 -> useFor100000meters;
11 -> useFor500000meters;
12 -> useFor1000000meters;
13 -> useFor5000000meters;
14 -> useFor10000000meters;
15 -> forever
end,
{V8@Int2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute position(8) with type FullPositionVector
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
dec_FullPositionVector(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute furtherInfoID(9) with type OCTET STRING
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V9@V0:2/binary-unit:8,V9@Buf1/bitstring>> = Bytes10,
V9@Conv2 = binary:copy(V9@V0),
{V9@Conv2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute regional(10) with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_RoadSideAlert_regional(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V10@V0,V10@Buf1} = case Bytes12 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:7,V10@Buf7/bitstring>> when V10@V6 =/= 0 ->
{V10@V6,V10@Buf7};
<<1:1,0:1,V10@V7:14,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
{V10@V7,V10@Buf8};
<<1:1,1:1,V10@V7:6,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
V10@Mul9 = V10@V7 * 16384,
{V10@Mul9,V10@Buf8}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V10:V10@V0/bitstring-unit:1,V10@Buf11/bitstring>> = V10@Buf1,
{V10@V10,V10@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'RoadSideAlert',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.


dec_RoadSideAlert_description(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components25(V1@Add2, V1@Buf1, []).


dec_RoadSideAlert_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components26(V1@Add2, V1@Buf1, []).


dec_RoadSideAlert_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_RTCMcorrections(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute msgCnt(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element bsr 7 =:= 0 ->
<<Enc6@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute rev(2) with type ENUMERATED
Enc8@element = element(3, Val),
if Enc8@element =:= unknown ->
<<0:1,0:2>>;
Enc8@element =:= rtcmRev2 ->
<<0:1,1:2>>;
Enc8@element =:= rtcmRev3 ->
<<0:1,2:2>>;
Enc8@element =:= reserved ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc8@element}}})
end
end,
begin
%% attribute timeStamp(3) with type INTEGER
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
0 =< Enc10@element, Enc10@element < 527041 ->
<<Enc10@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute anchorPoint(4) with type FullPositionVector
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_FullPositionVector(Enc13@element)
end
end,
begin
%% attribute rtcmHeader(5) with type RTCMheader
Enc15@element = element(6, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_RTCMheader(Enc15@element)
end
end,
begin
%% attribute msgs(6) with type RTCMmessageList
Enc17@element = element(7, Val),
enc_RTCMmessageList(Enc17@element)
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_RTCMcorrections_regional(Enc18@element)
end
end].
enc_RTCMcorrections_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_RTCMcorrections_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_RTCMcorrections_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_RTCMcorrections(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute msgCnt(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute rev(2) with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:2,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> unknown;
1 -> rtcmRev2;
2 -> rtcmRev3;
3 -> reserved
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute timeStamp(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:20,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute anchorPoint(4) with type FullPositionVector
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
dec_FullPositionVector(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute rtcmHeader(5) with type RTCMheader
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
dec_RTCMheader(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute msgs(6) with type RTCMmessageList
{Term6,Bytes8} = dec_RTCMmessageList(Bytes7),

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_RTCMcorrections_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V6@V0,V6@Buf1} = case Bytes9 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'RTCMcorrections',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_RTCMcorrections_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components27(V1@Add2, V1@Buf1, []).


dec_RTCMcorrections_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_SPAT(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 527041 ->
<<Enc5@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute name(2) with type IA5String
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@element),
Enc9@bin = encode_chars(Enc8@element, 7),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 63 ->
[<<Enc9@len@sub:6>>|Enc9@bin]
end
end
end
end,
begin
%% attribute intersections(3) with type IntersectionStateList
Enc11@element = element(4, Val),
enc_IntersectionStateList(Enc11@element)
end|begin
%% attribute regional(4) with type SEQUENCE OF
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_SPAT_regional(Enc12@element)
end
end].
enc_SPAT_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SPAT_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SPAT_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SPAT(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute name(2) with type IA5String
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:7,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V5,V4@Buf6}  = {decode_chars(V4@V3, 7),V4@Buf4},
{V4@V5,V4@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute intersections(3) with type IntersectionStateList
{Term3,Bytes5} = dec_IntersectionStateList(Bytes4),

%% attribute regional(4) with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_SPAT_regional(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'SPAT',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.


dec_SPAT_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components28(V1@Add2, V1@Buf1, []).


dec_SPAT_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_SignalRequestMessage(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
0 =< Enc6@element, Enc6@element < 527041 ->
<<Enc6@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute second(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element bsr 16 =:= 0 ->
<<Enc9@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute sequenceNumber(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element bsr 7 =:= 0 ->
<<Enc11@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute requests(4) with type SignalRequestList
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalRequestList(Enc14@element)
end
end,
begin
%% attribute requestor(5) with type RequestorDescription
Enc16@element = element(6, Val),
enc_RequestorDescription(Enc16@element)
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalRequestMessage_regional(Enc17@element)
end
end].
enc_SignalRequestMessage_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SignalRequestMessage_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SignalRequestMessage_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SignalRequestMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute second(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute sequenceNumber(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute requests(4) with type SignalRequestList
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_SignalRequestList(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute requestor(5) with type RequestorDescription
{Term5,Bytes7} = dec_RequestorDescription(Bytes6),

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_SignalRequestMessage_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V6@V0,V6@Buf1} = case Bytes8 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'SignalRequestMessage',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_SignalRequestMessage_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components29(V1@Add2, V1@Buf1, []).


dec_SignalRequestMessage_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_SignalStatusMessage(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 527041 ->
<<Enc5@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute second(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element bsr 16 =:= 0 ->
<<Enc8@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute sequenceNumber(3) with type INTEGER
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element bsr 7 =:= 0 ->
<<Enc10@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute status(4) with type SignalStatusList
Enc13@element = element(5, Val),
enc_SignalStatusList(Enc13@element)
end|begin
%% attribute regional(5) with type SEQUENCE OF
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalStatusMessage_regional(Enc14@element)
end
end].
enc_SignalStatusMessage_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SignalStatusMessage_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SignalStatusMessage_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SignalStatusMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute second(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute sequenceNumber(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute status(4) with type SignalStatusList
{Term4,Bytes6} = dec_SignalStatusList(Bytes5),

%% attribute regional(5) with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_SignalStatusMessage_regional(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'SignalStatusMessage',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.


dec_SignalStatusMessage_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components30(V1@Add2, V1@Buf1, []).


dec_SignalStatusMessage_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_TravelerInformation(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute msgCnt(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element bsr 7 =:= 0 ->
<<Enc6@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute timeStamp(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
0 =< Enc8@element, Enc8@element < 527041 ->
<<Enc8@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute packetID(3) with type OCTET STRING
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = byte_size(Enc11@element),
if Enc12@len =:= 9 ->
Enc11@element
end
end
end
end,
begin
%% attribute urlB(4) with type IA5String
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@len = length(Enc14@element),
Enc15@bin = encode_chars(Enc14@element, 7),
Enc15@len@sub = Enc15@len - 1,
if 0 =< Enc15@len@sub, Enc15@len@sub < 45 ->
[<<Enc15@len@sub:6>>|Enc15@bin]
end
end
end
end,
begin
%% attribute dataFrames(5) with type TravelerDataFrameList
Enc17@element = element(6, Val),
enc_TravelerDataFrameList(Enc17@element)
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc18@element = element(7, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
enc_TravelerInformation_regional(Enc18@element)
end
end].
enc_TravelerInformation_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_TravelerInformation_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_TravelerInformation_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TravelerInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute msgCnt(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute timeStamp(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:20,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute packetID(3) with type OCTET STRING
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:9/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv2 = binary:copy(V5@V0),
{V5@Conv2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute urlB(4) with type IA5String
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
<<V6@V3:V6@Add2/binary-unit:7,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V5,V6@Buf6}  = {decode_chars(V6@V3, 7),V6@Buf4},
{V6@V5,V6@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute dataFrames(5) with type TravelerDataFrameList
{Term5,Bytes7} = dec_TravelerDataFrameList(Bytes6),

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_TravelerInformation_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'TravelerInformation',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_TravelerInformation_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components31(V1@Add2, V1@Buf1, []).


dec_TravelerInformation_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage00(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage00_regional(Enc6@element)
end
end].
enc_TestMessage00_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage00(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage00_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage00',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage00_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage00_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage01(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage01_regional(Enc6@element)
end
end].
enc_TestMessage01_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage01(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage01_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage01',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage01_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage01_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage02(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage02_regional(Enc6@element)
end
end].
enc_TestMessage02_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage02(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage02_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage02',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage02_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage02_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage03(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage03_regional(Enc6@element)
end
end].
enc_TestMessage03_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage03(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage03_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage03',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage03_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage03_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage04(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage04_regional(Enc6@element)
end
end].
enc_TestMessage04_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage04(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage04_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage04',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage04_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage04_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage05(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage05_regional(Enc6@element)
end
end].
enc_TestMessage05_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage05(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage05_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage05',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage05_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage05_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage06(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage06_regional(Enc6@element)
end
end].
enc_TestMessage06_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage06(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage06_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage06',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage06_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage06_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage07(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage07_regional(Enc6@element)
end
end].
enc_TestMessage07_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage07(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage07_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage07',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage07_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage07_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage08(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage08_regional(Enc6@element)
end
end].
enc_TestMessage08_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage08(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage08_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage08',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage08_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage08_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage09(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage09_regional(Enc6@element)
end
end].
enc_TestMessage09_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage09(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage09_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage09',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage09_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage09_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage10(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage10_regional(Enc6@element)
end
end].
enc_TestMessage10_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage10(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage10_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage10',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage10_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage10_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage11(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage11_regional(Enc6@element)
end
end].
enc_TestMessage11_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage11(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage11_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage11',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage11_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage11_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage12(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage12_regional(Enc6@element)
end
end].
enc_TestMessage12_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage12(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage12_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage12',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage12_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage12_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage13(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage13_regional(Enc6@element)
end
end].
enc_TestMessage13_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage13(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage13_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage13',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage13_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage13_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage14(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage14_regional(Enc6@element)
end
end].
enc_TestMessage14_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage14(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage14_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage14',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage14_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage14_regional',Term1,Term2},
{Res1,Bytes2}.

enc_TestMessage15(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute header(1) with type Header
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Header(Enc4@element)
end
end|begin
%% attribute regional(2) with type SEQUENCE
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_TestMessage15_regional(Enc6@element)
end
end].
enc_TestMessage15_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_TestMessage15(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute header(1) with type Header
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Header(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regional(2) with type SEQUENCE
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_TestMessage15_regional(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TestMessage15',Term1,Term2},
{Res1,Bytes6}.


dec_TestMessage15_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'TestMessage15_regional',Term1,Term2},
{Res1,Bytes2}.

enc_AccelerationSet4Way(Val) ->
[begin
%% attribute long(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2000,
if 0 =< Enc1@element@sub, Enc1@element@sub < 4002 ->
<<Enc1@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -2000,
if 0 =< Enc3@element@sub, Enc3@element@sub < 4002 ->
<<Enc3@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute vert(3) with type INTEGER
Enc5@element = element(4, Val),
Enc5@element@sub = Enc5@element - -127,
if 0 =< Enc5@element@sub, Enc5@element@sub < 255 ->
Enc5@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute yaw(4) with type INTEGER
Enc7@element = element(5, Val),
Enc7@element@sub = Enc7@element - -32767,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
<<Enc7@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_AccelerationSet4Way(Bytes) ->

%% attribute long(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2000,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2000,
{V2@Add2,V2@Buf1}
end,

%% attribute vert(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -127,
{V3@Add2,V3@Buf1}
end,

%% attribute yaw(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -32767,
{V4@Add2,V4@Buf1}
end,
Res1 = {'AccelerationSet4Way',Term1,Term2,Term3,Term4},
{Res1,Bytes4}.

enc_AccelSteerYawRateConfidence(Val) ->
[begin
%% attribute yawRate(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unavailable ->
<<0:3>>;
Enc1@element =:= 'degSec-100-00' ->
<<1:3>>;
Enc1@element =:= 'degSec-010-00' ->
<<2:3>>;
Enc1@element =:= 'degSec-005-00' ->
<<3:3>>;
Enc1@element =:= 'degSec-001-00' ->
<<4:3>>;
Enc1@element =:= 'degSec-000-10' ->
<<5:3>>;
Enc1@element =:= 'degSec-000-05' ->
<<6:3>>;
Enc1@element =:= 'degSec-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end,
begin
%% attribute acceleration(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:3>>;
Enc3@element =:= 'accl-100-00' ->
<<1:3>>;
Enc3@element =:= 'accl-010-00' ->
<<2:3>>;
Enc3@element =:= 'accl-005-00' ->
<<3:3>>;
Enc3@element =:= 'accl-001-00' ->
<<4:3>>;
Enc3@element =:= 'accl-000-10' ->
<<5:3>>;
Enc3@element =:= 'accl-000-05' ->
<<6:3>>;
Enc3@element =:= 'accl-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end|begin
%% attribute steeringWheelAngle(3) with type ENUMERATED
Enc5@element = element(4, Val),
if Enc5@element =:= unavailable ->
<<0:2>>;
Enc5@element =:= prec2deg ->
<<1:2>>;
Enc5@element =:= prec1deg ->
<<2:2>>;
Enc5@element =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end].


dec_AccelSteerYawRateConfidence(Bytes) ->

%% attribute yawRate(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'degSec-100-00';
2 -> 'degSec-010-00';
3 -> 'degSec-005-00';
4 -> 'degSec-001-00';
5 -> 'degSec-000-10';
6 -> 'degSec-000-05';
7 -> 'degSec-000-01'
end,
{V1@Int2,V1@Buf1}
end,

%% attribute acceleration(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> 'accl-100-00';
2 -> 'accl-010-00';
3 -> 'accl-005-00';
4 -> 'accl-001-00';
5 -> 'accl-000-10';
6 -> 'accl-000-05';
7 -> 'accl-000-01'
end,
{V2@Int2,V2@Buf1}
end,

%% attribute steeringWheelAngle(3) with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V3@Int2,V3@Buf1}
end,
Res1 = {'AccelSteerYawRateConfidence',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_AdvisorySpeed(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute type(1) with type ENUMERATED
Enc7@element = element(2, Val),
if Enc7@element =:= none ->
<<0:1,0:2>>;
Enc7@element =:= greenwave ->
<<0:1,1:2>>;
Enc7@element =:= ecoDrive ->
<<0:1,2:2>>;
Enc7@element =:= transit ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute speed(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
0 =< Enc9@element, Enc9@element < 501 ->
<<Enc9@element:9>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute confidence(3) with type ENUMERATED
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element =:= unavailable ->
<<0:3>>;
Enc12@element =:= prec100ms ->
<<1:3>>;
Enc12@element =:= prec10ms ->
<<2:3>>;
Enc12@element =:= prec5ms ->
<<3:3>>;
Enc12@element =:= prec1ms ->
<<4:3>>;
Enc12@element =:= 'prec0-1ms' ->
<<5:3>>;
Enc12@element =:= 'prec0-05ms' ->
<<6:3>>;
Enc12@element =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc12@element}}})
end
end,
begin
%% attribute distance(4) with type INTEGER
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
0 =< Enc15@element, Enc15@element < 10001 ->
<<Enc15@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end,
begin
%% attribute class(5) with type INTEGER
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element bsr 8 =:= 0 ->
Enc18@element;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_AdvisorySpeed_regional(Enc21@element)
end
end].
enc_AdvisorySpeed_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_AdvisorySpeed_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_AdvisorySpeed_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_AdvisorySpeed(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute type(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> none;
1 -> greenwave;
2 -> ecoDrive;
3 -> transit
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute speed(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:9,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute confidence(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute distance(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:14,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute class(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_AdvisorySpeed_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'AdvisorySpeed',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_AdvisorySpeed_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components32(V1@Add2, V1@Buf1, []).


dec_AdvisorySpeed_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_AdvisorySpeedList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_AdvisorySpeed(Comp) || Comp <- Val]]
end.



dec_AdvisorySpeedList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components33(V1@Add2, V1@Buf1, []).

enc_AntennaOffsetSet(Val) ->
[begin
%% attribute antOffsetX(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2048,
if Enc1@element@sub bsr 12 =:= 0 ->
<<Enc1@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute antOffsetY(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -256,
if Enc3@element@sub bsr 9 =:= 0 ->
<<Enc3@element@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute antOffsetZ(3) with type INTEGER
Enc5@element = element(4, Val),
Enc5@element@sub = Enc5@element - -512,
if Enc5@element@sub bsr 10 =:= 0 ->
<<Enc5@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_AntennaOffsetSet(Bytes) ->

%% attribute antOffsetX(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end,

%% attribute antOffsetY(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -256,
{V2@Add2,V2@Buf1}
end,

%% attribute antOffsetZ(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -512,
{V3@Add2,V3@Buf1}
end,
Res1 = {'AntennaOffsetSet',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_ApproachOrLane(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= approach ->
if ChoiceVal bsr 4 =:= 0 ->
<<0:1,ChoiceVal:4>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= lane ->
if ChoiceVal bsr 8 =:= 0 ->
[<<1:1,ChoiceVal:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end.


dec_ApproachOrLane(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{approach,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{lane,Val},NewBytes}
end.
enc_BrakeSystemStatus(Val) ->
[begin
%% attribute wheelBrakes(1) with type BIT STRING
Enc1@element = element(2, Val),
Enc2@bs = try bit_string_name2pos_34(Enc1@element) of
Enc2@positions ->
bitstring_from_positions(Enc2@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Enc1@element, 5)
end,
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 5 ->
Enc2@bs
end
end,
begin
%% attribute traction(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:2>>;
Enc3@element =:= off ->
<<1:2>>;
Enc3@element =:= on ->
<<2:2>>;
Enc3@element =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end,
begin
%% attribute abs(3) with type ENUMERATED
Enc5@element = element(4, Val),
if Enc5@element =:= unavailable ->
<<0:2>>;
Enc5@element =:= off ->
<<1:2>>;
Enc5@element =:= on ->
<<2:2>>;
Enc5@element =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end,
begin
%% attribute scs(4) with type ENUMERATED
Enc7@element = element(5, Val),
if Enc7@element =:= unavailable ->
<<0:2>>;
Enc7@element =:= off ->
<<1:2>>;
Enc7@element =:= on ->
<<2:2>>;
Enc7@element =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute brakeBoost(5) with type ENUMERATED
Enc9@element = element(6, Val),
if Enc9@element =:= unavailable ->
<<0:2>>;
Enc9@element =:= off ->
<<1:2>>;
Enc9@element =:= on ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc9@element}}})
end
end|begin
%% attribute auxBrakes(6) with type ENUMERATED
Enc11@element = element(7, Val),
if Enc11@element =:= unavailable ->
<<0:2>>;
Enc11@element =:= off ->
<<1:2>>;
Enc11@element =:= on ->
<<2:2>>;
Enc11@element =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc11@element}}})
end
end].


dec_BrakeSystemStatus(Bytes) ->

%% attribute wheelBrakes(1) with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:5/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute traction(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V2@Int2,V2@Buf1}
end,

%% attribute abs(3) with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V3@Int2,V3@Buf1}
end,

%% attribute scs(4) with type ENUMERATED
{Term4,Bytes4} = begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V4@Int2,V4@Buf1}
end,

%% attribute brakeBoost(5) with type ENUMERATED
{Term5,Bytes5} = begin
<<V5@V0:2,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
_ -> exit({error,{asn1,{decode_enumerated,V5@V0}}})
end,
{V5@Int2,V5@Buf1}
end,

%% attribute auxBrakes(6) with type ENUMERATED
{Term6,Bytes6} = begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> reserved
end,
{V6@Int2,V6@Buf1}
end,
Res1 = {'BrakeSystemStatus',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes6}.

enc_BSMcoreData(Val) ->
[begin
%% attribute msgCnt(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 7 =:= 0 ->
<<Enc1@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute id(2) with type OCTET STRING
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 4 ->
Enc3@element
end
end,
begin
%% attribute secMark(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute lat(4) with type INTEGER
Enc7@element = element(5, Val),
Enc7@element@sub = Enc7@element - -900000000,
if 0 =< Enc7@element@sub, Enc7@element@sub < 1800000002 ->
<<Enc7@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute long(5) with type INTEGER
Enc9@element = element(6, Val),
Enc9@element@sub = Enc9@element - -1799999999,
if 0 =< Enc9@element@sub, Enc9@element@sub < 3600000001 ->
<<Enc9@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute elev(6) with type INTEGER
Enc11@element = element(7, Val),
Enc11@element@sub = Enc11@element - -4096,
if Enc11@element@sub bsr 16 =:= 0 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute accuracy(7) with type PositionalAccuracy
Enc13@element = element(8, Val),
enc_PositionalAccuracy(Enc13@element)
end,
begin
%% attribute transmission(8) with type ENUMERATED
Enc14@element = element(9, Val),
if Enc14@element =:= neutral ->
<<0:3>>;
Enc14@element =:= park ->
<<1:3>>;
Enc14@element =:= forwardGears ->
<<2:3>>;
Enc14@element =:= reverseGears ->
<<3:3>>;
Enc14@element =:= reserved1 ->
<<4:3>>;
Enc14@element =:= reserved2 ->
<<5:3>>;
Enc14@element =:= reserved3 ->
<<6:3>>;
Enc14@element =:= unavailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end,
begin
%% attribute speed(9) with type INTEGER
Enc16@element = element(10, Val),
if Enc16@element bsr 13 =:= 0 ->
<<Enc16@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute heading(10) with type INTEGER
Enc18@element = element(11, Val),
if 0 =< Enc18@element, Enc18@element < 28801 ->
<<Enc18@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end,
begin
%% attribute angle(11) with type INTEGER
Enc20@element = element(12, Val),
Enc20@element@sub = Enc20@element - -126,
if 0 =< Enc20@element@sub, Enc20@element@sub < 254 ->
Enc20@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end,
begin
%% attribute accelSet(12) with type AccelerationSet4Way
Enc22@element = element(13, Val),
enc_AccelerationSet4Way(Enc22@element)
end,
begin
%% attribute brakes(13) with type BrakeSystemStatus
Enc23@element = element(14, Val),
enc_BrakeSystemStatus(Enc23@element)
end|begin
%% attribute size(14) with type VehicleSize
Enc24@element = element(15, Val),
enc_VehicleSize(Enc24@element)
end].


dec_BSMcoreData(Bytes) ->

%% attribute msgCnt(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute id(2) with type OCTET STRING
{Term2,Bytes2} = begin
<<V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end,

%% attribute secMark(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute lat(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:31,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -900000000,
{V4@Add2,V4@Buf1}
end,

%% attribute long(5) with type INTEGER
{Term5,Bytes5} = begin
<<V5@V0:32,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -1799999999,
{V5@Add2,V5@Buf1}
end,

%% attribute elev(6) with type INTEGER
{Term6,Bytes6} = begin
<<V6@V0:16,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + -4096,
{V6@Add2,V6@Buf1}
end,

%% attribute accuracy(7) with type PositionalAccuracy
{Term7,Bytes7} = dec_PositionalAccuracy(Bytes6),

%% attribute transmission(8) with type ENUMERATED
{Term8,Bytes8} = begin
<<V7@V0:3,V7@Buf1/bitstring>> = Bytes7,
V7@Int2 = case V7@V0 of
0 -> neutral;
1 -> park;
2 -> forwardGears;
3 -> reverseGears;
4 -> reserved1;
5 -> reserved2;
6 -> reserved3;
7 -> unavailable
end,
{V7@Int2,V7@Buf1}
end,

%% attribute speed(9) with type INTEGER
{Term9,Bytes9} = begin
<<V8@V0:13,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end,

%% attribute heading(10) with type INTEGER
{Term10,Bytes10} = begin
<<V9@V0:15,V9@Buf1/bitstring>> = Bytes9,
{V9@V0,V9@Buf1}
end,

%% attribute angle(11) with type INTEGER
{Term11,Bytes11} = begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes10,
V10@Add2 = V10@V0 + -126,
{V10@Add2,V10@Buf1}
end,

%% attribute accelSet(12) with type AccelerationSet4Way
{Term12,Bytes12} = dec_AccelerationSet4Way(Bytes11),

%% attribute brakes(13) with type BrakeSystemStatus
{Term13,Bytes13} = dec_BrakeSystemStatus(Bytes12),

%% attribute size(14) with type VehicleSize
{Term14,Bytes14} = dec_VehicleSize(Bytes13),
Res1 = {'BSMcoreData',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14},
{Res1,Bytes14}.

enc_BumperHeights(Val) ->
[begin
%% attribute front(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 7 =:= 0 ->
<<Enc1@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute rear(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 7 =:= 0 ->
<<Enc3@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_BumperHeights(Bytes) ->

%% attribute front(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute rear(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'BumperHeights',Term1,Term2},
{Res1,Bytes2}.

enc_Circle(Val) ->
[begin
%% attribute center(1) with type Position3D
Enc1@element = element(2, Val),
enc_Position3D(Enc1@element)
end,
begin
%% attribute radius(2) with type INTEGER
Enc2@element = element(3, Val),
if Enc2@element bsr 12 =:= 0 ->
<<Enc2@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute units(3) with type ENUMERATED
Enc4@element = element(4, Val),
if Enc4@element =:= centimeter ->
<<0:3>>;
Enc4@element =:= 'cm2-5' ->
<<1:3>>;
Enc4@element =:= decimeter ->
<<2:3>>;
Enc4@element =:= meter ->
<<3:3>>;
Enc4@element =:= kilometer ->
<<4:3>>;
Enc4@element =:= foot ->
<<5:3>>;
Enc4@element =:= yard ->
<<6:3>>;
Enc4@element =:= mile ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc4@element}}})
end
end].


dec_Circle(Bytes) ->

%% attribute center(1) with type Position3D
{Term1,Bytes1} = dec_Position3D(Bytes),

%% attribute radius(2) with type INTEGER
{Term2,Bytes2} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,

%% attribute units(3) with type ENUMERATED
{Term3,Bytes3} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> centimeter;
1 -> 'cm2-5';
2 -> decimeter;
3 -> meter;
4 -> kilometer;
5 -> foot;
6 -> yard;
7 -> mile
end,
{V2@Int2,V2@Buf1}
end,
Res1 = {'Circle',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_ComputedLane(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute referenceLaneId(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element bsr 8 =:= 0 ->
Enc6@element;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute offsetXaxis(2) with type CHOICE
Enc8@element = element(3, Val),
enc_ComputedLane_offsetXaxis(Enc8@element)
end,
begin
%% attribute offsetYaxis(3) with type CHOICE
Enc9@element = element(4, Val),
enc_ComputedLane_offsetYaxis(Enc9@element)
end,
begin
%% attribute rotateXY(4) with type INTEGER
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
0 =< Enc10@element, Enc10@element < 28801 ->
<<Enc10@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute scaleXaxis(5) with type INTEGER
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@element@sub = Enc13@element - -2048,
if Enc13@element@sub bsr 12 =:= 0 ->
<<Enc13@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end
end
end,
begin
%% attribute scaleYaxis(6) with type INTEGER
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - -2048,
if Enc16@element@sub bsr 12 =:= 0 ->
<<Enc16@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end
end
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_ComputedLane_regional(Enc19@element)
end
end].
enc_ComputedLane_offsetXaxis(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= small ->
begin
ChoiceVal@sub = ChoiceVal - -2047,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 4095 ->
<<0:1,ChoiceVal@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= large ->
begin
ChoiceVal@sub = ChoiceVal - -32767,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
<<1:1,ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end
end.
enc_ComputedLane_offsetYaxis(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= small ->
begin
ChoiceVal@sub = ChoiceVal - -2047,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 4095 ->
<<0:1,ChoiceVal@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= large ->
begin
ChoiceVal@sub = ChoiceVal - -32767,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
<<1:1,ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end
end.
enc_ComputedLane_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ComputedLane_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ComputedLane_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ComputedLane(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute referenceLaneId(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute offsetXaxis(2) with type CHOICE
{Term2,Bytes4} = dec_ComputedLane_offsetXaxis(Bytes3),

%% attribute offsetYaxis(3) with type CHOICE
{Term3,Bytes5} = dec_ComputedLane_offsetYaxis(Bytes4),

%% attribute rotateXY(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:15,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute scaleXaxis(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes6,
V5@Add2 = V5@V0 + -2048,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute scaleYaxis(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:12,V6@Buf1/bitstring>> = Bytes7,
V6@Add2 = V6@V0 + -2048,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_ComputedLane_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V7@V0,V7@Buf1} = case Bytes9 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'ComputedLane',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_ComputedLane_offsetXaxis(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2047,
{V2@Add2,V2@Buf1}
end
end,
{{small,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + -32767,
{V3@Add2,V3@Buf1}
end
end,
{{large,Val},NewBytes}
end.

dec_ComputedLane_offsetYaxis(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2047,
{V2@Add2,V2@Buf1}
end
end,
{{small,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + -32767,
{V3@Add2,V3@Buf1}
end
end,
{{large,Val},NewBytes}
end.

dec_ComputedLane_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components35(V1@Add2, V1@Buf1, []).


dec_ComputedLane_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_ConfidenceSet(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute accelConfidence(1) with type AccelSteerYawRateConfidence
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_AccelSteerYawRateConfidence(Enc9@element)
end
end,
begin
%% attribute speedConfidence(2) with type SpeedandHeadingandThrottleConfidence
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedandHeadingandThrottleConfidence(Enc11@element)
end
end,
begin
%% attribute timeConfidence(3) with type ENUMERATED
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element =:= unavailable ->
<<0:6>>;
Enc13@element =:= 'time-100-000' ->
<<1:6>>;
Enc13@element =:= 'time-050-000' ->
<<2:6>>;
Enc13@element =:= 'time-020-000' ->
<<3:6>>;
Enc13@element =:= 'time-010-000' ->
<<4:6>>;
Enc13@element =:= 'time-002-000' ->
<<5:6>>;
Enc13@element =:= 'time-001-000' ->
<<6:6>>;
Enc13@element =:= 'time-000-500' ->
<<7:6>>;
Enc13@element =:= 'time-000-200' ->
<<8:6>>;
Enc13@element =:= 'time-000-100' ->
<<9:6>>;
Enc13@element =:= 'time-000-050' ->
<<10:6>>;
Enc13@element =:= 'time-000-020' ->
<<11:6>>;
Enc13@element =:= 'time-000-010' ->
<<12:6>>;
Enc13@element =:= 'time-000-005' ->
<<13:6>>;
Enc13@element =:= 'time-000-002' ->
<<14:6>>;
Enc13@element =:= 'time-000-001' ->
<<15:6>>;
Enc13@element =:= 'time-000-000-5' ->
<<16:6>>;
Enc13@element =:= 'time-000-000-2' ->
<<17:6>>;
Enc13@element =:= 'time-000-000-1' ->
<<18:6>>;
Enc13@element =:= 'time-000-000-05' ->
<<19:6>>;
Enc13@element =:= 'time-000-000-02' ->
<<20:6>>;
Enc13@element =:= 'time-000-000-01' ->
<<21:6>>;
Enc13@element =:= 'time-000-000-005' ->
<<22:6>>;
Enc13@element =:= 'time-000-000-002' ->
<<23:6>>;
Enc13@element =:= 'time-000-000-001' ->
<<24:6>>;
Enc13@element =:= 'time-000-000-000-5' ->
<<25:6>>;
Enc13@element =:= 'time-000-000-000-2' ->
<<26:6>>;
Enc13@element =:= 'time-000-000-000-1' ->
<<27:6>>;
Enc13@element =:= 'time-000-000-000-05' ->
<<28:6>>;
Enc13@element =:= 'time-000-000-000-02' ->
<<29:6>>;
Enc13@element =:= 'time-000-000-000-01' ->
<<30:6>>;
Enc13@element =:= 'time-000-000-000-005' ->
<<31:6>>;
Enc13@element =:= 'time-000-000-000-002' ->
<<32:6>>;
Enc13@element =:= 'time-000-000-000-001' ->
<<33:6>>;
Enc13@element =:= 'time-000-000-000-000-5' ->
<<34:6>>;
Enc13@element =:= 'time-000-000-000-000-2' ->
<<35:6>>;
Enc13@element =:= 'time-000-000-000-000-1' ->
<<36:6>>;
Enc13@element =:= 'time-000-000-000-000-05' ->
<<37:6>>;
Enc13@element =:= 'time-000-000-000-000-02' ->
<<38:6>>;
Enc13@element =:= 'time-000-000-000-000-01' ->
<<39:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc13@element}}})
end
end,
begin
%% attribute posConfidence(4) with type PositionConfidenceSet
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionConfidenceSet(Enc16@element)
end
end,
begin
%% attribute steerConfidence(5) with type ENUMERATED
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= unavailable ->
<<0:2>>;
Enc18@element =:= prec2deg ->
<<1:2>>;
Enc18@element =:= prec1deg ->
<<2:2>>;
Enc18@element =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc18@element}}})
end
end,
begin
%% attribute headingConfidence(6) with type ENUMERATED
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
Enc21@element =:= unavailable ->
<<0:3>>;
Enc21@element =:= prec10deg ->
<<1:3>>;
Enc21@element =:= prec05deg ->
<<2:3>>;
Enc21@element =:= prec01deg ->
<<3:3>>;
Enc21@element =:= 'prec0-1deg' ->
<<4:3>>;
Enc21@element =:= 'prec0-05deg' ->
<<5:3>>;
Enc21@element =:= 'prec0-01deg' ->
<<6:3>>;
Enc21@element =:= 'prec0-0125deg' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc21@element}}})
end
end|begin
%% attribute throttleConfidence(7) with type ENUMERATED
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element =:= unavailable ->
<<0:2>>;
Enc24@element =:= prec10percent ->
<<1:2>>;
Enc24@element =:= prec1percent ->
<<2:2>>;
Enc24@element =:= 'prec0-5percent' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc24@element}}})
end
end].


dec_ConfidenceSet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute accelConfidence(1) with type AccelSteerYawRateConfidence
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
dec_AccelSteerYawRateConfidence(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute speedConfidence(2) with type SpeedandHeadingandThrottleConfidence
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
dec_SpeedandHeadingandThrottleConfidence(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute timeConfidence(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> 'time-100-000';
2 -> 'time-050-000';
3 -> 'time-020-000';
4 -> 'time-010-000';
5 -> 'time-002-000';
6 -> 'time-001-000';
7 -> 'time-000-500';
8 -> 'time-000-200';
9 -> 'time-000-100';
10 -> 'time-000-050';
11 -> 'time-000-020';
12 -> 'time-000-010';
13 -> 'time-000-005';
14 -> 'time-000-002';
15 -> 'time-000-001';
16 -> 'time-000-000-5';
17 -> 'time-000-000-2';
18 -> 'time-000-000-1';
19 -> 'time-000-000-05';
20 -> 'time-000-000-02';
21 -> 'time-000-000-01';
22 -> 'time-000-000-005';
23 -> 'time-000-000-002';
24 -> 'time-000-000-001';
25 -> 'time-000-000-000-5';
26 -> 'time-000-000-000-2';
27 -> 'time-000-000-000-1';
28 -> 'time-000-000-000-05';
29 -> 'time-000-000-000-02';
30 -> 'time-000-000-000-01';
31 -> 'time-000-000-000-005';
32 -> 'time-000-000-000-002';
33 -> 'time-000-000-000-001';
34 -> 'time-000-000-000-000-5';
35 -> 'time-000-000-000-000-2';
36 -> 'time-000-000-000-000-1';
37 -> 'time-000-000-000-000-05';
38 -> 'time-000-000-000-000-02';
39 -> 'time-000-000-000-000-01';
_ -> exit({error,{asn1,{decode_enumerated,V3@V0}}})
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute posConfidence(4) with type PositionConfidenceSet
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
dec_PositionConfidenceSet(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute steerConfidence(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes6,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute headingConfidence(6) with type ENUMERATED
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes7,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> prec10deg;
2 -> prec05deg;
3 -> prec01deg;
4 -> 'prec0-1deg';
5 -> 'prec0-05deg';
6 -> 'prec0-01deg';
7 -> 'prec0-0125deg'
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute throttleConfidence(7) with type ENUMERATED
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes8,
V6@Int2 = case V6@V0 of
0 -> unavailable;
1 -> prec10percent;
2 -> prec1percent;
3 -> 'prec0-5percent'
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V7@V0,V7@Buf1} = case Bytes9 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'ConfidenceSet',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.

enc_ConnectingLane(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute lane(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute maneuver(2) with type BIT STRING
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@bs = try bit_string_name2pos_36(Enc4@element) of
Enc5@positions ->
bitstring_from_positions(Enc5@positions, 12)
catch throw:invalid ->
adjust_trailing_zeroes(Enc4@element, 12)
end,
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 12 ->
Enc5@bs
end
end
end
end].


dec_ConnectingLane(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute lane(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute maneuver(2) with type BIT STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:12/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{maneuverStraightAllowed,0},{maneuverLeftAllowed,1},{maneuverRightAllowed,2},{maneuverUTurnAllowed,3},{maneuverLeftTurnOnRedAllowed,4},{maneuverRightTurnOnRedAllowed,5},{maneuverLaneChangeAllowed,6},{maneuverNoStoppingAllowed,7},{yieldAllwaysRequired,8},{goWithHalt,9},{caution,10},{reserved1,11}]),V3@Buf1},
{V3@V2,V3@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
Res1 = {'ConnectingLane',Term1,Term2},
{Res1,Bytes3}.

enc_Connection(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute connectingLane(1) with type ConnectingLane
Enc5@element = element(2, Val),
enc_ConnectingLane(Enc5@element)
end,
begin
%% attribute remoteIntersection(2) with type IntersectionReferenceID
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionReferenceID(Enc6@element)
end
end,
begin
%% attribute signalGroup(3) with type INTEGER
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 8 =:= 0 ->
Enc8@element;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute userClass(4) with type INTEGER
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element bsr 8 =:= 0 ->
Enc11@element;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end|begin
%% attribute connectionID(5) with type INTEGER
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element bsr 8 =:= 0 ->
[Enc14@element];
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end].


dec_Connection(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute connectingLane(1) with type ConnectingLane
{Term1,Bytes2} = dec_ConnectingLane(Bytes1),

%% attribute remoteIntersection(2) with type IntersectionReferenceID
{Term2,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
dec_IntersectionReferenceID(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute signalGroup(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes3,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute userClass(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes4,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute connectionID(5) with type INTEGER
{Term5,Bytes6} = case Opt band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,
Res1 = {'Connection',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes6}.

enc_ConnectionManeuverAssist(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute connectionID(1) with type INTEGER
Enc7@element = element(2, Val),
if Enc7@element bsr 8 =:= 0 ->
Enc7@element;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute queueLength(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
0 =< Enc9@element, Enc9@element < 10001 ->
<<Enc9@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute availableStorageLength(3) with type INTEGER
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 10001 ->
<<Enc12@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute waitOnStop(4) with type BOOLEAN
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element =:= false ->
<<0:1>>;
Enc15@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc15@element}}})
end
end,
begin
%% attribute pedBicycleDetect(5) with type BOOLEAN
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= false ->
<<0:1>>;
Enc18@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc18@element}}})
end
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConnectionManeuverAssist_regional(Enc21@element)
end
end].
enc_ConnectionManeuverAssist_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ConnectionManeuverAssist_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ConnectionManeuverAssist_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ConnectionManeuverAssist(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute connectionID(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute queueLength(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute availableStorageLength(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:14,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute waitOnStop(4) with type BOOLEAN
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute pedBicycleDetect(5) with type BOOLEAN
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_ConnectionManeuverAssist_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'ConnectionManeuverAssist',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_ConnectionManeuverAssist_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components37(V1@Add2, V1@Buf1, []).


dec_ConnectionManeuverAssist_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_ConnectsToList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_Connection(Comp) || Comp <- Val]]
end.



dec_ConnectsToList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components38(V1@Add2, V1@Buf1, []).

enc_DataParameters(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute processMethod(1) with type IA5String
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = length(Enc6@element),
Enc7@bin = encode_chars(Enc6@element, 7),
Enc7@len@sub = Enc7@len - 1,
if 0 =< Enc7@len@sub, Enc7@len@sub < 255 ->
[Enc7@len@sub|Enc7@bin]
end
end
end
end,
begin
%% attribute processAgency(2) with type IA5String
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = length(Enc9@element),
Enc10@bin = encode_chars(Enc9@element, 7),
Enc10@len@sub = Enc10@len - 1,
if 0 =< Enc10@len@sub, Enc10@len@sub < 255 ->
[Enc10@len@sub|Enc10@bin]
end
end
end
end,
begin
%% attribute lastCheckedDate(3) with type IA5String
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = length(Enc12@element),
Enc13@bin = encode_chars(Enc12@element, 7),
Enc13@len@sub = Enc13@len - 1,
if 0 =< Enc13@len@sub, Enc13@len@sub < 255 ->
[Enc13@len@sub|Enc13@bin]
end
end
end
end|begin
%% attribute geoidUsed(4) with type IA5String
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = length(Enc15@element),
Enc16@bin = encode_chars(Enc15@element, 7),
Enc16@len@sub = Enc16@len - 1,
if 0 =< Enc16@len@sub, Enc16@len@sub < 255 ->
[Enc16@len@sub|Enc16@bin]
end
end
end
end].


dec_DataParameters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute processMethod(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute processAgency(2) with type IA5String
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:7,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V5,V4@Buf6}  = {decode_chars(V4@V3, 7),V4@Buf4},
{V4@V5,V4@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute lastCheckedDate(3) with type IA5String
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
<<V5@V3:V5@Add2/binary-unit:7,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V5,V5@Buf6}  = {decode_chars(V5@V3, 7),V5@Buf4},
{V5@V5,V5@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute geoidUsed(4) with type IA5String
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
<<V6@V3:V6@Add2/binary-unit:7,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V5,V6@Buf6}  = {decode_chars(V6@V3, 7),V6@Buf4},
{V6@V5,V6@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'DataParameters',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_DDate(Val) ->
[begin
%% attribute year(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 12 =:= 0 ->
<<Enc1@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute month(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 13 ->
<<Enc3@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute day(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 5 =:= 0 ->
<<Enc5@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_DDate(Bytes) ->

%% attribute year(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute day(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'DDate',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_DDateTime(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute year(1) with type INTEGER
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 12 =:= 0 ->
<<Enc8@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute month(2) with type INTEGER
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
0 =< Enc11@element, Enc11@element < 13 ->
<<Enc11@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute day(3) with type INTEGER
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element bsr 5 =:= 0 ->
<<Enc14@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute hour(4) with type INTEGER
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 5 =:= 0 ->
<<Enc17@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end,
begin
%% attribute minute(5) with type INTEGER
Enc20@element = element(6, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
0 =< Enc20@element, Enc20@element < 61 ->
<<Enc20@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end,
begin
%% attribute second(6) with type INTEGER
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
Enc23@element bsr 16 =:= 0 ->
<<Enc23@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc23@element}}})
end
end|begin
%% attribute offset(7) with type INTEGER
Enc26@element = element(8, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@element@sub = Enc26@element - -840,
if 0 =< Enc26@element@sub, Enc26@element@sub < 1681 ->
<<Enc26@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc26@element}}})
end
end
end
end].


dec_DDateTime(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute year(1) with type INTEGER
{Term1,Bytes2} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute day(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute hour(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute minute(5) with type INTEGER
{Term5,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute second(6) with type INTEGER
{Term6,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:16,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute offset(7) with type INTEGER
{Term7,Bytes8} = case Opt band 1 of
1 ->
begin
<<V8@V0:11,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + -840,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,
Res1 = {'DDateTime',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes8}.

enc_DFullTime(Val) ->
[begin
%% attribute year(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 12 =:= 0 ->
<<Enc1@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute month(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 13 ->
<<Enc3@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute day(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 5 =:= 0 ->
<<Enc5@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute hour(4) with type INTEGER
Enc7@element = element(5, Val),
if Enc7@element bsr 5 =:= 0 ->
<<Enc7@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end|begin
%% attribute minute(5) with type INTEGER
Enc9@element = element(6, Val),
if 0 =< Enc9@element, Enc9@element < 61 ->
<<Enc9@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end].


dec_DFullTime(Bytes) ->

%% attribute year(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute day(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute hour(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute minute(5) with type INTEGER
{Term5,Bytes5} = begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,
Res1 = {'DFullTime',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes5}.

enc_DMonthDay(Val) ->
[begin
%% attribute month(1) with type INTEGER
Enc1@element = element(2, Val),
if 0 =< Enc1@element, Enc1@element < 13 ->
<<Enc1@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute day(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 5 =:= 0 ->
<<Enc3@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_DMonthDay(Bytes) ->

%% attribute month(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute day(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'DMonthDay',Term1,Term2},
{Res1,Bytes2}.

enc_DTime(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute hour(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element bsr 5 =:= 0 ->
<<Enc2@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end,
begin
%% attribute minute(2) with type INTEGER
Enc4@element = element(3, Val),
if 0 =< Enc4@element, Enc4@element < 61 ->
<<Enc4@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute second(3) with type INTEGER
Enc6@element = element(4, Val),
if Enc6@element bsr 16 =:= 0 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end|begin
%% attribute offset(4) with type INTEGER
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - -840,
if 0 =< Enc8@element@sub, Enc8@element@sub < 1681 ->
<<Enc8@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end].


dec_DTime(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute hour(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute minute(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute second(3) with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute offset(4) with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:11,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -840,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'DTime',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.

enc_DYearMonth(Val) ->
[begin
%% attribute year(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 12 =:= 0 ->
<<Enc1@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute month(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 13 ->
<<Enc3@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_DYearMonth(Bytes) ->

%% attribute year(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'DYearMonth',Term1,Term2},
{Res1,Bytes2}.

enc_DisabledVehicle(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute statusDetails(1) with type INTEGER
Enc3@element = element(2, Val),
if Enc3@element bsr 16 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute locationDetails(2) with type ENUMERATED
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
Enc5@element =:= 'on-bridges' ->
<<0:1,0:7>>;
Enc5@element =:= 'in-tunnels' ->
<<0:1,1:7>>;
Enc5@element =:= 'entering-or-leaving-tunnels' ->
<<0:1,2:7>>;
Enc5@element =:= 'on-ramps' ->
<<0:1,3:7>>;
Enc5@element =:= 'in-road-construction-area' ->
<<0:1,4:7>>;
Enc5@element =:= 'around-a-curve' ->
<<0:1,5:7>>;
Enc5@element =:= 'on-minor-roads' ->
<<0:1,6:7>>;
Enc5@element =:= 'in-the-opposing-lanes' ->
<<0:1,7:7>>;
Enc5@element =:= 'adjacent-to-roadway' ->
<<0:1,8:7>>;
Enc5@element =:= 'on-bend' ->
<<0:1,9:7>>;
Enc5@element =:= 'entire-intersection' ->
<<0:1,10:7>>;
Enc5@element =:= 'in-the-median' ->
<<0:1,11:7>>;
Enc5@element =:= 'moved-to-side-of-road' ->
<<0:1,12:7>>;
Enc5@element =:= 'moved-to-shoulder' ->
<<0:1,13:7>>;
Enc5@element =:= 'on-the-roadway' ->
<<0:1,14:7>>;
Enc5@element =:= 'in-shaded-areas' ->
<<0:1,15:7>>;
Enc5@element =:= 'in-low-lying-areas' ->
<<0:1,16:7>>;
Enc5@element =:= 'in-the-downtown-area' ->
<<0:1,17:7>>;
Enc5@element =:= 'in-the-inner-city-area' ->
<<0:1,18:7>>;
Enc5@element =:= 'in-parts' ->
<<0:1,19:7>>;
Enc5@element =:= 'in-some-places' ->
<<0:1,20:7>>;
Enc5@element =:= 'in-the-ditch' ->
<<0:1,21:7>>;
Enc5@element =:= 'in-the-valley' ->
<<0:1,22:7>>;
Enc5@element =:= 'on-hill-top' ->
<<0:1,23:7>>;
Enc5@element =:= 'near-the-foothills' ->
<<0:1,24:7>>;
Enc5@element =:= 'at-high-altitudes' ->
<<0:1,25:7>>;
Enc5@element =:= 'near-the-lake' ->
<<0:1,26:7>>;
Enc5@element =:= 'near-the-shore' ->
<<0:1,27:7>>;
Enc5@element =:= 'over-the-crest-of-a-hill' ->
<<0:1,28:7>>;
Enc5@element =:= 'other-than-on-the-roadway' ->
<<0:1,29:7>>;
Enc5@element =:= 'near-the-beach' ->
<<0:1,30:7>>;
Enc5@element =:= 'near-beach-access-point' ->
<<0:1,31:7>>;
Enc5@element =:= 'lower-level' ->
<<0:1,32:7>>;
Enc5@element =:= 'upper-level' ->
<<0:1,33:7>>;
Enc5@element =:= airport ->
<<0:1,34:7>>;
Enc5@element =:= concourse ->
<<0:1,35:7>>;
Enc5@element =:= gate ->
<<0:1,36:7>>;
Enc5@element =:= 'baggage-claim' ->
<<0:1,37:7>>;
Enc5@element =:= 'customs-point' ->
<<0:1,38:7>>;
Enc5@element =:= station ->
<<0:1,39:7>>;
Enc5@element =:= platform ->
<<0:1,40:7>>;
Enc5@element =:= dock ->
<<0:1,41:7>>;
Enc5@element =:= depot ->
<<0:1,42:7>>;
Enc5@element =:= 'ev-charging-point' ->
<<0:1,43:7>>;
Enc5@element =:= 'information-welcome-point' ->
<<0:1,44:7>>;
Enc5@element =:= 'at-rest-area' ->
<<0:1,45:7>>;
Enc5@element =:= 'at-service-area' ->
<<0:1,46:7>>;
Enc5@element =:= 'at-weigh-station' ->
<<0:1,47:7>>;
Enc5@element =:= 'picnic-areas' ->
<<0:1,48:7>>;
Enc5@element =:= 'rest-area' ->
<<0:1,49:7>>;
Enc5@element =:= 'service-stations' ->
<<0:1,50:7>>;
Enc5@element =:= toilets ->
<<0:1,51:7>>;
Enc5@element =:= 'on-the-right' ->
<<0:1,52:7>>;
Enc5@element =:= 'on-the-left' ->
<<0:1,53:7>>;
Enc5@element =:= 'in-the-center' ->
<<0:1,54:7>>;
Enc5@element =:= 'in-the-opposite-direction' ->
<<0:1,55:7>>;
Enc5@element =:= 'cross-traffic' ->
<<0:1,56:7>>;
Enc5@element =:= 'northbound-traffic' ->
<<0:1,57:7>>;
Enc5@element =:= 'eastbound-traffic' ->
<<0:1,58:7>>;
Enc5@element =:= 'southbound-traffic' ->
<<0:1,59:7>>;
Enc5@element =:= 'westbound-traffic' ->
<<0:1,60:7>>;
Enc5@element =:= north ->
<<0:1,61:7>>;
Enc5@element =:= south ->
<<0:1,62:7>>;
Enc5@element =:= east ->
<<0:1,63:7>>;
Enc5@element =:= west ->
<<0:1,64:7>>;
Enc5@element =:= northeast ->
<<0:1,65:7>>;
Enc5@element =:= northwest ->
<<0:1,66:7>>;
Enc5@element =:= southeast ->
<<0:1,67:7>>;
Enc5@element =:= southwest ->
<<0:1,68:7>>;
Enc5@element =:= 'mountain-pass' ->
<<0:1,69:7>>;
Enc5@element =:= 'reservation-center' ->
<<0:1,70:7>>;
Enc5@element =:= 'nearby-basin' ->
<<0:1,71:7>>;
Enc5@element =:= 'on-tracks' ->
<<0:1,72:7>>;
Enc5@element =:= dip ->
<<0:1,73:7>>;
Enc5@element =:= 'traffic-circle' ->
<<0:1,74:7>>;
Enc5@element =:= 'park-and-ride-lot' ->
<<0:1,75:7>>;
Enc5@element =:= to ->
<<0:1,76:7>>;
Enc5@element =:= by ->
<<0:1,77:7>>;
Enc5@element =:= through ->
<<0:1,78:7>>;
Enc5@element =:= 'area-of' ->
<<0:1,79:7>>;
Enc5@element =:= under ->
<<0:1,80:7>>;
Enc5@element =:= over ->
<<0:1,81:7>>;
Enc5@element =:= from ->
<<0:1,82:7>>;
Enc5@element =:= approaching ->
<<0:1,83:7>>;
Enc5@element =:= 'entering-at' ->
<<0:1,84:7>>;
Enc5@element =:= 'exiting-at' ->
<<0:1,85:7>>;
Enc5@element =:= 'across-tracks' ->
<<0:1,86:7>>;
Enc5@element =:= 'in-street' ->
<<0:1,87:7>>;
Enc5@element =:= 'on-curve' ->
<<0:1,88:7>>;
Enc5@element =:= shoulder ->
<<0:1,89:7>>;
Enc5@element =:= crossover ->
<<0:1,90:7>>;
Enc5@element =:= 'cross-road' ->
<<0:1,91:7>>;
Enc5@element =:= 'side-road' ->
<<0:1,92:7>>;
Enc5@element =:= 'bus-stop' ->
<<0:1,93:7>>;
Enc5@element =:= intersection ->
<<0:1,94:7>>;
Enc5@element =:= 'roadside-park' ->
<<0:1,95:7>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end].


dec_DisabledVehicle(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute statusDetails(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute locationDetails(2) with type ENUMERATED
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> 'on-bridges';
1 -> 'in-tunnels';
2 -> 'entering-or-leaving-tunnels';
3 -> 'on-ramps';
4 -> 'in-road-construction-area';
5 -> 'around-a-curve';
6 -> 'on-minor-roads';
7 -> 'in-the-opposing-lanes';
8 -> 'adjacent-to-roadway';
9 -> 'on-bend';
10 -> 'entire-intersection';
11 -> 'in-the-median';
12 -> 'moved-to-side-of-road';
13 -> 'moved-to-shoulder';
14 -> 'on-the-roadway';
15 -> 'in-shaded-areas';
16 -> 'in-low-lying-areas';
17 -> 'in-the-downtown-area';
18 -> 'in-the-inner-city-area';
19 -> 'in-parts';
20 -> 'in-some-places';
21 -> 'in-the-ditch';
22 -> 'in-the-valley';
23 -> 'on-hill-top';
24 -> 'near-the-foothills';
25 -> 'at-high-altitudes';
26 -> 'near-the-lake';
27 -> 'near-the-shore';
28 -> 'over-the-crest-of-a-hill';
29 -> 'other-than-on-the-roadway';
30 -> 'near-the-beach';
31 -> 'near-beach-access-point';
32 -> 'lower-level';
33 -> 'upper-level';
34 -> airport;
35 -> concourse;
36 -> gate;
37 -> 'baggage-claim';
38 -> 'customs-point';
39 -> station;
40 -> platform;
41 -> dock;
42 -> depot;
43 -> 'ev-charging-point';
44 -> 'information-welcome-point';
45 -> 'at-rest-area';
46 -> 'at-service-area';
47 -> 'at-weigh-station';
48 -> 'picnic-areas';
49 -> 'rest-area';
50 -> 'service-stations';
51 -> toilets;
52 -> 'on-the-right';
53 -> 'on-the-left';
54 -> 'in-the-center';
55 -> 'in-the-opposite-direction';
56 -> 'cross-traffic';
57 -> 'northbound-traffic';
58 -> 'eastbound-traffic';
59 -> 'southbound-traffic';
60 -> 'westbound-traffic';
61 -> north;
62 -> south;
63 -> east;
64 -> west;
65 -> northeast;
66 -> northwest;
67 -> southeast;
68 -> southwest;
69 -> 'mountain-pass';
70 -> 'reservation-center';
71 -> 'nearby-basin';
72 -> 'on-tracks';
73 -> dip;
74 -> 'traffic-circle';
75 -> 'park-and-ride-lot';
76 -> to;
77 -> by;
78 -> through;
79 -> 'area-of';
80 -> under;
81 -> over;
82 -> from;
83 -> approaching;
84 -> 'entering-at';
85 -> 'exiting-at';
86 -> 'across-tracks';
87 -> 'in-street';
88 -> 'on-curve';
89 -> shoulder;
90 -> crossover;
91 -> 'cross-road';
92 -> 'side-road';
93 -> 'bus-stop';
94 -> intersection;
95 -> 'roadside-park';
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'DisabledVehicle',Term1,Term2},
{Res1,Bytes6}.

enc_EmergencyDetails(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute sspRights(1) with type INTEGER
Enc4@element = element(2, Val),
if Enc4@element bsr 5 =:= 0 ->
<<Enc4@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute sirenUse(2) with type ENUMERATED
Enc6@element = element(3, Val),
if Enc6@element =:= unavailable ->
<<0:2>>;
Enc6@element =:= notInUse ->
<<1:2>>;
Enc6@element =:= inUse ->
<<2:2>>;
Enc6@element =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end,
begin
%% attribute lightsUse(3) with type ENUMERATED
Enc8@element = element(4, Val),
if Enc8@element =:= unavailable ->
<<0:3>>;
Enc8@element =:= notInUse ->
<<1:3>>;
Enc8@element =:= inUse ->
<<2:3>>;
Enc8@element =:= yellowCautionLights ->
<<3:3>>;
Enc8@element =:= schooldBusLights ->
<<4:3>>;
Enc8@element =:= arrowSignsActive ->
<<5:3>>;
Enc8@element =:= slowMovingVehicle ->
<<6:3>>;
Enc8@element =:= freqStops ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc8@element}}})
end
end,
begin
%% attribute multi(4) with type ENUMERATED
Enc10@element = element(5, Val),
if Enc10@element =:= unavailable ->
<<0:2>>;
Enc10@element =:= singleVehicle ->
<<1:2>>;
Enc10@element =:= multiVehicle ->
<<2:2>>;
Enc10@element =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc10@element}}})
end
end,
begin
%% attribute events(5) with type PrivilegedEvents
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_PrivilegedEvents(Enc12@element)
end
end|begin
%% attribute responseType(6) with type ENUMERATED
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element =:= notInUseOrNotEquipped ->
<<0:1,0:3>>;
Enc14@element =:= emergency ->
<<0:1,1:3>>;
Enc14@element =:= nonEmergency ->
<<0:1,2:3>>;
Enc14@element =:= pursuit ->
<<0:1,3:3>>;
Enc14@element =:= stationary ->
<<0:1,4:3>>;
Enc14@element =:= slowMoving ->
<<0:1,5:3>>;
Enc14@element =:= stopAndGoMovement ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end].


dec_EmergencyDetails(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute sspRights(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute sirenUse(2) with type ENUMERATED
{Term2,Bytes4} = begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> reserved
end,
{V4@Int2,V4@Buf1}
end,

%% attribute lightsUse(3) with type ENUMERATED
{Term3,Bytes5} = begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> yellowCautionLights;
4 -> schooldBusLights;
5 -> arrowSignsActive;
6 -> slowMovingVehicle;
7 -> freqStops
end,
{V5@Int2,V5@Buf1}
end,

%% attribute multi(4) with type ENUMERATED
{Term4,Bytes6} = begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> unavailable;
1 -> singleVehicle;
2 -> multiVehicle;
3 -> reserved
end,
{V6@Int2,V6@Buf1}
end,

%% attribute events(5) with type PrivilegedEvents
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
dec_PrivilegedEvents(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute responseType(6) with type ENUMERATED
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:3,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> notInUseOrNotEquipped;
1 -> emergency;
2 -> nonEmergency;
3 -> pursuit;
4 -> stationary;
5 -> slowMoving;
6 -> stopAndGoMovement;
_ -> exit({error,{asn1,{decode_enumerated,V7@V3}}})
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'EmergencyDetails',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.

enc_EnabledLaneList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 4 =:= 0 ->
[<<Enc2@len@sub:4>>|[if Comp bsr 8 =:= 0 ->
[Comp];
true ->
exit({error,{asn1,{illegal_integer,Comp}}})
end || Comp <- Val]]
end.



dec_EnabledLaneList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components39(V1@Add2, V1@Buf1, []).

enc_EventDescription(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute typeEvent(1) with type INTEGER
Enc7@element = element(2, Val),
if Enc7@element bsr 16 =:= 0 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute description(2) with type SEQUENCE OF
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_EventDescription_description(Enc9@element)
end
end,
begin
%% attribute priority(3) with type OCTET STRING
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = byte_size(Enc11@element),
if Enc12@len =:= 1 ->
Enc11@element
end
end
end
end,
begin
%% attribute heading(4) with type BIT STRING
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@bs = try bit_string_name2pos_21(Enc14@element) of
Enc15@positions ->
bitstring_from_positions(Enc15@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc14@element, 16)
end,
Enc15@bits = bit_size(Enc15@bs),
if Enc15@bits =:= 16 ->
Enc15@bs
end
end
end
end,
begin
%% attribute extent(5) with type ENUMERATED
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element =:= useInstantlyOnly ->
<<0:4>>;
Enc17@element =:= useFor3meters ->
<<1:4>>;
Enc17@element =:= useFor10meters ->
<<2:4>>;
Enc17@element =:= useFor50meters ->
<<3:4>>;
Enc17@element =:= useFor100meters ->
<<4:4>>;
Enc17@element =:= useFor500meters ->
<<5:4>>;
Enc17@element =:= useFor1000meters ->
<<6:4>>;
Enc17@element =:= useFor5000meters ->
<<7:4>>;
Enc17@element =:= useFor10000meters ->
<<8:4>>;
Enc17@element =:= useFor50000meters ->
<<9:4>>;
Enc17@element =:= useFor100000meters ->
<<10:4>>;
Enc17@element =:= useFor500000meters ->
<<11:4>>;
Enc17@element =:= useFor1000000meters ->
<<12:4>>;
Enc17@element =:= useFor5000000meters ->
<<13:4>>;
Enc17@element =:= useFor10000000meters ->
<<14:4>>;
Enc17@element =:= forever ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc17@element}}})
end
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_EventDescription_regional(Enc20@element)
end
end].
enc_EventDescription_description(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp bsr 16 =:= 0 ->
<<Comp:16>>;
true ->
exit({error,{asn1,{illegal_integer,Comp}}})
end || Comp <- Val]]
end.

enc_EventDescription_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_EventDescription_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_EventDescription_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_EventDescription(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute typeEvent(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute description(2) with type SEQUENCE OF
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
dec_EventDescription_description(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute priority(3) with type OCTET STRING
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:1/binary-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute heading(4) with type BIT STRING
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:16/binary-unit:1,V5@Buf1/bitstring>> = Bytes5,
{V5@V2,V5@Buf3}  = {decode_named_bit_string(V5@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V5@Buf1},
{V5@V2,V5@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute extent(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:4,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> useInstantlyOnly;
1 -> useFor3meters;
2 -> useFor10meters;
3 -> useFor50meters;
4 -> useFor100meters;
5 -> useFor500meters;
6 -> useFor1000meters;
7 -> useFor5000meters;
8 -> useFor10000meters;
9 -> useFor50000meters;
10 -> useFor100000meters;
11 -> useFor500000meters;
12 -> useFor1000000meters;
13 -> useFor5000000meters;
14 -> useFor10000000meters;
15 -> forever
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_EventDescription_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'EventDescription',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_EventDescription_description(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components40(V1@Add2, V1@Buf1, []).


dec_EventDescription_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components41(V1@Add2, V1@Buf1, []).


dec_EventDescription_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_FullPositionVector(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(8, Val),
Enc6@element = element(9, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(10, Val),
Enc8@element = element(11, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute utcTime(1) with type DDateTime
Enc10@element = element(2, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_DDateTime(Enc10@element)
end
end,
begin
%% attribute long(2) with type INTEGER
Enc12@element = element(3, Val),
Enc12@element@sub = Enc12@element - -1799999999,
if 0 =< Enc12@element@sub, Enc12@element@sub < 3600000001 ->
<<Enc12@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute lat(3) with type INTEGER
Enc14@element = element(4, Val),
Enc14@element@sub = Enc14@element - -900000000,
if 0 =< Enc14@element@sub, Enc14@element@sub < 1800000002 ->
<<Enc14@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute elevation(4) with type INTEGER
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - -4096,
if Enc16@element@sub bsr 16 =:= 0 ->
<<Enc16@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end
end
end,
begin
%% attribute heading(5) with type INTEGER
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
0 =< Enc19@element, Enc19@element < 28801 ->
<<Enc19@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute speed(6) with type TransmissionAndSpeed
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransmissionAndSpeed(Enc22@element)
end
end,
begin
%% attribute posAccuracy(7) with type PositionalAccuracy
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionalAccuracy(Enc24@element)
end
end,
begin
%% attribute timeConfidence(8) with type ENUMERATED
Enc26@element = element(9, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
Enc26@element =:= unavailable ->
<<0:6>>;
Enc26@element =:= 'time-100-000' ->
<<1:6>>;
Enc26@element =:= 'time-050-000' ->
<<2:6>>;
Enc26@element =:= 'time-020-000' ->
<<3:6>>;
Enc26@element =:= 'time-010-000' ->
<<4:6>>;
Enc26@element =:= 'time-002-000' ->
<<5:6>>;
Enc26@element =:= 'time-001-000' ->
<<6:6>>;
Enc26@element =:= 'time-000-500' ->
<<7:6>>;
Enc26@element =:= 'time-000-200' ->
<<8:6>>;
Enc26@element =:= 'time-000-100' ->
<<9:6>>;
Enc26@element =:= 'time-000-050' ->
<<10:6>>;
Enc26@element =:= 'time-000-020' ->
<<11:6>>;
Enc26@element =:= 'time-000-010' ->
<<12:6>>;
Enc26@element =:= 'time-000-005' ->
<<13:6>>;
Enc26@element =:= 'time-000-002' ->
<<14:6>>;
Enc26@element =:= 'time-000-001' ->
<<15:6>>;
Enc26@element =:= 'time-000-000-5' ->
<<16:6>>;
Enc26@element =:= 'time-000-000-2' ->
<<17:6>>;
Enc26@element =:= 'time-000-000-1' ->
<<18:6>>;
Enc26@element =:= 'time-000-000-05' ->
<<19:6>>;
Enc26@element =:= 'time-000-000-02' ->
<<20:6>>;
Enc26@element =:= 'time-000-000-01' ->
<<21:6>>;
Enc26@element =:= 'time-000-000-005' ->
<<22:6>>;
Enc26@element =:= 'time-000-000-002' ->
<<23:6>>;
Enc26@element =:= 'time-000-000-001' ->
<<24:6>>;
Enc26@element =:= 'time-000-000-000-5' ->
<<25:6>>;
Enc26@element =:= 'time-000-000-000-2' ->
<<26:6>>;
Enc26@element =:= 'time-000-000-000-1' ->
<<27:6>>;
Enc26@element =:= 'time-000-000-000-05' ->
<<28:6>>;
Enc26@element =:= 'time-000-000-000-02' ->
<<29:6>>;
Enc26@element =:= 'time-000-000-000-01' ->
<<30:6>>;
Enc26@element =:= 'time-000-000-000-005' ->
<<31:6>>;
Enc26@element =:= 'time-000-000-000-002' ->
<<32:6>>;
Enc26@element =:= 'time-000-000-000-001' ->
<<33:6>>;
Enc26@element =:= 'time-000-000-000-000-5' ->
<<34:6>>;
Enc26@element =:= 'time-000-000-000-000-2' ->
<<35:6>>;
Enc26@element =:= 'time-000-000-000-000-1' ->
<<36:6>>;
Enc26@element =:= 'time-000-000-000-000-05' ->
<<37:6>>;
Enc26@element =:= 'time-000-000-000-000-02' ->
<<38:6>>;
Enc26@element =:= 'time-000-000-000-000-01' ->
<<39:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc26@element}}})
end
end,
begin
%% attribute posConfidence(9) with type PositionConfidenceSet
Enc29@element = element(10, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionConfidenceSet(Enc29@element)
end
end|begin
%% attribute speedConfidence(10) with type SpeedandHeadingandThrottleConfidence
Enc31@element = element(11, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedandHeadingandThrottleConfidence(Enc31@element)
end
end].


dec_FullPositionVector(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute utcTime(1) with type DDateTime
{Term1,Bytes3} = case (Opt bsr 7) band 1 of
1 ->
dec_DDateTime(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute long(2) with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:32,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + -1799999999,
{V3@Add2,V3@Buf1}
end,

%% attribute lat(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:31,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + -900000000,
{V4@Add2,V4@Buf1}
end,

%% attribute elevation(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + -4096,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute heading(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V6@V0:15,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute speed(6) with type TransmissionAndSpeed
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
dec_TransmissionAndSpeed(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute posAccuracy(7) with type PositionalAccuracy
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
dec_PositionalAccuracy(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute timeConfidence(8) with type ENUMERATED
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:6,V7@Buf1/bitstring>> = Bytes9,
V7@Int2 = case V7@V0 of
0 -> unavailable;
1 -> 'time-100-000';
2 -> 'time-050-000';
3 -> 'time-020-000';
4 -> 'time-010-000';
5 -> 'time-002-000';
6 -> 'time-001-000';
7 -> 'time-000-500';
8 -> 'time-000-200';
9 -> 'time-000-100';
10 -> 'time-000-050';
11 -> 'time-000-020';
12 -> 'time-000-010';
13 -> 'time-000-005';
14 -> 'time-000-002';
15 -> 'time-000-001';
16 -> 'time-000-000-5';
17 -> 'time-000-000-2';
18 -> 'time-000-000-1';
19 -> 'time-000-000-05';
20 -> 'time-000-000-02';
21 -> 'time-000-000-01';
22 -> 'time-000-000-005';
23 -> 'time-000-000-002';
24 -> 'time-000-000-001';
25 -> 'time-000-000-000-5';
26 -> 'time-000-000-000-2';
27 -> 'time-000-000-000-1';
28 -> 'time-000-000-000-05';
29 -> 'time-000-000-000-02';
30 -> 'time-000-000-000-01';
31 -> 'time-000-000-000-005';
32 -> 'time-000-000-000-002';
33 -> 'time-000-000-000-001';
34 -> 'time-000-000-000-000-5';
35 -> 'time-000-000-000-000-2';
36 -> 'time-000-000-000-000-1';
37 -> 'time-000-000-000-000-05';
38 -> 'time-000-000-000-000-02';
39 -> 'time-000-000-000-000-01';
_ -> exit({error,{asn1,{decode_enumerated,V7@V0}}})
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute posConfidence(9) with type PositionConfidenceSet
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_PositionConfidenceSet(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute speedConfidence(10) with type SpeedandHeadingandThrottleConfidence
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_SpeedandHeadingandThrottleConfidence(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V8@V0,V8@Buf1} = case Bytes12 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'FullPositionVector',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.

enc_GenericLane(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(9, Val),
Enc6@element = element(10, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(11, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute laneID(1) with type INTEGER
Enc9@element = element(2, Val),
if Enc9@element bsr 8 =:= 0 ->
Enc9@element;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute name(2) with type IA5String
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = length(Enc11@element),
Enc12@bin = encode_chars(Enc11@element, 7),
Enc12@len@sub = Enc12@len - 1,
if 0 =< Enc12@len@sub, Enc12@len@sub < 63 ->
[<<Enc12@len@sub:6>>|Enc12@bin]
end
end
end
end,
begin
%% attribute ingressApproach(3) with type INTEGER
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element bsr 4 =:= 0 ->
<<Enc14@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute egressApproach(4) with type INTEGER
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 4 =:= 0 ->
<<Enc17@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end,
begin
%% attribute laneAttributes(5) with type LaneAttributes
Enc20@element = element(6, Val),
enc_LaneAttributes(Enc20@element)
end,
begin
%% attribute maneuvers(6) with type BIT STRING
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@bs = try bit_string_name2pos_36(Enc21@element) of
Enc22@positions ->
bitstring_from_positions(Enc22@positions, 12)
catch throw:invalid ->
adjust_trailing_zeroes(Enc21@element, 12)
end,
Enc22@bits = bit_size(Enc22@bs),
if Enc22@bits =:= 12 ->
Enc22@bs
end
end
end
end,
begin
%% attribute nodeList(7) with type NodeListXY
Enc24@element = element(8, Val),
enc_NodeListXY(Enc24@element)
end,
begin
%% attribute connectsTo(8) with type ConnectsToList
Enc25@element = element(9, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConnectsToList(Enc25@element)
end
end,
begin
%% attribute overlays(9) with type OverlayLaneList
Enc27@element = element(10, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
enc_OverlayLaneList(Enc27@element)
end
end|begin
%% attribute regional(10) with type SEQUENCE OF
Enc29@element = element(11, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
enc_GenericLane_regional(Enc29@element)
end
end].
enc_GenericLane_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_GenericLane_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_GenericLane_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_GenericLane(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute laneID(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute name(2) with type IA5String
{Term2,Bytes4} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:7,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V5,V4@Buf6}  = {decode_chars(V4@V3, 7),V4@Buf4},
{V4@V5,V4@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute ingressApproach(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute egressApproach(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V6@V0:4,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute laneAttributes(5) with type LaneAttributes
{Term5,Bytes7} = dec_LaneAttributes(Bytes6),

%% attribute maneuvers(6) with type BIT STRING
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V7@V0:12/binary-unit:1,V7@Buf1/bitstring>> = Bytes7,
{V7@V2,V7@Buf3}  = {decode_named_bit_string(V7@V0, [{maneuverStraightAllowed,0},{maneuverLeftAllowed,1},{maneuverRightAllowed,2},{maneuverUTurnAllowed,3},{maneuverLeftTurnOnRedAllowed,4},{maneuverRightTurnOnRedAllowed,5},{maneuverLaneChangeAllowed,6},{maneuverNoStoppingAllowed,7},{yieldAllwaysRequired,8},{goWithHalt,9},{caution,10},{reserved1,11}]),V7@Buf1},
{V7@V2,V7@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute nodeList(7) with type NodeListXY
{Term7,Bytes9} = dec_NodeListXY(Bytes8),

%% attribute connectsTo(8) with type ConnectsToList
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
dec_ConnectsToList(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute overlays(9) with type OverlayLaneList
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_OverlayLaneList(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute regional(10) with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_GenericLane_regional(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V8@V0,V8@Buf1} = case Bytes12 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'GenericLane',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.


dec_GenericLane_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components42(V1@Add2, V1@Buf1, []).


dec_GenericLane_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_GeographicalPath(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
if Enc9@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute name(1) with type IA5String
Enc11@element = element(2, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = length(Enc11@element),
Enc12@bin = encode_chars(Enc11@element, 7),
Enc12@len@sub = Enc12@len - 1,
if 0 =< Enc12@len@sub, Enc12@len@sub < 63 ->
[<<Enc12@len@sub:6>>|Enc12@bin]
end
end
end
end,
begin
%% attribute id(2) with type RoadSegmentReferenceID
Enc14@element = element(3, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_RoadSegmentReferenceID(Enc14@element)
end
end,
begin
%% attribute anchor(3) with type Position3D
Enc16@element = element(4, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_Position3D(Enc16@element)
end
end,
begin
%% attribute laneWidth(4) with type INTEGER
Enc18@element = element(5, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element bsr 15 =:= 0 ->
<<Enc18@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end,
begin
%% attribute directionality(5) with type ENUMERATED
Enc21@element = element(6, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
Enc21@element =:= unavailable ->
<<0:2>>;
Enc21@element =:= forward ->
<<1:2>>;
Enc21@element =:= reverse ->
<<2:2>>;
Enc21@element =:= both ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc21@element}}})
end
end,
begin
%% attribute closedPath(6) with type BOOLEAN
Enc24@element = element(7, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element =:= false ->
<<0:1>>;
Enc24@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc24@element}}})
end
end,
begin
%% attribute direction(7) with type BIT STRING
Enc27@element = element(8, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@bs = try bit_string_name2pos_21(Enc27@element) of
Enc28@positions ->
bitstring_from_positions(Enc28@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc27@element, 16)
end,
Enc28@bits = bit_size(Enc28@bs),
if Enc28@bits =:= 16 ->
Enc28@bs
end
end
end
end,
begin
%% attribute description(8) with type CHOICE
Enc30@element = element(9, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_GeographicalPath_description(Enc30@element)
end
end|begin
%% attribute regional(9) with type SEQUENCE OF
Enc32@element = element(10, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
enc_GeographicalPath_regional(Enc32@element)
end
end].
enc_GeographicalPath_description(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= path ->
[<<0:1,0:2>>|enc_OffsetSystem(ChoiceVal)];
ChoiceTag =:= geometry ->
[<<0:1,1:2>>|enc_GeometricProjection(ChoiceVal)];
ChoiceTag =:= oldRegion ->
[<<0:1,2:2>>|enc_ValidRegion(ChoiceVal)]
end.
enc_GeographicalPath_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_GeographicalPath_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_GeographicalPath_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_GeographicalPath(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute name(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute id(2) with type RoadSegmentReferenceID
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
dec_RoadSegmentReferenceID(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute anchor(3) with type Position3D
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
dec_Position3D(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute laneWidth(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:15,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute directionality(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:2,V5@Buf1/bitstring>> = Bytes6,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> forward;
2 -> reverse;
3 -> both
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute closedPath(6) with type BOOLEAN
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes7,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute direction(7) with type BIT STRING
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:16/binary-unit:1,V7@Buf1/bitstring>> = Bytes8,
{V7@V2,V7@Buf3}  = {decode_named_bit_string(V7@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V7@Buf1},
{V7@V2,V7@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute description(8) with type CHOICE
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
dec_GeographicalPath_description(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute regional(9) with type SEQUENCE OF
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_GeographicalPath_regional(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V8@V0,V8@Buf1} = case Bytes11 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'GeographicalPath',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.


dec_GeographicalPath_description(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_OffsetSystem(Bytes2)
end,
{{path,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_GeometricProjection(Bytes2)
end,
{{geometry,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_ValidRegion(Bytes2)
end,
{{oldRegion,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_GeographicalPath_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components43(V1@Add2, V1@Buf1, []).


dec_GeographicalPath_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_GeometricProjection(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute direction(1) with type BIT STRING
Enc5@element = element(2, Val),
Enc6@bs = try bit_string_name2pos_21(Enc5@element) of
Enc6@positions ->
bitstring_from_positions(Enc6@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc5@element, 16)
end,
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 16 ->
Enc6@bs
end
end,
begin
%% attribute extent(2) with type ENUMERATED
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element =:= useInstantlyOnly ->
<<0:4>>;
Enc7@element =:= useFor3meters ->
<<1:4>>;
Enc7@element =:= useFor10meters ->
<<2:4>>;
Enc7@element =:= useFor50meters ->
<<3:4>>;
Enc7@element =:= useFor100meters ->
<<4:4>>;
Enc7@element =:= useFor500meters ->
<<5:4>>;
Enc7@element =:= useFor1000meters ->
<<6:4>>;
Enc7@element =:= useFor5000meters ->
<<7:4>>;
Enc7@element =:= useFor10000meters ->
<<8:4>>;
Enc7@element =:= useFor50000meters ->
<<9:4>>;
Enc7@element =:= useFor100000meters ->
<<10:4>>;
Enc7@element =:= useFor500000meters ->
<<11:4>>;
Enc7@element =:= useFor1000000meters ->
<<12:4>>;
Enc7@element =:= useFor5000000meters ->
<<13:4>>;
Enc7@element =:= useFor10000000meters ->
<<14:4>>;
Enc7@element =:= forever ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute laneWidth(3) with type INTEGER
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element bsr 15 =:= 0 ->
<<Enc10@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute circle(4) with type Circle
Enc13@element = element(5, Val),
enc_Circle(Enc13@element)
end|begin
%% attribute regional(5) with type SEQUENCE OF
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_GeometricProjection_regional(Enc14@element)
end
end].
enc_GeometricProjection_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_GeometricProjection_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_GeometricProjection_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_GeometricProjection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute direction(1) with type BIT STRING
{Term1,Bytes3} = begin
<<V3@V0:16/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% attribute extent(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> useInstantlyOnly;
1 -> useFor3meters;
2 -> useFor10meters;
3 -> useFor50meters;
4 -> useFor100meters;
5 -> useFor500meters;
6 -> useFor1000meters;
7 -> useFor5000meters;
8 -> useFor10000meters;
9 -> useFor50000meters;
10 -> useFor100000meters;
11 -> useFor500000meters;
12 -> useFor1000000meters;
13 -> useFor5000000meters;
14 -> useFor10000000meters;
15 -> forever
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute laneWidth(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:15,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute circle(4) with type Circle
{Term4,Bytes6} = dec_Circle(Bytes5),

%% attribute regional(5) with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_GeometricProjection_regional(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'GeometricProjection',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.


dec_GeometricProjection_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components44(V1@Add2, V1@Buf1, []).


dec_GeometricProjection_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_Header(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute year(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element bsr 12 =:= 0 ->
<<Enc6@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute timeStamp(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
0 =< Enc9@element, Enc9@element < 527041 ->
<<Enc9@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute secMark(3) with type INTEGER
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element bsr 16 =:= 0 ->
<<Enc12@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end|begin
%% attribute msgIssueRevision(4) with type INTEGER
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element bsr 7 =:= 0 ->
<<Enc15@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end].


dec_Header(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute year(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:12,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute timeStamp(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:20,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute secMark(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute msgIssueRevision(4) with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'Header',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_IntersectionAccessPoint(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= lane ->
if ChoiceVal bsr 8 =:= 0 ->
[<<0:1,0:2,ChoiceVal:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= approach ->
if ChoiceVal bsr 4 =:= 0 ->
<<0:1,1:2,ChoiceVal:4>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= connection ->
if ChoiceVal bsr 8 =:= 0 ->
[<<0:1,2:2,ChoiceVal:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end.


dec_IntersectionAccessPoint(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{lane,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end
end,
{{approach,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes2,
{V4@V0,V4@Buf1}
end
end,
{{connection,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_IntersectionGeometry(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(9, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(10, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute name(1) with type IA5String
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@len = length(Enc7@element),
Enc8@bin = encode_chars(Enc7@element, 7),
Enc8@len@sub = Enc8@len - 1,
if 0 =< Enc8@len@sub, Enc8@len@sub < 63 ->
[<<Enc8@len@sub:6>>|Enc8@bin]
end
end
end
end,
begin
%% attribute id(2) with type IntersectionReferenceID
Enc10@element = element(3, Val),
enc_IntersectionReferenceID(Enc10@element)
end,
begin
%% attribute revision(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element bsr 7 =:= 0 ->
<<Enc11@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute refPoint(4) with type Position3D
Enc13@element = element(5, Val),
enc_Position3D(Enc13@element)
end,
begin
%% attribute laneWidth(5) with type INTEGER
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element bsr 15 =:= 0 ->
<<Enc14@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute speedLimits(6) with type SpeedLimitList
Enc17@element = element(7, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedLimitList(Enc17@element)
end
end,
begin
%% attribute laneSet(7) with type LaneList
Enc19@element = element(8, Val),
enc_LaneList(Enc19@element)
end,
begin
%% attribute preemptPriorityData(8) with type PreemptPriorityList
Enc20@element = element(9, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_PreemptPriorityList(Enc20@element)
end
end|begin
%% attribute regional(9) with type SEQUENCE OF
Enc22@element = element(10, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionGeometry_regional(Enc22@element)
end
end].
enc_IntersectionGeometry_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_IntersectionGeometry_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_IntersectionGeometry_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_IntersectionGeometry(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute name(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute id(2) with type IntersectionReferenceID
{Term2,Bytes4} = dec_IntersectionReferenceID(Bytes3),

%% attribute revision(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute refPoint(4) with type Position3D
{Term4,Bytes6} = dec_Position3D(Bytes5),

%% attribute laneWidth(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:15,V5@Buf1/bitstring>> = Bytes6,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute speedLimits(6) with type SpeedLimitList
{Term6,Bytes8} = case (Opt bsr 2) band 1 of
1 ->
dec_SpeedLimitList(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute laneSet(7) with type LaneList
{Term7,Bytes9} = dec_LaneList(Bytes8),

%% attribute preemptPriorityData(8) with type PreemptPriorityList
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
dec_PreemptPriorityList(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute regional(9) with type SEQUENCE OF
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_IntersectionGeometry_regional(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V6@V0,V6@Buf1} = case Bytes11 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'IntersectionGeometry',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.


dec_IntersectionGeometry_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components45(V1@Add2, V1@Buf1, []).


dec_IntersectionGeometry_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_IntersectionGeometryList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_IntersectionGeometry(Comp) || Comp <- Val]]
end.



dec_IntersectionGeometryList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components46(V1@Add2, V1@Buf1, []).

enc_IntersectionReferenceID(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute region(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element =:= asn1_NOVALUE ->
[];
Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute id(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_IntersectionReferenceID(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute region(1) with type INTEGER
{Term1,Bytes2} = case Opt band 1 of
1 ->
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute id(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'IntersectionReferenceID',Term1,Term2},
{Res1,Bytes3}.

enc_IntersectionState(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(10, Val),
Enc6@element = element(11, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute name(1) with type IA5String
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@element),
Enc9@bin = encode_chars(Enc8@element, 7),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 63 ->
[<<Enc9@len@sub:6>>|Enc9@bin]
end
end
end
end,
begin
%% attribute id(2) with type IntersectionReferenceID
Enc11@element = element(3, Val),
enc_IntersectionReferenceID(Enc11@element)
end,
begin
%% attribute revision(3) with type INTEGER
Enc12@element = element(4, Val),
if Enc12@element bsr 7 =:= 0 ->
<<Enc12@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute status(4) with type BIT STRING
Enc14@element = element(5, Val),
Enc15@bs = try bit_string_name2pos_47(Enc14@element) of
Enc15@positions ->
bitstring_from_positions(Enc15@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc14@element, 16)
end,
Enc15@bits = bit_size(Enc15@bs),
if Enc15@bits =:= 16 ->
Enc15@bs
end
end,
begin
%% attribute moy(5) with type INTEGER
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
0 =< Enc16@element, Enc16@element < 527041 ->
<<Enc16@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute timeStamp(6) with type INTEGER
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element bsr 16 =:= 0 ->
<<Enc19@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute enabledLanes(7) with type EnabledLaneList
Enc22@element = element(8, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_EnabledLaneList(Enc22@element)
end
end,
begin
%% attribute states(8) with type MovementList
Enc24@element = element(9, Val),
enc_MovementList(Enc24@element)
end,
begin
%% attribute maneuverAssistList(9) with type ManeuverAssistList
Enc25@element = element(10, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
enc_ManeuverAssistList(Enc25@element)
end
end|begin
%% attribute regional(10) with type SEQUENCE OF
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionState_regional(Enc27@element)
end
end].
enc_IntersectionState_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_IntersectionState_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_IntersectionState_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_IntersectionState(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute name(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute id(2) with type IntersectionReferenceID
{Term2,Bytes4} = dec_IntersectionReferenceID(Bytes3),

%% attribute revision(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute status(4) with type BIT STRING
{Term4,Bytes6} = begin
<<V5@V0:16/binary-unit:1,V5@Buf1/bitstring>> = Bytes5,
{V5@V2,V5@Buf3}  = {decode_named_bit_string(V5@V0, [{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]),V5@Buf1},
{V5@V2,V5@Buf3}
end,

%% attribute moy(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V6@V0:20,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute timeStamp(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V7@V0:16,V7@Buf1/bitstring>> = Bytes7,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute enabledLanes(7) with type EnabledLaneList
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
dec_EnabledLaneList(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute states(8) with type MovementList
{Term8,Bytes10} = dec_MovementList(Bytes9),

%% attribute maneuverAssistList(9) with type ManeuverAssistList
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_ManeuverAssistList(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute regional(10) with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_IntersectionState_regional(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V8@V0,V8@Buf1} = case Bytes12 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'IntersectionState',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.


dec_IntersectionState_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components48(V1@Add2, V1@Buf1, []).


dec_IntersectionState_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_IntersectionStateList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_IntersectionState(Comp) || Comp <- Val]]
end.



dec_IntersectionStateList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components49(V1@Add2, V1@Buf1, []).

enc_ExitService(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_ExitService_SEQOF(Comp) || Comp <- Val]]
end.

enc_ExitService_SEQOF(Val) ->
%% attribute item(1) with type CHOICE
Enc1@element = element(2, Val),
enc_ExitService_SEQOF_item(Enc1@element).
enc_ExitService_SEQOF_item(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= itis ->
if ChoiceVal bsr 16 =:= 0 ->
<<0:1,ChoiceVal:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= text ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars(ChoiceVal, 7),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 4 =:= 0 ->
[<<1:1,Enc4@len@sub:4>>|Enc4@bin]
end
end
end.


dec_ExitService(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components50(V1@Add2, V1@Buf1, []).


dec_ExitService_SEQOF(Bytes) ->

%% attribute item(1) with type CHOICE
{Term1,Bytes1} = dec_ExitService_SEQOF_item(Bytes),
Res1 = {'ExitService_SEQOF',Term1},
{Res1,Bytes1}.


dec_ExitService_SEQOF_item(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{itis,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end
end,
{{text,Val},NewBytes}
end.
enc_GenericSignage(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_GenericSignage_SEQOF(Comp) || Comp <- Val]]
end.

enc_GenericSignage_SEQOF(Val) ->
%% attribute item(1) with type CHOICE
Enc1@element = element(2, Val),
enc_GenericSignage_SEQOF_item(Enc1@element).
enc_GenericSignage_SEQOF_item(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= itis ->
if ChoiceVal bsr 16 =:= 0 ->
<<0:1,ChoiceVal:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= text ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars(ChoiceVal, 7),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 4 =:= 0 ->
[<<1:1,Enc4@len@sub:4>>|Enc4@bin]
end
end
end.


dec_GenericSignage(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components51(V1@Add2, V1@Buf1, []).


dec_GenericSignage_SEQOF(Bytes) ->

%% attribute item(1) with type CHOICE
{Term1,Bytes1} = dec_GenericSignage_SEQOF_item(Bytes),
Res1 = {'GenericSignage_SEQOF',Term1},
{Res1,Bytes1}.


dec_GenericSignage_SEQOF_item(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{itis,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end
end,
{{text,Val},NewBytes}
end.
enc_SpeedLimit(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_SpeedLimit_SEQOF(Comp) || Comp <- Val]]
end.

enc_SpeedLimit_SEQOF(Val) ->
%% attribute item(1) with type CHOICE
Enc1@element = element(2, Val),
enc_SpeedLimit_SEQOF_item(Enc1@element).
enc_SpeedLimit_SEQOF_item(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= itis ->
if ChoiceVal bsr 16 =:= 0 ->
<<0:1,ChoiceVal:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= text ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars(ChoiceVal, 7),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 4 =:= 0 ->
[<<1:1,Enc4@len@sub:4>>|Enc4@bin]
end
end
end.


dec_SpeedLimit(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components52(V1@Add2, V1@Buf1, []).


dec_SpeedLimit_SEQOF(Bytes) ->

%% attribute item(1) with type CHOICE
{Term1,Bytes1} = dec_SpeedLimit_SEQOF_item(Bytes),
Res1 = {'SpeedLimit_SEQOF',Term1},
{Res1,Bytes1}.


dec_SpeedLimit_SEQOF_item(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{itis,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end
end,
{{text,Val},NewBytes}
end.
enc_WorkZone(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_WorkZone_SEQOF(Comp) || Comp <- Val]]
end.

enc_WorkZone_SEQOF(Val) ->
%% attribute item(1) with type CHOICE
Enc1@element = element(2, Val),
enc_WorkZone_SEQOF_item(Enc1@element).
enc_WorkZone_SEQOF_item(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= itis ->
if ChoiceVal bsr 16 =:= 0 ->
<<0:1,ChoiceVal:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= text ->
begin
Enc4@len = length(ChoiceVal),
Enc4@bin = encode_chars(ChoiceVal, 7),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 4 =:= 0 ->
[<<1:1,Enc4@len@sub:4>>|Enc4@bin]
end
end
end.


dec_WorkZone(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components53(V1@Add2, V1@Buf1, []).


dec_WorkZone_SEQOF(Bytes) ->

%% attribute item(1) with type CHOICE
{Term1,Bytes1} = dec_WorkZone_SEQOF_item(Bytes),
Res1 = {'WorkZone_SEQOF',Term1},
{Res1,Bytes1}.


dec_WorkZone_SEQOF_item(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{itis,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end
end,
{{text,Val},NewBytes}
end.
enc_J1939data(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
Enc10@element = element(11, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute tires(1) with type TireDataList
Enc12@element = element(2, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_TireDataList(Enc12@element)
end
end,
begin
%% attribute axles(2) with type AxleWeightList
Enc14@element = element(3, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_AxleWeightList(Enc14@element)
end
end,
begin
%% attribute trailerWeight(3) with type INTEGER
Enc16@element = element(4, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
0 =< Enc16@element, Enc16@element < 64256 ->
<<Enc16@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute cargoWeight(4) with type INTEGER
Enc19@element = element(5, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
0 =< Enc19@element, Enc19@element < 64256 ->
<<Enc19@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute steeringAxleTemperature(5) with type INTEGER
Enc22@element = element(6, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@element@sub = Enc22@element - -40,
if 0 =< Enc22@element@sub, Enc22@element@sub < 251 ->
Enc22@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc22@element}}})
end
end
end
end,
begin
%% attribute driveAxleLocation(6) with type INTEGER
Enc25@element = element(7, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
Enc25@element bsr 8 =:= 0 ->
Enc25@element;
true ->
exit({error,{asn1,{illegal_integer,Enc25@element}}})
end
end,
begin
%% attribute driveAxleLiftAirPressure(7) with type INTEGER
Enc28@element = element(8, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
0 =< Enc28@element, Enc28@element < 1001 ->
<<Enc28@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc28@element}}})
end
end,
begin
%% attribute driveAxleTemperature(8) with type INTEGER
Enc31@element = element(9, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@element@sub = Enc31@element - -40,
if 0 =< Enc31@element@sub, Enc31@element@sub < 251 ->
Enc31@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc31@element}}})
end
end
end
end,
begin
%% attribute driveAxleLubePressure(9) with type INTEGER
Enc34@element = element(10, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
0 =< Enc34@element, Enc34@element < 251 ->
Enc34@element;
true ->
exit({error,{asn1,{illegal_integer,Enc34@element}}})
end
end|begin
%% attribute steeringAxleLubePressure(10) with type INTEGER
Enc37@element = element(11, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
0 =< Enc37@element, Enc37@element < 251 ->
[Enc37@element];
true ->
exit({error,{asn1,{illegal_integer,Enc37@element}}})
end
end].


dec_J1939data(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute tires(1) with type TireDataList
{Term1,Bytes3} = case (Opt bsr 9) band 1 of
1 ->
dec_TireDataList(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute axles(2) with type AxleWeightList
{Term2,Bytes4} = case (Opt bsr 8) band 1 of
1 ->
dec_AxleWeightList(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute trailerWeight(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes4,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute cargoWeight(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute steeringAxleTemperature(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes6,
V5@Add2 = V5@V0 + -40,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute driveAxleLocation(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes7,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute driveAxleLiftAirPressure(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V7@V0:10,V7@Buf1/bitstring>> = Bytes8,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute driveAxleTemperature(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V8@V0:8,V8@Buf1/bitstring>> = Bytes9,
V8@Add2 = V8@V0 + -40,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute driveAxleLubePressure(9) with type INTEGER
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V9@V0:8,V9@Buf1/bitstring>> = Bytes10,
{V9@V0,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute steeringAxleLubePressure(10) with type INTEGER
{Term10,Bytes12} = case Opt band 1 of
1 ->
begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes11,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V11@V0,V11@Buf1} = case Bytes12 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:7,V11@Buf7/bitstring>> when V11@V6 =/= 0 ->
{V11@V6,V11@Buf7};
<<1:1,0:1,V11@V7:14,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
{V11@V7,V11@Buf8};
<<1:1,1:1,V11@V7:6,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
V11@Mul9 = V11@V7 * 16384,
{V11@Mul9,V11@Buf8}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V10:V11@V0/bitstring-unit:1,V11@Buf11/bitstring>> = V11@Buf1,
{V11@V10,V11@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'J1939data',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.

enc_TireDataList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_TireData(Comp) || Comp <- Val]]
end.



dec_TireDataList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components54(V1@Add2, V1@Buf1, []).

enc_TireData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute location(1) with type INTEGER
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 8 =:= 0 ->
Enc9@element;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute pressure(2) with type INTEGER
Enc12@element = element(3, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 251 ->
Enc12@element;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute temp(3) with type INTEGER
Enc15@element = element(4, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@element@sub = Enc15@element - -8736,
if 0 =< Enc15@element@sub, Enc15@element@sub < 64256 ->
<<Enc15@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end
end
end,
begin
%% attribute wheelSensorStatus(4) with type ENUMERATED
Enc18@element = element(5, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= off ->
<<0:2>>;
Enc18@element =:= on ->
<<1:2>>;
Enc18@element =:= notDefined ->
<<2:2>>;
Enc18@element =:= notSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc18@element}}})
end
end,
begin
%% attribute wheelEndElectFault(5) with type ENUMERATED
Enc21@element = element(6, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
Enc21@element =:= isOk ->
<<0:2>>;
Enc21@element =:= isNotDefined ->
<<1:2>>;
Enc21@element =:= isError ->
<<2:2>>;
Enc21@element =:= isNotSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc21@element}}})
end
end,
begin
%% attribute leakageRate(6) with type INTEGER
Enc24@element = element(7, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
0 =< Enc24@element, Enc24@element < 64256 ->
<<Enc24@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc24@element}}})
end
end|begin
%% attribute detection(7) with type ENUMERATED
Enc27@element = element(8, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
Enc27@element =:= noData ->
<<0:3>>;
Enc27@element =:= overPressure ->
<<1:3>>;
Enc27@element =:= noWarningPressure ->
<<2:3>>;
Enc27@element =:= underPressure ->
<<3:3>>;
Enc27@element =:= extremeUnderPressure ->
<<4:3>>;
Enc27@element =:= undefined ->
<<5:3>>;
Enc27@element =:= errorIndicator ->
<<6:3>>;
Enc27@element =:= notAvailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc27@element}}})
end
end].


dec_TireData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute location(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute pressure(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute temp(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -8736,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute wheelSensorStatus(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> off;
1 -> on;
2 -> notDefined;
3 -> notSupported
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute wheelEndElectFault(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:2,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> isOk;
1 -> isNotDefined;
2 -> isError;
3 -> isNotSupported
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute leakageRate(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V8@V0:16,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute detection(7) with type ENUMERATED
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V9@V0:3,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> noData;
1 -> overPressure;
2 -> noWarningPressure;
3 -> underPressure;
4 -> extremeUnderPressure;
5 -> undefined;
6 -> errorIndicator;
7 -> notAvailable
end,
{V9@Int2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V10@V0,V10@Buf1} = case Bytes9 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:7,V10@Buf7/bitstring>> when V10@V6 =/= 0 ->
{V10@V6,V10@Buf7};
<<1:1,0:1,V10@V7:14,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
{V10@V7,V10@Buf8};
<<1:1,1:1,V10@V7:6,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
V10@Mul9 = V10@V7 * 16384,
{V10@Mul9,V10@Buf8}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V10:V10@V0/bitstring-unit:1,V10@Buf11/bitstring>> = V10@Buf1,
{V10@V10,V10@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'TireData',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.

enc_AxleWeightList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_AxleWeightSet(Comp) || Comp <- Val]]
end.



dec_AxleWeightList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components55(V1@Add2, V1@Buf1, []).

enc_AxleWeightSet(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute location(1) with type INTEGER
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 8 =:= 0 ->
Enc4@element;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end|begin
%% attribute weight(2) with type INTEGER
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
0 =< Enc7@element, Enc7@element < 64256 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_AxleWeightSet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute location(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute weight(2) with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'AxleWeightSet',Term1,Term2},
{Res1,Bytes6}.

enc_LaneAttributes(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute directionalUse(1) with type BIT STRING
Enc2@element = element(2, Val),
Enc3@bs = try bit_string_name2pos_56(Enc2@element) of
Enc3@positions ->
bitstring_from_positions(Enc3@positions, 2)
catch throw:invalid ->
adjust_trailing_zeroes(Enc2@element, 2)
end,
Enc3@bits = bit_size(Enc3@bs),
if Enc3@bits =:= 2 ->
Enc3@bs
end
end,
begin
%% attribute sharedWith(2) with type BIT STRING
Enc4@element = element(3, Val),
Enc5@bs = try bit_string_name2pos_57(Enc4@element) of
Enc5@positions ->
bitstring_from_positions(Enc5@positions, 10)
catch throw:invalid ->
adjust_trailing_zeroes(Enc4@element, 10)
end,
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 10 ->
Enc5@bs
end
end,
begin
%% attribute laneType(3) with type LaneTypeAttributes
Enc6@element = element(4, Val),
enc_LaneTypeAttributes(Enc6@element)
end|begin
%% attribute regional(4) with type SEQUENCE
Enc7@element = element(5, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_LaneAttributes_regional(Enc7@element)
end
end].
enc_LaneAttributes_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_LaneAttributes(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute directionalUse(1) with type BIT STRING
{Term1,Bytes2} = begin
<<V2@V0:2/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_named_bit_string(V2@V0, [{ingressPath,0},{egressPath,1}]),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute sharedWith(2) with type BIT STRING
{Term2,Bytes3} = begin
<<V3@V0:10/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{overlappingLaneDescriptionProvided,0},{multipleLanesTreatedAsOneLane,1},{otherNonMotorizedTrafficTypes,2},{individualMotorizedVehicleTraffic,3},{busVehicleTraffic,4},{taxiVehicleTraffic,5},{pedestriansTraffic,6},{cyclistVehicleTraffic,7},{trackedVehicleTraffic,8},{pedestrianTraffic,9}]),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% attribute laneType(3) with type LaneTypeAttributes
{Term3,Bytes4} = dec_LaneTypeAttributes(Bytes3),

%% attribute regional(4) with type SEQUENCE
{Term4,Bytes5} = case Opt band 1 of
1 ->
dec_LaneAttributes_regional(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'LaneAttributes',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.


dec_LaneAttributes_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'LaneAttributes_regional',Term1,Term2},
{Res1,Bytes2}.

enc_LaneDataAttribute(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= pathEndPointAngle ->
begin
ChoiceVal@sub = ChoiceVal - -150,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 301 ->
<<0:1,0:3,ChoiceVal@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneCrownPointCenter ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,1:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneCrownPointLeft ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,2:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneCrownPointRight ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,3:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneAngle ->
begin
ChoiceVal@sub = ChoiceVal - -180,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 361 ->
<<0:1,4:3,ChoiceVal@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= speedLimits ->
[<<0:1,5:3>>|enc_SpeedLimitList(ChoiceVal)];
ChoiceTag =:= regional ->
[<<0:1,6:3>>|enc_LaneDataAttribute_regional(ChoiceVal)]
end.
enc_LaneDataAttribute_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_LaneDataAttribute_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_LaneDataAttribute_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_LaneDataAttribute(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + -150,
{V2@Add2,V2@Buf1}
end
end,
{{pathEndPointAngle,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -128,
{V3@Add2,V3@Buf1}
end
end,
{{laneCrownPointCenter,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes2,
V4@Add2 = V4@V0 + -128,
{V4@Add2,V4@Buf1}
end
end,
{{laneCrownPointLeft,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes2,
V5@Add2 = V5@V0 + -128,
{V5@Add2,V5@Buf1}
end
end,
{{laneCrownPointRight,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:9,V6@Buf1/bitstring>> = Bytes2,
V6@Add2 = V6@V0 + -180,
{V6@Add2,V6@Buf1}
end
end,
{{laneAngle,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_SpeedLimitList(Bytes2)
end,
{{speedLimits,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_LaneDataAttribute_regional(Bytes2)
end,
{{regional,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_LaneDataAttribute_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components58(V1@Add2, V1@Buf1, []).


dec_LaneDataAttribute_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_LaneDataAttributeList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_LaneDataAttribute(Comp) || Comp <- Val]]
end.



dec_LaneDataAttributeList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components59(V1@Add2, V1@Buf1, []).

enc_LaneList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|[enc_GenericLane(Comp) || Comp <- Val]]
end.



dec_LaneList(Bytes) ->
%% Length with constraint {1,255}
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components60(V1@Add2, V1@Buf1, []).

enc_LaneTypeAttributes(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= vehicle ->
begin
Enc2@bs = try bit_string_name2pos_61(ChoiceVal) of
Enc2@positions ->
bitstring_from_positions(Enc2@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 8)
end,
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 8 ->
[<<0:1,0:3,0:1>>|Enc2@bs];
Enc2@bits < 128 ->
[<<0:1,0:3,1:1,Enc2@bits:8>>|Enc2@bs];
Enc2@bits < 16384 ->
[<<0:1,0:3,1:1,2:2,Enc2@bits:14>>|Enc2@bs];
true ->
[<<0:1,0:3,1:1>>|encode_fragmented(Enc2@bs, 1)]
end
end;
ChoiceTag =:= crosswalk ->
begin
Enc4@bs = try bit_string_name2pos_62(ChoiceVal) of
Enc4@positions ->
bitstring_from_positions(Enc4@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 16)
end,
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 16 ->
[<<0:1,1:3>>|Enc4@bs]
end
end;
ChoiceTag =:= bikeLane ->
begin
Enc6@bs = try bit_string_name2pos_63(ChoiceVal) of
Enc6@positions ->
bitstring_from_positions(Enc6@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 16)
end,
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 16 ->
[<<0:1,2:3>>|Enc6@bs]
end
end;
ChoiceTag =:= sidewalk ->
begin
Enc8@bs = try bit_string_name2pos_64(ChoiceVal) of
Enc8@positions ->
bitstring_from_positions(Enc8@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 16)
end,
Enc8@bits = bit_size(Enc8@bs),
if Enc8@bits =:= 16 ->
[<<0:1,3:3>>|Enc8@bs]
end
end;
ChoiceTag =:= median ->
begin
Enc10@bs = try bit_string_name2pos_65(ChoiceVal) of
Enc10@positions ->
bitstring_from_positions(Enc10@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 16)
end,
Enc10@bits = bit_size(Enc10@bs),
if Enc10@bits =:= 16 ->
[<<0:1,4:3>>|Enc10@bs]
end
end;
ChoiceTag =:= striping ->
begin
Enc12@bs = try bit_string_name2pos_66(ChoiceVal) of
Enc12@positions ->
bitstring_from_positions(Enc12@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 16)
end,
Enc12@bits = bit_size(Enc12@bs),
if Enc12@bits =:= 16 ->
[<<0:1,5:3>>|Enc12@bs]
end
end;
ChoiceTag =:= trackedVehicle ->
begin
Enc14@bs = try bit_string_name2pos_67(ChoiceVal) of
Enc14@positions ->
bitstring_from_positions(Enc14@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 16)
end,
Enc14@bits = bit_size(Enc14@bs),
if Enc14@bits =:= 16 ->
[<<0:1,6:3>>|Enc14@bs]
end
end;
ChoiceTag =:= parking ->
begin
Enc16@bs = try bit_string_name2pos_68(ChoiceVal) of
Enc16@positions ->
bitstring_from_positions(Enc16@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(ChoiceVal, 16)
end,
Enc16@bits = bit_size(Enc16@bs),
if Enc16@bits =:= 16 ->
[<<0:1,7:3>>|Enc16@bs]
end
end
end.


dec_LaneTypeAttributes(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:8/binary-unit:1,V2@Buf4/bitstring>> ->
{V2@V3,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@V8:V2@V6/binary-unit:1,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<1:1,0:1,V2@V7:14,V2@V9:V2@V7/binary-unit:1,V2@Buf10/bitstring>> ->
{V2@V9,V2@Buf10};
<<1:1,1:1,V2@V7:6,V2@Buf8/bitstring>> ->
{V2@V9,V2@Buf10}  = decode_fragmented(V2@V7, V2@Buf8, 1),
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
{V2@V11,V2@Buf12}  = {decode_named_bit_string(V2@V0, [{isVehicleRevocableLane,0},{isVehicleFlyOverLane,1},{hovLaneUseOnly,2},{restrictedToBusUse,3},{restrictedToTaxiUse,4},{restrictedFromPublicUse,5},{hasIRbeaconCoverage,6},{permissionOnRequest,7}]),V2@Buf1},
{V2@V11,V2@Buf12}
end
end,
{{vehicle,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:16/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{crosswalkRevocableLane,0},{bicyleUseAllowed,1},{isXwalkFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{hasPushToWalkButton,5},{audioSupport,6},{rfSignalRequestPresent,7},{unsignalizedSegmentsPresent,8}]),V3@Buf1},
{V3@V2,V3@Buf3}
end
end,
{{crosswalk,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:16/binary-unit:1,V4@Buf1/bitstring>> = Bytes2,
{V4@V2,V4@Buf3}  = {decode_named_bit_string(V4@V0, [{bikeRevocableLane,0},{pedestrianUseAllowed,1},{isBikeFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{isolatedByBarrier,5},{unsignalizedSegmentsPresent,6}]),V4@Buf1},
{V4@V2,V4@Buf3}
end
end,
{{bikeLane,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:16/binary-unit:1,V5@Buf1/bitstring>> = Bytes2,
{V5@V2,V5@Buf3}  = {decode_named_bit_string(V5@V0, [{'sidewalk-RevocableLane',0},{bicyleUseAllowed,1},{isSidewalkFlyOverLane,2},{walkBikes,3}]),V5@Buf1},
{V5@V2,V5@Buf3}
end
end,
{{sidewalk,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:16/binary-unit:1,V6@Buf1/bitstring>> = Bytes2,
{V6@V2,V6@Buf3}  = {decode_named_bit_string(V6@V0, [{'median-RevocableLane',0},{median,1},{whiteLineHashing,2},{stripedLines,3},{doubleStripedLines,4},{trafficCones,5},{constructionBarrier,6},{trafficChannels,7},{lowCurbs,8},{highCurbs,9}]),V6@Buf1},
{V6@V2,V6@Buf3}
end
end,
{{median,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V7@V0:16/binary-unit:1,V7@Buf1/bitstring>> = Bytes2,
{V7@V2,V7@Buf3}  = {decode_named_bit_string(V7@V0, [{stripeToConnectingLanesRevocableLane,0},{stripeDrawOnLeft,1},{stripeDrawOnRight,2},{stripeToConnectingLanesLeft,3},{stripeToConnectingLanesRight,4},{stripeToConnectingLanesAhead,5}]),V7@Buf1},
{V7@V2,V7@Buf3}
end
end,
{{striping,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
<<V8@V0:16/binary-unit:1,V8@Buf1/bitstring>> = Bytes2,
{V8@V2,V8@Buf3}  = {decode_named_bit_string(V8@V0, [{'spec-RevocableLane',0},{'spec-commuterRailRoadTrack',1},{'spec-lightRailRoadTrack',2},{'spec-heavyRailRoadTrack',3},{'spec-otherRailType',4}]),V8@Buf1},
{V8@V2,V8@Buf3}
end
end,
{{trackedVehicle,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
<<V9@V0:16/binary-unit:1,V9@Buf1/bitstring>> = Bytes2,
{V9@V2,V9@Buf3}  = {decode_named_bit_string(V9@V0, [{parkingRevocableLane,0},{parallelParkingInUse,1},{headInParkingInUse,2},{doNotParkZone,3},{parkingForBusUse,4},{parkingForTaxiUse,5},{noPublicParkingUse,6}]),V9@Buf1},
{V9@V2,V9@Buf3}
end
end,
{{parking,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_ManeuverAssistList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_ConnectionManeuverAssist(Comp) || Comp <- Val]]
end.



dec_ManeuverAssistList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components69(V1@Add2, V1@Buf1, []).

enc_MovementEventList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_MovementEvent(Comp) || Comp <- Val]]
end.



dec_MovementEventList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components70(V1@Add2, V1@Buf1, []).

enc_MovementEvent(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute eventState(1) with type ENUMERATED
Enc5@element = element(2, Val),
if Enc5@element =:= unavailable ->
<<0:4>>;
Enc5@element =:= dark ->
<<1:4>>;
Enc5@element =:= 'stop-Then-Proceed' ->
<<2:4>>;
Enc5@element =:= 'stop-And-Remain' ->
<<3:4>>;
Enc5@element =:= 'pre-Movement' ->
<<4:4>>;
Enc5@element =:= 'permissive-Movement-Allowed' ->
<<5:4>>;
Enc5@element =:= 'protected-Movement-Allowed' ->
<<6:4>>;
Enc5@element =:= 'permissive-clearance' ->
<<7:4>>;
Enc5@element =:= 'protected-clearance' ->
<<8:4>>;
Enc5@element =:= 'caution-Conflicting-Traffic' ->
<<9:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end,
begin
%% attribute timing(2) with type TimeChangeDetails
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_TimeChangeDetails(Enc7@element)
end
end,
begin
%% attribute speeds(3) with type AdvisorySpeedList
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_AdvisorySpeedList(Enc9@element)
end
end|begin
%% attribute regional(4) with type SEQUENCE OF
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_MovementEvent_regional(Enc11@element)
end
end].
enc_MovementEvent_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_MovementEvent_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_MovementEvent_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_MovementEvent(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute eventState(1) with type ENUMERATED
{Term1,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> dark;
2 -> 'stop-Then-Proceed';
3 -> 'stop-And-Remain';
4 -> 'pre-Movement';
5 -> 'permissive-Movement-Allowed';
6 -> 'protected-Movement-Allowed';
7 -> 'permissive-clearance';
8 -> 'protected-clearance';
9 -> 'caution-Conflicting-Traffic';
_ -> exit({error,{asn1,{decode_enumerated,V3@V0}}})
end,
{V3@Int2,V3@Buf1}
end,

%% attribute timing(2) with type TimeChangeDetails
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_TimeChangeDetails(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute speeds(3) with type AdvisorySpeedList
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_AdvisorySpeedList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute regional(4) with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_MovementEvent_regional(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'MovementEvent',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.


dec_MovementEvent_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components71(V1@Add2, V1@Buf1, []).


dec_MovementEvent_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_MovementList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|[enc_MovementState(Comp) || Comp <- Val]]
end.



dec_MovementList(Bytes) ->
%% Length with constraint {1,255}
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components72(V1@Add2, V1@Buf1, []).

enc_MovementState(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute movementName(1) with type IA5String
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = length(Enc5@element),
Enc6@bin = encode_chars(Enc5@element, 7),
Enc6@len@sub = Enc6@len - 1,
if 0 =< Enc6@len@sub, Enc6@len@sub < 63 ->
[<<Enc6@len@sub:6>>|Enc6@bin]
end
end
end
end,
begin
%% attribute signalGroup(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element bsr 8 =:= 0 ->
Enc8@element;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute state-time-speed(3) with type MovementEventList
Enc10@element = element(4, Val),
enc_MovementEventList(Enc10@element)
end,
begin
%% attribute maneuverAssistList(4) with type ManeuverAssistList
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_ManeuverAssistList(Enc11@element)
end
end|begin
%% attribute regional(5) with type SEQUENCE OF
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_MovementState_regional(Enc13@element)
end
end].
enc_MovementState_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_MovementState_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_MovementState_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_MovementState(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute movementName(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute signalGroup(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute state-time-speed(3) with type MovementEventList
{Term3,Bytes5} = dec_MovementEventList(Bytes4),

%% attribute maneuverAssistList(4) with type ManeuverAssistList
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_ManeuverAssistList(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute regional(5) with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_MovementState_regional(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'MovementState',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.


dec_MovementState_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components73(V1@Add2, V1@Buf1, []).


dec_MovementState_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-LL-24B'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2048,
if Enc1@element@sub bsr 12 =:= 0 ->
<<Enc1@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -2048,
if Enc3@element@sub bsr 12 =:= 0 ->
<<Enc3@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LL-24B'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2048,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LL-24B',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-LL-28B'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -8192,
if Enc1@element@sub bsr 14 =:= 0 ->
<<Enc1@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -8192,
if Enc3@element@sub bsr 14 =:= 0 ->
<<Enc3@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LL-28B'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8192,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:14,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -8192,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LL-28B',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-LL-32B'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -32768,
if Enc1@element@sub bsr 16 =:= 0 ->
<<Enc1@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -32768,
if Enc3@element@sub bsr 16 =:= 0 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LL-32B'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32768,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -32768,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LL-32B',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-LL-36B'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -131072,
if Enc1@element@sub bsr 18 =:= 0 ->
<<Enc1@element@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -131072,
if Enc3@element@sub bsr 18 =:= 0 ->
<<Enc3@element@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LL-36B'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:18,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -131072,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:18,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -131072,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LL-36B',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-LL-44B'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2097152,
if Enc1@element@sub bsr 22 =:= 0 ->
<<Enc1@element@sub:22>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -2097152,
if Enc3@element@sub bsr 22 =:= 0 ->
<<Enc3@element@sub:22>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LL-44B'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:22,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2097152,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:22,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2097152,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LL-44B',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-LL-48B'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -8388608,
if Enc1@element@sub bsr 24 =:= 0 ->
<<Enc1@element@sub:24>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -8388608,
if Enc3@element@sub bsr 24 =:= 0 ->
<<Enc3@element@sub:24>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LL-48B'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:24,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8388608,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:24,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -8388608,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LL-48B',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-LLmD-64b'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -1799999999,
if 0 =< Enc1@element@sub, Enc1@element@sub < 3600000001 ->
<<Enc1@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -900000000,
if 0 =< Enc3@element@sub, Enc3@element@sub < 1800000002 ->
<<Enc3@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LLmD-64b'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:32,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1799999999,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:31,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -900000000,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LLmD-64b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-20b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -512,
if Enc1@element@sub bsr 10 =:= 0 ->
<<Enc1@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -512,
if Enc3@element@sub bsr 10 =:= 0 ->
<<Enc3@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-20b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -512,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -512,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-20b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-22b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -1024,
if Enc1@element@sub bsr 11 =:= 0 ->
<<Enc1@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -1024,
if Enc3@element@sub bsr 11 =:= 0 ->
<<Enc3@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-22b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1024,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -1024,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-22b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-24b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2048,
if Enc1@element@sub bsr 12 =:= 0 ->
<<Enc1@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -2048,
if Enc3@element@sub bsr 12 =:= 0 ->
<<Enc3@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-24b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2048,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-24b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-26b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -4096,
if Enc1@element@sub bsr 13 =:= 0 ->
<<Enc1@element@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -4096,
if Enc3@element@sub bsr 13 =:= 0 ->
<<Enc3@element@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-26b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -4096,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:13,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -4096,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-26b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-28b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -8192,
if Enc1@element@sub bsr 14 =:= 0 ->
<<Enc1@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -8192,
if Enc3@element@sub bsr 14 =:= 0 ->
<<Enc3@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-28b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8192,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:14,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -8192,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-28b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-32b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -32768,
if Enc1@element@sub bsr 16 =:= 0 ->
<<Enc1@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -32768,
if Enc3@element@sub bsr 16 =:= 0 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-32b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32768,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -32768,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-32b',Term1,Term2},
{Res1,Bytes2}.

enc_NodeAttributeLLList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp =:= reserved ->
<<0:1,0:4>>;
Comp =:= stopLine ->
<<0:1,1:4>>;
Comp =:= roundedCapStyleA ->
<<0:1,2:4>>;
Comp =:= roundedCapStyleB ->
<<0:1,3:4>>;
Comp =:= mergePoint ->
<<0:1,4:4>>;
Comp =:= divergePoint ->
<<0:1,5:4>>;
Comp =:= downstreamStopLine ->
<<0:1,6:4>>;
Comp =:= downstreamStartNode ->
<<0:1,7:4>>;
Comp =:= closedToTraffic ->
<<0:1,8:4>>;
Comp =:= safeIsland ->
<<0:1,9:4>>;
Comp =:= curbPresentAtStepOff ->
<<0:1,10:4>>;
Comp =:= hydrantPresent ->
<<0:1,11:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Comp}}})
end || Comp <- Val]]
end.



dec_NodeAttributeLLList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components74(V1@Add2, V1@Buf1, []).

enc_NodeAttributeSetLL(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute localNode(1) with type NodeAttributeLLList
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeLLList(Enc9@element)
end
end,
begin
%% attribute disabled(2) with type SegmentAttributeLLList
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_SegmentAttributeLLList(Enc11@element)
end
end,
begin
%% attribute enabled(3) with type SegmentAttributeLLList
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_SegmentAttributeLLList(Enc13@element)
end
end,
begin
%% attribute data(4) with type LaneDataAttributeList
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_LaneDataAttributeList(Enc15@element)
end
end,
begin
%% attribute dWidth(5) with type INTEGER
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - -512,
if Enc17@element@sub bsr 10 =:= 0 ->
<<Enc17@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end
end
end,
begin
%% attribute dElevation(6) with type INTEGER
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@element@sub = Enc20@element - -512,
if Enc20@element@sub bsr 10 =:= 0 ->
<<Enc20@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end
end
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc23@element = element(8, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeSetLL_regional(Enc23@element)
end
end].
enc_NodeAttributeSetLL_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_NodeAttributeSetLL_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_NodeAttributeSetLL_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_NodeAttributeSetLL(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute localNode(1) with type NodeAttributeLLList
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
dec_NodeAttributeLLList(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute disabled(2) with type SegmentAttributeLLList
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
dec_SegmentAttributeLLList(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute enabled(3) with type SegmentAttributeLLList
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
dec_SegmentAttributeLLList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute data(4) with type LaneDataAttributeList
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
dec_LaneDataAttributeList(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute dWidth(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes6,
V3@Add2 = V3@V0 + -512,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute dElevation(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:10,V4@Buf1/bitstring>> = Bytes7,
V4@Add2 = V4@V0 + -512,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_NodeAttributeSetLL_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V5@V0,V5@Buf1} = case Bytes9 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'NodeAttributeSetLL',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_NodeAttributeSetLL_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components75(V1@Add2, V1@Buf1, []).


dec_NodeAttributeSetLL_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_NodeAttributeSetXY(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute localNode(1) with type NodeAttributeXYList
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeXYList(Enc9@element)
end
end,
begin
%% attribute disabled(2) with type SegmentAttributeXYList
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_SegmentAttributeXYList(Enc11@element)
end
end,
begin
%% attribute enabled(3) with type SegmentAttributeXYList
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_SegmentAttributeXYList(Enc13@element)
end
end,
begin
%% attribute data(4) with type LaneDataAttributeList
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_LaneDataAttributeList(Enc15@element)
end
end,
begin
%% attribute dWidth(5) with type INTEGER
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - -512,
if Enc17@element@sub bsr 10 =:= 0 ->
<<Enc17@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end
end
end,
begin
%% attribute dElevation(6) with type INTEGER
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@element@sub = Enc20@element - -512,
if Enc20@element@sub bsr 10 =:= 0 ->
<<Enc20@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end
end
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc23@element = element(8, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeSetXY_regional(Enc23@element)
end
end].
enc_NodeAttributeSetXY_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_NodeAttributeSetXY_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_NodeAttributeSetXY_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_NodeAttributeSetXY(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute localNode(1) with type NodeAttributeXYList
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
dec_NodeAttributeXYList(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute disabled(2) with type SegmentAttributeXYList
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
dec_SegmentAttributeXYList(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute enabled(3) with type SegmentAttributeXYList
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
dec_SegmentAttributeXYList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute data(4) with type LaneDataAttributeList
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
dec_LaneDataAttributeList(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute dWidth(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes6,
V3@Add2 = V3@V0 + -512,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute dElevation(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:10,V4@Buf1/bitstring>> = Bytes7,
V4@Add2 = V4@V0 + -512,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_NodeAttributeSetXY_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V5@V0,V5@Buf1} = case Bytes9 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'NodeAttributeSetXY',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_NodeAttributeSetXY_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components76(V1@Add2, V1@Buf1, []).


dec_NodeAttributeSetXY_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_NodeAttributeXYList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp =:= reserved ->
<<0:1,0:4>>;
Comp =:= stopLine ->
<<0:1,1:4>>;
Comp =:= roundedCapStyleA ->
<<0:1,2:4>>;
Comp =:= roundedCapStyleB ->
<<0:1,3:4>>;
Comp =:= mergePoint ->
<<0:1,4:4>>;
Comp =:= divergePoint ->
<<0:1,5:4>>;
Comp =:= downstreamStopLine ->
<<0:1,6:4>>;
Comp =:= downstreamStartNode ->
<<0:1,7:4>>;
Comp =:= closedToTraffic ->
<<0:1,8:4>>;
Comp =:= safeIsland ->
<<0:1,9:4>>;
Comp =:= curbPresentAtStepOff ->
<<0:1,10:4>>;
Comp =:= hydrantPresent ->
<<0:1,11:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Comp}}})
end || Comp <- Val]]
end.



dec_NodeAttributeXYList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components77(V1@Add2, V1@Buf1, []).

enc_NodeListLL(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nodes ->
[<<0:1>>|enc_NodeSetLL(ChoiceVal)]
end.


dec_NodeListLL(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NodeSetLL(Bytes2)
end,
{{nodes,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_NodeListXY(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nodes ->
[<<0:1,0:1>>|enc_NodeSetXY(ChoiceVal)];
ChoiceTag =:= computed ->
[<<0:1,1:1>>|enc_ComputedLane(ChoiceVal)]
end.


dec_NodeListXY(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NodeSetXY(Bytes2)
end,
{{nodes,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ComputedLane(Bytes2)
end,
{{computed,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_NodeLL(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute delta(1) with type NodeOffsetPointLL
Enc3@element = element(2, Val),
enc_NodeOffsetPointLL(Enc3@element)
end|begin
%% attribute attributes(2) with type NodeAttributeSetLL
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeSetLL(Enc4@element)
end
end].


dec_NodeLL(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute delta(1) with type NodeOffsetPointLL
{Term1,Bytes3} = dec_NodeOffsetPointLL(Bytes2),

%% attribute attributes(2) with type NodeAttributeSetLL
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NodeAttributeSetLL(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'NodeLL',Term1,Term2},
{Res1,Bytes6}.

enc_NodeOffsetPointLL(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'node-LL1' ->
[<<0:3>>|'enc_Node-LL-24B'(ChoiceVal)];
ChoiceTag =:= 'node-LL2' ->
[<<1:3>>|'enc_Node-LL-28B'(ChoiceVal)];
ChoiceTag =:= 'node-LL3' ->
[<<2:3>>|'enc_Node-LL-32B'(ChoiceVal)];
ChoiceTag =:= 'node-LL4' ->
[<<3:3>>|'enc_Node-LL-36B'(ChoiceVal)];
ChoiceTag =:= 'node-LL5' ->
[<<4:3>>|'enc_Node-LL-44B'(ChoiceVal)];
ChoiceTag =:= 'node-LL6' ->
[<<5:3>>|'enc_Node-LL-48B'(ChoiceVal)];
ChoiceTag =:= 'node-LatLon' ->
[<<6:3>>|'enc_Node-LLmD-64b'(ChoiceVal)];
ChoiceTag =:= regional ->
[<<7:3>>|enc_NodeOffsetPointLL_regional(ChoiceVal)]
end.
enc_NodeOffsetPointLL_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_NodeOffsetPointLL(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_Node-LL-24B'(Bytes1)
end,
{{'node-LL1',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_Node-LL-28B'(Bytes1)
end,
{{'node-LL2',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_Node-LL-32B'(Bytes1)
end,
{{'node-LL3',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_Node-LL-36B'(Bytes1)
end,
{{'node-LL4',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_Node-LL-44B'(Bytes1)
end,
{{'node-LL5',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
'dec_Node-LL-48B'(Bytes1)
end,
{{'node-LL6',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
'dec_Node-LLmD-64b'(Bytes1)
end,
{{'node-LatLon',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_NodeOffsetPointLL_regional(Bytes1)
end,
{{regional,Val},NewBytes}
end.

dec_NodeOffsetPointLL_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'NodeOffsetPointLL_regional',Term1,Term2},
{Res1,Bytes2}.

enc_NodeOffsetPointXY(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'node-XY1' ->
[<<0:3>>|'enc_Node-XY-20b'(ChoiceVal)];
ChoiceTag =:= 'node-XY2' ->
[<<1:3>>|'enc_Node-XY-22b'(ChoiceVal)];
ChoiceTag =:= 'node-XY3' ->
[<<2:3>>|'enc_Node-XY-24b'(ChoiceVal)];
ChoiceTag =:= 'node-XY4' ->
[<<3:3>>|'enc_Node-XY-26b'(ChoiceVal)];
ChoiceTag =:= 'node-XY5' ->
[<<4:3>>|'enc_Node-XY-28b'(ChoiceVal)];
ChoiceTag =:= 'node-XY6' ->
[<<5:3>>|'enc_Node-XY-32b'(ChoiceVal)];
ChoiceTag =:= 'node-LatLon' ->
[<<6:3>>|'enc_Node-LLmD-64b'(ChoiceVal)];
ChoiceTag =:= regional ->
[<<7:3>>|enc_NodeOffsetPointXY_regional(ChoiceVal)]
end.
enc_NodeOffsetPointXY_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_NodeOffsetPointXY(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_Node-XY-20b'(Bytes1)
end,
{{'node-XY1',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_Node-XY-22b'(Bytes1)
end,
{{'node-XY2',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_Node-XY-24b'(Bytes1)
end,
{{'node-XY3',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_Node-XY-26b'(Bytes1)
end,
{{'node-XY4',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_Node-XY-28b'(Bytes1)
end,
{{'node-XY5',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
'dec_Node-XY-32b'(Bytes1)
end,
{{'node-XY6',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
'dec_Node-LLmD-64b'(Bytes1)
end,
{{'node-LatLon',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_NodeOffsetPointXY_regional(Bytes1)
end,
{{regional,Val},NewBytes}
end.

dec_NodeOffsetPointXY_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'NodeOffsetPointXY_regional',Term1,Term2},
{Res1,Bytes2}.

enc_NodeSetLL(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 2,
if 0 =< Enc1@len@sub, Enc1@len@sub < 62 ->
[<<Enc1@len@sub:6>>|[enc_NodeLL(Comp) || Comp <- Val]]
end.



dec_NodeSetLL(Bytes) ->
%% Length with constraint {2,63}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 2,
dec_components78(V1@Add2, V1@Buf1, []).

enc_NodeSetXY(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 2,
if 0 =< Enc1@len@sub, Enc1@len@sub < 62 ->
[<<Enc1@len@sub:6>>|[enc_NodeXY(Comp) || Comp <- Val]]
end.



dec_NodeSetXY(Bytes) ->
%% Length with constraint {2,63}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 2,
dec_components79(V1@Add2, V1@Buf1, []).

enc_NodeXY(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute delta(1) with type NodeOffsetPointXY
Enc3@element = element(2, Val),
enc_NodeOffsetPointXY(Enc3@element)
end|begin
%% attribute attributes(2) with type NodeAttributeSetXY
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeSetXY(Enc4@element)
end
end].


dec_NodeXY(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute delta(1) with type NodeOffsetPointXY
{Term1,Bytes3} = dec_NodeOffsetPointXY(Bytes2),

%% attribute attributes(2) with type NodeAttributeSetXY
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NodeAttributeSetXY(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'NodeXY',Term1,Term2},
{Res1,Bytes6}.

enc_ObstacleDetection(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute obDist(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element bsr 15 =:= 0 ->
<<Enc5@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute obDirect(2) with type INTEGER
Enc7@element = element(3, Val),
if 0 =< Enc7@element, Enc7@element < 28801 ->
<<Enc7@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute description(3) with type INTEGER
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 16 =:= 0 ->
<<Enc9@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute locationDetails(4) with type ENUMERATED
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element =:= 'on-bridges' ->
<<0:1,0:7>>;
Enc12@element =:= 'in-tunnels' ->
<<0:1,1:7>>;
Enc12@element =:= 'entering-or-leaving-tunnels' ->
<<0:1,2:7>>;
Enc12@element =:= 'on-ramps' ->
<<0:1,3:7>>;
Enc12@element =:= 'in-road-construction-area' ->
<<0:1,4:7>>;
Enc12@element =:= 'around-a-curve' ->
<<0:1,5:7>>;
Enc12@element =:= 'on-minor-roads' ->
<<0:1,6:7>>;
Enc12@element =:= 'in-the-opposing-lanes' ->
<<0:1,7:7>>;
Enc12@element =:= 'adjacent-to-roadway' ->
<<0:1,8:7>>;
Enc12@element =:= 'on-bend' ->
<<0:1,9:7>>;
Enc12@element =:= 'entire-intersection' ->
<<0:1,10:7>>;
Enc12@element =:= 'in-the-median' ->
<<0:1,11:7>>;
Enc12@element =:= 'moved-to-side-of-road' ->
<<0:1,12:7>>;
Enc12@element =:= 'moved-to-shoulder' ->
<<0:1,13:7>>;
Enc12@element =:= 'on-the-roadway' ->
<<0:1,14:7>>;
Enc12@element =:= 'in-shaded-areas' ->
<<0:1,15:7>>;
Enc12@element =:= 'in-low-lying-areas' ->
<<0:1,16:7>>;
Enc12@element =:= 'in-the-downtown-area' ->
<<0:1,17:7>>;
Enc12@element =:= 'in-the-inner-city-area' ->
<<0:1,18:7>>;
Enc12@element =:= 'in-parts' ->
<<0:1,19:7>>;
Enc12@element =:= 'in-some-places' ->
<<0:1,20:7>>;
Enc12@element =:= 'in-the-ditch' ->
<<0:1,21:7>>;
Enc12@element =:= 'in-the-valley' ->
<<0:1,22:7>>;
Enc12@element =:= 'on-hill-top' ->
<<0:1,23:7>>;
Enc12@element =:= 'near-the-foothills' ->
<<0:1,24:7>>;
Enc12@element =:= 'at-high-altitudes' ->
<<0:1,25:7>>;
Enc12@element =:= 'near-the-lake' ->
<<0:1,26:7>>;
Enc12@element =:= 'near-the-shore' ->
<<0:1,27:7>>;
Enc12@element =:= 'over-the-crest-of-a-hill' ->
<<0:1,28:7>>;
Enc12@element =:= 'other-than-on-the-roadway' ->
<<0:1,29:7>>;
Enc12@element =:= 'near-the-beach' ->
<<0:1,30:7>>;
Enc12@element =:= 'near-beach-access-point' ->
<<0:1,31:7>>;
Enc12@element =:= 'lower-level' ->
<<0:1,32:7>>;
Enc12@element =:= 'upper-level' ->
<<0:1,33:7>>;
Enc12@element =:= airport ->
<<0:1,34:7>>;
Enc12@element =:= concourse ->
<<0:1,35:7>>;
Enc12@element =:= gate ->
<<0:1,36:7>>;
Enc12@element =:= 'baggage-claim' ->
<<0:1,37:7>>;
Enc12@element =:= 'customs-point' ->
<<0:1,38:7>>;
Enc12@element =:= station ->
<<0:1,39:7>>;
Enc12@element =:= platform ->
<<0:1,40:7>>;
Enc12@element =:= dock ->
<<0:1,41:7>>;
Enc12@element =:= depot ->
<<0:1,42:7>>;
Enc12@element =:= 'ev-charging-point' ->
<<0:1,43:7>>;
Enc12@element =:= 'information-welcome-point' ->
<<0:1,44:7>>;
Enc12@element =:= 'at-rest-area' ->
<<0:1,45:7>>;
Enc12@element =:= 'at-service-area' ->
<<0:1,46:7>>;
Enc12@element =:= 'at-weigh-station' ->
<<0:1,47:7>>;
Enc12@element =:= 'picnic-areas' ->
<<0:1,48:7>>;
Enc12@element =:= 'rest-area' ->
<<0:1,49:7>>;
Enc12@element =:= 'service-stations' ->
<<0:1,50:7>>;
Enc12@element =:= toilets ->
<<0:1,51:7>>;
Enc12@element =:= 'on-the-right' ->
<<0:1,52:7>>;
Enc12@element =:= 'on-the-left' ->
<<0:1,53:7>>;
Enc12@element =:= 'in-the-center' ->
<<0:1,54:7>>;
Enc12@element =:= 'in-the-opposite-direction' ->
<<0:1,55:7>>;
Enc12@element =:= 'cross-traffic' ->
<<0:1,56:7>>;
Enc12@element =:= 'northbound-traffic' ->
<<0:1,57:7>>;
Enc12@element =:= 'eastbound-traffic' ->
<<0:1,58:7>>;
Enc12@element =:= 'southbound-traffic' ->
<<0:1,59:7>>;
Enc12@element =:= 'westbound-traffic' ->
<<0:1,60:7>>;
Enc12@element =:= north ->
<<0:1,61:7>>;
Enc12@element =:= south ->
<<0:1,62:7>>;
Enc12@element =:= east ->
<<0:1,63:7>>;
Enc12@element =:= west ->
<<0:1,64:7>>;
Enc12@element =:= northeast ->
<<0:1,65:7>>;
Enc12@element =:= northwest ->
<<0:1,66:7>>;
Enc12@element =:= southeast ->
<<0:1,67:7>>;
Enc12@element =:= southwest ->
<<0:1,68:7>>;
Enc12@element =:= 'mountain-pass' ->
<<0:1,69:7>>;
Enc12@element =:= 'reservation-center' ->
<<0:1,70:7>>;
Enc12@element =:= 'nearby-basin' ->
<<0:1,71:7>>;
Enc12@element =:= 'on-tracks' ->
<<0:1,72:7>>;
Enc12@element =:= dip ->
<<0:1,73:7>>;
Enc12@element =:= 'traffic-circle' ->
<<0:1,74:7>>;
Enc12@element =:= 'park-and-ride-lot' ->
<<0:1,75:7>>;
Enc12@element =:= to ->
<<0:1,76:7>>;
Enc12@element =:= by ->
<<0:1,77:7>>;
Enc12@element =:= through ->
<<0:1,78:7>>;
Enc12@element =:= 'area-of' ->
<<0:1,79:7>>;
Enc12@element =:= under ->
<<0:1,80:7>>;
Enc12@element =:= over ->
<<0:1,81:7>>;
Enc12@element =:= from ->
<<0:1,82:7>>;
Enc12@element =:= approaching ->
<<0:1,83:7>>;
Enc12@element =:= 'entering-at' ->
<<0:1,84:7>>;
Enc12@element =:= 'exiting-at' ->
<<0:1,85:7>>;
Enc12@element =:= 'across-tracks' ->
<<0:1,86:7>>;
Enc12@element =:= 'in-street' ->
<<0:1,87:7>>;
Enc12@element =:= 'on-curve' ->
<<0:1,88:7>>;
Enc12@element =:= shoulder ->
<<0:1,89:7>>;
Enc12@element =:= crossover ->
<<0:1,90:7>>;
Enc12@element =:= 'cross-road' ->
<<0:1,91:7>>;
Enc12@element =:= 'side-road' ->
<<0:1,92:7>>;
Enc12@element =:= 'bus-stop' ->
<<0:1,93:7>>;
Enc12@element =:= intersection ->
<<0:1,94:7>>;
Enc12@element =:= 'roadside-park' ->
<<0:1,95:7>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc12@element}}})
end
end,
begin
%% attribute dateTime(5) with type DDateTime
Enc15@element = element(6, Val),
enc_DDateTime(Enc15@element)
end|begin
%% attribute vertEvent(6) with type BIT STRING
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@bs = try bit_string_name2pos_80(Enc16@element) of
Enc17@positions ->
bitstring_from_positions(Enc17@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Enc16@element, 5)
end,
Enc17@bits = bit_size(Enc17@bs),
if Enc17@bits =:= 5 ->
Enc17@bs
end
end
end
end].


dec_ObstacleDetection(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute obDist(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute obDirect(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:15,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute description(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute locationDetails(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:7,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> 'on-bridges';
1 -> 'in-tunnels';
2 -> 'entering-or-leaving-tunnels';
3 -> 'on-ramps';
4 -> 'in-road-construction-area';
5 -> 'around-a-curve';
6 -> 'on-minor-roads';
7 -> 'in-the-opposing-lanes';
8 -> 'adjacent-to-roadway';
9 -> 'on-bend';
10 -> 'entire-intersection';
11 -> 'in-the-median';
12 -> 'moved-to-side-of-road';
13 -> 'moved-to-shoulder';
14 -> 'on-the-roadway';
15 -> 'in-shaded-areas';
16 -> 'in-low-lying-areas';
17 -> 'in-the-downtown-area';
18 -> 'in-the-inner-city-area';
19 -> 'in-parts';
20 -> 'in-some-places';
21 -> 'in-the-ditch';
22 -> 'in-the-valley';
23 -> 'on-hill-top';
24 -> 'near-the-foothills';
25 -> 'at-high-altitudes';
26 -> 'near-the-lake';
27 -> 'near-the-shore';
28 -> 'over-the-crest-of-a-hill';
29 -> 'other-than-on-the-roadway';
30 -> 'near-the-beach';
31 -> 'near-beach-access-point';
32 -> 'lower-level';
33 -> 'upper-level';
34 -> airport;
35 -> concourse;
36 -> gate;
37 -> 'baggage-claim';
38 -> 'customs-point';
39 -> station;
40 -> platform;
41 -> dock;
42 -> depot;
43 -> 'ev-charging-point';
44 -> 'information-welcome-point';
45 -> 'at-rest-area';
46 -> 'at-service-area';
47 -> 'at-weigh-station';
48 -> 'picnic-areas';
49 -> 'rest-area';
50 -> 'service-stations';
51 -> toilets;
52 -> 'on-the-right';
53 -> 'on-the-left';
54 -> 'in-the-center';
55 -> 'in-the-opposite-direction';
56 -> 'cross-traffic';
57 -> 'northbound-traffic';
58 -> 'eastbound-traffic';
59 -> 'southbound-traffic';
60 -> 'westbound-traffic';
61 -> north;
62 -> south;
63 -> east;
64 -> west;
65 -> northeast;
66 -> northwest;
67 -> southeast;
68 -> southwest;
69 -> 'mountain-pass';
70 -> 'reservation-center';
71 -> 'nearby-basin';
72 -> 'on-tracks';
73 -> dip;
74 -> 'traffic-circle';
75 -> 'park-and-ride-lot';
76 -> to;
77 -> by;
78 -> through;
79 -> 'area-of';
80 -> under;
81 -> over;
82 -> from;
83 -> approaching;
84 -> 'entering-at';
85 -> 'exiting-at';
86 -> 'across-tracks';
87 -> 'in-street';
88 -> 'on-curve';
89 -> shoulder;
90 -> crossover;
91 -> 'cross-road';
92 -> 'side-road';
93 -> 'bus-stop';
94 -> intersection;
95 -> 'roadside-park';
_ -> exit({error,{asn1,{decode_enumerated,V6@V3}}})
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<0:1,V6@V9:7,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10};
<<1:1,0:1,V6@V10:14,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
{V6@V10,V6@Buf11};
<<1:1,1:1,V6@V10:6,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
V6@Mul12 = V6@V10 * 16384,
{V6@Mul12,V6@Buf11}
end,
<<V6@V13:V6@V6/unit:8,V6@Buf14/bitstring>> = V6@Buf7,
{V6@V13,V6@Buf14}
end,
V6@Int15 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int15,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute dateTime(5) with type DDateTime
{Term5,Bytes7} = dec_DDateTime(Bytes6),

%% attribute vertEvent(6) with type BIT STRING
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V7@V0:5/binary-unit:1,V7@Buf1/bitstring>> = Bytes7,
{V7@V2,V7@Buf3}  = {decode_named_bit_string(V7@V0, [{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V7@Buf1},
{V7@V2,V7@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'ObstacleDetection',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.

enc_OffsetSystem(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute scale(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element =:= asn1_NOVALUE ->
[];
Enc2@element bsr 4 =:= 0 ->
<<Enc2@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute offset(2) with type CHOICE
Enc5@element = element(3, Val),
enc_OffsetSystem_offset(Enc5@element)
end].
enc_OffsetSystem_offset(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= xy ->
[<<0:1>>|enc_NodeListXY(ChoiceVal)];
ChoiceTag =:= ll ->
[<<1:1>>|enc_NodeListLL(ChoiceVal)]
end.


dec_OffsetSystem(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute scale(1) with type INTEGER
{Term1,Bytes2} = case Opt band 1 of
1 ->
begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute offset(2) with type CHOICE
{Term2,Bytes3} = dec_OffsetSystem_offset(Bytes2),
Res1 = {'OffsetSystem',Term1,Term2},
{Res1,Bytes3}.


dec_OffsetSystem_offset(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NodeListXY(Bytes1)
end,
{{xy,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_NodeListLL(Bytes1)
end,
{{ll,Val},NewBytes}
end.
enc_OverlayLaneList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 5 ->
[<<Enc2@len@sub:3>>|[if Comp bsr 8 =:= 0 ->
[Comp];
true ->
exit({error,{asn1,{illegal_integer,Comp}}})
end || Comp <- Val]]
end.



dec_OverlayLaneList(Bytes) ->
%% Length with constraint {1,5}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components81(V1@Add2, V1@Buf1, []).

enc_PathHistory(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute initialPosition(1) with type FullPositionVector
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_FullPositionVector(Enc4@element)
end
end,
begin
%% attribute currGNSSstatus(2) with type BIT STRING
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bs = try bit_string_name2pos_82(Enc6@element) of
Enc7@positions ->
bitstring_from_positions(Enc7@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc6@element, 8)
end,
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 8 ->
Enc7@bs
end
end
end
end|begin
%% attribute crumbData(3) with type PathHistoryPointList
Enc9@element = element(4, Val),
enc_PathHistoryPointList(Enc9@element)
end].


dec_PathHistory(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute initialPosition(1) with type FullPositionVector
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_FullPositionVector(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute currGNSSstatus(2) with type BIT STRING
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:8/binary-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V3@Buf1},
{V3@V2,V3@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute crumbData(3) with type PathHistoryPointList
{Term3,Bytes5} = dec_PathHistoryPointList(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'PathHistory',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_PathHistoryPointList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 23 ->
[<<Enc1@len@sub:5>>|[enc_PathHistoryPoint(Comp) || Comp <- Val]]
end.



dec_PathHistoryPointList(Bytes) ->
%% Length with constraint {1,23}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components83(V1@Add2, V1@Buf1, []).

enc_PathHistoryPoint(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute latOffset(1) with type INTEGER
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - -131072,
if Enc5@element@sub bsr 18 =:= 0 ->
<<Enc5@element@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute lonOffset(2) with type INTEGER
Enc7@element = element(3, Val),
Enc7@element@sub = Enc7@element - -131072,
if Enc7@element@sub bsr 18 =:= 0 ->
<<Enc7@element@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute elevationOffset(3) with type INTEGER
Enc9@element = element(4, Val),
Enc9@element@sub = Enc9@element - -2048,
if Enc9@element@sub bsr 12 =:= 0 ->
<<Enc9@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute timeOffset(4) with type INTEGER
Enc11@element = element(5, Val),
Enc11@element@sub = Enc11@element - 1,
if 0 =< Enc11@element@sub, Enc11@element@sub < 65535 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute speed(5) with type INTEGER
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 13 =:= 0 ->
<<Enc13@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute posAccuracy(6) with type PositionalAccuracy
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionalAccuracy(Enc16@element)
end
end|begin
%% attribute heading(7) with type INTEGER
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
0 =< Enc18@element, Enc18@element < 241 ->
[Enc18@element];
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end].


dec_PathHistoryPoint(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute latOffset(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:18,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -131072,
{V3@Add2,V3@Buf1}
end,

%% attribute lonOffset(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:18,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -131072,
{V4@Add2,V4@Buf1}
end,

%% attribute elevationOffset(3) with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -2048,
{V5@Add2,V5@Buf1}
end,

%% attribute timeOffset(4) with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:16,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end,

%% attribute speed(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:13,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute posAccuracy(6) with type PositionalAccuracy
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
dec_PositionalAccuracy(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute heading(7) with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V8@V0:8,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V9@V0,V9@Buf1} = case Bytes9 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
V9@Mul9 = V9@V7 * 16384,
{V9@Mul9,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V10:V9@V0/bitstring-unit:1,V9@Buf11/bitstring>> = V9@Buf1,
{V9@V10,V9@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'PathHistoryPoint',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.

enc_PathPrediction(Val) ->
[begin
%% attribute radiusOfCurve(1) with type INTEGER
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - -32767,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
<<0:1,Enc2@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute confidence(2) with type INTEGER
Enc4@element = element(3, Val),
if 0 =< Enc4@element, Enc4@element < 201 ->
[Enc4@element];
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end].


dec_PathPrediction(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute radiusOfCurve(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -32767,
{V2@Add2,V2@Buf1}
end,

%% attribute confidence(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
Res1 = {'PathPrediction',Term1,Term2},
{Res1,Bytes5}.

enc_PivotPointDescription(Val) ->
[begin
%% attribute pivotOffset(1) with type INTEGER
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - -1024,
if Enc2@element@sub bsr 11 =:= 0 ->
<<0:1,Enc2@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end,
begin
%% attribute pivotAngle(2) with type INTEGER
Enc4@element = element(3, Val),
if 0 =< Enc4@element, Enc4@element < 28801 ->
<<Enc4@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end|begin
%% attribute pivots(3) with type BOOLEAN
Enc6@element = element(4, Val),
if Enc6@element =:= false ->
<<0:1>>;
Enc6@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc6@element}}})
end
end].


dec_PivotPointDescription(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute pivotOffset(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -1024,
{V2@Add2,V2@Buf1}
end,

%% attribute pivotAngle(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute pivots(3) with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'PivotPointDescription',Term1,Term2,Term3},
{Res1,Bytes6}.

enc_Position3D(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute lat(1) with type INTEGER
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - -900000000,
if 0 =< Enc4@element@sub, Enc4@element@sub < 1800000002 ->
<<Enc4@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute long(2) with type INTEGER
Enc6@element = element(3, Val),
Enc6@element@sub = Enc6@element - -1799999999,
if 0 =< Enc6@element@sub, Enc6@element@sub < 3600000001 ->
<<Enc6@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute elevation(3) with type INTEGER
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - -4096,
if Enc8@element@sub bsr 16 =:= 0 ->
<<Enc8@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end|begin
%% attribute regional(4) with type SEQUENCE OF
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_Position3D_regional(Enc11@element)
end
end].
enc_Position3D_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_Position3D_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_Position3D_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_Position3D(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute lat(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:31,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -900000000,
{V3@Add2,V3@Buf1}
end,

%% attribute long(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:32,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -1799999999,
{V4@Add2,V4@Buf1}
end,

%% attribute elevation(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -4096,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute regional(4) with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_Position3D_regional(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'Position3D',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.


dec_Position3D_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components84(V1@Add2, V1@Buf1, []).


dec_Position3D_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_PositionalAccuracy(Val) ->
[begin
%% attribute semiMajor(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 8 =:= 0 ->
Enc1@element;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute semiMinor(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 8 =:= 0 ->
Enc3@element;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute orientation(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_PositionalAccuracy(Bytes) ->

%% attribute semiMajor(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute semiMinor(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute orientation(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'PositionalAccuracy',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_PositionConfidenceSet(Val) ->
[begin
%% attribute pos(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unavailable ->
<<0:4>>;
Enc1@element =:= a500m ->
<<1:4>>;
Enc1@element =:= a200m ->
<<2:4>>;
Enc1@element =:= a100m ->
<<3:4>>;
Enc1@element =:= a50m ->
<<4:4>>;
Enc1@element =:= a20m ->
<<5:4>>;
Enc1@element =:= a10m ->
<<6:4>>;
Enc1@element =:= a5m ->
<<7:4>>;
Enc1@element =:= a2m ->
<<8:4>>;
Enc1@element =:= a1m ->
<<9:4>>;
Enc1@element =:= a50cm ->
<<10:4>>;
Enc1@element =:= a20cm ->
<<11:4>>;
Enc1@element =:= a10cm ->
<<12:4>>;
Enc1@element =:= a5cm ->
<<13:4>>;
Enc1@element =:= a2cm ->
<<14:4>>;
Enc1@element =:= a1cm ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end|begin
%% attribute elevation(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:4>>;
Enc3@element =:= 'elev-500-00' ->
<<1:4>>;
Enc3@element =:= 'elev-200-00' ->
<<2:4>>;
Enc3@element =:= 'elev-100-00' ->
<<3:4>>;
Enc3@element =:= 'elev-050-00' ->
<<4:4>>;
Enc3@element =:= 'elev-020-00' ->
<<5:4>>;
Enc3@element =:= 'elev-010-00' ->
<<6:4>>;
Enc3@element =:= 'elev-005-00' ->
<<7:4>>;
Enc3@element =:= 'elev-002-00' ->
<<8:4>>;
Enc3@element =:= 'elev-001-00' ->
<<9:4>>;
Enc3@element =:= 'elev-000-50' ->
<<10:4>>;
Enc3@element =:= 'elev-000-20' ->
<<11:4>>;
Enc3@element =:= 'elev-000-10' ->
<<12:4>>;
Enc3@element =:= 'elev-000-05' ->
<<13:4>>;
Enc3@element =:= 'elev-000-02' ->
<<14:4>>;
Enc3@element =:= 'elev-000-01' ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end].


dec_PositionConfidenceSet(Bytes) ->

%% attribute pos(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> a500m;
2 -> a200m;
3 -> a100m;
4 -> a50m;
5 -> a20m;
6 -> a10m;
7 -> a5m;
8 -> a2m;
9 -> a1m;
10 -> a50cm;
11 -> a20cm;
12 -> a10cm;
13 -> a5cm;
14 -> a2cm;
15 -> a1cm
end,
{V1@Int2,V1@Buf1}
end,

%% attribute elevation(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> 'elev-500-00';
2 -> 'elev-200-00';
3 -> 'elev-100-00';
4 -> 'elev-050-00';
5 -> 'elev-020-00';
6 -> 'elev-010-00';
7 -> 'elev-005-00';
8 -> 'elev-002-00';
9 -> 'elev-001-00';
10 -> 'elev-000-50';
11 -> 'elev-000-20';
12 -> 'elev-000-10';
13 -> 'elev-000-05';
14 -> 'elev-000-02';
15 -> 'elev-000-01'
end,
{V2@Int2,V2@Buf1}
end,
Res1 = {'PositionConfidenceSet',Term1,Term2},
{Res1,Bytes2}.

enc_PreemptPriorityList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_SignalControlZone(Comp) || Comp <- Val]]
end.



dec_PreemptPriorityList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components85(V1@Add2, V1@Buf1, []).

enc_SignalControlZone(Val) ->
[<<0:1>>|begin
%% attribute zone(1) with type SEQUENCE
Enc2@element = element(2, Val),
enc_SignalControlZone_zone(Enc2@element)
end].
enc_SignalControlZone_zone(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SignalControlZone(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute zone(1) with type SEQUENCE
{Term1,Bytes2} = dec_SignalControlZone_zone(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8};
<<1:1,1:1,V2@V7:6,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
V2@Mul9 = V2@V7 * 16384,
{V2@Mul9,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V10:V2@V0/bitstring-unit:1,V2@Buf11/bitstring>> = V2@Buf1,
{V2@V10,V2@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
Res1 = {'SignalControlZone',Term1},
{Res1,Bytes4}.


dec_SignalControlZone_zone(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'SignalControlZone_zone',Term1,Term2},
{Res1,Bytes2}.

enc_PrivilegedEvents(Val) ->
[begin
%% attribute sspRights(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element bsr 5 =:= 0 ->
<<0:1,Enc2@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute event(2) with type BIT STRING
Enc4@element = element(3, Val),
Enc5@bs = try bit_string_name2pos_86(Enc4@element) of
Enc5@positions ->
bitstring_from_positions(Enc5@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc4@element, 16)
end,
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 16 ->
Enc5@bs
end
end].


dec_PrivilegedEvents(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute sspRights(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute event(2) with type BIT STRING
{Term2,Bytes3} = begin
<<V3@V0:16/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
Res1 = {'PrivilegedEvents',Term1,Term2},
{Res1,Bytes5}.

enc_PropelledInformation(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= human ->
if ChoiceVal =:= unavailable ->
<<0:1,0:2,0:1,0:3>>;
ChoiceVal =:= otherTypes ->
<<0:1,0:2,0:1,1:3>>;
ChoiceVal =:= onFoot ->
<<0:1,0:2,0:1,2:3>>;
ChoiceVal =:= skateboard ->
<<0:1,0:2,0:1,3:3>>;
ChoiceVal =:= pushOrKickScooter ->
<<0:1,0:2,0:1,4:3>>;
ChoiceVal =:= wheelchair ->
<<0:1,0:2,0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= animal ->
if ChoiceVal =:= unavailable ->
<<0:1,1:2,0:1,0:2>>;
ChoiceVal =:= otherTypes ->
<<0:1,1:2,0:1,1:2>>;
ChoiceVal =:= animalMounted ->
<<0:1,1:2,0:1,2:2>>;
ChoiceVal =:= animalDrawnCarriage ->
<<0:1,1:2,0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= motor ->
if ChoiceVal =:= unavailable ->
<<0:1,2:2,0:1,0:3>>;
ChoiceVal =:= otherTypes ->
<<0:1,2:2,0:1,1:3>>;
ChoiceVal =:= wheelChair ->
<<0:1,2:2,0:1,2:3>>;
ChoiceVal =:= bicycle ->
<<0:1,2:2,0:1,3:3>>;
ChoiceVal =:= scooter ->
<<0:1,2:2,0:1,4:3>>;
ChoiceVal =:= selfBalancingDevice ->
<<0:1,2:2,0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end
end.


dec_PropelledInformation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> onFoot;
3 -> skateboard;
4 -> pushOrKickScooter;
5 -> wheelchair;
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{human,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> animalMounted;
3 -> animalDrawnCarriage
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end
end,
{{animal,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes2 of
<<0:1,V4@V3:3,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> wheelChair;
3 -> bicycle;
4 -> scooter;
5 -> selfBalancingDevice;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end
end,
{{motor,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RegionList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 6 =:= 0 ->
[<<Enc1@len@sub:6>>|[enc_RegionOffsets(Comp) || Comp <- Val]]
end.



dec_RegionList(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components87(V1@Add2, V1@Buf1, []).

enc_RegionOffsets(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute xOffset(1) with type INTEGER
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - -32768,
if Enc2@element@sub bsr 16 =:= 0 ->
<<Enc2@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end,
begin
%% attribute yOffset(2) with type INTEGER
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - -32768,
if Enc4@element@sub bsr 16 =:= 0 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end|begin
%% attribute zOffset(3) with type INTEGER
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@element@sub = Enc6@element - -32768,
if Enc6@element@sub bsr 16 =:= 0 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end
end
end].


dec_RegionOffsets(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute xOffset(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -32768,
{V2@Add2,V2@Buf1}
end,

%% attribute yOffset(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -32768,
{V3@Add2,V3@Buf1}
end,

%% attribute zOffset(3) with type INTEGER
{Term3,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -32768,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,
Res1 = {'RegionOffsets',Term1,Term2,Term3},
{Res1,Bytes4}.

enc_RegionPointSet(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute anchor(1) with type Position3D
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_Position3D(Enc4@element)
end
end,
begin
%% attribute scale(2) with type INTEGER
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element bsr 4 =:= 0 ->
<<Enc6@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end|begin
%% attribute nodeList(3) with type RegionList
Enc9@element = element(4, Val),
enc_RegionList(Enc9@element)
end].


dec_RegionPointSet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute anchor(1) with type Position3D
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_Position3D(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute scale(2) with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute nodeList(3) with type RegionList
{Term3,Bytes5} = dec_RegionList(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'RegionPointSet',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_RegulatorySpeedLimit(Val) ->
[begin
%% attribute type(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unknown ->
<<0:1,0:4>>;
Enc1@element =:= maxSpeedInSchoolZone ->
<<0:1,1:4>>;
Enc1@element =:= maxSpeedInSchoolZoneWhenChildrenArePresent ->
<<0:1,2:4>>;
Enc1@element =:= maxSpeedInConstructionZone ->
<<0:1,3:4>>;
Enc1@element =:= vehicleMinSpeed ->
<<0:1,4:4>>;
Enc1@element =:= vehicleMaxSpeed ->
<<0:1,5:4>>;
Enc1@element =:= vehicleNightMaxSpeed ->
<<0:1,6:4>>;
Enc1@element =:= truckMinSpeed ->
<<0:1,7:4>>;
Enc1@element =:= truckMaxSpeed ->
<<0:1,8:4>>;
Enc1@element =:= truckNightMaxSpeed ->
<<0:1,9:4>>;
Enc1@element =:= vehiclesWithTrailersMinSpeed ->
<<0:1,10:4>>;
Enc1@element =:= vehiclesWithTrailersMaxSpeed ->
<<0:1,11:4>>;
Enc1@element =:= vehiclesWithTrailersNightMaxSpeed ->
<<0:1,12:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end|begin
%% attribute speed(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 13 =:= 0 ->
<<Enc3@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_RegulatorySpeedLimit(Bytes) ->

%% attribute type(1) with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> maxSpeedInSchoolZone;
2 -> maxSpeedInSchoolZoneWhenChildrenArePresent;
3 -> maxSpeedInConstructionZone;
4 -> vehicleMinSpeed;
5 -> vehicleMaxSpeed;
6 -> vehicleNightMaxSpeed;
7 -> truckMinSpeed;
8 -> truckMaxSpeed;
9 -> truckNightMaxSpeed;
10 -> vehiclesWithTrailersMinSpeed;
11 -> vehiclesWithTrailersMaxSpeed;
12 -> vehiclesWithTrailersNightMaxSpeed;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute speed(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:13,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'RegulatorySpeedLimit',Term1,Term2},
{Res1,Bytes2}.

enc_RequestedItemList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[if Comp =:= reserved ->
<<0:1,0:5>>;
Comp =:= itemA ->
<<0:1,1:5>>;
Comp =:= itemB ->
<<0:1,2:5>>;
Comp =:= itemC ->
<<0:1,3:5>>;
Comp =:= itemD ->
<<0:1,4:5>>;
Comp =:= itemE ->
<<0:1,5:5>>;
Comp =:= itemF ->
<<0:1,6:5>>;
Comp =:= itemG ->
<<0:1,7:5>>;
Comp =:= itemI ->
<<0:1,8:5>>;
Comp =:= itemJ ->
<<0:1,9:5>>;
Comp =:= itemK ->
<<0:1,10:5>>;
Comp =:= itemL ->
<<0:1,11:5>>;
Comp =:= itemM ->
<<0:1,12:5>>;
Comp =:= itemN ->
<<0:1,13:5>>;
Comp =:= itemO ->
<<0:1,14:5>>;
Comp =:= itemP ->
<<0:1,15:5>>;
Comp =:= itemQ ->
<<0:1,16:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Comp}}})
end || Comp <- Val]]
end.



dec_RequestedItemList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components88(V1@Add2, V1@Buf1, []).

enc_RequestorDescription(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
Enc8@element = element(10, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute id(1) with type VehicleID
Enc10@element = element(2, Val),
enc_VehicleID(Enc10@element)
end,
begin
%% attribute type(2) with type RequestorType
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestorType(Enc11@element)
end
end,
begin
%% attribute position(3) with type RequestorPositionVector
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestorPositionVector(Enc13@element)
end
end,
begin
%% attribute name(4) with type IA5String
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@len = length(Enc15@element),
Enc16@bin = encode_chars(Enc15@element, 7),
Enc16@len@sub = Enc16@len - 1,
if 0 =< Enc16@len@sub, Enc16@len@sub < 63 ->
[<<Enc16@len@sub:6>>|Enc16@bin]
end
end
end
end,
begin
%% attribute routeName(5) with type IA5String
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@len = length(Enc18@element),
Enc19@bin = encode_chars(Enc18@element, 7),
Enc19@len@sub = Enc19@len - 1,
if 0 =< Enc19@len@sub, Enc19@len@sub < 63 ->
[<<Enc19@len@sub:6>>|Enc19@bin]
end
end
end
end,
begin
%% attribute transitStatus(6) with type BIT STRING
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@bs = try bit_string_name2pos_89(Enc21@element) of
Enc22@positions ->
bitstring_from_positions(Enc22@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc21@element, 8)
end,
Enc22@bits = bit_size(Enc22@bs),
if Enc22@bits =:= 8 ->
Enc22@bs
end
end
end
end,
begin
%% attribute transitOccupancy(7) with type ENUMERATED
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element =:= occupancyUnknown ->
<<0:3>>;
Enc24@element =:= occupancyEmpty ->
<<1:3>>;
Enc24@element =:= occupancyVeryLow ->
<<2:3>>;
Enc24@element =:= occupancyLow ->
<<3:3>>;
Enc24@element =:= occupancyMed ->
<<4:3>>;
Enc24@element =:= occupancyHigh ->
<<5:3>>;
Enc24@element =:= occupancyNearlyFull ->
<<6:3>>;
Enc24@element =:= occupancyFull ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc24@element}}})
end
end,
begin
%% attribute transitSchedule(8) with type INTEGER
Enc27@element = element(9, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@element@sub = Enc27@element - -122,
if 0 =< Enc27@element@sub, Enc27@element@sub < 244 ->
Enc27@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc27@element}}})
end
end
end
end|begin
%% attribute regional(9) with type SEQUENCE OF
Enc30@element = element(10, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestorDescription_regional(Enc30@element)
end
end].
enc_RequestorDescription_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_RequestorDescription_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_RequestorDescription_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_RequestorDescription(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute id(1) with type VehicleID
{Term1,Bytes3} = dec_VehicleID(Bytes2),

%% attribute type(2) with type RequestorType
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
dec_RequestorType(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute position(3) with type RequestorPositionVector
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
dec_RequestorPositionVector(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute name(4) with type IA5String
{Term4,Bytes6} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes5,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute routeName(5) with type IA5String
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes6,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:7,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V5,V4@Buf6}  = {decode_chars(V4@V3, 7),V4@Buf4},
{V4@V5,V4@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute transitStatus(6) with type BIT STRING
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:8/binary-unit:1,V5@Buf1/bitstring>> = Bytes7,
{V5@V2,V5@Buf3}  = {decode_named_bit_string(V5@V0, [{loading,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{charging,4},{atStopLine,5}]),V5@Buf1},
{V5@V2,V5@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute transitOccupancy(7) with type ENUMERATED
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:3,V6@Buf1/bitstring>> = Bytes8,
V6@Int2 = case V6@V0 of
0 -> occupancyUnknown;
1 -> occupancyEmpty;
2 -> occupancyVeryLow;
3 -> occupancyLow;
4 -> occupancyMed;
5 -> occupancyHigh;
6 -> occupancyNearlyFull;
7 -> occupancyFull
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute transitSchedule(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes9,
V7@Add2 = V7@V0 + -122,
{V7@Add2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute regional(9) with type SEQUENCE OF
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_RequestorDescription_regional(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V8@V0,V8@Buf1} = case Bytes11 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'RequestorDescription',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.


dec_RequestorDescription_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components90(V1@Add2, V1@Buf1, []).


dec_RequestorDescription_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_RequestorPositionVector(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute position(1) with type Position3D
Enc4@element = element(2, Val),
enc_Position3D(Enc4@element)
end,
begin
%% attribute heading(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 28801 ->
<<Enc5@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute speed(3) with type TransmissionAndSpeed
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransmissionAndSpeed(Enc8@element)
end
end].


dec_RequestorPositionVector(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute position(1) with type Position3D
{Term1,Bytes3} = dec_Position3D(Bytes2),

%% attribute heading(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute speed(3) with type TransmissionAndSpeed
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_TransmissionAndSpeed(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'RequestorPositionVector',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_RequestorType(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute role(1) with type ENUMERATED
Enc7@element = element(2, Val),
if Enc7@element =:= basicVehicle ->
<<0:1,0:5>>;
Enc7@element =:= publicTransport ->
<<0:1,1:5>>;
Enc7@element =:= specialTransport ->
<<0:1,2:5>>;
Enc7@element =:= dangerousGoods ->
<<0:1,3:5>>;
Enc7@element =:= roadWork ->
<<0:1,4:5>>;
Enc7@element =:= roadRescue ->
<<0:1,5:5>>;
Enc7@element =:= emergency ->
<<0:1,6:5>>;
Enc7@element =:= safetyCar ->
<<0:1,7:5>>;
Enc7@element =:= 'none-unknown' ->
<<0:1,8:5>>;
Enc7@element =:= truck ->
<<0:1,9:5>>;
Enc7@element =:= motorcycle ->
<<0:1,10:5>>;
Enc7@element =:= roadSideSource ->
<<0:1,11:5>>;
Enc7@element =:= police ->
<<0:1,12:5>>;
Enc7@element =:= fire ->
<<0:1,13:5>>;
Enc7@element =:= ambulance ->
<<0:1,14:5>>;
Enc7@element =:= dot ->
<<0:1,15:5>>;
Enc7@element =:= transit ->
<<0:1,16:5>>;
Enc7@element =:= slowMoving ->
<<0:1,17:5>>;
Enc7@element =:= stopNgo ->
<<0:1,18:5>>;
Enc7@element =:= cyclist ->
<<0:1,19:5>>;
Enc7@element =:= pedestrian ->
<<0:1,20:5>>;
Enc7@element =:= nonMotorized ->
<<0:1,21:5>>;
Enc7@element =:= military ->
<<0:1,22:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute subrole(2) with type ENUMERATED
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element =:= requestSubRoleUnKnown ->
<<0:4>>;
Enc9@element =:= requestSubRole1 ->
<<1:4>>;
Enc9@element =:= requestSubRole2 ->
<<2:4>>;
Enc9@element =:= requestSubRole3 ->
<<3:4>>;
Enc9@element =:= requestSubRole4 ->
<<4:4>>;
Enc9@element =:= requestSubRole5 ->
<<5:4>>;
Enc9@element =:= requestSubRole6 ->
<<6:4>>;
Enc9@element =:= requestSubRole7 ->
<<7:4>>;
Enc9@element =:= requestSubRole8 ->
<<8:4>>;
Enc9@element =:= requestSubRole9 ->
<<9:4>>;
Enc9@element =:= requestSubRole10 ->
<<10:4>>;
Enc9@element =:= requestSubRole11 ->
<<11:4>>;
Enc9@element =:= requestSubRole12 ->
<<12:4>>;
Enc9@element =:= requestSubRole13 ->
<<13:4>>;
Enc9@element =:= requestSubRole14 ->
<<14:4>>;
Enc9@element =:= requestSubRoleReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc9@element}}})
end
end,
begin
%% attribute request(3) with type ENUMERATED
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element =:= requestImportanceLevelUnKnown ->
<<0:4>>;
Enc12@element =:= requestImportanceLevel1 ->
<<1:4>>;
Enc12@element =:= requestImportanceLevel2 ->
<<2:4>>;
Enc12@element =:= requestImportanceLevel3 ->
<<3:4>>;
Enc12@element =:= requestImportanceLevel4 ->
<<4:4>>;
Enc12@element =:= requestImportanceLevel5 ->
<<5:4>>;
Enc12@element =:= requestImportanceLevel6 ->
<<6:4>>;
Enc12@element =:= requestImportanceLevel7 ->
<<7:4>>;
Enc12@element =:= requestImportanceLevel8 ->
<<8:4>>;
Enc12@element =:= requestImportanceLevel9 ->
<<9:4>>;
Enc12@element =:= requestImportanceLevel10 ->
<<10:4>>;
Enc12@element =:= requestImportanceLevel11 ->
<<11:4>>;
Enc12@element =:= requestImportanceLevel12 ->
<<12:4>>;
Enc12@element =:= requestImportanceLevel13 ->
<<13:4>>;
Enc12@element =:= requestImportanceLevel14 ->
<<14:4>>;
Enc12@element =:= requestImportanceReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc12@element}}})
end
end,
begin
%% attribute iso3883(4) with type INTEGER
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
0 =< Enc15@element, Enc15@element < 101 ->
<<Enc15@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end,
begin
%% attribute hpmsType(5) with type ENUMERATED
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= none ->
<<0:1,0:4>>;
Enc18@element =:= unknown ->
<<0:1,1:4>>;
Enc18@element =:= special ->
<<0:1,2:4>>;
Enc18@element =:= moto ->
<<0:1,3:4>>;
Enc18@element =:= car ->
<<0:1,4:4>>;
Enc18@element =:= carOther ->
<<0:1,5:4>>;
Enc18@element =:= bus ->
<<0:1,6:4>>;
Enc18@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc18@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc18@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc18@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc18@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc18@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc18@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc18@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc18@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc18@element}}})
end
end|begin
%% attribute regional(6) with type SEQUENCE
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestorType_regional(Enc21@element)
end
end].
enc_RequestorType_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_RequestorType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute role(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:5,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> basicVehicle;
1 -> publicTransport;
2 -> specialTransport;
3 -> dangerousGoods;
4 -> roadWork;
5 -> roadRescue;
6 -> emergency;
7 -> safetyCar;
8 -> 'none-unknown';
9 -> truck;
10 -> motorcycle;
11 -> roadSideSource;
12 -> police;
13 -> fire;
14 -> ambulance;
15 -> dot;
16 -> transit;
17 -> slowMoving;
18 -> stopNgo;
19 -> cyclist;
20 -> pedestrian;
21 -> nonMotorized;
22 -> military;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute subrole(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> requestSubRoleUnKnown;
1 -> requestSubRole1;
2 -> requestSubRole2;
3 -> requestSubRole3;
4 -> requestSubRole4;
5 -> requestSubRole5;
6 -> requestSubRole6;
7 -> requestSubRole7;
8 -> requestSubRole8;
9 -> requestSubRole9;
10 -> requestSubRole10;
11 -> requestSubRole11;
12 -> requestSubRole12;
13 -> requestSubRole13;
14 -> requestSubRole14;
15 -> requestSubRoleReserved
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute request(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> requestImportanceLevelUnKnown;
1 -> requestImportanceLevel1;
2 -> requestImportanceLevel2;
3 -> requestImportanceLevel3;
4 -> requestImportanceLevel4;
5 -> requestImportanceLevel5;
6 -> requestImportanceLevel6;
7 -> requestImportanceLevel7;
8 -> requestImportanceLevel8;
9 -> requestImportanceLevel9;
10 -> requestImportanceLevel10;
11 -> requestImportanceLevel11;
12 -> requestImportanceLevel12;
13 -> requestImportanceLevel13;
14 -> requestImportanceLevel14;
15 -> requestImportanceReserved
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute iso3883(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute hpmsType(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:4,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_RequestorType_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'RequestorType',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_RequestorType_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RequestorType_regional',Term1,Term2},
{Res1,Bytes2}.

enc_RestrictionClassAssignment(Val) ->
[begin
%% attribute id(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 8 =:= 0 ->
Enc1@element;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute users(2) with type RestrictionUserTypeList
Enc3@element = element(3, Val),
enc_RestrictionUserTypeList(Enc3@element)
end].


dec_RestrictionClassAssignment(Bytes) ->

%% attribute id(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute users(2) with type RestrictionUserTypeList
{Term2,Bytes2} = dec_RestrictionUserTypeList(Bytes1),
Res1 = {'RestrictionClassAssignment',Term1,Term2},
{Res1,Bytes2}.

enc_RestrictionClassList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 254 ->
[Enc1@len@sub|[enc_RestrictionClassAssignment(Comp) || Comp <- Val]]
end.



dec_RestrictionClassList(Bytes) ->
%% Length with constraint {1,254}
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components91(V1@Add2, V1@Buf1, []).

enc_RestrictionUserTypeList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_RestrictionUserType(Comp) || Comp <- Val]]
end.



dec_RestrictionUserTypeList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components92(V1@Add2, V1@Buf1, []).

enc_RestrictionUserType(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= basicType ->
if ChoiceVal =:= none ->
<<0:1,0:1,0:1,0:4>>;
ChoiceVal =:= equippedTransit ->
<<0:1,0:1,0:1,1:4>>;
ChoiceVal =:= equippedTaxis ->
<<0:1,0:1,0:1,2:4>>;
ChoiceVal =:= equippedOther ->
<<0:1,0:1,0:1,3:4>>;
ChoiceVal =:= emissionCompliant ->
<<0:1,0:1,0:1,4:4>>;
ChoiceVal =:= equippedBicycle ->
<<0:1,0:1,0:1,5:4>>;
ChoiceVal =:= weightCompliant ->
<<0:1,0:1,0:1,6:4>>;
ChoiceVal =:= heightCompliant ->
<<0:1,0:1,0:1,7:4>>;
ChoiceVal =:= pedestrians ->
<<0:1,0:1,0:1,8:4>>;
ChoiceVal =:= slowMovingPersons ->
<<0:1,0:1,0:1,9:4>>;
ChoiceVal =:= wheelchairUsers ->
<<0:1,0:1,0:1,10:4>>;
ChoiceVal =:= visualDisabilities ->
<<0:1,0:1,0:1,11:4>>;
ChoiceVal =:= audioDisabilities ->
<<0:1,0:1,0:1,12:4>>;
ChoiceVal =:= otherUnknownDisabilities ->
<<0:1,0:1,0:1,13:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= regional ->
[<<0:1,1:1>>|enc_RestrictionUserType_regional(ChoiceVal)]
end.
enc_RestrictionUserType_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_RestrictionUserType_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_RestrictionUserType_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_RestrictionUserType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:4,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> none;
1 -> equippedTransit;
2 -> equippedTaxis;
3 -> equippedOther;
4 -> emissionCompliant;
5 -> equippedBicycle;
6 -> weightCompliant;
7 -> heightCompliant;
8 -> pedestrians;
9 -> slowMovingPersons;
10 -> wheelchairUsers;
11 -> visualDisabilities;
12 -> audioDisabilities;
13 -> otherUnknownDisabilities;
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{basicType,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_RestrictionUserType_regional(Bytes2)
end,
{{regional,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_RestrictionUserType_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components93(V1@Add2, V1@Buf1, []).


dec_RestrictionUserType_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_RoadLaneSetList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|[enc_GenericLane(Comp) || Comp <- Val]]
end.



dec_RoadLaneSetList(Bytes) ->
%% Length with constraint {1,255}
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components94(V1@Add2, V1@Buf1, []).

enc_RoadSegmentList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_RoadSegment(Comp) || Comp <- Val]]
end.



dec_RoadSegmentList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components95(V1@Add2, V1@Buf1, []).

enc_RoadSegmentReferenceID(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute region(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element =:= asn1_NOVALUE ->
[];
Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute id(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_RoadSegmentReferenceID(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute region(1) with type INTEGER
{Term1,Bytes2} = case Opt band 1 of
1 ->
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute id(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'RoadSegmentReferenceID',Term1,Term2},
{Res1,Bytes3}.

enc_RoadSegment(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(9, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute name(1) with type IA5String
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = length(Enc6@element),
Enc7@bin = encode_chars(Enc6@element, 7),
Enc7@len@sub = Enc7@len - 1,
if 0 =< Enc7@len@sub, Enc7@len@sub < 63 ->
[<<Enc7@len@sub:6>>|Enc7@bin]
end
end
end
end,
begin
%% attribute id(2) with type RoadSegmentReferenceID
Enc9@element = element(3, Val),
enc_RoadSegmentReferenceID(Enc9@element)
end,
begin
%% attribute revision(3) with type INTEGER
Enc10@element = element(4, Val),
if Enc10@element bsr 7 =:= 0 ->
<<Enc10@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute refPoint(4) with type Position3D
Enc12@element = element(5, Val),
enc_Position3D(Enc12@element)
end,
begin
%% attribute laneWidth(5) with type INTEGER
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 15 =:= 0 ->
<<Enc13@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute speedLimits(6) with type SpeedLimitList
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedLimitList(Enc16@element)
end
end,
begin
%% attribute roadLaneSet(7) with type RoadLaneSetList
Enc18@element = element(8, Val),
enc_RoadLaneSetList(Enc18@element)
end|begin
%% attribute regional(8) with type SEQUENCE OF
Enc19@element = element(9, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_RoadSegment_regional(Enc19@element)
end
end].
enc_RoadSegment_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_RoadSegment_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_RoadSegment_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_RoadSegment(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute name(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute id(2) with type RoadSegmentReferenceID
{Term2,Bytes4} = dec_RoadSegmentReferenceID(Bytes3),

%% attribute revision(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute refPoint(4) with type Position3D
{Term4,Bytes6} = dec_Position3D(Bytes5),

%% attribute laneWidth(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:15,V5@Buf1/bitstring>> = Bytes6,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute speedLimits(6) with type SpeedLimitList
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
dec_SpeedLimitList(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute roadLaneSet(7) with type RoadLaneSetList
{Term7,Bytes9} = dec_RoadLaneSetList(Bytes8),

%% attribute regional(8) with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
dec_RoadSegment_regional(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V6@V0,V6@Buf1} = case Bytes10 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
Res1 = {'RoadSegment',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
{Res1,Bytes12}.


dec_RoadSegment_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components96(V1@Add2, V1@Buf1, []).


dec_RoadSegment_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_RoadSignID(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute position(1) with type Position3D
Enc3@element = element(2, Val),
enc_Position3D(Enc3@element)
end,
begin
%% attribute viewAngle(2) with type BIT STRING
Enc4@element = element(3, Val),
Enc5@bs = try bit_string_name2pos_21(Enc4@element) of
Enc5@positions ->
bitstring_from_positions(Enc5@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc4@element, 16)
end,
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 16 ->
Enc5@bs
end
end,
begin
%% attribute mutcdCode(3) with type ENUMERATED
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element =:= none ->
<<0:1,0:3>>;
Enc6@element =:= regulatory ->
<<0:1,1:3>>;
Enc6@element =:= warning ->
<<0:1,2:3>>;
Enc6@element =:= maintenance ->
<<0:1,3:3>>;
Enc6@element =:= motoristService ->
<<0:1,4:3>>;
Enc6@element =:= guide ->
<<0:1,5:3>>;
Enc6@element =:= rec ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end|begin
%% attribute crc(4) with type OCTET STRING
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = byte_size(Enc9@element),
if Enc10@len =:= 2 ->
Enc9@element
end
end
end
end].


dec_RoadSignID(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute position(1) with type Position3D
{Term1,Bytes2} = dec_Position3D(Bytes1),

%% attribute viewAngle(2) with type BIT STRING
{Term2,Bytes3} = begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_named_bit_string(V2@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute mutcdCode(3) with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:3,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> none;
1 -> regulatory;
2 -> warning;
3 -> maintenance;
4 -> motoristService;
5 -> guide;
6 -> rec;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute crc(4) with type OCTET STRING
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'RoadSignID',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.

enc_RTCMheader(Val) ->
[begin
%% attribute status(1) with type BIT STRING
Enc1@element = element(2, Val),
Enc2@bs = try bit_string_name2pos_82(Enc1@element) of
Enc2@positions ->
bitstring_from_positions(Enc2@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc1@element, 8)
end,
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 8 ->
Enc2@bs
end
end|begin
%% attribute offsetSet(2) with type AntennaOffsetSet
Enc3@element = element(3, Val),
enc_AntennaOffsetSet(Enc3@element)
end].


dec_RTCMheader(Bytes) ->

%% attribute status(1) with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute offsetSet(2) with type AntennaOffsetSet
{Term2,Bytes2} = dec_AntennaOffsetSet(Bytes1),
Res1 = {'RTCMheader',Term1,Term2},
{Res1,Bytes2}.

enc_RTCMmessageList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 5 ->
[<<Enc2@len@sub:3>>|[begin
Enc1@len = byte_size(Comp),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 1023 ->
[<<Enc1@len@sub:10>>|Comp]
end
end || Comp <- Val]]
end.



dec_RTCMmessageList(Bytes) ->
%% Length with constraint {1,5}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components97(V1@Add2, V1@Buf1, []).

enc_RTCMPackage(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute rtcmHeader(1) with type RTCMheader
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
true ->
enc_RTCMheader(Enc3@element)
end
end|begin
%% attribute msgs(2) with type RTCMmessageList
Enc5@element = element(3, Val),
enc_RTCMmessageList(Enc5@element)
end].


dec_RTCMPackage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute rtcmHeader(1) with type RTCMheader
{Term1,Bytes3} = case Opt band 1 of
1 ->
dec_RTCMheader(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute msgs(2) with type RTCMmessageList
{Term2,Bytes4} = dec_RTCMmessageList(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'RTCMPackage',Term1,Term2},
{Res1,Bytes6}.

enc_Sample(Val) ->
[begin
%% attribute sampleStart(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 8 =:= 0 ->
Enc1@element;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute sampleEnd(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 8 =:= 0 ->
[Enc3@element];
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_Sample(Bytes) ->

%% attribute sampleStart(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute sampleEnd(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'Sample',Term1,Term2},
{Res1,Bytes2}.

enc_SegmentAttributeLLList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp =:= reserved ->
<<0:1,0:6>>;
Comp =:= doNotBlock ->
<<0:1,1:6>>;
Comp =:= whiteLine ->
<<0:1,2:6>>;
Comp =:= mergingLaneLeft ->
<<0:1,3:6>>;
Comp =:= mergingLaneRight ->
<<0:1,4:6>>;
Comp =:= curbOnLeft ->
<<0:1,5:6>>;
Comp =:= curbOnRight ->
<<0:1,6:6>>;
Comp =:= loadingzoneOnLeft ->
<<0:1,7:6>>;
Comp =:= loadingzoneOnRight ->
<<0:1,8:6>>;
Comp =:= turnOutPointOnLeft ->
<<0:1,9:6>>;
Comp =:= turnOutPointOnRight ->
<<0:1,10:6>>;
Comp =:= adjacentParkingOnLeft ->
<<0:1,11:6>>;
Comp =:= adjacentParkingOnRight ->
<<0:1,12:6>>;
Comp =:= adjacentBikeLaneOnLeft ->
<<0:1,13:6>>;
Comp =:= adjacentBikeLaneOnRight ->
<<0:1,14:6>>;
Comp =:= sharedBikeLane ->
<<0:1,15:6>>;
Comp =:= bikeBoxInFront ->
<<0:1,16:6>>;
Comp =:= transitStopOnLeft ->
<<0:1,17:6>>;
Comp =:= transitStopOnRight ->
<<0:1,18:6>>;
Comp =:= transitStopInLane ->
<<0:1,19:6>>;
Comp =:= sharedWithTrackedVehicle ->
<<0:1,20:6>>;
Comp =:= safeIsland ->
<<0:1,21:6>>;
Comp =:= lowCurbsPresent ->
<<0:1,22:6>>;
Comp =:= rumbleStripPresent ->
<<0:1,23:6>>;
Comp =:= audibleSignalingPresent ->
<<0:1,24:6>>;
Comp =:= adaptiveTimingPresent ->
<<0:1,25:6>>;
Comp =:= rfSignalRequestPresent ->
<<0:1,26:6>>;
Comp =:= partialCurbIntrusion ->
<<0:1,27:6>>;
Comp =:= taperToLeft ->
<<0:1,28:6>>;
Comp =:= taperToRight ->
<<0:1,29:6>>;
Comp =:= taperToCenterLine ->
<<0:1,30:6>>;
Comp =:= parallelParking ->
<<0:1,31:6>>;
Comp =:= headInParking ->
<<0:1,32:6>>;
Comp =:= freeParking ->
<<0:1,33:6>>;
Comp =:= timeRestrictionsOnParking ->
<<0:1,34:6>>;
Comp =:= costToPark ->
<<0:1,35:6>>;
Comp =:= midBlockCurbPresent ->
<<0:1,36:6>>;
Comp =:= unEvenPavementPresent ->
<<0:1,37:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Comp}}})
end || Comp <- Val]]
end.



dec_SegmentAttributeLLList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components98(V1@Add2, V1@Buf1, []).

enc_SegmentAttributeXYList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp =:= reserved ->
<<0:1,0:6>>;
Comp =:= doNotBlock ->
<<0:1,1:6>>;
Comp =:= whiteLine ->
<<0:1,2:6>>;
Comp =:= mergingLaneLeft ->
<<0:1,3:6>>;
Comp =:= mergingLaneRight ->
<<0:1,4:6>>;
Comp =:= curbOnLeft ->
<<0:1,5:6>>;
Comp =:= curbOnRight ->
<<0:1,6:6>>;
Comp =:= loadingzoneOnLeft ->
<<0:1,7:6>>;
Comp =:= loadingzoneOnRight ->
<<0:1,8:6>>;
Comp =:= turnOutPointOnLeft ->
<<0:1,9:6>>;
Comp =:= turnOutPointOnRight ->
<<0:1,10:6>>;
Comp =:= adjacentParkingOnLeft ->
<<0:1,11:6>>;
Comp =:= adjacentParkingOnRight ->
<<0:1,12:6>>;
Comp =:= adjacentBikeLaneOnLeft ->
<<0:1,13:6>>;
Comp =:= adjacentBikeLaneOnRight ->
<<0:1,14:6>>;
Comp =:= sharedBikeLane ->
<<0:1,15:6>>;
Comp =:= bikeBoxInFront ->
<<0:1,16:6>>;
Comp =:= transitStopOnLeft ->
<<0:1,17:6>>;
Comp =:= transitStopOnRight ->
<<0:1,18:6>>;
Comp =:= transitStopInLane ->
<<0:1,19:6>>;
Comp =:= sharedWithTrackedVehicle ->
<<0:1,20:6>>;
Comp =:= safeIsland ->
<<0:1,21:6>>;
Comp =:= lowCurbsPresent ->
<<0:1,22:6>>;
Comp =:= rumbleStripPresent ->
<<0:1,23:6>>;
Comp =:= audibleSignalingPresent ->
<<0:1,24:6>>;
Comp =:= adaptiveTimingPresent ->
<<0:1,25:6>>;
Comp =:= rfSignalRequestPresent ->
<<0:1,26:6>>;
Comp =:= partialCurbIntrusion ->
<<0:1,27:6>>;
Comp =:= taperToLeft ->
<<0:1,28:6>>;
Comp =:= taperToRight ->
<<0:1,29:6>>;
Comp =:= taperToCenterLine ->
<<0:1,30:6>>;
Comp =:= parallelParking ->
<<0:1,31:6>>;
Comp =:= headInParking ->
<<0:1,32:6>>;
Comp =:= freeParking ->
<<0:1,33:6>>;
Comp =:= timeRestrictionsOnParking ->
<<0:1,34:6>>;
Comp =:= costToPark ->
<<0:1,35:6>>;
Comp =:= midBlockCurbPresent ->
<<0:1,36:6>>;
Comp =:= unEvenPavementPresent ->
<<0:1,37:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Comp}}})
end || Comp <- Val]]
end.



dec_SegmentAttributeXYList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components99(V1@Add2, V1@Buf1, []).

enc_ShapePointSet(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute anchor(1) with type Position3D
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_Position3D(Enc5@element)
end
end,
begin
%% attribute laneWidth(2) with type INTEGER
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 15 =:= 0 ->
<<Enc7@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute directionality(3) with type ENUMERATED
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element =:= unavailable ->
<<0:2>>;
Enc10@element =:= forward ->
<<1:2>>;
Enc10@element =:= reverse ->
<<2:2>>;
Enc10@element =:= both ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc10@element}}})
end
end|begin
%% attribute nodeList(4) with type NodeListXY
Enc13@element = element(5, Val),
enc_NodeListXY(Enc13@element)
end].


dec_ShapePointSet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute anchor(1) with type Position3D
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_Position3D(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute laneWidth(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute directionality(3) with type ENUMERATED
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> forward;
2 -> reverse;
3 -> both
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute nodeList(4) with type NodeListXY
{Term4,Bytes6} = dec_NodeListXY(Bytes5),

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'ShapePointSet',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_SignalRequesterInfo(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute id(1) with type VehicleID
Enc4@element = element(2, Val),
enc_VehicleID(Enc4@element)
end,
begin
%% attribute request(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 8 =:= 0 ->
Enc5@element;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute sequenceNumber(3) with type INTEGER
Enc7@element = element(4, Val),
if Enc7@element bsr 7 =:= 0 ->
<<Enc7@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute role(4) with type ENUMERATED
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element =:= basicVehicle ->
<<0:1,0:5>>;
Enc9@element =:= publicTransport ->
<<0:1,1:5>>;
Enc9@element =:= specialTransport ->
<<0:1,2:5>>;
Enc9@element =:= dangerousGoods ->
<<0:1,3:5>>;
Enc9@element =:= roadWork ->
<<0:1,4:5>>;
Enc9@element =:= roadRescue ->
<<0:1,5:5>>;
Enc9@element =:= emergency ->
<<0:1,6:5>>;
Enc9@element =:= safetyCar ->
<<0:1,7:5>>;
Enc9@element =:= 'none-unknown' ->
<<0:1,8:5>>;
Enc9@element =:= truck ->
<<0:1,9:5>>;
Enc9@element =:= motorcycle ->
<<0:1,10:5>>;
Enc9@element =:= roadSideSource ->
<<0:1,11:5>>;
Enc9@element =:= police ->
<<0:1,12:5>>;
Enc9@element =:= fire ->
<<0:1,13:5>>;
Enc9@element =:= ambulance ->
<<0:1,14:5>>;
Enc9@element =:= dot ->
<<0:1,15:5>>;
Enc9@element =:= transit ->
<<0:1,16:5>>;
Enc9@element =:= slowMoving ->
<<0:1,17:5>>;
Enc9@element =:= stopNgo ->
<<0:1,18:5>>;
Enc9@element =:= cyclist ->
<<0:1,19:5>>;
Enc9@element =:= pedestrian ->
<<0:1,20:5>>;
Enc9@element =:= nonMotorized ->
<<0:1,21:5>>;
Enc9@element =:= military ->
<<0:1,22:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc9@element}}})
end
end|begin
%% attribute typeData(5) with type RequestorType
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestorType(Enc12@element)
end
end].


dec_SignalRequesterInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute id(1) with type VehicleID
{Term1,Bytes3} = dec_VehicleID(Bytes2),

%% attribute request(2) with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute sequenceNumber(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute role(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:5,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> basicVehicle;
1 -> publicTransport;
2 -> specialTransport;
3 -> dangerousGoods;
4 -> roadWork;
5 -> roadRescue;
6 -> emergency;
7 -> safetyCar;
8 -> 'none-unknown';
9 -> truck;
10 -> motorcycle;
11 -> roadSideSource;
12 -> police;
13 -> fire;
14 -> ambulance;
15 -> dot;
16 -> transit;
17 -> slowMoving;
18 -> stopNgo;
19 -> cyclist;
20 -> pedestrian;
21 -> nonMotorized;
22 -> military;
_ -> exit({error,{asn1,{decode_enumerated,V5@V3}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<0:1,V5@V9:7,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10};
<<1:1,0:1,V5@V10:14,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<1:1,1:1,V5@V10:6,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
V5@Mul12 = V5@V10 * 16384,
{V5@Mul12,V5@Buf11}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute typeData(5) with type RequestorType
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_RequestorType(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'SignalRequesterInfo',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_SignalRequestList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_SignalRequestPackage(Comp) || Comp <- Val]]
end.



dec_SignalRequestList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components100(V1@Add2, V1@Buf1, []).

enc_SignalRequestPackage(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute request(1) with type SignalRequest
Enc6@element = element(2, Val),
enc_SignalRequest(Enc6@element)
end,
begin
%% attribute minute(2) with type INTEGER
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
0 =< Enc7@element, Enc7@element < 527041 ->
<<Enc7@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute second(3) with type INTEGER
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element bsr 16 =:= 0 ->
<<Enc10@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute duration(4) with type INTEGER
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 16 =:= 0 ->
<<Enc13@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end|begin
%% attribute regional(5) with type SEQUENCE OF
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalRequestPackage_regional(Enc16@element)
end
end].
enc_SignalRequestPackage_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SignalRequestPackage_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SignalRequestPackage_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SignalRequestPackage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute request(1) with type SignalRequest
{Term1,Bytes3} = dec_SignalRequest(Bytes2),

%% attribute minute(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute second(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute duration(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute regional(5) with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_SignalRequestPackage_regional(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'SignalRequestPackage',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.


dec_SignalRequestPackage_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components101(V1@Add2, V1@Buf1, []).


dec_SignalRequestPackage_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_SignalRequest(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute id(1) with type IntersectionReferenceID
Enc4@element = element(2, Val),
enc_IntersectionReferenceID(Enc4@element)
end,
begin
%% attribute requestID(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 8 =:= 0 ->
Enc5@element;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute requestType(3) with type ENUMERATED
Enc7@element = element(4, Val),
if Enc7@element =:= priorityRequestTypeReserved ->
<<0:1,0:2>>;
Enc7@element =:= priorityRequest ->
<<0:1,1:2>>;
Enc7@element =:= priorityRequestUpdate ->
<<0:1,2:2>>;
Enc7@element =:= priorityCancellation ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute inBoundLane(4) with type IntersectionAccessPoint
Enc9@element = element(5, Val),
enc_IntersectionAccessPoint(Enc9@element)
end,
begin
%% attribute outBoundLane(5) with type IntersectionAccessPoint
Enc10@element = element(6, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionAccessPoint(Enc10@element)
end
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc12@element = element(7, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalRequest_regional(Enc12@element)
end
end].
enc_SignalRequest_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SignalRequest_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SignalRequest_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SignalRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute id(1) with type IntersectionReferenceID
{Term1,Bytes3} = dec_IntersectionReferenceID(Bytes2),

%% attribute requestID(2) with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute requestType(3) with type ENUMERATED
{Term3,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:2,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> priorityRequestTypeReserved;
1 -> priorityRequest;
2 -> priorityRequestUpdate;
3 -> priorityCancellation
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute inBoundLane(4) with type IntersectionAccessPoint
{Term4,Bytes6} = dec_IntersectionAccessPoint(Bytes5),

%% attribute outBoundLane(5) with type IntersectionAccessPoint
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
dec_IntersectionAccessPoint(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_SignalRequest_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'SignalRequest',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_SignalRequest_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components102(V1@Add2, V1@Buf1, []).


dec_SignalRequest_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_SignalStatusList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_SignalStatus(Comp) || Comp <- Val]]
end.



dec_SignalStatusList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components103(V1@Add2, V1@Buf1, []).

enc_SignalStatusPackageList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_SignalStatusPackage(Comp) || Comp <- Val]]
end.



dec_SignalStatusPackageList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components104(V1@Add2, V1@Buf1, []).

enc_SignalStatusPackage(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(9, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute requester(1) with type SignalRequesterInfo
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalRequesterInfo(Enc8@element)
end
end,
begin
%% attribute inboundOn(2) with type IntersectionAccessPoint
Enc10@element = element(3, Val),
enc_IntersectionAccessPoint(Enc10@element)
end,
begin
%% attribute outboundOn(3) with type IntersectionAccessPoint
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionAccessPoint(Enc11@element)
end
end,
begin
%% attribute minute(4) with type INTEGER
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
0 =< Enc13@element, Enc13@element < 527041 ->
<<Enc13@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute second(5) with type INTEGER
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
Enc16@element bsr 16 =:= 0 ->
<<Enc16@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute duration(6) with type INTEGER
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element bsr 16 =:= 0 ->
<<Enc19@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute status(7) with type ENUMERATED
Enc22@element = element(8, Val),
if Enc22@element =:= unknown ->
<<0:1,0:3>>;
Enc22@element =:= requested ->
<<0:1,1:3>>;
Enc22@element =:= processing ->
<<0:1,2:3>>;
Enc22@element =:= watchOtherTraffic ->
<<0:1,3:3>>;
Enc22@element =:= granted ->
<<0:1,4:3>>;
Enc22@element =:= rejected ->
<<0:1,5:3>>;
Enc22@element =:= maxPresence ->
<<0:1,6:3>>;
Enc22@element =:= reserviceLocked ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc22@element}}})
end
end|begin
%% attribute regional(8) with type SEQUENCE OF
Enc24@element = element(9, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalStatusPackage_regional(Enc24@element)
end
end].
enc_SignalStatusPackage_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SignalStatusPackage_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SignalStatusPackage_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SignalStatusPackage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute requester(1) with type SignalRequesterInfo
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
dec_SignalRequesterInfo(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute inboundOn(2) with type IntersectionAccessPoint
{Term2,Bytes4} = dec_IntersectionAccessPoint(Bytes3),

%% attribute outboundOn(3) with type IntersectionAccessPoint
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
dec_IntersectionAccessPoint(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute minute(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes5,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute second(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes6,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute duration(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes7,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute status(7) with type ENUMERATED
{Term7,Bytes9} = begin
{V6@V0,V6@Buf1} = case Bytes8 of
<<0:1,V6@V3:3,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> unknown;
1 -> requested;
2 -> processing;
3 -> watchOtherTraffic;
4 -> granted;
5 -> rejected;
6 -> maxPresence;
7 -> reserviceLocked
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<0:1,V6@V9:7,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10};
<<1:1,0:1,V6@V10:14,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
{V6@V10,V6@Buf11};
<<1:1,1:1,V6@V10:6,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
V6@Mul12 = V6@V10 * 16384,
{V6@Mul12,V6@Buf11}
end,
<<V6@V13:V6@V6/unit:8,V6@Buf14/bitstring>> = V6@Buf7,
{V6@V13,V6@Buf14}
end,
V6@Int15 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int15,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end,

%% attribute regional(8) with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
dec_SignalStatusPackage_regional(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V7@V0,V7@Buf1} = case Bytes10 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
Res1 = {'SignalStatusPackage',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
{Res1,Bytes12}.


dec_SignalStatusPackage_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components105(V1@Add2, V1@Buf1, []).


dec_SignalStatusPackage_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_SignalStatus(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute sequenceNumber(1) with type INTEGER
Enc3@element = element(2, Val),
if Enc3@element bsr 7 =:= 0 ->
<<Enc3@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute id(2) with type IntersectionReferenceID
Enc5@element = element(3, Val),
enc_IntersectionReferenceID(Enc5@element)
end,
begin
%% attribute sigStatus(3) with type SignalStatusPackageList
Enc6@element = element(4, Val),
enc_SignalStatusPackageList(Enc6@element)
end|begin
%% attribute regional(4) with type SEQUENCE OF
Enc7@element = element(5, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_SignalStatus_regional(Enc7@element)
end
end].
enc_SignalStatus_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SignalStatus_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SignalStatus_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SignalStatus(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute sequenceNumber(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute id(2) with type IntersectionReferenceID
{Term2,Bytes4} = dec_IntersectionReferenceID(Bytes3),

%% attribute sigStatus(3) with type SignalStatusPackageList
{Term3,Bytes5} = dec_SignalStatusPackageList(Bytes4),

%% attribute regional(4) with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_SignalStatus_regional(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'SignalStatus',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.


dec_SignalStatus_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components106(V1@Add2, V1@Buf1, []).


dec_SignalStatus_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_SnapshotDistance(Val) ->
[begin
%% attribute distance1(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 10 =:= 0 ->
<<Enc1@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute speed1(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 5 =:= 0 ->
<<Enc3@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute distance2(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 10 =:= 0 ->
<<Enc5@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute speed2(4) with type INTEGER
Enc7@element = element(5, Val),
if Enc7@element bsr 5 =:= 0 ->
<<Enc7@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_SnapshotDistance(Bytes) ->

%% attribute distance1(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute speed1(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute distance2(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute speed2(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
Res1 = {'SnapshotDistance',Term1,Term2,Term3,Term4},
{Res1,Bytes4}.

enc_Snapshot(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute thePosition(1) with type FullPositionVector
Enc4@element = element(2, Val),
enc_FullPositionVector(Enc4@element)
end,
begin
%% attribute safetyExt(2) with type VehicleSafetyExtensions
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleSafetyExtensions(Enc5@element)
end
end|begin
%% attribute dataSet(3) with type VehicleStatus
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus(Enc7@element)
end
end].


dec_Snapshot(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute thePosition(1) with type FullPositionVector
{Term1,Bytes3} = dec_FullPositionVector(Bytes2),

%% attribute safetyExt(2) with type VehicleSafetyExtensions
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_VehicleSafetyExtensions(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute dataSet(3) with type VehicleStatus
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_VehicleStatus(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'Snapshot',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_SnapshotTime(Val) ->
[begin
%% attribute speed1(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 5 =:= 0 ->
<<Enc1@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute time1(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 62 ->
<<Enc3@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute speed2(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 5 =:= 0 ->
<<Enc5@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute time2(4) with type INTEGER
Enc7@element = element(5, Val),
if 0 =< Enc7@element, Enc7@element < 62 ->
<<Enc7@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_SnapshotTime(Bytes) ->

%% attribute speed1(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute time1(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute speed2(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute time2(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
Res1 = {'SnapshotTime',Term1,Term2,Term3,Term4},
{Res1,Bytes4}.

enc_SpecialVehicleExtensions(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute vehicleAlerts(1) with type EmergencyDetails
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_EmergencyDetails(Enc5@element)
end
end,
begin
%% attribute description(2) with type EventDescription
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_EventDescription(Enc7@element)
end
end|begin
%% attribute trailers(3) with type TrailerData
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_TrailerData(Enc9@element)
end
end].


dec_SpecialVehicleExtensions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute vehicleAlerts(1) with type EmergencyDetails
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_EmergencyDetails(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute description(2) with type EventDescription
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_EventDescription(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute trailers(3) with type TrailerData
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_TrailerData(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'SpecialVehicleExtensions',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_SpeedandHeadingandThrottleConfidence(Val) ->
[begin
%% attribute heading(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unavailable ->
<<0:3>>;
Enc1@element =:= prec10deg ->
<<1:3>>;
Enc1@element =:= prec05deg ->
<<2:3>>;
Enc1@element =:= prec01deg ->
<<3:3>>;
Enc1@element =:= 'prec0-1deg' ->
<<4:3>>;
Enc1@element =:= 'prec0-05deg' ->
<<5:3>>;
Enc1@element =:= 'prec0-01deg' ->
<<6:3>>;
Enc1@element =:= 'prec0-0125deg' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end,
begin
%% attribute speed(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:3>>;
Enc3@element =:= prec100ms ->
<<1:3>>;
Enc3@element =:= prec10ms ->
<<2:3>>;
Enc3@element =:= prec5ms ->
<<3:3>>;
Enc3@element =:= prec1ms ->
<<4:3>>;
Enc3@element =:= 'prec0-1ms' ->
<<5:3>>;
Enc3@element =:= 'prec0-05ms' ->
<<6:3>>;
Enc3@element =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end|begin
%% attribute throttle(3) with type ENUMERATED
Enc5@element = element(4, Val),
if Enc5@element =:= unavailable ->
<<0:2>>;
Enc5@element =:= prec10percent ->
<<1:2>>;
Enc5@element =:= prec1percent ->
<<2:2>>;
Enc5@element =:= 'prec0-5percent' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end].


dec_SpeedandHeadingandThrottleConfidence(Bytes) ->

%% attribute heading(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec10deg;
2 -> prec05deg;
3 -> prec01deg;
4 -> 'prec0-1deg';
5 -> 'prec0-05deg';
6 -> 'prec0-01deg';
7 -> 'prec0-0125deg'
end,
{V1@Int2,V1@Buf1}
end,

%% attribute speed(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V2@Int2,V2@Buf1}
end,

%% attribute throttle(3) with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> prec10percent;
2 -> prec1percent;
3 -> 'prec0-5percent'
end,
{V3@Int2,V3@Buf1}
end,
Res1 = {'SpeedandHeadingandThrottleConfidence',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_SpeedLimitList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 9 ->
[<<Enc1@len@sub:4>>|[enc_RegulatorySpeedLimit(Comp) || Comp <- Val]]
end.



dec_SpeedLimitList(Bytes) ->
%% Length with constraint {1,9}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components107(V1@Add2, V1@Buf1, []).

enc_SpeedProfileMeasurementList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 20 ->
[<<Enc2@len@sub:5>>|[if Comp bsr 5 =:= 0 ->
<<Comp:5>>;
true ->
exit({error,{asn1,{illegal_integer,Comp}}})
end || Comp <- Val]]
end.



dec_SpeedProfileMeasurementList(Bytes) ->
%% Length with constraint {1,20}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components108(V1@Add2, V1@Buf1, []).

enc_SpeedProfile(Val) ->
[<<0:1>>|begin
%% attribute speedReports(1) with type SpeedProfileMeasurementList
Enc2@element = element(2, Val),
enc_SpeedProfileMeasurementList(Enc2@element)
end].


dec_SpeedProfile(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute speedReports(1) with type SpeedProfileMeasurementList
{Term1,Bytes2} = dec_SpeedProfileMeasurementList(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8};
<<1:1,1:1,V2@V7:6,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
V2@Mul9 = V2@V7 * 16384,
{V2@Mul9,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V10:V2@V0/bitstring-unit:1,V2@Buf11/bitstring>> = V2@Buf1,
{V2@V10,V2@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
Res1 = {'SpeedProfile',Term1},
{Res1,Bytes4}.

enc_SupplementalVehicleExtensions(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
Enc10@element = element(11, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute classification(1) with type INTEGER
Enc12@element = element(2, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element bsr 8 =:= 0 ->
Enc12@element;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute classDetails(2) with type VehicleClassification
Enc15@element = element(3, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleClassification(Enc15@element)
end
end,
begin
%% attribute vehicleData(3) with type VehicleData
Enc17@element = element(4, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleData(Enc17@element)
end
end,
begin
%% attribute weatherReport(4) with type WeatherReport
Enc19@element = element(5, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_WeatherReport(Enc19@element)
end
end,
begin
%% attribute weatherProbe(5) with type WeatherProbe
Enc21@element = element(6, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_WeatherProbe(Enc21@element)
end
end,
begin
%% attribute obstacle(6) with type ObstacleDetection
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
enc_ObstacleDetection(Enc23@element)
end
end,
begin
%% attribute status(7) with type DisabledVehicle
Enc25@element = element(8, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
enc_DisabledVehicle(Enc25@element)
end
end,
begin
%% attribute speedProfile(8) with type SpeedProfile
Enc27@element = element(9, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedProfile(Enc27@element)
end
end,
begin
%% attribute theRTCM(9) with type RTCMPackage
Enc29@element = element(10, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
enc_RTCMPackage(Enc29@element)
end
end|begin
%% attribute regional(10) with type SEQUENCE OF
Enc31@element = element(11, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
enc_SupplementalVehicleExtensions_regional(Enc31@element)
end
end].
enc_SupplementalVehicleExtensions_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SupplementalVehicleExtensions_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SupplementalVehicleExtensions_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SupplementalVehicleExtensions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute classification(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute classDetails(2) with type VehicleClassification
{Term2,Bytes4} = case (Opt bsr 8) band 1 of
1 ->
dec_VehicleClassification(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute vehicleData(3) with type VehicleData
{Term3,Bytes5} = case (Opt bsr 7) band 1 of
1 ->
dec_VehicleData(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute weatherReport(4) with type WeatherReport
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
dec_WeatherReport(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute weatherProbe(5) with type WeatherProbe
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
dec_WeatherProbe(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute obstacle(6) with type ObstacleDetection
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
dec_ObstacleDetection(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute status(7) with type DisabledVehicle
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
dec_DisabledVehicle(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute speedProfile(8) with type SpeedProfile
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
dec_SpeedProfile(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute theRTCM(9) with type RTCMPackage
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_RTCMPackage(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute regional(10) with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_SupplementalVehicleExtensions_regional(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V4@V0,V4@Buf1} = case Bytes12 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'SupplementalVehicleExtensions',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.


dec_SupplementalVehicleExtensions_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components109(V1@Add2, V1@Buf1, []).


dec_SupplementalVehicleExtensions_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_TimeChangeDetails(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute startTime(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
0 =< Enc6@element, Enc6@element < 36002 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute minEndTime(2) with type INTEGER
Enc9@element = element(3, Val),
if 0 =< Enc9@element, Enc9@element < 36002 ->
<<Enc9@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute maxEndTime(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
0 =< Enc11@element, Enc11@element < 36002 ->
<<Enc11@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute likelyTime(4) with type INTEGER
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
0 =< Enc14@element, Enc14@element < 36002 ->
<<Enc14@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute confidence(5) with type INTEGER
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 4 =:= 0 ->
<<Enc17@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end|begin
%% attribute nextTime(6) with type INTEGER
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
0 =< Enc20@element, Enc20@element < 36002 ->
<<Enc20@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end].


dec_TimeChangeDetails(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute startTime(1) with type INTEGER
{Term1,Bytes2} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute minEndTime(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute maxEndTime(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute likelyTime(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute confidence(5) with type INTEGER
{Term5,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:4,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute nextTime(6) with type INTEGER
{Term6,Bytes7} = case Opt band 1 of
1 ->
begin
<<V7@V0:16,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,
Res1 = {'TimeChangeDetails',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes7}.

enc_TrailerData(Val) ->
[begin
%% attribute sspRights(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element bsr 5 =:= 0 ->
<<0:1,Enc2@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end,
begin
%% attribute connection(2) with type PivotPointDescription
Enc4@element = element(3, Val),
enc_PivotPointDescription(Enc4@element)
end|begin
%% attribute units(3) with type TrailerUnitDescriptionList
Enc5@element = element(4, Val),
enc_TrailerUnitDescriptionList(Enc5@element)
end].


dec_TrailerData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute sspRights(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute connection(2) with type PivotPointDescription
{Term2,Bytes3} = dec_PivotPointDescription(Bytes2),

%% attribute units(3) with type TrailerUnitDescriptionList
{Term3,Bytes4} = dec_TrailerUnitDescriptionList(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TrailerData',Term1,Term2,Term3},
{Res1,Bytes6}.

enc_TrailerHistoryPointList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 23 ->
[<<Enc1@len@sub:5>>|[enc_TrailerHistoryPoint(Comp) || Comp <- Val]]
end.



dec_TrailerHistoryPointList(Bytes) ->
%% Length with constraint {1,23}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components110(V1@Add2, V1@Buf1, []).

enc_TrailerHistoryPoint(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute pivotAngle(1) with type INTEGER
Enc4@element = element(2, Val),
if 0 =< Enc4@element, Enc4@element < 28801 ->
<<Enc4@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute timeOffset(2) with type INTEGER
Enc6@element = element(3, Val),
Enc6@element@sub = Enc6@element - 1,
if 0 =< Enc6@element@sub, Enc6@element@sub < 65535 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute positionOffset(3) with type Node-XY-24b
Enc8@element = element(4, Val),
'enc_Node-XY-24b'(Enc8@element)
end,
begin
%% attribute elevationOffset(4) with type INTEGER
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@element@sub = Enc9@element - -64,
if Enc9@element@sub bsr 7 =:= 0 ->
<<Enc9@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end
end
end|begin
%% attribute heading(5) with type INTEGER
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 241 ->
[Enc12@element];
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end].


dec_TrailerHistoryPoint(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute pivotAngle(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute timeOffset(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,

%% attribute positionOffset(3) with type Node-XY-24b
{Term3,Bytes5} = 'dec_Node-XY-24b'(Bytes4),

%% attribute elevationOffset(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + -64,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute heading(5) with type INTEGER
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'TrailerHistoryPoint',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_TrailerUnitDescriptionList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_TrailerUnitDescription(Comp) || Comp <- Val]]
end.



dec_TrailerUnitDescriptionList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components111(V1@Add2, V1@Buf1, []).

enc_TrailerUnitDescription(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(10, Val),
Enc6@element = element(11, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(13, Val),
Enc8@element = element(14, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute isDolly(1) with type BOOLEAN
Enc10@element = element(2, Val),
if Enc10@element =:= false ->
<<0:1>>;
Enc10@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc10@element}}})
end
end,
begin
%% attribute width(2) with type INTEGER
Enc12@element = element(3, Val),
if Enc12@element bsr 10 =:= 0 ->
<<Enc12@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute length(3) with type INTEGER
Enc14@element = element(4, Val),
if Enc14@element bsr 12 =:= 0 ->
<<Enc14@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute height(4) with type INTEGER
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
Enc16@element bsr 7 =:= 0 ->
<<Enc16@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute mass(5) with type INTEGER
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element bsr 8 =:= 0 ->
Enc19@element;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute bumperHeights(6) with type BumperHeights
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_BumperHeights(Enc22@element)
end
end,
begin
%% attribute centerOfGravity(7) with type INTEGER
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element bsr 7 =:= 0 ->
<<Enc24@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc24@element}}})
end
end,
begin
%% attribute frontPivot(8) with type PivotPointDescription
Enc27@element = element(9, Val),
enc_PivotPointDescription(Enc27@element)
end,
begin
%% attribute rearPivot(9) with type PivotPointDescription
Enc28@element = element(10, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
enc_PivotPointDescription(Enc28@element)
end
end,
begin
%% attribute rearWheelOffset(10) with type INTEGER
Enc30@element = element(11, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc30@element@sub = Enc30@element - -2048,
if Enc30@element@sub bsr 12 =:= 0 ->
<<Enc30@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc30@element}}})
end
end
end
end,
begin
%% attribute positionOffset(11) with type Node-XY-24b
Enc33@element = element(12, Val),
'enc_Node-XY-24b'(Enc33@element)
end,
begin
%% attribute elevationOffset(12) with type INTEGER
Enc34@element = element(13, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc34@element@sub = Enc34@element - -64,
if Enc34@element@sub bsr 7 =:= 0 ->
<<Enc34@element@sub:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc34@element}}})
end
end
end
end|begin
%% attribute crumbData(13) with type TrailerHistoryPointList
Enc37@element = element(14, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
enc_TrailerHistoryPointList(Enc37@element)
end
end].


dec_TrailerUnitDescription(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute isDolly(1) with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute width(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:10,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute length(3) with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute height(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute mass(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute bumperHeights(6) with type BumperHeights
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
dec_BumperHeights(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute centerOfGravity(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V8@V0:7,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute frontPivot(8) with type PivotPointDescription
{Term8,Bytes10} = dec_PivotPointDescription(Bytes9),

%% attribute rearPivot(9) with type PivotPointDescription
{Term9,Bytes11} = case (Opt bsr 3) band 1 of
1 ->
dec_PivotPointDescription(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute rearWheelOffset(10) with type INTEGER
{Term10,Bytes12} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V9@V0:12,V9@Buf1/bitstring>> = Bytes11,
V9@Add2 = V9@V0 + -2048,
{V9@Add2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute positionOffset(11) with type Node-XY-24b
{Term11,Bytes13} = 'dec_Node-XY-24b'(Bytes12),

%% attribute elevationOffset(12) with type INTEGER
{Term12,Bytes14} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V10@V0:7,V10@Buf1/bitstring>> = Bytes13,
V10@Add2 = V10@V0 + -64,
{V10@Add2,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute crumbData(13) with type TrailerHistoryPointList
{Term13,Bytes15} = case Opt band 1 of
1 ->
dec_TrailerHistoryPointList(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% Extensions
{Extensions,Bytes16} = case Ext of
0 -> {<<>>,Bytes15};
1 ->
{V11@V0,V11@Buf1} = case Bytes15 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:7,V11@Buf7/bitstring>> when V11@V6 =/= 0 ->
{V11@V6,V11@Buf7};
<<1:1,0:1,V11@V7:14,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
{V11@V7,V11@Buf8};
<<1:1,1:1,V11@V7:6,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
V11@Mul9 = V11@V7 * 16384,
{V11@Mul9,V11@Buf8}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V10:V11@V0/bitstring-unit:1,V11@Buf11/bitstring>> = V11@Buf1,
{V11@V10,V11@Buf11}
end,
Bytes17= skipextensions(Bytes16, 1, Extensions),
Res1 = {'TrailerUnitDescription',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13},
{Res1,Bytes17}.

enc_TransmissionAndSpeed(Val) ->
[begin
%% attribute transmisson(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= neutral ->
<<0:3>>;
Enc1@element =:= park ->
<<1:3>>;
Enc1@element =:= forwardGears ->
<<2:3>>;
Enc1@element =:= reverseGears ->
<<3:3>>;
Enc1@element =:= reserved1 ->
<<4:3>>;
Enc1@element =:= reserved2 ->
<<5:3>>;
Enc1@element =:= reserved3 ->
<<6:3>>;
Enc1@element =:= unavailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end|begin
%% attribute speed(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 13 =:= 0 ->
<<Enc3@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_TransmissionAndSpeed(Bytes) ->

%% attribute transmisson(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> neutral;
1 -> park;
2 -> forwardGears;
3 -> reverseGears;
4 -> reserved1;
5 -> reserved2;
6 -> reserved3;
7 -> unavailable
end,
{V1@Int2,V1@Buf1}
end,

%% attribute speed(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:13,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'TransmissionAndSpeed',Term1,Term2},
{Res1,Bytes2}.

enc_TravelerDataFrameList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_TravelerDataFrame(Comp) || Comp <- Val]]
end.



dec_TravelerDataFrameList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components112(V1@Add2, V1@Buf1, []).

enc_TravelerDataFrame(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(14, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute sspTimRights(1) with type INTEGER
Enc4@element = element(2, Val),
if Enc4@element bsr 5 =:= 0 ->
<<Enc4@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute frameType(2) with type ENUMERATED
Enc6@element = element(3, Val),
if Enc6@element =:= unknown ->
<<0:1,0:2>>;
Enc6@element =:= advisory ->
<<0:1,1:2>>;
Enc6@element =:= roadSignage ->
<<0:1,2:2>>;
Enc6@element =:= commercialSignage ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end,
begin
%% attribute msgId(3) with type CHOICE
Enc8@element = element(4, Val),
enc_TravelerDataFrame_msgId(Enc8@element)
end,
begin
%% attribute startYear(4) with type INTEGER
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 12 =:= 0 ->
<<Enc9@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute startTime(5) with type INTEGER
Enc12@element = element(6, Val),
if 0 =< Enc12@element, Enc12@element < 527041 ->
<<Enc12@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute duratonTime(6) with type INTEGER
Enc14@element = element(7, Val),
if 0 =< Enc14@element, Enc14@element < 32001 ->
<<Enc14@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute priority(7) with type INTEGER
Enc16@element = element(8, Val),
if Enc16@element bsr 3 =:= 0 ->
<<Enc16@element:3>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute sspLocationRights(8) with type INTEGER
Enc18@element = element(9, Val),
if Enc18@element bsr 5 =:= 0 ->
<<Enc18@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end,
begin
%% attribute regions(9) with type SEQUENCE OF
Enc20@element = element(10, Val),
enc_TravelerDataFrame_regions(Enc20@element)
end,
begin
%% attribute sspMsgRights1(10) with type INTEGER
Enc21@element = element(11, Val),
if Enc21@element bsr 5 =:= 0 ->
<<Enc21@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc21@element}}})
end
end,
begin
%% attribute sspMsgRights2(11) with type INTEGER
Enc23@element = element(12, Val),
if Enc23@element bsr 5 =:= 0 ->
<<Enc23@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc23@element}}})
end
end,
begin
%% attribute content(12) with type CHOICE
Enc25@element = element(13, Val),
enc_TravelerDataFrame_content(Enc25@element)
end|begin
%% attribute url(13) with type IA5String
Enc26@element = element(14, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@len = length(Enc26@element),
Enc27@bin = encode_chars(Enc26@element, 7),
Enc27@len@sub = Enc27@len - 1,
if 0 =< Enc27@len@sub, Enc27@len@sub < 15 ->
[<<Enc27@len@sub:4>>|Enc27@bin]
end
end
end
end].
enc_TravelerDataFrame_msgId(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= furtherInfoID ->
begin
Enc2@len = byte_size(ChoiceVal),
if Enc2@len =:= 2 ->
[<<0:1>>|ChoiceVal]
end
end;
ChoiceTag =:= roadSignID ->
[<<1:1>>|enc_RoadSignID(ChoiceVal)]
end.
enc_TravelerDataFrame_regions(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_GeographicalPath(Comp) || Comp <- Val]]
end.

enc_TravelerDataFrame_content(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= advisory ->
[<<0:3>>|'ITIS':enc_ITIScodesAndText(ChoiceVal)];
ChoiceTag =:= workZone ->
[<<1:3>>|enc_WorkZone(ChoiceVal)];
ChoiceTag =:= genericSign ->
[<<2:3>>|enc_GenericSignage(ChoiceVal)];
ChoiceTag =:= speedLimit ->
[<<3:3>>|enc_SpeedLimit(ChoiceVal)];
ChoiceTag =:= exitService ->
[<<4:3>>|enc_ExitService(ChoiceVal)]
end.


dec_TravelerDataFrame(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute sspTimRights(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute frameType(2) with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:2,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> unknown;
1 -> advisory;
2 -> roadSignage;
3 -> commercialSignage
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute msgId(3) with type CHOICE
{Term3,Bytes5} = dec_TravelerDataFrame_msgId(Bytes4),

%% attribute startYear(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute startTime(5) with type INTEGER
{Term5,Bytes7} = begin
<<V6@V0:20,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end,

%% attribute duratonTime(6) with type INTEGER
{Term6,Bytes8} = begin
<<V7@V0:15,V7@Buf1/bitstring>> = Bytes7,
{V7@V0,V7@Buf1}
end,

%% attribute priority(7) with type INTEGER
{Term7,Bytes9} = begin
<<V8@V0:3,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end,

%% attribute sspLocationRights(8) with type INTEGER
{Term8,Bytes10} = begin
<<V9@V0:5,V9@Buf1/bitstring>> = Bytes9,
{V9@V0,V9@Buf1}
end,

%% attribute regions(9) with type SEQUENCE OF
{Term9,Bytes11} = dec_TravelerDataFrame_regions(Bytes10),

%% attribute sspMsgRights1(10) with type INTEGER
{Term10,Bytes12} = begin
<<V10@V0:5,V10@Buf1/bitstring>> = Bytes11,
{V10@V0,V10@Buf1}
end,

%% attribute sspMsgRights2(11) with type INTEGER
{Term11,Bytes13} = begin
<<V11@V0:5,V11@Buf1/bitstring>> = Bytes12,
{V11@V0,V11@Buf1}
end,

%% attribute content(12) with type CHOICE
{Term12,Bytes14} = dec_TravelerDataFrame_content(Bytes13),

%% attribute url(13) with type IA5String
{Term13,Bytes15} = case Opt band 1 of
1 ->
begin
<<V12@V0:4,V12@Buf1/bitstring>> = Bytes14,
V12@Add2 = V12@V0 + 1,
<<V12@V3:V12@Add2/binary-unit:7,V12@Buf4/bitstring>> = V12@Buf1,
{V12@V5,V12@Buf6}  = {decode_chars(V12@V3, 7),V12@Buf4},
{V12@V5,V12@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% Extensions
{Extensions,Bytes16} = case Ext of
0 -> {<<>>,Bytes15};
1 ->
{V13@V0,V13@Buf1} = case Bytes15 of
<<0:1,V13@V3:6,V13@Buf4/bitstring>> ->
V13@Add5 = V13@V3 + 1,
{V13@Add5,V13@Buf4};
<<1:1,V13@Buf2/bitstring>> ->
{V13@V3,V13@Buf4} = case V13@Buf2 of
<<0:1,V13@V6:7,V13@Buf7/bitstring>> when V13@V6 =/= 0 ->
{V13@V6,V13@Buf7};
<<1:1,0:1,V13@V7:14,V13@Buf8/bitstring>> when V13@V7 =/= 0 ->
{V13@V7,V13@Buf8};
<<1:1,1:1,V13@V7:6,V13@Buf8/bitstring>> when V13@V7 =/= 0 ->
V13@Mul9 = V13@V7 * 16384,
{V13@Mul9,V13@Buf8}
end,
{V13@V3,V13@Buf4}
end,
<<V13@V10:V13@V0/bitstring-unit:1,V13@Buf11/bitstring>> = V13@Buf1,
{V13@V10,V13@Buf11}
end,
Bytes17= skipextensions(Bytes16, 1, Extensions),
Res1 = {'TravelerDataFrame',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13},
{Res1,Bytes17}.


dec_TravelerDataFrame_msgId(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:2/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end
end,
{{furtherInfoID,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_RoadSignID(Bytes1)
end,
{{roadSignID,Val},NewBytes}
end.

dec_TravelerDataFrame_regions(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components113(V1@Add2, V1@Buf1, []).


dec_TravelerDataFrame_content(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'ITIS':dec_ITIScodesAndText(Bytes1)
end,
{{advisory,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_WorkZone(Bytes1)
end,
{{workZone,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_GenericSignage(Bytes1)
end,
{{genericSign,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_SpeedLimit(Bytes1)
end,
{{speedLimit,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_ExitService(Bytes1)
end,
{{exitService,Val},NewBytes}
end.
enc_ValidRegion(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute direction(1) with type BIT STRING
Enc2@element = element(2, Val),
Enc3@bs = try bit_string_name2pos_21(Enc2@element) of
Enc3@positions ->
bitstring_from_positions(Enc3@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc2@element, 16)
end,
Enc3@bits = bit_size(Enc3@bs),
if Enc3@bits =:= 16 ->
Enc3@bs
end
end,
begin
%% attribute extent(2) with type ENUMERATED
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element =:= useInstantlyOnly ->
<<0:4>>;
Enc4@element =:= useFor3meters ->
<<1:4>>;
Enc4@element =:= useFor10meters ->
<<2:4>>;
Enc4@element =:= useFor50meters ->
<<3:4>>;
Enc4@element =:= useFor100meters ->
<<4:4>>;
Enc4@element =:= useFor500meters ->
<<5:4>>;
Enc4@element =:= useFor1000meters ->
<<6:4>>;
Enc4@element =:= useFor5000meters ->
<<7:4>>;
Enc4@element =:= useFor10000meters ->
<<8:4>>;
Enc4@element =:= useFor50000meters ->
<<9:4>>;
Enc4@element =:= useFor100000meters ->
<<10:4>>;
Enc4@element =:= useFor500000meters ->
<<11:4>>;
Enc4@element =:= useFor1000000meters ->
<<12:4>>;
Enc4@element =:= useFor5000000meters ->
<<13:4>>;
Enc4@element =:= useFor10000000meters ->
<<14:4>>;
Enc4@element =:= forever ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc4@element}}})
end
end|begin
%% attribute area(3) with type CHOICE
Enc7@element = element(4, Val),
enc_ValidRegion_area(Enc7@element)
end].
enc_ValidRegion_area(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= shapePointSet ->
[<<0:2>>|enc_ShapePointSet(ChoiceVal)];
ChoiceTag =:= circle ->
[<<1:2>>|enc_Circle(ChoiceVal)];
ChoiceTag =:= regionPointSet ->
[<<2:2>>|enc_RegionPointSet(ChoiceVal)]
end.


dec_ValidRegion(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute direction(1) with type BIT STRING
{Term1,Bytes2} = begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_named_bit_string(V2@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute extent(2) with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> useInstantlyOnly;
1 -> useFor3meters;
2 -> useFor10meters;
3 -> useFor50meters;
4 -> useFor100meters;
5 -> useFor500meters;
6 -> useFor1000meters;
7 -> useFor5000meters;
8 -> useFor10000meters;
9 -> useFor50000meters;
10 -> useFor100000meters;
11 -> useFor500000meters;
12 -> useFor1000000meters;
13 -> useFor5000000meters;
14 -> useFor10000000meters;
15 -> forever
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute area(3) with type CHOICE
{Term3,Bytes4} = dec_ValidRegion_area(Bytes3),
Res1 = {'ValidRegion',Term1,Term2,Term3},
{Res1,Bytes4}.


dec_ValidRegion_area(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ShapePointSet(Bytes1)
end,
{{shapePointSet,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_Circle(Bytes1)
end,
{{circle,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_RegionPointSet(Bytes1)
end,
{{regionPointSet,Val},NewBytes}
end.
enc_VehicleClassification(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
if Enc9@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute keyType(1) with type INTEGER
Enc11@element = element(2, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element bsr 8 =:= 0 ->
Enc11@element;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute role(2) with type ENUMERATED
Enc14@element = element(3, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element =:= basicVehicle ->
<<0:1,0:5>>;
Enc14@element =:= publicTransport ->
<<0:1,1:5>>;
Enc14@element =:= specialTransport ->
<<0:1,2:5>>;
Enc14@element =:= dangerousGoods ->
<<0:1,3:5>>;
Enc14@element =:= roadWork ->
<<0:1,4:5>>;
Enc14@element =:= roadRescue ->
<<0:1,5:5>>;
Enc14@element =:= emergency ->
<<0:1,6:5>>;
Enc14@element =:= safetyCar ->
<<0:1,7:5>>;
Enc14@element =:= 'none-unknown' ->
<<0:1,8:5>>;
Enc14@element =:= truck ->
<<0:1,9:5>>;
Enc14@element =:= motorcycle ->
<<0:1,10:5>>;
Enc14@element =:= roadSideSource ->
<<0:1,11:5>>;
Enc14@element =:= police ->
<<0:1,12:5>>;
Enc14@element =:= fire ->
<<0:1,13:5>>;
Enc14@element =:= ambulance ->
<<0:1,14:5>>;
Enc14@element =:= dot ->
<<0:1,15:5>>;
Enc14@element =:= transit ->
<<0:1,16:5>>;
Enc14@element =:= slowMoving ->
<<0:1,17:5>>;
Enc14@element =:= stopNgo ->
<<0:1,18:5>>;
Enc14@element =:= cyclist ->
<<0:1,19:5>>;
Enc14@element =:= pedestrian ->
<<0:1,20:5>>;
Enc14@element =:= nonMotorized ->
<<0:1,21:5>>;
Enc14@element =:= military ->
<<0:1,22:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end,
begin
%% attribute iso3883(3) with type INTEGER
Enc17@element = element(4, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
0 =< Enc17@element, Enc17@element < 101 ->
<<Enc17@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end,
begin
%% attribute hpmsType(4) with type ENUMERATED
Enc20@element = element(5, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
Enc20@element =:= none ->
<<0:1,0:4>>;
Enc20@element =:= unknown ->
<<0:1,1:4>>;
Enc20@element =:= special ->
<<0:1,2:4>>;
Enc20@element =:= moto ->
<<0:1,3:4>>;
Enc20@element =:= car ->
<<0:1,4:4>>;
Enc20@element =:= carOther ->
<<0:1,5:4>>;
Enc20@element =:= bus ->
<<0:1,6:4>>;
Enc20@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc20@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc20@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc20@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc20@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc20@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc20@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc20@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc20@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc20@element}}})
end
end,
begin
%% attribute vehicleType(5) with type ENUMERATED
Enc23@element = element(6, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
Enc23@element =:= 'all-vehicles' ->
<<0:1,0:6>>;
Enc23@element =:= bicycles ->
<<0:1,1:6>>;
Enc23@element =:= motorcycles ->
<<0:1,2:6>>;
Enc23@element =:= cars ->
<<0:1,3:6>>;
Enc23@element =:= 'light-vehicles' ->
<<0:1,4:6>>;
Enc23@element =:= 'cars-and-light-vehicles' ->
<<0:1,5:6>>;
Enc23@element =:= 'cars-with-trailers' ->
<<0:1,6:6>>;
Enc23@element =:= 'cars-with-recreational-trailers' ->
<<0:1,7:6>>;
Enc23@element =:= 'vehicles-with-trailers' ->
<<0:1,8:6>>;
Enc23@element =:= 'heavy-vehicles' ->
<<0:1,9:6>>;
Enc23@element =:= trucks ->
<<0:1,10:6>>;
Enc23@element =:= buses ->
<<0:1,11:6>>;
Enc23@element =:= 'articulated-buses' ->
<<0:1,12:6>>;
Enc23@element =:= 'school-buses' ->
<<0:1,13:6>>;
Enc23@element =:= 'vehicles-with-semi-trailers' ->
<<0:1,14:6>>;
Enc23@element =:= 'vehicles-with-double-trailers' ->
<<0:1,15:6>>;
Enc23@element =:= 'high-profile-vehicles' ->
<<0:1,16:6>>;
Enc23@element =:= 'wide-vehicles' ->
<<0:1,17:6>>;
Enc23@element =:= 'long-vehicles' ->
<<0:1,18:6>>;
Enc23@element =:= 'hazardous-loads' ->
<<0:1,19:6>>;
Enc23@element =:= 'exceptional-loads' ->
<<0:1,20:6>>;
Enc23@element =:= 'abnormal-loads' ->
<<0:1,21:6>>;
Enc23@element =:= convoys ->
<<0:1,22:6>>;
Enc23@element =:= 'maintenance-vehicles' ->
<<0:1,23:6>>;
Enc23@element =:= 'delivery-vehicles' ->
<<0:1,24:6>>;
Enc23@element =:= 'vehicles-with-even-numbered-license-plates' ->
<<0:1,25:6>>;
Enc23@element =:= 'vehicles-with-odd-numbered-license-plates' ->
<<0:1,26:6>>;
Enc23@element =:= 'vehicles-with-parking-permits' ->
<<0:1,27:6>>;
Enc23@element =:= 'vehicles-with-catalytic-converters' ->
<<0:1,28:6>>;
Enc23@element =:= 'vehicles-without-catalytic-converters' ->
<<0:1,29:6>>;
Enc23@element =:= 'gas-powered-vehicles' ->
<<0:1,30:6>>;
Enc23@element =:= 'diesel-powered-vehicles' ->
<<0:1,31:6>>;
Enc23@element =:= 'lPG-vehicles' ->
<<0:1,32:6>>;
Enc23@element =:= 'military-convoys' ->
<<0:1,33:6>>;
Enc23@element =:= 'military-vehicles' ->
<<0:1,34:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc23@element}}})
end
end,
begin
%% attribute responseEquip(6) with type ENUMERATED
Enc26@element = element(7, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
Enc26@element =:= 'ground-fire-suppression' ->
<<0:1,0:7>>;
Enc26@element =:= 'heavy-ground-equipment' ->
<<0:1,1:7>>;
Enc26@element =:= aircraft ->
<<0:1,2:7>>;
Enc26@element =:= 'marine-equipment' ->
<<0:1,3:7>>;
Enc26@element =:= 'support-equipment' ->
<<0:1,4:7>>;
Enc26@element =:= 'medical-rescue-unit' ->
<<0:1,5:7>>;
Enc26@element =:= other ->
<<0:1,6:7>>;
Enc26@element =:= 'ground-fire-suppression-other' ->
<<0:1,7:7>>;
Enc26@element =:= engine ->
<<0:1,8:7>>;
Enc26@element =:= 'truck-or-aerial' ->
<<0:1,9:7>>;
Enc26@element =:= quint ->
<<0:1,10:7>>;
Enc26@element =:= 'tanker-pumper-combination' ->
<<0:1,11:7>>;
Enc26@element =:= 'brush-truck' ->
<<0:1,12:7>>;
Enc26@element =:= 'aircraft-rescue-firefighting' ->
<<0:1,13:7>>;
Enc26@element =:= 'heavy-ground-equipment-other' ->
<<0:1,14:7>>;
Enc26@element =:= 'dozer-or-plow' ->
<<0:1,15:7>>;
Enc26@element =:= tractor ->
<<0:1,16:7>>;
Enc26@element =:= 'tanker-or-tender' ->
<<0:1,17:7>>;
Enc26@element =:= 'aircraft-other' ->
<<0:1,18:7>>;
Enc26@element =:= 'aircraft-fixed-wing-tanker' ->
<<0:1,19:7>>;
Enc26@element =:= helitanker ->
<<0:1,20:7>>;
Enc26@element =:= helicopter ->
<<0:1,21:7>>;
Enc26@element =:= 'marine-equipment-other' ->
<<0:1,22:7>>;
Enc26@element =:= 'fire-boat-with-pump' ->
<<0:1,23:7>>;
Enc26@element =:= 'boat-no-pump' ->
<<0:1,24:7>>;
Enc26@element =:= 'support-apparatus-other' ->
<<0:1,25:7>>;
Enc26@element =:= 'breathing-apparatus-support' ->
<<0:1,26:7>>;
Enc26@element =:= 'light-and-air-unit' ->
<<0:1,27:7>>;
Enc26@element =:= 'medical-rescue-unit-other' ->
<<0:1,28:7>>;
Enc26@element =:= 'rescue-unit' ->
<<0:1,29:7>>;
Enc26@element =:= 'urban-search-rescue-unit' ->
<<0:1,30:7>>;
Enc26@element =:= 'high-angle-rescue' ->
<<0:1,31:7>>;
Enc26@element =:= 'crash-fire-rescue' ->
<<0:1,32:7>>;
Enc26@element =:= 'bLS-unit' ->
<<0:1,33:7>>;
Enc26@element =:= 'aLS-unit' ->
<<0:1,34:7>>;
Enc26@element =:= 'mobile-command-post' ->
<<0:1,35:7>>;
Enc26@element =:= 'chief-officer-car' ->
<<0:1,36:7>>;
Enc26@element =:= 'hAZMAT-unit' ->
<<0:1,37:7>>;
Enc26@element =:= 'type-i-hand-crew' ->
<<0:1,38:7>>;
Enc26@element =:= 'type-ii-hand-crew' ->
<<0:1,39:7>>;
Enc26@element =:= 'privately-owned-vehicle' ->
<<0:1,40:7>>;
Enc26@element =:= 'other-apparatus-resource' ->
<<0:1,41:7>>;
Enc26@element =:= ambulance ->
<<0:1,42:7>>;
Enc26@element =:= 'bomb-squad-van' ->
<<0:1,43:7>>;
Enc26@element =:= 'combine-harvester' ->
<<0:1,44:7>>;
Enc26@element =:= 'construction-vehicle' ->
<<0:1,45:7>>;
Enc26@element =:= 'farm-tractor' ->
<<0:1,46:7>>;
Enc26@element =:= 'grass-cutting-machines' ->
<<0:1,47:7>>;
Enc26@element =:= 'hAZMAT-containment-tow' ->
<<0:1,48:7>>;
Enc26@element =:= 'heavy-tow' ->
<<0:1,49:7>>;
Enc26@element =:= 'hedge-cutting-machines' ->
<<0:1,50:7>>;
Enc26@element =:= 'light-tow' ->
<<0:1,51:7>>;
Enc26@element =:= 'mobile-crane' ->
<<0:1,52:7>>;
Enc26@element =:= 'refuse-collection-vehicle' ->
<<0:1,53:7>>;
Enc26@element =:= 'resurfacing-vehicle' ->
<<0:1,54:7>>;
Enc26@element =:= 'road-sweeper' ->
<<0:1,55:7>>;
Enc26@element =:= 'roadside-litter-collection-crews' ->
<<0:1,56:7>>;
Enc26@element =:= 'salvage-vehicle' ->
<<0:1,57:7>>;
Enc26@element =:= 'sand-truck' ->
<<0:1,58:7>>;
Enc26@element =:= snowplow ->
<<0:1,59:7>>;
Enc26@element =:= 'steam-roller' ->
<<0:1,60:7>>;
Enc26@element =:= 'swat-team-van' ->
<<0:1,61:7>>;
Enc26@element =:= 'track-laying-vehicle' ->
<<0:1,62:7>>;
Enc26@element =:= 'unknown-vehicle' ->
<<0:1,63:7>>;
Enc26@element =:= 'white-lining-vehicle' ->
<<0:1,64:7>>;
Enc26@element =:= 'dump-truck' ->
<<0:1,65:7>>;
Enc26@element =:= 'supervisor-vehicle' ->
<<0:1,66:7>>;
Enc26@element =:= 'snow-blower' ->
<<0:1,67:7>>;
Enc26@element =:= 'rotary-snow-blower' ->
<<0:1,68:7>>;
Enc26@element =:= 'road-grader' ->
<<0:1,69:7>>;
Enc26@element =:= 'steam-truck' ->
<<0:1,70:7>>;
Enc26@element =:= 'flatbed-tow' ->
<<0:1,71:7>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc26@element}}})
end
end,
begin
%% attribute responderType(7) with type ENUMERATED
Enc29@element = element(8, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
Enc29@element =:= 'emergency-vehicle-units' ->
<<0:1,0:4>>;
Enc29@element =:= 'federal-law-enforcement-units' ->
<<0:1,1:4>>;
Enc29@element =:= 'state-police-units' ->
<<0:1,2:4>>;
Enc29@element =:= 'county-police-units' ->
<<0:1,3:4>>;
Enc29@element =:= 'local-police-units' ->
<<0:1,4:4>>;
Enc29@element =:= 'ambulance-units' ->
<<0:1,5:4>>;
Enc29@element =:= 'rescue-units' ->
<<0:1,6:4>>;
Enc29@element =:= 'fire-units' ->
<<0:1,7:4>>;
Enc29@element =:= 'hAZMAT-units' ->
<<0:1,8:4>>;
Enc29@element =:= 'light-tow-unit' ->
<<0:1,9:4>>;
Enc29@element =:= 'heavy-tow-unit' ->
<<0:1,10:4>>;
Enc29@element =:= 'freeway-service-patrols' ->
<<0:1,11:4>>;
Enc29@element =:= 'transportation-response-units' ->
<<0:1,12:4>>;
Enc29@element =:= 'private-contractor-response-units' ->
<<0:1,13:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc29@element}}})
end
end,
begin
%% attribute fuelType(8) with type INTEGER
Enc32@element = element(9, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
Enc32@element bsr 4 =:= 0 ->
<<Enc32@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc32@element}}})
end
end|begin
%% attribute regional(9) with type SEQUENCE OF
Enc35@element = element(10, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleClassification_regional(Enc35@element)
end
end].
enc_VehicleClassification_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_VehicleClassification_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_VehicleClassification_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_VehicleClassification(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute keyType(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute role(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:5,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> basicVehicle;
1 -> publicTransport;
2 -> specialTransport;
3 -> dangerousGoods;
4 -> roadWork;
5 -> roadRescue;
6 -> emergency;
7 -> safetyCar;
8 -> 'none-unknown';
9 -> truck;
10 -> motorcycle;
11 -> roadSideSource;
12 -> police;
13 -> fire;
14 -> ambulance;
15 -> dot;
16 -> transit;
17 -> slowMoving;
18 -> stopNgo;
19 -> cyclist;
20 -> pedestrian;
21 -> nonMotorized;
22 -> military;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute iso3883(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute hpmsType(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 5) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:4,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<0:1,V6@V9:7,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10};
<<1:1,0:1,V6@V10:14,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
{V6@V10,V6@Buf11};
<<1:1,1:1,V6@V10:6,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
V6@Mul12 = V6@V10 * 16384,
{V6@Mul12,V6@Buf11}
end,
<<V6@V13:V6@V6/unit:8,V6@Buf14/bitstring>> = V6@Buf7,
{V6@V13,V6@Buf14}
end,
V6@Int15 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int15,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute vehicleType(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> 'all-vehicles';
1 -> bicycles;
2 -> motorcycles;
3 -> cars;
4 -> 'light-vehicles';
5 -> 'cars-and-light-vehicles';
6 -> 'cars-with-trailers';
7 -> 'cars-with-recreational-trailers';
8 -> 'vehicles-with-trailers';
9 -> 'heavy-vehicles';
10 -> trucks;
11 -> buses;
12 -> 'articulated-buses';
13 -> 'school-buses';
14 -> 'vehicles-with-semi-trailers';
15 -> 'vehicles-with-double-trailers';
16 -> 'high-profile-vehicles';
17 -> 'wide-vehicles';
18 -> 'long-vehicles';
19 -> 'hazardous-loads';
20 -> 'exceptional-loads';
21 -> 'abnormal-loads';
22 -> convoys;
23 -> 'maintenance-vehicles';
24 -> 'delivery-vehicles';
25 -> 'vehicles-with-even-numbered-license-plates';
26 -> 'vehicles-with-odd-numbered-license-plates';
27 -> 'vehicles-with-parking-permits';
28 -> 'vehicles-with-catalytic-converters';
29 -> 'vehicles-without-catalytic-converters';
30 -> 'gas-powered-vehicles';
31 -> 'diesel-powered-vehicles';
32 -> 'lPG-vehicles';
33 -> 'military-convoys';
34 -> 'military-vehicles';
_ -> exit({error,{asn1,{decode_enumerated,V7@V3}}})
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute responseEquip(6) with type ENUMERATED
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:7,V8@Buf4/bitstring>> ->
V8@Int5 = case V8@V3 of
0 -> 'ground-fire-suppression';
1 -> 'heavy-ground-equipment';
2 -> aircraft;
3 -> 'marine-equipment';
4 -> 'support-equipment';
5 -> 'medical-rescue-unit';
6 -> other;
7 -> 'ground-fire-suppression-other';
8 -> engine;
9 -> 'truck-or-aerial';
10 -> quint;
11 -> 'tanker-pumper-combination';
12 -> 'brush-truck';
13 -> 'aircraft-rescue-firefighting';
14 -> 'heavy-ground-equipment-other';
15 -> 'dozer-or-plow';
16 -> tractor;
17 -> 'tanker-or-tender';
18 -> 'aircraft-other';
19 -> 'aircraft-fixed-wing-tanker';
20 -> helitanker;
21 -> helicopter;
22 -> 'marine-equipment-other';
23 -> 'fire-boat-with-pump';
24 -> 'boat-no-pump';
25 -> 'support-apparatus-other';
26 -> 'breathing-apparatus-support';
27 -> 'light-and-air-unit';
28 -> 'medical-rescue-unit-other';
29 -> 'rescue-unit';
30 -> 'urban-search-rescue-unit';
31 -> 'high-angle-rescue';
32 -> 'crash-fire-rescue';
33 -> 'bLS-unit';
34 -> 'aLS-unit';
35 -> 'mobile-command-post';
36 -> 'chief-officer-car';
37 -> 'hAZMAT-unit';
38 -> 'type-i-hand-crew';
39 -> 'type-ii-hand-crew';
40 -> 'privately-owned-vehicle';
41 -> 'other-apparatus-resource';
42 -> ambulance;
43 -> 'bomb-squad-van';
44 -> 'combine-harvester';
45 -> 'construction-vehicle';
46 -> 'farm-tractor';
47 -> 'grass-cutting-machines';
48 -> 'hAZMAT-containment-tow';
49 -> 'heavy-tow';
50 -> 'hedge-cutting-machines';
51 -> 'light-tow';
52 -> 'mobile-crane';
53 -> 'refuse-collection-vehicle';
54 -> 'resurfacing-vehicle';
55 -> 'road-sweeper';
56 -> 'roadside-litter-collection-crews';
57 -> 'salvage-vehicle';
58 -> 'sand-truck';
59 -> snowplow;
60 -> 'steam-roller';
61 -> 'swat-team-van';
62 -> 'track-laying-vehicle';
63 -> 'unknown-vehicle';
64 -> 'white-lining-vehicle';
65 -> 'dump-truck';
66 -> 'supervisor-vehicle';
67 -> 'snow-blower';
68 -> 'rotary-snow-blower';
69 -> 'road-grader';
70 -> 'steam-truck';
71 -> 'flatbed-tow';
_ -> exit({error,{asn1,{decode_enumerated,V8@V3}}})
end,
{V8@Int5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V6,V8@Buf7};
<<1:1,V8@Buf5/bitstring>> ->
{V8@V6,V8@Buf7} = case V8@Buf5 of
<<0:1,V8@V9:7,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10};
<<1:1,0:1,V8@V10:14,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
{V8@V10,V8@Buf11};
<<1:1,1:1,V8@V10:6,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
V8@Mul12 = V8@V10 * 16384,
{V8@Mul12,V8@Buf11}
end,
<<V8@V13:V8@V6/unit:8,V8@Buf14/bitstring>> = V8@Buf7,
{V8@V13,V8@Buf14}
end,
V8@Int15 = case V8@V3 of
_ -> {asn1_enum,V8@V3}
end,
{V8@Int15,V8@Buf4}
end,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute responderType(7) with type ENUMERATED
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
begin
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:4,V9@Buf4/bitstring>> ->
V9@Int5 = case V9@V3 of
0 -> 'emergency-vehicle-units';
1 -> 'federal-law-enforcement-units';
2 -> 'state-police-units';
3 -> 'county-police-units';
4 -> 'local-police-units';
5 -> 'ambulance-units';
6 -> 'rescue-units';
7 -> 'fire-units';
8 -> 'hAZMAT-units';
9 -> 'light-tow-unit';
10 -> 'heavy-tow-unit';
11 -> 'freeway-service-patrols';
12 -> 'transportation-response-units';
13 -> 'private-contractor-response-units';
_ -> exit({error,{asn1,{decode_enumerated,V9@V3}}})
end,
{V9@Int5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V6,V9@Buf7};
<<1:1,V9@Buf5/bitstring>> ->
{V9@V6,V9@Buf7} = case V9@Buf5 of
<<0:1,V9@V9:7,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10};
<<1:1,0:1,V9@V10:14,V9@Buf11/bitstring>> when V9@V10 =/= 0 ->
{V9@V10,V9@Buf11};
<<1:1,1:1,V9@V10:6,V9@Buf11/bitstring>> when V9@V10 =/= 0 ->
V9@Mul12 = V9@V10 * 16384,
{V9@Mul12,V9@Buf11}
end,
<<V9@V13:V9@V6/unit:8,V9@Buf14/bitstring>> = V9@Buf7,
{V9@V13,V9@Buf14}
end,
V9@Int15 = case V9@V3 of
_ -> {asn1_enum,V9@V3}
end,
{V9@Int15,V9@Buf4}
end,
{V9@V0,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute fuelType(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V10@V0:4,V10@Buf1/bitstring>> = Bytes9,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute regional(9) with type SEQUENCE OF
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_VehicleClassification_regional(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V11@V0,V11@Buf1} = case Bytes11 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:7,V11@Buf7/bitstring>> when V11@V6 =/= 0 ->
{V11@V6,V11@Buf7};
<<1:1,0:1,V11@V7:14,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
{V11@V7,V11@Buf8};
<<1:1,1:1,V11@V7:6,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
V11@Mul9 = V11@V7 * 16384,
{V11@Mul9,V11@Buf8}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V10:V11@V0/bitstring-unit:1,V11@Buf11/bitstring>> = V11@Buf1,
{V11@V10,V11@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'VehicleClassification',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.


dec_VehicleClassification_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components114(V1@Add2, V1@Buf1, []).


dec_VehicleClassification_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_VehicleData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute height(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element bsr 7 =:= 0 ->
<<Enc6@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute bumpers(2) with type BumperHeights
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_BumperHeights(Enc9@element)
end
end,
begin
%% attribute mass(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element bsr 8 =:= 0 ->
Enc11@element;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end|begin
%% attribute trailerWeight(4) with type INTEGER
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
0 =< Enc14@element, Enc14@element < 64256 ->
<<Enc14@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end].


dec_VehicleData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute height(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute bumpers(2) with type BumperHeights
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_BumperHeights(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute mass(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute trailerWeight(4) with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'VehicleData',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_VehicleIdent(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute name(1) with type IA5String
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@element),
Enc9@bin = encode_chars(Enc8@element, 7),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 63 ->
[<<Enc9@len@sub:6>>|Enc9@bin]
end
end
end
end,
begin
%% attribute vin(2) with type OCTET STRING
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = byte_size(Enc11@element),
Enc12@len@sub = Enc12@len - 1,
if 0 =< Enc12@len@sub, Enc12@len@sub < 17 ->
[<<Enc12@len@sub:5>>|Enc11@element]
end
end
end
end,
begin
%% attribute ownerCode(3) with type IA5String
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@len = length(Enc14@element),
Enc15@bin = encode_chars(Enc14@element, 7),
Enc15@len@sub = Enc15@len - 1,
if Enc15@len@sub bsr 5 =:= 0 ->
[<<Enc15@len@sub:5>>|Enc15@bin]
end
end
end
end,
begin
%% attribute id(4) with type VehicleID
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleID(Enc17@element)
end
end,
begin
%% attribute vehicleType(5) with type ENUMERATED
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element =:= none ->
<<0:1,0:4>>;
Enc19@element =:= unknown ->
<<0:1,1:4>>;
Enc19@element =:= special ->
<<0:1,2:4>>;
Enc19@element =:= moto ->
<<0:1,3:4>>;
Enc19@element =:= car ->
<<0:1,4:4>>;
Enc19@element =:= carOther ->
<<0:1,5:4>>;
Enc19@element =:= bus ->
<<0:1,6:4>>;
Enc19@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc19@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc19@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc19@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc19@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc19@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc19@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc19@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc19@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc19@element}}})
end
end|begin
%% attribute vehicleClass(6) with type CHOICE
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleIdent_vehicleClass(Enc22@element)
end
end].
enc_VehicleIdent_vehicleClass(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= vGroup ->
if ChoiceVal =:= 'all-vehicles' ->
<<0:2,0:1,0:6>>;
ChoiceVal =:= bicycles ->
<<0:2,0:1,1:6>>;
ChoiceVal =:= motorcycles ->
<<0:2,0:1,2:6>>;
ChoiceVal =:= cars ->
<<0:2,0:1,3:6>>;
ChoiceVal =:= 'light-vehicles' ->
<<0:2,0:1,4:6>>;
ChoiceVal =:= 'cars-and-light-vehicles' ->
<<0:2,0:1,5:6>>;
ChoiceVal =:= 'cars-with-trailers' ->
<<0:2,0:1,6:6>>;
ChoiceVal =:= 'cars-with-recreational-trailers' ->
<<0:2,0:1,7:6>>;
ChoiceVal =:= 'vehicles-with-trailers' ->
<<0:2,0:1,8:6>>;
ChoiceVal =:= 'heavy-vehicles' ->
<<0:2,0:1,9:6>>;
ChoiceVal =:= trucks ->
<<0:2,0:1,10:6>>;
ChoiceVal =:= buses ->
<<0:2,0:1,11:6>>;
ChoiceVal =:= 'articulated-buses' ->
<<0:2,0:1,12:6>>;
ChoiceVal =:= 'school-buses' ->
<<0:2,0:1,13:6>>;
ChoiceVal =:= 'vehicles-with-semi-trailers' ->
<<0:2,0:1,14:6>>;
ChoiceVal =:= 'vehicles-with-double-trailers' ->
<<0:2,0:1,15:6>>;
ChoiceVal =:= 'high-profile-vehicles' ->
<<0:2,0:1,16:6>>;
ChoiceVal =:= 'wide-vehicles' ->
<<0:2,0:1,17:6>>;
ChoiceVal =:= 'long-vehicles' ->
<<0:2,0:1,18:6>>;
ChoiceVal =:= 'hazardous-loads' ->
<<0:2,0:1,19:6>>;
ChoiceVal =:= 'exceptional-loads' ->
<<0:2,0:1,20:6>>;
ChoiceVal =:= 'abnormal-loads' ->
<<0:2,0:1,21:6>>;
ChoiceVal =:= convoys ->
<<0:2,0:1,22:6>>;
ChoiceVal =:= 'maintenance-vehicles' ->
<<0:2,0:1,23:6>>;
ChoiceVal =:= 'delivery-vehicles' ->
<<0:2,0:1,24:6>>;
ChoiceVal =:= 'vehicles-with-even-numbered-license-plates' ->
<<0:2,0:1,25:6>>;
ChoiceVal =:= 'vehicles-with-odd-numbered-license-plates' ->
<<0:2,0:1,26:6>>;
ChoiceVal =:= 'vehicles-with-parking-permits' ->
<<0:2,0:1,27:6>>;
ChoiceVal =:= 'vehicles-with-catalytic-converters' ->
<<0:2,0:1,28:6>>;
ChoiceVal =:= 'vehicles-without-catalytic-converters' ->
<<0:2,0:1,29:6>>;
ChoiceVal =:= 'gas-powered-vehicles' ->
<<0:2,0:1,30:6>>;
ChoiceVal =:= 'diesel-powered-vehicles' ->
<<0:2,0:1,31:6>>;
ChoiceVal =:= 'lPG-vehicles' ->
<<0:2,0:1,32:6>>;
ChoiceVal =:= 'military-convoys' ->
<<0:2,0:1,33:6>>;
ChoiceVal =:= 'military-vehicles' ->
<<0:2,0:1,34:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= rGroup ->
if ChoiceVal =:= 'emergency-vehicle-units' ->
<<1:2,0:1,0:4>>;
ChoiceVal =:= 'federal-law-enforcement-units' ->
<<1:2,0:1,1:4>>;
ChoiceVal =:= 'state-police-units' ->
<<1:2,0:1,2:4>>;
ChoiceVal =:= 'county-police-units' ->
<<1:2,0:1,3:4>>;
ChoiceVal =:= 'local-police-units' ->
<<1:2,0:1,4:4>>;
ChoiceVal =:= 'ambulance-units' ->
<<1:2,0:1,5:4>>;
ChoiceVal =:= 'rescue-units' ->
<<1:2,0:1,6:4>>;
ChoiceVal =:= 'fire-units' ->
<<1:2,0:1,7:4>>;
ChoiceVal =:= 'hAZMAT-units' ->
<<1:2,0:1,8:4>>;
ChoiceVal =:= 'light-tow-unit' ->
<<1:2,0:1,9:4>>;
ChoiceVal =:= 'heavy-tow-unit' ->
<<1:2,0:1,10:4>>;
ChoiceVal =:= 'freeway-service-patrols' ->
<<1:2,0:1,11:4>>;
ChoiceVal =:= 'transportation-response-units' ->
<<1:2,0:1,12:4>>;
ChoiceVal =:= 'private-contractor-response-units' ->
<<1:2,0:1,13:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= rEquip ->
if ChoiceVal =:= 'ground-fire-suppression' ->
<<2:2,0:1,0:7>>;
ChoiceVal =:= 'heavy-ground-equipment' ->
<<2:2,0:1,1:7>>;
ChoiceVal =:= aircraft ->
<<2:2,0:1,2:7>>;
ChoiceVal =:= 'marine-equipment' ->
<<2:2,0:1,3:7>>;
ChoiceVal =:= 'support-equipment' ->
<<2:2,0:1,4:7>>;
ChoiceVal =:= 'medical-rescue-unit' ->
<<2:2,0:1,5:7>>;
ChoiceVal =:= other ->
<<2:2,0:1,6:7>>;
ChoiceVal =:= 'ground-fire-suppression-other' ->
<<2:2,0:1,7:7>>;
ChoiceVal =:= engine ->
<<2:2,0:1,8:7>>;
ChoiceVal =:= 'truck-or-aerial' ->
<<2:2,0:1,9:7>>;
ChoiceVal =:= quint ->
<<2:2,0:1,10:7>>;
ChoiceVal =:= 'tanker-pumper-combination' ->
<<2:2,0:1,11:7>>;
ChoiceVal =:= 'brush-truck' ->
<<2:2,0:1,12:7>>;
ChoiceVal =:= 'aircraft-rescue-firefighting' ->
<<2:2,0:1,13:7>>;
ChoiceVal =:= 'heavy-ground-equipment-other' ->
<<2:2,0:1,14:7>>;
ChoiceVal =:= 'dozer-or-plow' ->
<<2:2,0:1,15:7>>;
ChoiceVal =:= tractor ->
<<2:2,0:1,16:7>>;
ChoiceVal =:= 'tanker-or-tender' ->
<<2:2,0:1,17:7>>;
ChoiceVal =:= 'aircraft-other' ->
<<2:2,0:1,18:7>>;
ChoiceVal =:= 'aircraft-fixed-wing-tanker' ->
<<2:2,0:1,19:7>>;
ChoiceVal =:= helitanker ->
<<2:2,0:1,20:7>>;
ChoiceVal =:= helicopter ->
<<2:2,0:1,21:7>>;
ChoiceVal =:= 'marine-equipment-other' ->
<<2:2,0:1,22:7>>;
ChoiceVal =:= 'fire-boat-with-pump' ->
<<2:2,0:1,23:7>>;
ChoiceVal =:= 'boat-no-pump' ->
<<2:2,0:1,24:7>>;
ChoiceVal =:= 'support-apparatus-other' ->
<<2:2,0:1,25:7>>;
ChoiceVal =:= 'breathing-apparatus-support' ->
<<2:2,0:1,26:7>>;
ChoiceVal =:= 'light-and-air-unit' ->
<<2:2,0:1,27:7>>;
ChoiceVal =:= 'medical-rescue-unit-other' ->
<<2:2,0:1,28:7>>;
ChoiceVal =:= 'rescue-unit' ->
<<2:2,0:1,29:7>>;
ChoiceVal =:= 'urban-search-rescue-unit' ->
<<2:2,0:1,30:7>>;
ChoiceVal =:= 'high-angle-rescue' ->
<<2:2,0:1,31:7>>;
ChoiceVal =:= 'crash-fire-rescue' ->
<<2:2,0:1,32:7>>;
ChoiceVal =:= 'bLS-unit' ->
<<2:2,0:1,33:7>>;
ChoiceVal =:= 'aLS-unit' ->
<<2:2,0:1,34:7>>;
ChoiceVal =:= 'mobile-command-post' ->
<<2:2,0:1,35:7>>;
ChoiceVal =:= 'chief-officer-car' ->
<<2:2,0:1,36:7>>;
ChoiceVal =:= 'hAZMAT-unit' ->
<<2:2,0:1,37:7>>;
ChoiceVal =:= 'type-i-hand-crew' ->
<<2:2,0:1,38:7>>;
ChoiceVal =:= 'type-ii-hand-crew' ->
<<2:2,0:1,39:7>>;
ChoiceVal =:= 'privately-owned-vehicle' ->
<<2:2,0:1,40:7>>;
ChoiceVal =:= 'other-apparatus-resource' ->
<<2:2,0:1,41:7>>;
ChoiceVal =:= ambulance ->
<<2:2,0:1,42:7>>;
ChoiceVal =:= 'bomb-squad-van' ->
<<2:2,0:1,43:7>>;
ChoiceVal =:= 'combine-harvester' ->
<<2:2,0:1,44:7>>;
ChoiceVal =:= 'construction-vehicle' ->
<<2:2,0:1,45:7>>;
ChoiceVal =:= 'farm-tractor' ->
<<2:2,0:1,46:7>>;
ChoiceVal =:= 'grass-cutting-machines' ->
<<2:2,0:1,47:7>>;
ChoiceVal =:= 'hAZMAT-containment-tow' ->
<<2:2,0:1,48:7>>;
ChoiceVal =:= 'heavy-tow' ->
<<2:2,0:1,49:7>>;
ChoiceVal =:= 'hedge-cutting-machines' ->
<<2:2,0:1,50:7>>;
ChoiceVal =:= 'light-tow' ->
<<2:2,0:1,51:7>>;
ChoiceVal =:= 'mobile-crane' ->
<<2:2,0:1,52:7>>;
ChoiceVal =:= 'refuse-collection-vehicle' ->
<<2:2,0:1,53:7>>;
ChoiceVal =:= 'resurfacing-vehicle' ->
<<2:2,0:1,54:7>>;
ChoiceVal =:= 'road-sweeper' ->
<<2:2,0:1,55:7>>;
ChoiceVal =:= 'roadside-litter-collection-crews' ->
<<2:2,0:1,56:7>>;
ChoiceVal =:= 'salvage-vehicle' ->
<<2:2,0:1,57:7>>;
ChoiceVal =:= 'sand-truck' ->
<<2:2,0:1,58:7>>;
ChoiceVal =:= snowplow ->
<<2:2,0:1,59:7>>;
ChoiceVal =:= 'steam-roller' ->
<<2:2,0:1,60:7>>;
ChoiceVal =:= 'swat-team-van' ->
<<2:2,0:1,61:7>>;
ChoiceVal =:= 'track-laying-vehicle' ->
<<2:2,0:1,62:7>>;
ChoiceVal =:= 'unknown-vehicle' ->
<<2:2,0:1,63:7>>;
ChoiceVal =:= 'white-lining-vehicle' ->
<<2:2,0:1,64:7>>;
ChoiceVal =:= 'dump-truck' ->
<<2:2,0:1,65:7>>;
ChoiceVal =:= 'supervisor-vehicle' ->
<<2:2,0:1,66:7>>;
ChoiceVal =:= 'snow-blower' ->
<<2:2,0:1,67:7>>;
ChoiceVal =:= 'rotary-snow-blower' ->
<<2:2,0:1,68:7>>;
ChoiceVal =:= 'road-grader' ->
<<2:2,0:1,69:7>>;
ChoiceVal =:= 'steam-truck' ->
<<2:2,0:1,70:7>>;
ChoiceVal =:= 'flatbed-tow' ->
<<2:2,0:1,71:7>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end
end.


dec_VehicleIdent(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute name(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute vin(2) with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv5 = binary:copy(V4@V3),
{V4@Conv5,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute ownerCode(3) with type IA5String
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
<<V5@V3:V5@Add2/binary-unit:7,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V5,V5@Buf6}  = {decode_chars(V5@V3, 7),V5@Buf4},
{V5@V5,V5@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute id(4) with type VehicleID
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
dec_VehicleID(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute vehicleType(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:4,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<0:1,V6@V9:7,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10};
<<1:1,0:1,V6@V10:14,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
{V6@V10,V6@Buf11};
<<1:1,1:1,V6@V10:6,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
V6@Mul12 = V6@V10 * 16384,
{V6@Mul12,V6@Buf11}
end,
<<V6@V13:V6@V6/unit:8,V6@Buf14/bitstring>> = V6@Buf7,
{V6@V13,V6@Buf14}
end,
V6@Int15 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int15,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute vehicleClass(6) with type CHOICE
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_VehicleIdent_vehicleClass(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'VehicleIdent',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_VehicleIdent_vehicleClass(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> 'all-vehicles';
1 -> bicycles;
2 -> motorcycles;
3 -> cars;
4 -> 'light-vehicles';
5 -> 'cars-and-light-vehicles';
6 -> 'cars-with-trailers';
7 -> 'cars-with-recreational-trailers';
8 -> 'vehicles-with-trailers';
9 -> 'heavy-vehicles';
10 -> trucks;
11 -> buses;
12 -> 'articulated-buses';
13 -> 'school-buses';
14 -> 'vehicles-with-semi-trailers';
15 -> 'vehicles-with-double-trailers';
16 -> 'high-profile-vehicles';
17 -> 'wide-vehicles';
18 -> 'long-vehicles';
19 -> 'hazardous-loads';
20 -> 'exceptional-loads';
21 -> 'abnormal-loads';
22 -> convoys;
23 -> 'maintenance-vehicles';
24 -> 'delivery-vehicles';
25 -> 'vehicles-with-even-numbered-license-plates';
26 -> 'vehicles-with-odd-numbered-license-plates';
27 -> 'vehicles-with-parking-permits';
28 -> 'vehicles-with-catalytic-converters';
29 -> 'vehicles-without-catalytic-converters';
30 -> 'gas-powered-vehicles';
31 -> 'diesel-powered-vehicles';
32 -> 'lPG-vehicles';
33 -> 'military-convoys';
34 -> 'military-vehicles';
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{vGroup,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes1 of
<<0:1,V3@V3:4,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> 'emergency-vehicle-units';
1 -> 'federal-law-enforcement-units';
2 -> 'state-police-units';
3 -> 'county-police-units';
4 -> 'local-police-units';
5 -> 'ambulance-units';
6 -> 'rescue-units';
7 -> 'fire-units';
8 -> 'hAZMAT-units';
9 -> 'light-tow-unit';
10 -> 'heavy-tow-unit';
11 -> 'freeway-service-patrols';
12 -> 'transportation-response-units';
13 -> 'private-contractor-response-units';
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end
end,
{{rGroup,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes1 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> 'ground-fire-suppression';
1 -> 'heavy-ground-equipment';
2 -> aircraft;
3 -> 'marine-equipment';
4 -> 'support-equipment';
5 -> 'medical-rescue-unit';
6 -> other;
7 -> 'ground-fire-suppression-other';
8 -> engine;
9 -> 'truck-or-aerial';
10 -> quint;
11 -> 'tanker-pumper-combination';
12 -> 'brush-truck';
13 -> 'aircraft-rescue-firefighting';
14 -> 'heavy-ground-equipment-other';
15 -> 'dozer-or-plow';
16 -> tractor;
17 -> 'tanker-or-tender';
18 -> 'aircraft-other';
19 -> 'aircraft-fixed-wing-tanker';
20 -> helitanker;
21 -> helicopter;
22 -> 'marine-equipment-other';
23 -> 'fire-boat-with-pump';
24 -> 'boat-no-pump';
25 -> 'support-apparatus-other';
26 -> 'breathing-apparatus-support';
27 -> 'light-and-air-unit';
28 -> 'medical-rescue-unit-other';
29 -> 'rescue-unit';
30 -> 'urban-search-rescue-unit';
31 -> 'high-angle-rescue';
32 -> 'crash-fire-rescue';
33 -> 'bLS-unit';
34 -> 'aLS-unit';
35 -> 'mobile-command-post';
36 -> 'chief-officer-car';
37 -> 'hAZMAT-unit';
38 -> 'type-i-hand-crew';
39 -> 'type-ii-hand-crew';
40 -> 'privately-owned-vehicle';
41 -> 'other-apparatus-resource';
42 -> ambulance;
43 -> 'bomb-squad-van';
44 -> 'combine-harvester';
45 -> 'construction-vehicle';
46 -> 'farm-tractor';
47 -> 'grass-cutting-machines';
48 -> 'hAZMAT-containment-tow';
49 -> 'heavy-tow';
50 -> 'hedge-cutting-machines';
51 -> 'light-tow';
52 -> 'mobile-crane';
53 -> 'refuse-collection-vehicle';
54 -> 'resurfacing-vehicle';
55 -> 'road-sweeper';
56 -> 'roadside-litter-collection-crews';
57 -> 'salvage-vehicle';
58 -> 'sand-truck';
59 -> snowplow;
60 -> 'steam-roller';
61 -> 'swat-team-van';
62 -> 'track-laying-vehicle';
63 -> 'unknown-vehicle';
64 -> 'white-lining-vehicle';
65 -> 'dump-truck';
66 -> 'supervisor-vehicle';
67 -> 'snow-blower';
68 -> 'rotary-snow-blower';
69 -> 'road-grader';
70 -> 'steam-truck';
71 -> 'flatbed-tow';
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end
end,
{{rEquip,Val},NewBytes}
end.
enc_VehicleID(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= entityID ->
begin
Enc2@len = byte_size(ChoiceVal),
if Enc2@len =:= 4 ->
[<<0:1>>|ChoiceVal]
end
end;
ChoiceTag =:= stationID ->
if ChoiceVal bsr 32 =:= 0 ->
<<1:1,ChoiceVal:32>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end.


dec_VehicleID(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end
end,
{{entityID,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:32,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{stationID,Val},NewBytes}
end.
enc_VehicleSafetyExtensions(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute events(1) with type BIT STRING
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bs = try bit_string_name2pos_11(Enc6@element) of
Enc7@positions ->
bitstring_from_positions(Enc7@positions, 13)
catch throw:invalid ->
adjust_trailing_zeroes(Enc6@element, 13)
end,
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 13 ->
[<<0:1>>|Enc7@bs];
Enc7@bits < 128 ->
[<<1:1,Enc7@bits:8>>|Enc7@bs];
Enc7@bits < 16384 ->
[<<1:1,2:2,Enc7@bits:14>>|Enc7@bs];
true ->
[<<1:1>>|encode_fragmented(Enc7@bs, 1)]
end
end
end
end,
begin
%% attribute pathHistory(2) with type PathHistory
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathHistory(Enc9@element)
end
end,
begin
%% attribute pathPrediction(3) with type PathPrediction
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathPrediction(Enc11@element)
end
end|begin
%% attribute lights(4) with type BIT STRING
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@bs = try bit_string_name2pos_115(Enc13@element) of
Enc14@positions ->
bitstring_from_positions(Enc14@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Enc13@element, 9)
end,
Enc14@bits = bit_size(Enc14@bs),
if Enc14@bits =:= 9 ->
[<<0:1>>|Enc14@bs];
Enc14@bits < 128 ->
[<<1:1,Enc14@bits:8>>|Enc14@bs];
Enc14@bits < 16384 ->
[<<1:1,2:2,Enc14@bits:14>>|Enc14@bs];
true ->
[<<1:1>>|encode_fragmented(Enc14@bs, 1)]
end
end
end
end].


dec_VehicleSafetyExtensions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute events(1) with type BIT STRING
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:13/binary-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@V8:V3@V6/binary-unit:1,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<1:1,0:1,V3@V7:14,V3@V9:V3@V7/binary-unit:1,V3@Buf10/bitstring>> ->
{V3@V9,V3@Buf10};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> ->
{V3@V9,V3@Buf10}  = decode_fragmented(V3@V7, V3@Buf8, 1),
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
{V3@V11,V3@Buf12}  = {decode_named_bit_string(V3@V0, [{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]),V3@Buf1},
{V3@V11,V3@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute pathHistory(2) with type PathHistory
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_PathHistory(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute pathPrediction(3) with type PathPrediction
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_PathPrediction(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute lights(4) with type BIT STRING
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:9/binary-unit:1,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@V8:V4@V6/binary-unit:1,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<1:1,0:1,V4@V7:14,V4@V9:V4@V7/binary-unit:1,V4@Buf10/bitstring>> ->
{V4@V9,V4@Buf10};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> ->
{V4@V9,V4@Buf10}  = decode_fragmented(V4@V7, V4@Buf8, 1),
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
{V4@V11,V4@Buf12}  = {decode_named_bit_string(V4@V0, [{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]),V4@Buf1},
{V4@V11,V4@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'VehicleSafetyExtensions',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_VehicleSize(Val) ->
[begin
%% attribute width(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 10 =:= 0 ->
<<Enc1@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute length(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 12 =:= 0 ->
<<Enc3@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_VehicleSize(Bytes) ->

%% attribute width(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute length(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'VehicleSize',Term1,Term2},
{Res1,Bytes2}.

enc_VehicleStatusRequest(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute dataType(1) with type ENUMERATED
Enc6@element = element(2, Val),
if Enc6@element =:= unknown ->
<<0:1,0:5>>;
Enc6@element =:= lights ->
<<0:1,1:5>>;
Enc6@element =:= wipers ->
<<0:1,2:5>>;
Enc6@element =:= brakes ->
<<0:1,3:5>>;
Enc6@element =:= stab ->
<<0:1,4:5>>;
Enc6@element =:= trac ->
<<0:1,5:5>>;
Enc6@element =:= abs ->
<<0:1,6:5>>;
Enc6@element =:= sunS ->
<<0:1,7:5>>;
Enc6@element =:= rainS ->
<<0:1,8:5>>;
Enc6@element =:= airTemp ->
<<0:1,9:5>>;
Enc6@element =:= steering ->
<<0:1,10:5>>;
Enc6@element =:= vertAccelThres ->
<<0:1,11:5>>;
Enc6@element =:= vertAccel ->
<<0:1,12:5>>;
Enc6@element =:= hozAccelLong ->
<<0:1,13:5>>;
Enc6@element =:= hozAccelLat ->
<<0:1,14:5>>;
Enc6@element =:= hozAccelCon ->
<<0:1,15:5>>;
Enc6@element =:= accel4way ->
<<0:1,16:5>>;
Enc6@element =:= confidenceSet ->
<<0:1,17:5>>;
Enc6@element =:= obDist ->
<<0:1,18:5>>;
Enc6@element =:= obDirect ->
<<0:1,19:5>>;
Enc6@element =:= yaw ->
<<0:1,20:5>>;
Enc6@element =:= yawRateCon ->
<<0:1,21:5>>;
Enc6@element =:= dateTime ->
<<0:1,22:5>>;
Enc6@element =:= fullPos ->
<<0:1,23:5>>;
Enc6@element =:= position2D ->
<<0:1,24:5>>;
Enc6@element =:= position3D ->
<<0:1,25:5>>;
Enc6@element =:= vehicle ->
<<0:1,26:5>>;
Enc6@element =:= speedHeadC ->
<<0:1,27:5>>;
Enc6@element =:= speedC ->
<<0:1,28:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end,
begin
%% attribute subType(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - 1,
if 0 =< Enc8@element@sub, Enc8@element@sub < 15 ->
<<Enc8@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end,
begin
%% attribute sendOnLessThenValue(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - -32767,
if 0 =< Enc11@element@sub, Enc11@element@sub < 65535 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end
end
end,
begin
%% attribute sendOnMoreThenValue(4) with type INTEGER
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@element@sub = Enc14@element - -32767,
if 0 =< Enc14@element@sub, Enc14@element@sub < 65535 ->
<<Enc14@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end
end
end|begin
%% attribute sendAll(5) with type BOOLEAN
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element =:= false ->
<<0:1>>;
Enc17@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc17@element}}})
end
end].


dec_VehicleStatusRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute dataType(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:5,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unknown;
1 -> lights;
2 -> wipers;
3 -> brakes;
4 -> stab;
5 -> trac;
6 -> abs;
7 -> sunS;
8 -> rainS;
9 -> airTemp;
10 -> steering;
11 -> vertAccelThres;
12 -> vertAccel;
13 -> hozAccelLong;
14 -> hozAccelLat;
15 -> hozAccelCon;
16 -> accel4way;
17 -> confidenceSet;
18 -> obDist;
19 -> obDirect;
20 -> yaw;
21 -> yawRateCon;
22 -> dateTime;
23 -> fullPos;
24 -> position2D;
25 -> position3D;
26 -> vehicle;
27 -> speedHeadC;
28 -> speedC;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute subType(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute sendOnLessThenValue(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -32767,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute sendOnMoreThenValue(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:16,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + -32767,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute sendAll(5) with type BOOLEAN
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'VehicleStatusRequest',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_VehicleStatusRequestList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_VehicleStatusRequest(Comp) || Comp <- Val]]
end.



dec_VehicleStatusRequestList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components116(V1@Add2, V1@Buf1, []).

enc_VehicleStatus(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
Enc10@element = element(11, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(12, Val),
Enc12@element = element(13, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(14, Val),
Enc14@element = element(15, Val),
if Enc13@element =:= asn1_NOVALUE ->
if Enc14@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc14@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(16, Val),
Enc16@element = element(17, Val),
if Enc15@element =:= asn1_NOVALUE ->
if Enc16@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc16@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(18, Val),
Enc18@element = element(19, Val),
if Enc17@element =:= asn1_NOVALUE ->
if Enc18@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc18@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc19@element = element(20, Val),
Enc20@element = element(21, Val),
if Enc19@element =:= asn1_NOVALUE ->
if Enc20@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc20@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc21@element = element(22, Val),
Enc22@element = element(23, Val),
if Enc21@element =:= asn1_NOVALUE ->
if Enc22@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc22@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute lights(1) with type BIT STRING
Enc24@element = element(2, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@bs = try bit_string_name2pos_115(Enc24@element) of
Enc25@positions ->
bitstring_from_positions(Enc25@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Enc24@element, 9)
end,
Enc25@bits = bit_size(Enc25@bs),
if Enc25@bits =:= 9 ->
[<<0:1>>|Enc25@bs];
Enc25@bits < 128 ->
[<<1:1,Enc25@bits:8>>|Enc25@bs];
Enc25@bits < 16384 ->
[<<1:1,2:2,Enc25@bits:14>>|Enc25@bs];
true ->
[<<1:1>>|encode_fragmented(Enc25@bs, 1)]
end
end
end
end,
begin
%% attribute lightBar(2) with type ENUMERATED
Enc27@element = element(3, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
Enc27@element =:= unavailable ->
<<0:3>>;
Enc27@element =:= notInUse ->
<<1:3>>;
Enc27@element =:= inUse ->
<<2:3>>;
Enc27@element =:= yellowCautionLights ->
<<3:3>>;
Enc27@element =:= schooldBusLights ->
<<4:3>>;
Enc27@element =:= arrowSignsActive ->
<<5:3>>;
Enc27@element =:= slowMovingVehicle ->
<<6:3>>;
Enc27@element =:= freqStops ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc27@element}}})
end
end,
begin
%% attribute wipers(3) with type WiperSet
Enc30@element = element(4, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_WiperSet(Enc30@element)
end
end,
begin
%% attribute brakeStatus(4) with type BrakeSystemStatus
Enc32@element = element(5, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
enc_BrakeSystemStatus(Enc32@element)
end
end,
begin
%% attribute brakePressure(5) with type ENUMERATED
Enc34@element = element(6, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
Enc34@element =:= unavailable ->
<<0:4>>;
Enc34@element =:= minPressure ->
<<1:4>>;
Enc34@element =:= 'bkLvl-2' ->
<<2:4>>;
Enc34@element =:= 'bkLvl-3' ->
<<3:4>>;
Enc34@element =:= 'bkLvl-4' ->
<<4:4>>;
Enc34@element =:= 'bkLvl-5' ->
<<5:4>>;
Enc34@element =:= 'bkLvl-6' ->
<<6:4>>;
Enc34@element =:= 'bkLvl-7' ->
<<7:4>>;
Enc34@element =:= 'bkLvl-8' ->
<<8:4>>;
Enc34@element =:= 'bkLvl-9' ->
<<9:4>>;
Enc34@element =:= 'bkLvl-10' ->
<<10:4>>;
Enc34@element =:= 'bkLvl-11' ->
<<11:4>>;
Enc34@element =:= 'bkLvl-12' ->
<<12:4>>;
Enc34@element =:= 'bkLvl-13' ->
<<13:4>>;
Enc34@element =:= 'bkLvl-14' ->
<<14:4>>;
Enc34@element =:= maxPressure ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc34@element}}})
end
end,
begin
%% attribute roadFriction(6) with type INTEGER
Enc37@element = element(7, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
0 =< Enc37@element, Enc37@element < 51 ->
<<Enc37@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc37@element}}})
end
end,
begin
%% attribute sunData(7) with type INTEGER
Enc40@element = element(8, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
0 =< Enc40@element, Enc40@element < 1001 ->
<<Enc40@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc40@element}}})
end
end,
begin
%% attribute rainData(8) with type ENUMERATED
Enc43@element = element(9, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
Enc43@element =:= none ->
<<0:3>>;
Enc43@element =:= lightMist ->
<<1:3>>;
Enc43@element =:= heavyMist ->
<<2:3>>;
Enc43@element =:= lightRainOrDrizzle ->
<<3:3>>;
Enc43@element =:= rain ->
<<4:3>>;
Enc43@element =:= moderateRain ->
<<5:3>>;
Enc43@element =:= heavyRain ->
<<6:3>>;
Enc43@element =:= heavyDownpour ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc43@element}}})
end
end,
begin
%% attribute airTemp(9) with type INTEGER
Enc46@element = element(10, Val),
if Enc46@element =:= asn1_NOVALUE ->
[];
0 =< Enc46@element, Enc46@element < 192 ->
Enc46@element;
true ->
exit({error,{asn1,{illegal_integer,Enc46@element}}})
end
end,
begin
%% attribute airPres(10) with type INTEGER
Enc49@element = element(11, Val),
if Enc49@element =:= asn1_NOVALUE ->
[];
Enc49@element bsr 8 =:= 0 ->
Enc49@element;
true ->
exit({error,{asn1,{illegal_integer,Enc49@element}}})
end
end,
begin
%% attribute steering(11) with type SEQUENCE
Enc52@element = element(12, Val),
if Enc52@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_steering(Enc52@element)
end
end,
begin
%% attribute accelSets(12) with type SEQUENCE
Enc54@element = element(13, Val),
if Enc54@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_accelSets(Enc54@element)
end
end,
begin
%% attribute object(13) with type SEQUENCE
Enc56@element = element(14, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_object(Enc56@element)
end
end,
begin
%% attribute fullPos(14) with type FullPositionVector
Enc58@element = element(15, Val),
if Enc58@element =:= asn1_NOVALUE ->
[];
true ->
enc_FullPositionVector(Enc58@element)
end
end,
begin
%% attribute throttlePos(15) with type INTEGER
Enc60@element = element(16, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
0 =< Enc60@element, Enc60@element < 201 ->
Enc60@element;
true ->
exit({error,{asn1,{illegal_integer,Enc60@element}}})
end
end,
begin
%% attribute speedHeadC(16) with type SpeedandHeadingandThrottleConfidence
Enc63@element = element(17, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedandHeadingandThrottleConfidence(Enc63@element)
end
end,
begin
%% attribute speedC(17) with type ENUMERATED
Enc65@element = element(18, Val),
if Enc65@element =:= asn1_NOVALUE ->
[];
Enc65@element =:= unavailable ->
<<0:3>>;
Enc65@element =:= prec100ms ->
<<1:3>>;
Enc65@element =:= prec10ms ->
<<2:3>>;
Enc65@element =:= prec5ms ->
<<3:3>>;
Enc65@element =:= prec1ms ->
<<4:3>>;
Enc65@element =:= 'prec0-1ms' ->
<<5:3>>;
Enc65@element =:= 'prec0-05ms' ->
<<6:3>>;
Enc65@element =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc65@element}}})
end
end,
begin
%% attribute vehicleData(18) with type SEQUENCE
Enc68@element = element(19, Val),
if Enc68@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_vehicleData(Enc68@element)
end
end,
begin
%% attribute vehicleIdent(19) with type VehicleIdent
Enc70@element = element(20, Val),
if Enc70@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleIdent(Enc70@element)
end
end,
begin
%% attribute j1939data(20) with type J1939data
Enc72@element = element(21, Val),
if Enc72@element =:= asn1_NOVALUE ->
[];
true ->
enc_J1939data(Enc72@element)
end
end,
begin
%% attribute weatherReport(21) with type SEQUENCE
Enc74@element = element(22, Val),
if Enc74@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_weatherReport(Enc74@element)
end
end|begin
%% attribute gnssStatus(22) with type BIT STRING
Enc76@element = element(23, Val),
if Enc76@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc77@bs = try bit_string_name2pos_82(Enc76@element) of
Enc77@positions ->
bitstring_from_positions(Enc77@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc76@element, 8)
end,
Enc77@bits = bit_size(Enc77@bs),
if Enc77@bits =:= 8 ->
Enc77@bs
end
end
end
end].
enc_VehicleStatus_steering(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute angle(1) with type INTEGER
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - -126,
if 0 =< Enc4@element@sub, Enc4@element@sub < 254 ->
Enc4@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute confidence(2) with type ENUMERATED
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element =:= unavailable ->
<<0:2>>;
Enc6@element =:= prec2deg ->
<<1:2>>;
Enc6@element =:= prec1deg ->
<<2:2>>;
Enc6@element =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end,
begin
%% attribute rate(3) with type INTEGER
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@element@sub = Enc9@element - -127,
if 0 =< Enc9@element@sub, Enc9@element@sub < 255 ->
Enc9@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end
end
end|begin
%% attribute wheels(4) with type INTEGER
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@element@sub = Enc12@element - -128,
if Enc12@element@sub bsr 8 =:= 0 ->
[Enc12@element@sub];
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end
end
end].
enc_VehicleStatus_accelSets(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute accel4way(1) with type AccelerationSet4Way
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_AccelerationSet4Way(Enc6@element)
end
end,
begin
%% attribute vertAccelThres(2) with type BIT STRING
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@bs = try bit_string_name2pos_80(Enc8@element) of
Enc9@positions ->
bitstring_from_positions(Enc9@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Enc8@element, 5)
end,
Enc9@bits = bit_size(Enc9@bs),
if Enc9@bits =:= 5 ->
Enc9@bs
end
end
end
end,
begin
%% attribute yawRateCon(3) with type ENUMERATED
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element =:= unavailable ->
<<0:3>>;
Enc11@element =:= 'degSec-100-00' ->
<<1:3>>;
Enc11@element =:= 'degSec-010-00' ->
<<2:3>>;
Enc11@element =:= 'degSec-005-00' ->
<<3:3>>;
Enc11@element =:= 'degSec-001-00' ->
<<4:3>>;
Enc11@element =:= 'degSec-000-10' ->
<<5:3>>;
Enc11@element =:= 'degSec-000-05' ->
<<6:3>>;
Enc11@element =:= 'degSec-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc11@element}}})
end
end,
begin
%% attribute hozAccelCon(4) with type ENUMERATED
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element =:= unavailable ->
<<0:3>>;
Enc14@element =:= 'accl-100-00' ->
<<1:3>>;
Enc14@element =:= 'accl-010-00' ->
<<2:3>>;
Enc14@element =:= 'accl-005-00' ->
<<3:3>>;
Enc14@element =:= 'accl-001-00' ->
<<4:3>>;
Enc14@element =:= 'accl-000-10' ->
<<5:3>>;
Enc14@element =:= 'accl-000-05' ->
<<6:3>>;
Enc14@element =:= 'accl-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end|begin
%% attribute confidenceSet(5) with type ConfidenceSet
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConfidenceSet(Enc17@element)
end
end].
enc_VehicleStatus_object(Val) ->
[begin
%% attribute obDist(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 15 =:= 0 ->
<<Enc1@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute obDirect(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 28801 ->
<<Enc3@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute dateTime(3) with type DDateTime
Enc5@element = element(4, Val),
enc_DDateTime(Enc5@element)
end].
enc_VehicleStatus_vehicleData(Val) ->
[begin
%% attribute height(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 7 =:= 0 ->
<<Enc1@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute bumpers(2) with type BumperHeights
Enc3@element = element(3, Val),
enc_BumperHeights(Enc3@element)
end,
begin
%% attribute mass(3) with type INTEGER
Enc4@element = element(4, Val),
if Enc4@element bsr 8 =:= 0 ->
Enc4@element;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute trailerWeight(4) with type INTEGER
Enc6@element = element(5, Val),
if 0 =< Enc6@element, Enc6@element < 64256 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end|begin
%% attribute type(5) with type ENUMERATED
Enc8@element = element(6, Val),
if Enc8@element =:= none ->
<<0:1,0:4>>;
Enc8@element =:= unknown ->
<<0:1,1:4>>;
Enc8@element =:= special ->
<<0:1,2:4>>;
Enc8@element =:= moto ->
<<0:1,3:4>>;
Enc8@element =:= car ->
<<0:1,4:4>>;
Enc8@element =:= carOther ->
<<0:1,5:4>>;
Enc8@element =:= bus ->
<<0:1,6:4>>;
Enc8@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc8@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc8@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc8@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc8@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc8@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc8@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc8@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc8@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc8@element}}})
end
end].
enc_VehicleStatus_weatherReport(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute isRaining(1) with type ENUMERATED
Enc5@element = element(2, Val),
if Enc5@element =:= precip ->
<<0:2>>;
Enc5@element =:= noPrecip ->
<<1:2>>;
Enc5@element =:= error ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end,
begin
%% attribute rainRate(2) with type INTEGER
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 16 =:= 0 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute precipSituation(3) with type ENUMERATED
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element =:= other ->
<<0:4>>;
Enc10@element =:= unknown ->
<<1:4>>;
Enc10@element =:= noPrecipitation ->
<<2:4>>;
Enc10@element =:= unidentifiedSlight ->
<<3:4>>;
Enc10@element =:= unidentifiedModerate ->
<<4:4>>;
Enc10@element =:= unidentifiedHeavy ->
<<5:4>>;
Enc10@element =:= snowSlight ->
<<6:4>>;
Enc10@element =:= snowModerate ->
<<7:4>>;
Enc10@element =:= snowHeavy ->
<<8:4>>;
Enc10@element =:= rainSlight ->
<<9:4>>;
Enc10@element =:= rainModerate ->
<<10:4>>;
Enc10@element =:= rainHeavy ->
<<11:4>>;
Enc10@element =:= frozenPrecipitationSlight ->
<<12:4>>;
Enc10@element =:= frozenPrecipitationModerate ->
<<13:4>>;
Enc10@element =:= frozenPrecipitationHeavy ->
<<14:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc10@element}}})
end
end,
begin
%% attribute solarRadiation(4) with type INTEGER
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 16 =:= 0 ->
<<Enc13@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end|begin
%% attribute friction(5) with type INTEGER
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
0 =< Enc16@element, Enc16@element < 102 ->
<<Enc16@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end].


dec_VehicleStatus(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:22,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute lights(1) with type BIT STRING
{Term1,Bytes3} = case (Opt bsr 21) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:9/binary-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@V8:V3@V6/binary-unit:1,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<1:1,0:1,V3@V7:14,V3@V9:V3@V7/binary-unit:1,V3@Buf10/bitstring>> ->
{V3@V9,V3@Buf10};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> ->
{V3@V9,V3@Buf10}  = decode_fragmented(V3@V7, V3@Buf8, 1),
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
{V3@V11,V3@Buf12}  = {decode_named_bit_string(V3@V0, [{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]),V3@Buf1},
{V3@V11,V3@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute lightBar(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 20) band 1 of
1 ->
begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> yellowCautionLights;
4 -> schooldBusLights;
5 -> arrowSignsActive;
6 -> slowMovingVehicle;
7 -> freqStops
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute wipers(3) with type WiperSet
{Term3,Bytes5} = case (Opt bsr 19) band 1 of
1 ->
dec_WiperSet(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute brakeStatus(4) with type BrakeSystemStatus
{Term4,Bytes6} = case (Opt bsr 18) band 1 of
1 ->
dec_BrakeSystemStatus(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute brakePressure(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 17) band 1 of
1 ->
begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes6,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> minPressure;
2 -> 'bkLvl-2';
3 -> 'bkLvl-3';
4 -> 'bkLvl-4';
5 -> 'bkLvl-5';
6 -> 'bkLvl-6';
7 -> 'bkLvl-7';
8 -> 'bkLvl-8';
9 -> 'bkLvl-9';
10 -> 'bkLvl-10';
11 -> 'bkLvl-11';
12 -> 'bkLvl-12';
13 -> 'bkLvl-13';
14 -> 'bkLvl-14';
15 -> maxPressure
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute roadFriction(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 16) band 1 of
1 ->
begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes7,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute sunData(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 15) band 1 of
1 ->
begin
<<V7@V0:10,V7@Buf1/bitstring>> = Bytes8,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute rainData(8) with type ENUMERATED
{Term8,Bytes10} = case (Opt bsr 14) band 1 of
1 ->
begin
<<V8@V0:3,V8@Buf1/bitstring>> = Bytes9,
V8@Int2 = case V8@V0 of
0 -> none;
1 -> lightMist;
2 -> heavyMist;
3 -> lightRainOrDrizzle;
4 -> rain;
5 -> moderateRain;
6 -> heavyRain;
7 -> heavyDownpour
end,
{V8@Int2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute airTemp(9) with type INTEGER
{Term9,Bytes11} = case (Opt bsr 13) band 1 of
1 ->
begin
<<V9@V0:8,V9@Buf1/bitstring>> = Bytes10,
{V9@V0,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute airPres(10) with type INTEGER
{Term10,Bytes12} = case (Opt bsr 12) band 1 of
1 ->
begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes11,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute steering(11) with type SEQUENCE
{Term11,Bytes13} = case (Opt bsr 11) band 1 of
1 ->
dec_VehicleStatus_steering(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute accelSets(12) with type SEQUENCE
{Term12,Bytes14} = case (Opt bsr 10) band 1 of
1 ->
dec_VehicleStatus_accelSets(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute object(13) with type SEQUENCE
{Term13,Bytes15} = case (Opt bsr 9) band 1 of
1 ->
dec_VehicleStatus_object(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute fullPos(14) with type FullPositionVector
{Term14,Bytes16} = case (Opt bsr 8) band 1 of
1 ->
dec_FullPositionVector(Bytes15);
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute throttlePos(15) with type INTEGER
{Term15,Bytes17} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V11@V0:8,V11@Buf1/bitstring>> = Bytes16,
{V11@V0,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute speedHeadC(16) with type SpeedandHeadingandThrottleConfidence
{Term16,Bytes18} = case (Opt bsr 6) band 1 of
1 ->
dec_SpeedandHeadingandThrottleConfidence(Bytes17);
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute speedC(17) with type ENUMERATED
{Term17,Bytes19} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V12@V0:3,V12@Buf1/bitstring>> = Bytes18,
V12@Int2 = case V12@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V12@Int2,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute vehicleData(18) with type SEQUENCE
{Term18,Bytes20} = case (Opt bsr 4) band 1 of
1 ->
dec_VehicleStatus_vehicleData(Bytes19);
0 ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute vehicleIdent(19) with type VehicleIdent
{Term19,Bytes21} = case (Opt bsr 3) band 1 of
1 ->
dec_VehicleIdent(Bytes20);
0 ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute j1939data(20) with type J1939data
{Term20,Bytes22} = case (Opt bsr 2) band 1 of
1 ->
dec_J1939data(Bytes21);
0 ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute weatherReport(21) with type SEQUENCE
{Term21,Bytes23} = case (Opt bsr 1) band 1 of
1 ->
dec_VehicleStatus_weatherReport(Bytes22);
0 ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute gnssStatus(22) with type BIT STRING
{Term22,Bytes24} = case Opt band 1 of
1 ->
begin
<<V13@V0:8/binary-unit:1,V13@Buf1/bitstring>> = Bytes23,
{V13@V2,V13@Buf3}  = {decode_named_bit_string(V13@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V13@Buf1},
{V13@V2,V13@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes23}
end,

%% Extensions
{Extensions,Bytes25} = case Ext of
0 -> {<<>>,Bytes24};
1 ->
{V14@V0,V14@Buf1} = case Bytes24 of
<<0:1,V14@V3:6,V14@Buf4/bitstring>> ->
V14@Add5 = V14@V3 + 1,
{V14@Add5,V14@Buf4};
<<1:1,V14@Buf2/bitstring>> ->
{V14@V3,V14@Buf4} = case V14@Buf2 of
<<0:1,V14@V6:7,V14@Buf7/bitstring>> when V14@V6 =/= 0 ->
{V14@V6,V14@Buf7};
<<1:1,0:1,V14@V7:14,V14@Buf8/bitstring>> when V14@V7 =/= 0 ->
{V14@V7,V14@Buf8};
<<1:1,1:1,V14@V7:6,V14@Buf8/bitstring>> when V14@V7 =/= 0 ->
V14@Mul9 = V14@V7 * 16384,
{V14@Mul9,V14@Buf8}
end,
{V14@V3,V14@Buf4}
end,
<<V14@V10:V14@V0/bitstring-unit:1,V14@Buf11/bitstring>> = V14@Buf1,
{V14@V10,V14@Buf11}
end,
Bytes26= skipextensions(Bytes25, 1, Extensions),
Res1 = {'VehicleStatus',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22},
{Res1,Bytes26}.


dec_VehicleStatus_steering(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute angle(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -126,
{V2@Add2,V2@Buf1}
end,

%% attribute confidence(2) with type ENUMERATED
{Term2,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute rate(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -127,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute wheels(4) with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -128,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'VehicleStatus_steering',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.


dec_VehicleStatus_accelSets(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute accel4way(1) with type AccelerationSet4Way
{Term1,Bytes2} = case (Opt bsr 4) band 1 of
1 ->
dec_AccelerationSet4Way(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute vertAccelThres(2) with type BIT STRING
{Term2,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V2@V0:5/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_named_bit_string(V2@V0, [{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V2@Buf1},
{V2@V2,V2@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute yawRateCon(3) with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> 'degSec-100-00';
2 -> 'degSec-010-00';
3 -> 'degSec-005-00';
4 -> 'degSec-001-00';
5 -> 'degSec-000-10';
6 -> 'degSec-000-05';
7 -> 'degSec-000-01'
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute hozAccelCon(4) with type ENUMERATED
{Term4,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> 'accl-100-00';
2 -> 'accl-010-00';
3 -> 'accl-005-00';
4 -> 'accl-001-00';
5 -> 'accl-000-10';
6 -> 'accl-000-05';
7 -> 'accl-000-01'
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute confidenceSet(5) with type ConfidenceSet
{Term5,Bytes6} = case Opt band 1 of
1 ->
dec_ConfidenceSet(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,
Res1 = {'VehicleStatus_accelSets',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes6}.


dec_VehicleStatus_object(Bytes) ->

%% attribute obDist(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute obDirect(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:15,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute dateTime(3) with type DDateTime
{Term3,Bytes3} = dec_DDateTime(Bytes2),
Res1 = {'VehicleStatus_object',Term1,Term2,Term3},
{Res1,Bytes3}.


dec_VehicleStatus_vehicleData(Bytes) ->

%% attribute height(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute bumpers(2) with type BumperHeights
{Term2,Bytes2} = dec_BumperHeights(Bytes1),

%% attribute mass(3) with type INTEGER
{Term3,Bytes3} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end,

%% attribute trailerWeight(4) with type INTEGER
{Term4,Bytes4} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute type(5) with type ENUMERATED
{Term5,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:4,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,
Res1 = {'VehicleStatus_vehicleData',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes5}.


dec_VehicleStatus_weatherReport(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute isRaining(1) with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> precip;
1 -> noPrecip;
2 -> error;
_ -> exit({error,{asn1,{decode_enumerated,V2@V0}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute rainRate(2) with type INTEGER
{Term2,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute precipSituation(3) with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> other;
1 -> unknown;
2 -> noPrecipitation;
3 -> unidentifiedSlight;
4 -> unidentifiedModerate;
5 -> unidentifiedHeavy;
6 -> snowSlight;
7 -> snowModerate;
8 -> snowHeavy;
9 -> rainSlight;
10 -> rainModerate;
11 -> rainHeavy;
12 -> frozenPrecipitationSlight;
13 -> frozenPrecipitationModerate;
14 -> frozenPrecipitationHeavy;
_ -> exit({error,{asn1,{decode_enumerated,V4@V0}}})
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute solarRadiation(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute friction(5) with type INTEGER
{Term5,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,
Res1 = {'VehicleStatus_weatherReport',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes6}.

enc_VerticalOffset(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= offset1 ->
begin
ChoiceVal@sub = ChoiceVal - -64,
if ChoiceVal@sub bsr 7 =:= 0 ->
<<0:3,ChoiceVal@sub:7>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset2 ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<1:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset3 ->
begin
ChoiceVal@sub = ChoiceVal - -256,
if ChoiceVal@sub bsr 9 =:= 0 ->
<<2:3,ChoiceVal@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset4 ->
begin
ChoiceVal@sub = ChoiceVal - -512,
if ChoiceVal@sub bsr 10 =:= 0 ->
<<3:3,ChoiceVal@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset5 ->
begin
ChoiceVal@sub = ChoiceVal - -1024,
if ChoiceVal@sub bsr 11 =:= 0 ->
<<4:3,ChoiceVal@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset6 ->
begin
ChoiceVal@sub = ChoiceVal - -2048,
if ChoiceVal@sub bsr 12 =:= 0 ->
<<5:3,ChoiceVal@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= elevation ->
begin
ChoiceVal@sub = ChoiceVal - -4096,
if ChoiceVal@sub bsr 16 =:= 0 ->
<<6:3,ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= regional ->
[<<7:3>>|enc_VerticalOffset_regional(ChoiceVal)]
end.
enc_VerticalOffset_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type4(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_VerticalOffset(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -64,
{V2@Add2,V2@Buf1}
end
end,
{{offset1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + -128,
{V3@Add2,V3@Buf1}
end
end,
{{offset2,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:9,V4@Buf1/bitstring>> = Bytes1,
V4@Add2 = V4@V0 + -256,
{V4@Add2,V4@Buf1}
end
end,
{{offset3,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:10,V5@Buf1/bitstring>> = Bytes1,
V5@Add2 = V5@V0 + -512,
{V5@Add2,V5@Buf1}
end
end,
{{offset4,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:11,V6@Buf1/bitstring>> = Bytes1,
V6@Add2 = V6@V0 + -1024,
{V6@Add2,V6@Buf1}
end
end,
{{offset5,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V7@V0:12,V7@Buf1/bitstring>> = Bytes1,
V7@Add2 = V7@V0 + -2048,
{V7@Add2,V7@Buf1}
end
end,
{{offset6,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
<<V8@V0:16,V8@Buf1/bitstring>> = Bytes1,
V8@Add2 = V8@V0 + -4096,
{V8@Add2,V8@Buf1}
end
end,
{{elevation,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_VerticalOffset_regional(Bytes1)
end,
{{regional,Val},NewBytes}
end.

dec_VerticalOffset_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'VerticalOffset_regional',Term1,Term2},
{Res1,Bytes2}.

enc_WeatherProbe(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute airTemp(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 192 ->
Enc5@element;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute airPressure(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 8 =:= 0 ->
Enc8@element;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end|begin
%% attribute rainRates(3) with type WiperSet
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_WiperSet(Enc11@element)
end
end].


dec_WeatherProbe(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute airTemp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute airPressure(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute rainRates(3) with type WiperSet
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_WiperSet(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'WeatherProbe',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_WeatherReport(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
%% attribute isRaining(1) with type ENUMERATED
Enc7@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc7@element =:= precip ->
<<0:1,0:2>>;
Enc7@element =:= noPrecip ->
<<0:1,1:2>>;
Enc7@element =:= error ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end;
true ->
if Enc7@element =:= precip ->
<<1:1,0:2>>;
Enc7@element =:= noPrecip ->
<<1:1,1:2>>;
Enc7@element =:= error ->
<<1:1,2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end
end,
begin
%% attribute rainRate(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 16 =:= 0 ->
<<Enc9@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute precipSituation(3) with type ENUMERATED
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element =:= other ->
<<0:4>>;
Enc12@element =:= unknown ->
<<1:4>>;
Enc12@element =:= noPrecipitation ->
<<2:4>>;
Enc12@element =:= unidentifiedSlight ->
<<3:4>>;
Enc12@element =:= unidentifiedModerate ->
<<4:4>>;
Enc12@element =:= unidentifiedHeavy ->
<<5:4>>;
Enc12@element =:= snowSlight ->
<<6:4>>;
Enc12@element =:= snowModerate ->
<<7:4>>;
Enc12@element =:= snowHeavy ->
<<8:4>>;
Enc12@element =:= rainSlight ->
<<9:4>>;
Enc12@element =:= rainModerate ->
<<10:4>>;
Enc12@element =:= rainHeavy ->
<<11:4>>;
Enc12@element =:= frozenPrecipitationSlight ->
<<12:4>>;
Enc12@element =:= frozenPrecipitationModerate ->
<<13:4>>;
Enc12@element =:= frozenPrecipitationHeavy ->
<<14:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc12@element}}})
end
end,
begin
%% attribute solarRadiation(4) with type INTEGER
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element bsr 16 =:= 0 ->
<<Enc15@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end,
begin
%% attribute friction(5) with type INTEGER
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
0 =< Enc18@element, Enc18@element < 102 ->
<<Enc18@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end|begin
%% attribute roadFriction(6) with type INTEGER
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
0 =< Enc21@element, Enc21@element < 51 ->
<<Enc21@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc21@element}}})
end
end].


dec_WeatherReport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute isRaining(1) with type ENUMERATED
{Term1,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> precip;
1 -> noPrecip;
2 -> error;
_ -> exit({error,{asn1,{decode_enumerated,V3@V0}}})
end,
{V3@Int2,V3@Buf1}
end,

%% attribute rainRate(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute precipSituation(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> other;
1 -> unknown;
2 -> noPrecipitation;
3 -> unidentifiedSlight;
4 -> unidentifiedModerate;
5 -> unidentifiedHeavy;
6 -> snowSlight;
7 -> snowModerate;
8 -> snowHeavy;
9 -> rainSlight;
10 -> rainModerate;
11 -> rainHeavy;
12 -> frozenPrecipitationSlight;
13 -> frozenPrecipitationModerate;
14 -> frozenPrecipitationHeavy;
_ -> exit({error,{asn1,{decode_enumerated,V5@V0}}})
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute solarRadiation(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:16,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute friction(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:7,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute roadFriction(6) with type INTEGER
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V8@V0:6,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
V9@Mul9 = V9@V7 * 16384,
{V9@Mul9,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V10:V9@V0/bitstring-unit:1,V9@Buf11/bitstring>> = V9@Buf1,
{V9@V10,V9@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'WeatherReport',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.

enc_WiperSet(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute statusFront(1) with type ENUMERATED
Enc3@element = element(2, Val),
if Enc3@element =:= unavailable ->
<<0:1,0:3>>;
Enc3@element =:= off ->
<<0:1,1:3>>;
Enc3@element =:= intermittent ->
<<0:1,2:3>>;
Enc3@element =:= low ->
<<0:1,3:3>>;
Enc3@element =:= high ->
<<0:1,4:3>>;
Enc3@element =:= washerInUse ->
<<0:1,5:3>>;
Enc3@element =:= automaticPresent ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end,
begin
%% attribute rateFront(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 7 =:= 0 ->
<<Enc5@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute statusRear(3) with type ENUMERATED
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element =:= unavailable ->
<<0:1,0:3>>;
Enc7@element =:= off ->
<<0:1,1:3>>;
Enc7@element =:= intermittent ->
<<0:1,2:3>>;
Enc7@element =:= low ->
<<0:1,3:3>>;
Enc7@element =:= high ->
<<0:1,4:3>>;
Enc7@element =:= washerInUse ->
<<0:1,5:3>>;
Enc7@element =:= automaticPresent ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end|begin
%% attribute rateRear(4) with type INTEGER
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element bsr 7 =:= 0 ->
<<Enc10@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end].


dec_WiperSet(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute statusFront(1) with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> unavailable;
1 -> off;
2 -> intermittent;
3 -> low;
4 -> high;
5 -> washerInUse;
6 -> automaticPresent;
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% attribute rateFront(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute statusRear(3) with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:3,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> unavailable;
1 -> off;
2 -> intermittent;
3 -> low;
4 -> high;
5 -> washerInUse;
6 -> automaticPresent;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute rateRear(4) with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'WiperSet',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.

enc_Acceleration(Val) ->
Val@sub = Val - -2000,
if 0 =< Val@sub, Val@sub < 4002 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Acceleration(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2000,
{V1@Add2,V1@Buf1}
end.

enc_AccelerationConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= 'accl-100-00' ->
<<1:3>>;
Val =:= 'accl-010-00' ->
<<2:3>>;
Val =:= 'accl-005-00' ->
<<3:3>>;
Val =:= 'accl-001-00' ->
<<4:3>>;
Val =:= 'accl-000-10' ->
<<5:3>>;
Val =:= 'accl-000-05' ->
<<6:3>>;
Val =:= 'accl-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AccelerationConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'accl-100-00';
2 -> 'accl-010-00';
3 -> 'accl-005-00';
4 -> 'accl-001-00';
5 -> 'accl-000-10';
6 -> 'accl-000-05';
7 -> 'accl-000-01'
end,
{V1@Int2,V1@Buf1}
end.

enc_AdvisorySpeedType(Val) ->
if Val =:= none ->
<<0:1,0:2>>;
Val =:= greenwave ->
<<0:1,1:2>>;
Val =:= ecoDrive ->
<<0:1,2:2>>;
Val =:= transit ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AdvisorySpeedType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> greenwave;
2 -> ecoDrive;
3 -> transit
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_AllowedManeuvers(Val) ->
Enc1@bs = try bit_string_name2pos_36(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 12)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 12)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 12 ->
Enc1@bs
end.


dec_AllowedManeuvers(Bytes) ->
begin
<<V1@V0:12/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{maneuverStraightAllowed,0},{maneuverLeftAllowed,1},{maneuverRightAllowed,2},{maneuverUTurnAllowed,3},{maneuverLeftTurnOnRedAllowed,4},{maneuverRightTurnOnRedAllowed,5},{maneuverLaneChangeAllowed,6},{maneuverNoStoppingAllowed,7},{yieldAllwaysRequired,8},{goWithHalt,9},{caution,10},{reserved1,11}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_AmbientAirPressure(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AmbientAirPressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AmbientAirTemperature(Val) ->
if 0 =< Val, Val < 192 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AmbientAirTemperature(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Angle(Val) ->
if 0 =< Val, Val < 28801 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Angle(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AnimalPropelledType(Val) ->
if Val =:= unavailable ->
<<0:1,0:2>>;
Val =:= otherTypes ->
<<0:1,1:2>>;
Val =:= animalMounted ->
<<0:1,2:2>>;
Val =:= animalDrawnCarriage ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AnimalPropelledType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> animalMounted;
3 -> animalDrawnCarriage
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_AnimalType(Val) ->
if Val =:= unavailable ->
<<0:1,0:2>>;
Val =:= serviceUse ->
<<0:1,1:2>>;
Val =:= pet ->
<<0:1,2:2>>;
Val =:= farm ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AnimalType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> serviceUse;
2 -> pet;
3 -> farm
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_AntiLockBrakeStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AntiLockBrakeStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V1@Int2,V1@Buf1}
end.

enc_ApproachID(Val) ->
if Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ApproachID(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Attachment(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= stroller ->
<<0:1,1:3>>;
Val =:= bicycleTrailer ->
<<0:1,2:3>>;
Val =:= cart ->
<<0:1,3:3>>;
Val =:= wheelchair ->
<<0:1,4:3>>;
Val =:= otherWalkAssistAttachments ->
<<0:1,5:3>>;
Val =:= pet ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_Attachment(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> stroller;
2 -> bicycleTrailer;
3 -> cart;
4 -> wheelchair;
5 -> otherWalkAssistAttachments;
6 -> pet;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_AttachmentRadius(Val) ->
if 0 =< Val, Val < 201 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AttachmentRadius(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AuxiliaryBrakeStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AuxiliaryBrakeStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> reserved
end,
{V1@Int2,V1@Buf1}
end.

enc_BasicVehicleClass(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_BasicVehicleClass(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_BasicVehicleRole(Val) ->
if Val =:= basicVehicle ->
<<0:1,0:5>>;
Val =:= publicTransport ->
<<0:1,1:5>>;
Val =:= specialTransport ->
<<0:1,2:5>>;
Val =:= dangerousGoods ->
<<0:1,3:5>>;
Val =:= roadWork ->
<<0:1,4:5>>;
Val =:= roadRescue ->
<<0:1,5:5>>;
Val =:= emergency ->
<<0:1,6:5>>;
Val =:= safetyCar ->
<<0:1,7:5>>;
Val =:= 'none-unknown' ->
<<0:1,8:5>>;
Val =:= truck ->
<<0:1,9:5>>;
Val =:= motorcycle ->
<<0:1,10:5>>;
Val =:= roadSideSource ->
<<0:1,11:5>>;
Val =:= police ->
<<0:1,12:5>>;
Val =:= fire ->
<<0:1,13:5>>;
Val =:= ambulance ->
<<0:1,14:5>>;
Val =:= dot ->
<<0:1,15:5>>;
Val =:= transit ->
<<0:1,16:5>>;
Val =:= slowMoving ->
<<0:1,17:5>>;
Val =:= stopNgo ->
<<0:1,18:5>>;
Val =:= cyclist ->
<<0:1,19:5>>;
Val =:= pedestrian ->
<<0:1,20:5>>;
Val =:= nonMotorized ->
<<0:1,21:5>>;
Val =:= military ->
<<0:1,22:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_BasicVehicleRole(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> basicVehicle;
1 -> publicTransport;
2 -> specialTransport;
3 -> dangerousGoods;
4 -> roadWork;
5 -> roadRescue;
6 -> emergency;
7 -> safetyCar;
8 -> 'none-unknown';
9 -> truck;
10 -> motorcycle;
11 -> roadSideSource;
12 -> police;
13 -> fire;
14 -> ambulance;
15 -> dot;
16 -> transit;
17 -> slowMoving;
18 -> stopNgo;
19 -> cyclist;
20 -> pedestrian;
21 -> nonMotorized;
22 -> military;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_BrakeAppliedPressure(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= minPressure ->
<<1:4>>;
Val =:= 'bkLvl-2' ->
<<2:4>>;
Val =:= 'bkLvl-3' ->
<<3:4>>;
Val =:= 'bkLvl-4' ->
<<4:4>>;
Val =:= 'bkLvl-5' ->
<<5:4>>;
Val =:= 'bkLvl-6' ->
<<6:4>>;
Val =:= 'bkLvl-7' ->
<<7:4>>;
Val =:= 'bkLvl-8' ->
<<8:4>>;
Val =:= 'bkLvl-9' ->
<<9:4>>;
Val =:= 'bkLvl-10' ->
<<10:4>>;
Val =:= 'bkLvl-11' ->
<<11:4>>;
Val =:= 'bkLvl-12' ->
<<12:4>>;
Val =:= 'bkLvl-13' ->
<<13:4>>;
Val =:= 'bkLvl-14' ->
<<14:4>>;
Val =:= maxPressure ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_BrakeAppliedPressure(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> minPressure;
2 -> 'bkLvl-2';
3 -> 'bkLvl-3';
4 -> 'bkLvl-4';
5 -> 'bkLvl-5';
6 -> 'bkLvl-6';
7 -> 'bkLvl-7';
8 -> 'bkLvl-8';
9 -> 'bkLvl-9';
10 -> 'bkLvl-10';
11 -> 'bkLvl-11';
12 -> 'bkLvl-12';
13 -> 'bkLvl-13';
14 -> 'bkLvl-14';
15 -> maxPressure
end,
{V1@Int2,V1@Buf1}
end.

enc_BrakeAppliedStatus(Val) ->
Enc1@bs = try bit_string_name2pos_34(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 5)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 5 ->
Enc1@bs
end.


dec_BrakeAppliedStatus(Bytes) ->
begin
<<V1@V0:5/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_BrakeBoostApplied(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_BrakeBoostApplied(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
_ -> exit({error,{asn1,{decode_enumerated,V1@V0}}})
end,
{V1@Int2,V1@Buf1}
end.

enc_BumperHeight(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_BumperHeight(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_CoarseHeading(Val) ->
if 0 =< Val, Val < 241 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_CoarseHeading(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_CodeWord(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|Val]
end.


dec_CodeWord(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_CoefficientOfFriction(Val) ->
if 0 =< Val, Val < 51 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_CoefficientOfFriction(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Confidence(Val) ->
if 0 =< Val, Val < 201 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Confidence(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Count(Val) ->
if 0 =< Val, Val < 33 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Count(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DDay(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DDay(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DeltaAngle(Val) ->
Val@sub = Val - -150,
if 0 =< Val@sub, Val@sub < 301 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DeltaAngle(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -150,
{V1@Add2,V1@Buf1}
end.

enc_DeltaTime(Val) ->
Val@sub = Val - -122,
if 0 =< Val@sub, Val@sub < 244 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DeltaTime(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -122,
{V1@Add2,V1@Buf1}
end.

enc_DescriptiveName(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 7),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 63 ->
[<<Enc1@len@sub:6>>|Enc1@bin]
end.


dec_DescriptiveName(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:7,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {decode_chars(V1@V3, 7),V1@Buf4},
{V1@V5,V1@Buf6}
end.

enc_DHour(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DHour(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DirectionOfUse(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= forward ->
<<1:2>>;
Val =:= reverse ->
<<2:2>>;
Val =:= both ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_DirectionOfUse(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> forward;
2 -> reverse;
3 -> both
end,
{V1@Int2,V1@Buf1}
end.

enc_DistanceUnits(Val) ->
if Val =:= centimeter ->
<<0:3>>;
Val =:= 'cm2-5' ->
<<1:3>>;
Val =:= decimeter ->
<<2:3>>;
Val =:= meter ->
<<3:3>>;
Val =:= kilometer ->
<<4:3>>;
Val =:= foot ->
<<5:3>>;
Val =:= yard ->
<<6:3>>;
Val =:= mile ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_DistanceUnits(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> centimeter;
1 -> 'cm2-5';
2 -> decimeter;
3 -> meter;
4 -> kilometer;
5 -> foot;
6 -> yard;
7 -> mile
end,
{V1@Int2,V1@Buf1}
end.

enc_DMinute(Val) ->
if 0 =< Val, Val < 61 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DMinute(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DMonth(Val) ->
if 0 =< Val, Val < 13 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DMonth(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DOffset(Val) ->
Val@sub = Val - -840,
if 0 =< Val@sub, Val@sub < 1681 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DOffset(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -840,
{V1@Add2,V1@Buf1}
end.

enc_DrivenLineOffsetLg(Val) ->
Val@sub = Val - -32767,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DrivenLineOffsetLg(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32767,
{V1@Add2,V1@Buf1}
end.

enc_DrivenLineOffsetSm(Val) ->
Val@sub = Val - -2047,
if 0 =< Val@sub, Val@sub < 4095 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DrivenLineOffsetSm(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2047,
{V1@Add2,V1@Buf1}
end.

enc_DrivingWheelAngle(Val) ->
Val@sub = Val - -128,
if Val@sub bsr 8 =:= 0 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DrivingWheelAngle(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -128,
{V1@Add2,V1@Buf1}
end.

enc_DSecond(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DSecond(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DSRCmsgID(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DSRCmsgID(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Duration(Val) ->
if 0 =< Val, Val < 3601 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Duration(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DYear(Val) ->
if Val bsr 12 =:= 0 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DYear(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_ElevationConfidence(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= 'elev-500-00' ->
<<1:4>>;
Val =:= 'elev-200-00' ->
<<2:4>>;
Val =:= 'elev-100-00' ->
<<3:4>>;
Val =:= 'elev-050-00' ->
<<4:4>>;
Val =:= 'elev-020-00' ->
<<5:4>>;
Val =:= 'elev-010-00' ->
<<6:4>>;
Val =:= 'elev-005-00' ->
<<7:4>>;
Val =:= 'elev-002-00' ->
<<8:4>>;
Val =:= 'elev-001-00' ->
<<9:4>>;
Val =:= 'elev-000-50' ->
<<10:4>>;
Val =:= 'elev-000-20' ->
<<11:4>>;
Val =:= 'elev-000-10' ->
<<12:4>>;
Val =:= 'elev-000-05' ->
<<13:4>>;
Val =:= 'elev-000-02' ->
<<14:4>>;
Val =:= 'elev-000-01' ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ElevationConfidence(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'elev-500-00';
2 -> 'elev-200-00';
3 -> 'elev-100-00';
4 -> 'elev-050-00';
5 -> 'elev-020-00';
6 -> 'elev-010-00';
7 -> 'elev-005-00';
8 -> 'elev-002-00';
9 -> 'elev-001-00';
10 -> 'elev-000-50';
11 -> 'elev-000-20';
12 -> 'elev-000-10';
13 -> 'elev-000-05';
14 -> 'elev-000-02';
15 -> 'elev-000-01'
end,
{V1@Int2,V1@Buf1}
end.

enc_Elevation(Val) ->
Val@sub = Val - -4096,
if Val@sub bsr 16 =:= 0 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Elevation(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -4096,
{V1@Add2,V1@Buf1}
end.

enc_Extent(Val) ->
if Val =:= useInstantlyOnly ->
<<0:4>>;
Val =:= useFor3meters ->
<<1:4>>;
Val =:= useFor10meters ->
<<2:4>>;
Val =:= useFor50meters ->
<<3:4>>;
Val =:= useFor100meters ->
<<4:4>>;
Val =:= useFor500meters ->
<<5:4>>;
Val =:= useFor1000meters ->
<<6:4>>;
Val =:= useFor5000meters ->
<<7:4>>;
Val =:= useFor10000meters ->
<<8:4>>;
Val =:= useFor50000meters ->
<<9:4>>;
Val =:= useFor100000meters ->
<<10:4>>;
Val =:= useFor500000meters ->
<<11:4>>;
Val =:= useFor1000000meters ->
<<12:4>>;
Val =:= useFor5000000meters ->
<<13:4>>;
Val =:= useFor10000000meters ->
<<14:4>>;
Val =:= forever ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_Extent(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> useInstantlyOnly;
1 -> useFor3meters;
2 -> useFor10meters;
3 -> useFor50meters;
4 -> useFor100meters;
5 -> useFor500meters;
6 -> useFor1000meters;
7 -> useFor5000meters;
8 -> useFor10000meters;
9 -> useFor50000meters;
10 -> useFor100000meters;
11 -> useFor500000meters;
12 -> useFor1000000meters;
13 -> useFor5000000meters;
14 -> useFor10000000meters;
15 -> forever
end,
{V1@Int2,V1@Buf1}
end.

enc_ExteriorLights(Val) ->
Enc1@bs = try bit_string_name2pos_115(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 9)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 9 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_ExteriorLights(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:9/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_FuelType(Val) ->
if Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_FuelType(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_FurtherInfoID(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


dec_FurtherInfoID(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_GNSSstatus(Val) ->
Enc1@bs = try bit_string_name2pos_82(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 8)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
Enc1@bs
end.


dec_GNSSstatus(Bytes) ->
begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_GrossDistance(Val) ->
if Val bsr 10 =:= 0 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_GrossDistance(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_GrossSpeed(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_GrossSpeed(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_HeadingConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= prec10deg ->
<<1:3>>;
Val =:= prec05deg ->
<<2:3>>;
Val =:= prec01deg ->
<<3:3>>;
Val =:= 'prec0-1deg' ->
<<4:3>>;
Val =:= 'prec0-05deg' ->
<<5:3>>;
Val =:= 'prec0-01deg' ->
<<6:3>>;
Val =:= 'prec0-0125deg' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_HeadingConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec10deg;
2 -> prec05deg;
3 -> prec01deg;
4 -> 'prec0-1deg';
5 -> 'prec0-05deg';
6 -> 'prec0-01deg';
7 -> 'prec0-0125deg'
end,
{V1@Int2,V1@Buf1}
end.

enc_Heading(Val) ->
if 0 =< Val, Val < 28801 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Heading(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_HeadingSlice(Val) ->
Enc1@bs = try bit_string_name2pos_21(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


dec_HeadingSlice(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_IntersectionID(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_IntersectionID(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_IntersectionStatusObject(Val) ->
Enc1@bs = try bit_string_name2pos_47(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


dec_IntersectionStatusObject(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_IsDolly(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_IsDolly(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_Iso3833VehicleType(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Iso3833VehicleType(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_ITIStextPhrase(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 7),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|Enc1@bin]
end.


dec_ITIStextPhrase(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:7,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {decode_chars(V1@V3, 7),V1@Buf4},
{V1@V5,V1@Buf6}
end.

enc_AxleLocation(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AxleLocation(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AxleWeight(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AxleWeight(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_CargoWeight(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_CargoWeight(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleLiftAirPressure(Val) ->
if 0 =< Val, Val < 1001 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleLiftAirPressure(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleLocation(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleLocation(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleLubePressure(Val) ->
if 0 =< Val, Val < 251 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleLubePressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleTemperature(Val) ->
Val@sub = Val - -40,
if 0 =< Val@sub, Val@sub < 251 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleTemperature(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -40,
{V1@Add2,V1@Buf1}
end.

enc_SteeringAxleLubePressure(Val) ->
if 0 =< Val, Val < 251 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringAxleLubePressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SteeringAxleTemperature(Val) ->
Val@sub = Val - -40,
if 0 =< Val@sub, Val@sub < 251 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringAxleTemperature(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -40,
{V1@Add2,V1@Buf1}
end.

enc_TireLeakageRate(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TireLeakageRate(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TireLocation(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TireLocation(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TirePressureThresholdDetection(Val) ->
if Val =:= noData ->
<<0:3>>;
Val =:= overPressure ->
<<1:3>>;
Val =:= noWarningPressure ->
<<2:3>>;
Val =:= underPressure ->
<<3:3>>;
Val =:= extremeUnderPressure ->
<<4:3>>;
Val =:= undefined ->
<<5:3>>;
Val =:= errorIndicator ->
<<6:3>>;
Val =:= notAvailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TirePressureThresholdDetection(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> noData;
1 -> overPressure;
2 -> noWarningPressure;
3 -> underPressure;
4 -> extremeUnderPressure;
5 -> undefined;
6 -> errorIndicator;
7 -> notAvailable
end,
{V1@Int2,V1@Buf1}
end.

enc_TirePressure(Val) ->
if 0 =< Val, Val < 251 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TirePressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TireTemp(Val) ->
Val@sub = Val - -8736,
if 0 =< Val@sub, Val@sub < 64256 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TireTemp(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8736,
{V1@Add2,V1@Buf1}
end.

enc_TrailerWeight(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TrailerWeight(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_WheelEndElectFault(Val) ->
if Val =:= isOk ->
<<0:2>>;
Val =:= isNotDefined ->
<<1:2>>;
Val =:= isError ->
<<2:2>>;
Val =:= isNotSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_WheelEndElectFault(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> isOk;
1 -> isNotDefined;
2 -> isError;
3 -> isNotSupported
end,
{V1@Int2,V1@Buf1}
end.

enc_WheelSensorStatus(Val) ->
if Val =:= off ->
<<0:2>>;
Val =:= on ->
<<1:2>>;
Val =:= notDefined ->
<<2:2>>;
Val =:= notSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_WheelSensorStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> off;
1 -> on;
2 -> notDefined;
3 -> notSupported
end,
{V1@Int2,V1@Buf1}
end.

'enc_LaneAttributes-Barrier'(Val) ->
Enc1@bs = try bit_string_name2pos_65(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_LaneAttributes-Barrier'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{'median-RevocableLane',0},{median,1},{whiteLineHashing,2},{stripedLines,3},{doubleStripedLines,4},{trafficCones,5},{constructionBarrier,6},{trafficChannels,7},{lowCurbs,8},{highCurbs,9}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_LaneAttributes-Bike'(Val) ->
Enc1@bs = try bit_string_name2pos_63(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_LaneAttributes-Bike'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{bikeRevocableLane,0},{pedestrianUseAllowed,1},{isBikeFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{isolatedByBarrier,5},{unsignalizedSegmentsPresent,6}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_LaneAttributes-Crosswalk'(Val) ->
Enc1@bs = try bit_string_name2pos_62(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_LaneAttributes-Crosswalk'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{crosswalkRevocableLane,0},{bicyleUseAllowed,1},{isXwalkFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{hasPushToWalkButton,5},{audioSupport,6},{rfSignalRequestPresent,7},{unsignalizedSegmentsPresent,8}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_LaneAttributes-Parking'(Val) ->
Enc1@bs = try bit_string_name2pos_68(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_LaneAttributes-Parking'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{parkingRevocableLane,0},{parallelParkingInUse,1},{headInParkingInUse,2},{doNotParkZone,3},{parkingForBusUse,4},{parkingForTaxiUse,5},{noPublicParkingUse,6}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_LaneAttributes-Sidewalk'(Val) ->
Enc1@bs = try bit_string_name2pos_64(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_LaneAttributes-Sidewalk'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{'sidewalk-RevocableLane',0},{bicyleUseAllowed,1},{isSidewalkFlyOverLane,2},{walkBikes,3}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_LaneAttributes-Striping'(Val) ->
Enc1@bs = try bit_string_name2pos_66(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_LaneAttributes-Striping'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{stripeToConnectingLanesRevocableLane,0},{stripeDrawOnLeft,1},{stripeDrawOnRight,2},{stripeToConnectingLanesLeft,3},{stripeToConnectingLanesRight,4},{stripeToConnectingLanesAhead,5}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_LaneAttributes-TrackedVehicle'(Val) ->
Enc1@bs = try bit_string_name2pos_67(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_LaneAttributes-TrackedVehicle'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{'spec-RevocableLane',0},{'spec-commuterRailRoadTrack',1},{'spec-lightRailRoadTrack',2},{'spec-heavyRailRoadTrack',3},{'spec-otherRailType',4}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_LaneAttributes-Vehicle'(Val) ->
Enc1@bs = try bit_string_name2pos_61(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 8)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


'dec_LaneAttributes-Vehicle'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{isVehicleRevocableLane,0},{isVehicleFlyOverLane,1},{hovLaneUseOnly,2},{restrictedToBusUse,3},{restrictedToTaxiUse,4},{restrictedFromPublicUse,5},{hasIRbeaconCoverage,6},{permissionOnRequest,7}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_LaneConnectionID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_LaneConnectionID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LaneDirection(Val) ->
Enc1@bs = try bit_string_name2pos_56(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 2)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 2)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 2 ->
Enc1@bs
end.


dec_LaneDirection(Bytes) ->
begin
<<V1@V0:2/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{ingressPath,0},{egressPath,1}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_LaneID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_LaneID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LaneSharing(Val) ->
Enc1@bs = try bit_string_name2pos_57(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 10)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 10)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 10 ->
Enc1@bs
end.


dec_LaneSharing(Bytes) ->
begin
<<V1@V0:10/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{overlappingLaneDescriptionProvided,0},{multipleLanesTreatedAsOneLane,1},{otherNonMotorizedTrafficTypes,2},{individualMotorizedVehicleTraffic,3},{busVehicleTraffic,4},{taxiVehicleTraffic,5},{pedestriansTraffic,6},{cyclistVehicleTraffic,7},{trackedVehicleTraffic,8},{pedestrianTraffic,9}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_LaneWidth(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_LaneWidth(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Latitude(Val) ->
Val@sub = Val - -900000000,
if 0 =< Val@sub, Val@sub < 1800000002 ->
<<Val@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Latitude(Bytes) ->
begin
<<V1@V0:31,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -900000000,
{V1@Add2,V1@Buf1}
end.

enc_LayerID(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_LayerID(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LayerType(Val) ->
if Val =:= none ->
<<0:1,0:3>>;
Val =:= mixedContent ->
<<0:1,1:3>>;
Val =:= generalMapData ->
<<0:1,2:3>>;
Val =:= intersectionData ->
<<0:1,3:3>>;
Val =:= curveData ->
<<0:1,4:3>>;
Val =:= roadwaySectionData ->
<<0:1,5:3>>;
Val =:= parkingAreaData ->
<<0:1,6:3>>;
Val =:= sharedLaneData ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_LayerType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> mixedContent;
2 -> generalMapData;
3 -> intersectionData;
4 -> curveData;
5 -> roadwaySectionData;
6 -> parkingAreaData;
7 -> sharedLaneData
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_LightbarInUse(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= notInUse ->
<<1:3>>;
Val =:= inUse ->
<<2:3>>;
Val =:= yellowCautionLights ->
<<3:3>>;
Val =:= schooldBusLights ->
<<4:3>>;
Val =:= arrowSignsActive ->
<<5:3>>;
Val =:= slowMovingVehicle ->
<<6:3>>;
Val =:= freqStops ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_LightbarInUse(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> yellowCautionLights;
4 -> schooldBusLights;
5 -> arrowSignsActive;
6 -> slowMovingVehicle;
7 -> freqStops
end,
{V1@Int2,V1@Buf1}
end.

enc_Longitude(Val) ->
Val@sub = Val - -1799999999,
if 0 =< Val@sub, Val@sub < 3600000001 ->
<<Val@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Longitude(Bytes) ->
begin
<<V1@V0:32,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1799999999,
{V1@Add2,V1@Buf1}
end.

'enc_Location-quality'(Val) ->
if Val =:= 'loc-qual-bt1m' ->
<<0:3>>;
Val =:= 'loc-qual-bt5m' ->
<<1:3>>;
Val =:= 'loc-qual-bt12m' ->
<<2:3>>;
Val =:= 'loc-qual-bt50m' ->
<<3:3>>;
Val =:= 'loc-qual-bt125m' ->
<<4:3>>;
Val =:= 'loc-qual-bt500m' ->
<<5:3>>;
Val =:= 'loc-qual-bt1250m' ->
<<6:3>>;
Val =:= 'loc-qual-unknown' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


'dec_Location-quality'(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'loc-qual-bt1m';
1 -> 'loc-qual-bt5m';
2 -> 'loc-qual-bt12m';
3 -> 'loc-qual-bt50m';
4 -> 'loc-qual-bt125m';
5 -> 'loc-qual-bt500m';
6 -> 'loc-qual-bt1250m';
7 -> 'loc-qual-unknown'
end,
{V1@Int2,V1@Buf1}
end.

'enc_Location-tech'(Val) ->
if Val =:= 'loc-tech-unknown' ->
<<0:1,0:4>>;
Val =:= 'loc-tech-GNSS' ->
<<0:1,1:4>>;
Val =:= 'loc-tech-DGPS' ->
<<0:1,2:4>>;
Val =:= 'loc-tech-RTK' ->
<<0:1,3:4>>;
Val =:= 'loc-tech-PPP' ->
<<0:1,4:4>>;
Val =:= 'loc-tech-drGPS' ->
<<0:1,5:4>>;
Val =:= 'loc-tech-drDGPS' ->
<<0:1,6:4>>;
Val =:= 'loc-tech-dr' ->
<<0:1,7:4>>;
Val =:= 'loc-tech-nav' ->
<<0:1,8:4>>;
Val =:= 'loc-tech-fault' ->
<<0:1,9:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


'dec_Location-tech'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'loc-tech-unknown';
1 -> 'loc-tech-GNSS';
2 -> 'loc-tech-DGPS';
3 -> 'loc-tech-RTK';
4 -> 'loc-tech-PPP';
5 -> 'loc-tech-drGPS';
6 -> 'loc-tech-drDGPS';
7 -> 'loc-tech-dr';
8 -> 'loc-tech-nav';
9 -> 'loc-tech-fault';
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_MergeDivergeNodeAngle(Val) ->
Val@sub = Val - -180,
if 0 =< Val@sub, Val@sub < 361 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MergeDivergeNodeAngle(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -180,
{V1@Add2,V1@Buf1}
end.

enc_MessageBLOB(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 10,
if 0 =< Enc1@len@sub, Enc1@len@sub < 1991 ->
[<<Enc1@len@sub:11>>|Val]
end.


dec_MessageBLOB(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 10,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_MinuteOfTheYear(Val) ->
if 0 =< Val, Val < 527041 ->
<<Val:20>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MinuteOfTheYear(Bytes) ->
begin
<<V1@V0:20,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MinutesDuration(Val) ->
if 0 =< Val, Val < 32001 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MinutesDuration(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MotorizedPropelledType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= otherTypes ->
<<0:1,1:3>>;
Val =:= wheelChair ->
<<0:1,2:3>>;
Val =:= bicycle ->
<<0:1,3:3>>;
Val =:= scooter ->
<<0:1,4:3>>;
Val =:= selfBalancingDevice ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MotorizedPropelledType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> wheelChair;
3 -> bicycle;
4 -> scooter;
5 -> selfBalancingDevice;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_MovementPhaseState(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= dark ->
<<1:4>>;
Val =:= 'stop-Then-Proceed' ->
<<2:4>>;
Val =:= 'stop-And-Remain' ->
<<3:4>>;
Val =:= 'pre-Movement' ->
<<4:4>>;
Val =:= 'permissive-Movement-Allowed' ->
<<5:4>>;
Val =:= 'protected-Movement-Allowed' ->
<<6:4>>;
Val =:= 'permissive-clearance' ->
<<7:4>>;
Val =:= 'protected-clearance' ->
<<8:4>>;
Val =:= 'caution-Conflicting-Traffic' ->
<<9:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MovementPhaseState(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> dark;
2 -> 'stop-Then-Proceed';
3 -> 'stop-And-Remain';
4 -> 'pre-Movement';
5 -> 'permissive-Movement-Allowed';
6 -> 'protected-Movement-Allowed';
7 -> 'permissive-clearance';
8 -> 'protected-clearance';
9 -> 'caution-Conflicting-Traffic';
_ -> exit({error,{asn1,{decode_enumerated,V1@V0}}})
end,
{V1@Int2,V1@Buf1}
end.

enc_MsgCount(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MsgCount(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MsgCRC(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


dec_MsgCRC(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_MultiVehicleResponse(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= singleVehicle ->
<<1:2>>;
Val =:= multiVehicle ->
<<2:2>>;
Val =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MultiVehicleResponse(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> singleVehicle;
2 -> multiVehicle;
3 -> reserved
end,
{V1@Int2,V1@Buf1}
end.

enc_MUTCDCode(Val) ->
if Val =:= none ->
<<0:1,0:3>>;
Val =:= regulatory ->
<<0:1,1:3>>;
Val =:= warning ->
<<0:1,2:3>>;
Val =:= maintenance ->
<<0:1,3:3>>;
Val =:= motoristService ->
<<0:1,4:3>>;
Val =:= guide ->
<<0:1,5:3>>;
Val =:= rec ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MUTCDCode(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> regulatory;
2 -> warning;
3 -> maintenance;
4 -> motoristService;
5 -> guide;
6 -> rec;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_NMEA-MsgType'(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_NMEA-MsgType'(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_NMEA-Payload'(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 1023 ->
[<<Enc1@len@sub:10>>|Val]
end.


'dec_NMEA-Payload'(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

'enc_NMEA-Revision'(Val) ->
if Val =:= unknown ->
<<0:1,0:3>>;
Val =:= reserved ->
<<0:1,1:3>>;
Val =:= rev1 ->
<<0:1,2:3>>;
Val =:= rev2 ->
<<0:1,3:3>>;
Val =:= rev3 ->
<<0:1,4:3>>;
Val =:= rev4 ->
<<0:1,5:3>>;
Val =:= rev5 ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


'dec_NMEA-Revision'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> reserved;
2 -> rev1;
3 -> rev2;
4 -> rev3;
5 -> rev4;
6 -> rev5;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_NodeAttributeLL(Val) ->
if Val =:= reserved ->
<<0:1,0:4>>;
Val =:= stopLine ->
<<0:1,1:4>>;
Val =:= roundedCapStyleA ->
<<0:1,2:4>>;
Val =:= roundedCapStyleB ->
<<0:1,3:4>>;
Val =:= mergePoint ->
<<0:1,4:4>>;
Val =:= divergePoint ->
<<0:1,5:4>>;
Val =:= downstreamStopLine ->
<<0:1,6:4>>;
Val =:= downstreamStartNode ->
<<0:1,7:4>>;
Val =:= closedToTraffic ->
<<0:1,8:4>>;
Val =:= safeIsland ->
<<0:1,9:4>>;
Val =:= curbPresentAtStepOff ->
<<0:1,10:4>>;
Val =:= hydrantPresent ->
<<0:1,11:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_NodeAttributeLL(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> stopLine;
2 -> roundedCapStyleA;
3 -> roundedCapStyleB;
4 -> mergePoint;
5 -> divergePoint;
6 -> downstreamStopLine;
7 -> downstreamStartNode;
8 -> closedToTraffic;
9 -> safeIsland;
10 -> curbPresentAtStepOff;
11 -> hydrantPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_NodeAttributeXY(Val) ->
if Val =:= reserved ->
<<0:1,0:4>>;
Val =:= stopLine ->
<<0:1,1:4>>;
Val =:= roundedCapStyleA ->
<<0:1,2:4>>;
Val =:= roundedCapStyleB ->
<<0:1,3:4>>;
Val =:= mergePoint ->
<<0:1,4:4>>;
Val =:= divergePoint ->
<<0:1,5:4>>;
Val =:= downstreamStopLine ->
<<0:1,6:4>>;
Val =:= downstreamStartNode ->
<<0:1,7:4>>;
Val =:= closedToTraffic ->
<<0:1,8:4>>;
Val =:= safeIsland ->
<<0:1,9:4>>;
Val =:= curbPresentAtStepOff ->
<<0:1,10:4>>;
Val =:= hydrantPresent ->
<<0:1,11:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_NodeAttributeXY(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> stopLine;
2 -> roundedCapStyleA;
3 -> roundedCapStyleB;
4 -> mergePoint;
5 -> divergePoint;
6 -> downstreamStopLine;
7 -> downstreamStartNode;
8 -> closedToTraffic;
9 -> safeIsland;
10 -> curbPresentAtStepOff;
11 -> hydrantPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_NumberOfParticipantsInCluster(Val) ->
if Val =:= unavailable ->
<<0:1,0:2>>;
Val =:= small ->
<<0:1,1:2>>;
Val =:= medium ->
<<0:1,2:2>>;
Val =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_NumberOfParticipantsInCluster(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> small;
2 -> medium;
3 -> large
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_ObjectCount(Val) ->
if Val bsr 10 =:= 0 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ObjectCount(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_ObstacleDirection(Val) ->
if 0 =< Val, Val < 28801 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ObstacleDirection(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_ObstacleDistance(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ObstacleDistance(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_Offset-B09'(Val) ->
Val@sub = Val - -256,
if Val@sub bsr 9 =:= 0 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B09'(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -256,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B10'(Val) ->
Val@sub = Val - -512,
if Val@sub bsr 10 =:= 0 ->
<<Val@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B10'(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -512,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B11'(Val) ->
Val@sub = Val - -1024,
if Val@sub bsr 11 =:= 0 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B11'(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1024,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B12'(Val) ->
Val@sub = Val - -2048,
if Val@sub bsr 12 =:= 0 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B13'(Val) ->
Val@sub = Val - -4096,
if Val@sub bsr 13 =:= 0 ->
<<Val@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B13'(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -4096,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B14'(Val) ->
Val@sub = Val - -8192,
if Val@sub bsr 14 =:= 0 ->
<<Val@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B14'(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8192,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B16'(Val) ->
Val@sub = Val - -32768,
if Val@sub bsr 16 =:= 0 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B16'(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32768,
{V1@Add2,V1@Buf1}
end.

'enc_OffsetLL-B12'(Val) ->
Val@sub = Val - -2048,
if Val@sub bsr 12 =:= 0 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_OffsetLL-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end.

'enc_OffsetLL-B14'(Val) ->
Val@sub = Val - -8192,
if Val@sub bsr 14 =:= 0 ->
<<Val@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_OffsetLL-B14'(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8192,
{V1@Add2,V1@Buf1}
end.

'enc_OffsetLL-B16'(Val) ->
Val@sub = Val - -32768,
if Val@sub bsr 16 =:= 0 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_OffsetLL-B16'(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32768,
{V1@Add2,V1@Buf1}
end.

'enc_OffsetLL-B18'(Val) ->
Val@sub = Val - -131072,
if Val@sub bsr 18 =:= 0 ->
<<Val@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_OffsetLL-B18'(Bytes) ->
begin
<<V1@V0:18,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -131072,
{V1@Add2,V1@Buf1}
end.

'enc_OffsetLL-B22'(Val) ->
Val@sub = Val - -2097152,
if Val@sub bsr 22 =:= 0 ->
<<Val@sub:22>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_OffsetLL-B22'(Bytes) ->
begin
<<V1@V0:22,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2097152,
{V1@Add2,V1@Buf1}
end.

'enc_OffsetLL-B24'(Val) ->
Val@sub = Val - -8388608,
if Val@sub bsr 24 =:= 0 ->
<<Val@sub:24>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_OffsetLL-B24'(Bytes) ->
begin
<<V1@V0:24,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8388608,
{V1@Add2,V1@Buf1}
end.

enc_PayloadData(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 11 =:= 0 ->
[<<Enc1@len@sub:11>>|Val]
end.


dec_PayloadData(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_PedestrianBicycleDetect(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PedestrianBicycleDetect(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_HumanPropelledType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= otherTypes ->
<<0:1,1:3>>;
Val =:= onFoot ->
<<0:1,2:3>>;
Val =:= skateboard ->
<<0:1,3:3>>;
Val =:= pushOrKickScooter ->
<<0:1,4:3>>;
Val =:= wheelchair ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_HumanPropelledType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> onFoot;
3 -> skateboard;
4 -> pushOrKickScooter;
5 -> wheelchair;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_PersonalAssistive(Val) ->
Enc1@bs = try bit_string_name2pos_18(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 6)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 6 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PersonalAssistive(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PersonalClusterRadius(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_PersonalClusterRadius(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_PersonalCrossingInProgress(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PersonalCrossingInProgress(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_PersonalCrossingRequest(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PersonalCrossingRequest(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_PersonalDeviceUsageState(Val) ->
Enc1@bs = try bit_string_name2pos_15(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 9)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 9 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PersonalDeviceUsageState(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:9/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PersonalDeviceUserType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= aPEDESTRIAN ->
<<0:1,1:3>>;
Val =:= aPEDALCYCLIST ->
<<0:1,2:3>>;
Val =:= aPUBLICSAFETYWORKER ->
<<0:1,3:3>>;
Val =:= anANIMAL ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PersonalDeviceUserType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> aPEDESTRIAN;
2 -> aPEDALCYCLIST;
3 -> aPUBLICSAFETYWORKER;
4 -> anANIMAL;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_PivotingAllowed(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PivotingAllowed(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_PositionConfidence(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= a500m ->
<<1:4>>;
Val =:= a200m ->
<<2:4>>;
Val =:= a100m ->
<<3:4>>;
Val =:= a50m ->
<<4:4>>;
Val =:= a20m ->
<<5:4>>;
Val =:= a10m ->
<<6:4>>;
Val =:= a5m ->
<<7:4>>;
Val =:= a2m ->
<<8:4>>;
Val =:= a1m ->
<<9:4>>;
Val =:= a50cm ->
<<10:4>>;
Val =:= a20cm ->
<<11:4>>;
Val =:= a10cm ->
<<12:4>>;
Val =:= a5cm ->
<<13:4>>;
Val =:= a2cm ->
<<14:4>>;
Val =:= a1cm ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PositionConfidence(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> a500m;
2 -> a200m;
3 -> a100m;
4 -> a50m;
5 -> a20m;
6 -> a10m;
7 -> a5m;
8 -> a2m;
9 -> a1m;
10 -> a50cm;
11 -> a20cm;
12 -> a10cm;
13 -> a5cm;
14 -> a2cm;
15 -> a1cm
end,
{V1@Int2,V1@Buf1}
end.

enc_PrioritizationResponseStatus(Val) ->
if Val =:= unknown ->
<<0:1,0:3>>;
Val =:= requested ->
<<0:1,1:3>>;
Val =:= processing ->
<<0:1,2:3>>;
Val =:= watchOtherTraffic ->
<<0:1,3:3>>;
Val =:= granted ->
<<0:1,4:3>>;
Val =:= rejected ->
<<0:1,5:3>>;
Val =:= maxPresence ->
<<0:1,6:3>>;
Val =:= reserviceLocked ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PrioritizationResponseStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> requested;
2 -> processing;
3 -> watchOtherTraffic;
4 -> granted;
5 -> rejected;
6 -> maxPresence;
7 -> reserviceLocked
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_Priority(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 1 ->
Val
end.


dec_Priority(Bytes) ->
begin
<<V1@V0:1/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_PriorityRequestType(Val) ->
if Val =:= priorityRequestTypeReserved ->
<<0:1,0:2>>;
Val =:= priorityRequest ->
<<0:1,1:2>>;
Val =:= priorityRequestUpdate ->
<<0:1,2:2>>;
Val =:= priorityCancellation ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PriorityRequestType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> priorityRequestTypeReserved;
1 -> priorityRequest;
2 -> priorityRequestUpdate;
3 -> priorityCancellation
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_PrivilegedEventFlags(Val) ->
Enc1@bs = try bit_string_name2pos_86(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


dec_PrivilegedEventFlags(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_ProbeSegmentNumber(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ProbeSegmentNumber(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_PublicSafetyAndRoadWorkerActivity(Val) ->
Enc1@bs = try bit_string_name2pos_16(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 6)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 6 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PublicSafetyAndRoadWorkerActivity(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PublicSafetyDirectingTrafficSubType(Val) ->
Enc1@bs = try bit_string_name2pos_17(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 7)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 7)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 7 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PublicSafetyDirectingTrafficSubType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:7/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PublicSafetyEventResponderWorkerType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= towOperater ->
<<0:1,1:3>>;
Val =:= fireAndEMSWorker ->
<<0:1,2:3>>;
Val =:= aDOTWorker ->
<<0:1,3:3>>;
Val =:= lawEnforcement ->
<<0:1,4:3>>;
Val =:= hazmatResponder ->
<<0:1,5:3>>;
Val =:= animalControlWorker ->
<<0:1,6:3>>;
Val =:= otherPersonnel ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PublicSafetyEventResponderWorkerType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> towOperater;
2 -> fireAndEMSWorker;
3 -> aDOTWorker;
4 -> lawEnforcement;
5 -> hazmatResponder;
6 -> animalControlWorker;
7 -> otherPersonnel
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RadiusOfCurvature(Val) ->
Val@sub = Val - -32767,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RadiusOfCurvature(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32767,
{V1@Add2,V1@Buf1}
end.

'enc_Radius-B12'(Val) ->
if Val bsr 12 =:= 0 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Radius-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RainSensor(Val) ->
if Val =:= none ->
<<0:3>>;
Val =:= lightMist ->
<<1:3>>;
Val =:= heavyMist ->
<<2:3>>;
Val =:= lightRainOrDrizzle ->
<<3:3>>;
Val =:= rain ->
<<4:3>>;
Val =:= moderateRain ->
<<5:3>>;
Val =:= heavyRain ->
<<6:3>>;
Val =:= heavyDownpour ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RainSensor(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> none;
1 -> lightMist;
2 -> heavyMist;
3 -> lightRainOrDrizzle;
4 -> rain;
5 -> moderateRain;
6 -> heavyRain;
7 -> heavyDownpour
end,
{V1@Int2,V1@Buf1}
end.

enc_RegionId(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RegionId(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RequestedItem(Val) ->
if Val =:= reserved ->
<<0:1,0:5>>;
Val =:= itemA ->
<<0:1,1:5>>;
Val =:= itemB ->
<<0:1,2:5>>;
Val =:= itemC ->
<<0:1,3:5>>;
Val =:= itemD ->
<<0:1,4:5>>;
Val =:= itemE ->
<<0:1,5:5>>;
Val =:= itemF ->
<<0:1,6:5>>;
Val =:= itemG ->
<<0:1,7:5>>;
Val =:= itemI ->
<<0:1,8:5>>;
Val =:= itemJ ->
<<0:1,9:5>>;
Val =:= itemK ->
<<0:1,10:5>>;
Val =:= itemL ->
<<0:1,11:5>>;
Val =:= itemM ->
<<0:1,12:5>>;
Val =:= itemN ->
<<0:1,13:5>>;
Val =:= itemO ->
<<0:1,14:5>>;
Val =:= itemP ->
<<0:1,15:5>>;
Val =:= itemQ ->
<<0:1,16:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RequestedItem(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> itemA;
2 -> itemB;
3 -> itemC;
4 -> itemD;
5 -> itemE;
6 -> itemF;
7 -> itemG;
8 -> itemI;
9 -> itemJ;
10 -> itemK;
11 -> itemL;
12 -> itemM;
13 -> itemN;
14 -> itemO;
15 -> itemP;
16 -> itemQ;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RequestID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RequestID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RequestImportanceLevel(Val) ->
if Val =:= requestImportanceLevelUnKnown ->
<<0:4>>;
Val =:= requestImportanceLevel1 ->
<<1:4>>;
Val =:= requestImportanceLevel2 ->
<<2:4>>;
Val =:= requestImportanceLevel3 ->
<<3:4>>;
Val =:= requestImportanceLevel4 ->
<<4:4>>;
Val =:= requestImportanceLevel5 ->
<<5:4>>;
Val =:= requestImportanceLevel6 ->
<<6:4>>;
Val =:= requestImportanceLevel7 ->
<<7:4>>;
Val =:= requestImportanceLevel8 ->
<<8:4>>;
Val =:= requestImportanceLevel9 ->
<<9:4>>;
Val =:= requestImportanceLevel10 ->
<<10:4>>;
Val =:= requestImportanceLevel11 ->
<<11:4>>;
Val =:= requestImportanceLevel12 ->
<<12:4>>;
Val =:= requestImportanceLevel13 ->
<<13:4>>;
Val =:= requestImportanceLevel14 ->
<<14:4>>;
Val =:= requestImportanceReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RequestImportanceLevel(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> requestImportanceLevelUnKnown;
1 -> requestImportanceLevel1;
2 -> requestImportanceLevel2;
3 -> requestImportanceLevel3;
4 -> requestImportanceLevel4;
5 -> requestImportanceLevel5;
6 -> requestImportanceLevel6;
7 -> requestImportanceLevel7;
8 -> requestImportanceLevel8;
9 -> requestImportanceLevel9;
10 -> requestImportanceLevel10;
11 -> requestImportanceLevel11;
12 -> requestImportanceLevel12;
13 -> requestImportanceLevel13;
14 -> requestImportanceLevel14;
15 -> requestImportanceReserved
end,
{V1@Int2,V1@Buf1}
end.

enc_RequestSubRole(Val) ->
if Val =:= requestSubRoleUnKnown ->
<<0:4>>;
Val =:= requestSubRole1 ->
<<1:4>>;
Val =:= requestSubRole2 ->
<<2:4>>;
Val =:= requestSubRole3 ->
<<3:4>>;
Val =:= requestSubRole4 ->
<<4:4>>;
Val =:= requestSubRole5 ->
<<5:4>>;
Val =:= requestSubRole6 ->
<<6:4>>;
Val =:= requestSubRole7 ->
<<7:4>>;
Val =:= requestSubRole8 ->
<<8:4>>;
Val =:= requestSubRole9 ->
<<9:4>>;
Val =:= requestSubRole10 ->
<<10:4>>;
Val =:= requestSubRole11 ->
<<11:4>>;
Val =:= requestSubRole12 ->
<<12:4>>;
Val =:= requestSubRole13 ->
<<13:4>>;
Val =:= requestSubRole14 ->
<<14:4>>;
Val =:= requestSubRoleReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RequestSubRole(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> requestSubRoleUnKnown;
1 -> requestSubRole1;
2 -> requestSubRole2;
3 -> requestSubRole3;
4 -> requestSubRole4;
5 -> requestSubRole5;
6 -> requestSubRole6;
7 -> requestSubRole7;
8 -> requestSubRole8;
9 -> requestSubRole9;
10 -> requestSubRole10;
11 -> requestSubRole11;
12 -> requestSubRole12;
13 -> requestSubRole13;
14 -> requestSubRole14;
15 -> requestSubRoleReserved
end,
{V1@Int2,V1@Buf1}
end.

enc_ResponseType(Val) ->
if Val =:= notInUseOrNotEquipped ->
<<0:1,0:3>>;
Val =:= emergency ->
<<0:1,1:3>>;
Val =:= nonEmergency ->
<<0:1,2:3>>;
Val =:= pursuit ->
<<0:1,3:3>>;
Val =:= stationary ->
<<0:1,4:3>>;
Val =:= slowMoving ->
<<0:1,5:3>>;
Val =:= stopAndGoMovement ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ResponseType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> notInUseOrNotEquipped;
1 -> emergency;
2 -> nonEmergency;
3 -> pursuit;
4 -> stationary;
5 -> slowMoving;
6 -> stopAndGoMovement;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RestrictionAppliesTo(Val) ->
if Val =:= none ->
<<0:1,0:4>>;
Val =:= equippedTransit ->
<<0:1,1:4>>;
Val =:= equippedTaxis ->
<<0:1,2:4>>;
Val =:= equippedOther ->
<<0:1,3:4>>;
Val =:= emissionCompliant ->
<<0:1,4:4>>;
Val =:= equippedBicycle ->
<<0:1,5:4>>;
Val =:= weightCompliant ->
<<0:1,6:4>>;
Val =:= heightCompliant ->
<<0:1,7:4>>;
Val =:= pedestrians ->
<<0:1,8:4>>;
Val =:= slowMovingPersons ->
<<0:1,9:4>>;
Val =:= wheelchairUsers ->
<<0:1,10:4>>;
Val =:= visualDisabilities ->
<<0:1,11:4>>;
Val =:= audioDisabilities ->
<<0:1,12:4>>;
Val =:= otherUnknownDisabilities ->
<<0:1,13:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RestrictionAppliesTo(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> equippedTransit;
2 -> equippedTaxis;
3 -> equippedOther;
4 -> emissionCompliant;
5 -> equippedBicycle;
6 -> weightCompliant;
7 -> heightCompliant;
8 -> pedestrians;
9 -> slowMovingPersons;
10 -> wheelchairUsers;
11 -> visualDisabilities;
12 -> audioDisabilities;
13 -> otherUnknownDisabilities;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RestrictionClassID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RestrictionClassID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RoadRegulatorID(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RoadRegulatorID(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RoadSegmentID(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RoadSegmentID(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RoadwayCrownAngle(Val) ->
Val@sub = Val - -128,
if Val@sub bsr 8 =:= 0 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RoadwayCrownAngle(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -128,
{V1@Add2,V1@Buf1}
end.

'enc_RTCM-Revision'(Val) ->
if Val =:= unknown ->
<<0:1,0:2>>;
Val =:= rtcmRev2 ->
<<0:1,1:2>>;
Val =:= rtcmRev3 ->
<<0:1,2:2>>;
Val =:= reserved ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


'dec_RTCM-Revision'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> rtcmRev2;
2 -> rtcmRev3;
3 -> reserved
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RTCMmessage(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 1023 ->
[<<Enc1@len@sub:10>>|Val]
end.


dec_RTCMmessage(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

'enc_Scale-B12'(Val) ->
Val@sub = Val - -2048,
if Val@sub bsr 12 =:= 0 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Scale-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end.

enc_SecondOfTime(Val) ->
if 0 =< Val, Val < 62 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SecondOfTime(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SegmentAttributeLL(Val) ->
if Val =:= reserved ->
<<0:1,0:6>>;
Val =:= doNotBlock ->
<<0:1,1:6>>;
Val =:= whiteLine ->
<<0:1,2:6>>;
Val =:= mergingLaneLeft ->
<<0:1,3:6>>;
Val =:= mergingLaneRight ->
<<0:1,4:6>>;
Val =:= curbOnLeft ->
<<0:1,5:6>>;
Val =:= curbOnRight ->
<<0:1,6:6>>;
Val =:= loadingzoneOnLeft ->
<<0:1,7:6>>;
Val =:= loadingzoneOnRight ->
<<0:1,8:6>>;
Val =:= turnOutPointOnLeft ->
<<0:1,9:6>>;
Val =:= turnOutPointOnRight ->
<<0:1,10:6>>;
Val =:= adjacentParkingOnLeft ->
<<0:1,11:6>>;
Val =:= adjacentParkingOnRight ->
<<0:1,12:6>>;
Val =:= adjacentBikeLaneOnLeft ->
<<0:1,13:6>>;
Val =:= adjacentBikeLaneOnRight ->
<<0:1,14:6>>;
Val =:= sharedBikeLane ->
<<0:1,15:6>>;
Val =:= bikeBoxInFront ->
<<0:1,16:6>>;
Val =:= transitStopOnLeft ->
<<0:1,17:6>>;
Val =:= transitStopOnRight ->
<<0:1,18:6>>;
Val =:= transitStopInLane ->
<<0:1,19:6>>;
Val =:= sharedWithTrackedVehicle ->
<<0:1,20:6>>;
Val =:= safeIsland ->
<<0:1,21:6>>;
Val =:= lowCurbsPresent ->
<<0:1,22:6>>;
Val =:= rumbleStripPresent ->
<<0:1,23:6>>;
Val =:= audibleSignalingPresent ->
<<0:1,24:6>>;
Val =:= adaptiveTimingPresent ->
<<0:1,25:6>>;
Val =:= rfSignalRequestPresent ->
<<0:1,26:6>>;
Val =:= partialCurbIntrusion ->
<<0:1,27:6>>;
Val =:= taperToLeft ->
<<0:1,28:6>>;
Val =:= taperToRight ->
<<0:1,29:6>>;
Val =:= taperToCenterLine ->
<<0:1,30:6>>;
Val =:= parallelParking ->
<<0:1,31:6>>;
Val =:= headInParking ->
<<0:1,32:6>>;
Val =:= freeParking ->
<<0:1,33:6>>;
Val =:= timeRestrictionsOnParking ->
<<0:1,34:6>>;
Val =:= costToPark ->
<<0:1,35:6>>;
Val =:= midBlockCurbPresent ->
<<0:1,36:6>>;
Val =:= unEvenPavementPresent ->
<<0:1,37:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SegmentAttributeLL(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> doNotBlock;
2 -> whiteLine;
3 -> mergingLaneLeft;
4 -> mergingLaneRight;
5 -> curbOnLeft;
6 -> curbOnRight;
7 -> loadingzoneOnLeft;
8 -> loadingzoneOnRight;
9 -> turnOutPointOnLeft;
10 -> turnOutPointOnRight;
11 -> adjacentParkingOnLeft;
12 -> adjacentParkingOnRight;
13 -> adjacentBikeLaneOnLeft;
14 -> adjacentBikeLaneOnRight;
15 -> sharedBikeLane;
16 -> bikeBoxInFront;
17 -> transitStopOnLeft;
18 -> transitStopOnRight;
19 -> transitStopInLane;
20 -> sharedWithTrackedVehicle;
21 -> safeIsland;
22 -> lowCurbsPresent;
23 -> rumbleStripPresent;
24 -> audibleSignalingPresent;
25 -> adaptiveTimingPresent;
26 -> rfSignalRequestPresent;
27 -> partialCurbIntrusion;
28 -> taperToLeft;
29 -> taperToRight;
30 -> taperToCenterLine;
31 -> parallelParking;
32 -> headInParking;
33 -> freeParking;
34 -> timeRestrictionsOnParking;
35 -> costToPark;
36 -> midBlockCurbPresent;
37 -> unEvenPavementPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_SegmentAttributeXY(Val) ->
if Val =:= reserved ->
<<0:1,0:6>>;
Val =:= doNotBlock ->
<<0:1,1:6>>;
Val =:= whiteLine ->
<<0:1,2:6>>;
Val =:= mergingLaneLeft ->
<<0:1,3:6>>;
Val =:= mergingLaneRight ->
<<0:1,4:6>>;
Val =:= curbOnLeft ->
<<0:1,5:6>>;
Val =:= curbOnRight ->
<<0:1,6:6>>;
Val =:= loadingzoneOnLeft ->
<<0:1,7:6>>;
Val =:= loadingzoneOnRight ->
<<0:1,8:6>>;
Val =:= turnOutPointOnLeft ->
<<0:1,9:6>>;
Val =:= turnOutPointOnRight ->
<<0:1,10:6>>;
Val =:= adjacentParkingOnLeft ->
<<0:1,11:6>>;
Val =:= adjacentParkingOnRight ->
<<0:1,12:6>>;
Val =:= adjacentBikeLaneOnLeft ->
<<0:1,13:6>>;
Val =:= adjacentBikeLaneOnRight ->
<<0:1,14:6>>;
Val =:= sharedBikeLane ->
<<0:1,15:6>>;
Val =:= bikeBoxInFront ->
<<0:1,16:6>>;
Val =:= transitStopOnLeft ->
<<0:1,17:6>>;
Val =:= transitStopOnRight ->
<<0:1,18:6>>;
Val =:= transitStopInLane ->
<<0:1,19:6>>;
Val =:= sharedWithTrackedVehicle ->
<<0:1,20:6>>;
Val =:= safeIsland ->
<<0:1,21:6>>;
Val =:= lowCurbsPresent ->
<<0:1,22:6>>;
Val =:= rumbleStripPresent ->
<<0:1,23:6>>;
Val =:= audibleSignalingPresent ->
<<0:1,24:6>>;
Val =:= adaptiveTimingPresent ->
<<0:1,25:6>>;
Val =:= rfSignalRequestPresent ->
<<0:1,26:6>>;
Val =:= partialCurbIntrusion ->
<<0:1,27:6>>;
Val =:= taperToLeft ->
<<0:1,28:6>>;
Val =:= taperToRight ->
<<0:1,29:6>>;
Val =:= taperToCenterLine ->
<<0:1,30:6>>;
Val =:= parallelParking ->
<<0:1,31:6>>;
Val =:= headInParking ->
<<0:1,32:6>>;
Val =:= freeParking ->
<<0:1,33:6>>;
Val =:= timeRestrictionsOnParking ->
<<0:1,34:6>>;
Val =:= costToPark ->
<<0:1,35:6>>;
Val =:= midBlockCurbPresent ->
<<0:1,36:6>>;
Val =:= unEvenPavementPresent ->
<<0:1,37:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SegmentAttributeXY(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> doNotBlock;
2 -> whiteLine;
3 -> mergingLaneLeft;
4 -> mergingLaneRight;
5 -> curbOnLeft;
6 -> curbOnRight;
7 -> loadingzoneOnLeft;
8 -> loadingzoneOnRight;
9 -> turnOutPointOnLeft;
10 -> turnOutPointOnRight;
11 -> adjacentParkingOnLeft;
12 -> adjacentParkingOnRight;
13 -> adjacentBikeLaneOnLeft;
14 -> adjacentBikeLaneOnRight;
15 -> sharedBikeLane;
16 -> bikeBoxInFront;
17 -> transitStopOnLeft;
18 -> transitStopOnRight;
19 -> transitStopInLane;
20 -> sharedWithTrackedVehicle;
21 -> safeIsland;
22 -> lowCurbsPresent;
23 -> rumbleStripPresent;
24 -> audibleSignalingPresent;
25 -> adaptiveTimingPresent;
26 -> rfSignalRequestPresent;
27 -> partialCurbIntrusion;
28 -> taperToLeft;
29 -> taperToRight;
30 -> taperToCenterLine;
31 -> parallelParking;
32 -> headInParking;
33 -> freeParking;
34 -> timeRestrictionsOnParking;
35 -> costToPark;
36 -> midBlockCurbPresent;
37 -> unEvenPavementPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_SemiMajorAxisAccuracy(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SemiMajorAxisAccuracy(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SemiMajorAxisOrientation(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SemiMajorAxisOrientation(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SemiMinorAxisAccuracy(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SemiMinorAxisAccuracy(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SignalGroupID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SignalGroupID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SignalReqScheme(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 1 ->
Val
end.


dec_SignalReqScheme(Bytes) ->
begin
<<V1@V0:1/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_SignPrority(Val) ->
if Val bsr 3 =:= 0 ->
<<Val:3>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SignPrority(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SirenInUse(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= notInUse ->
<<1:2>>;
Val =:= inUse ->
<<2:2>>;
Val =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SirenInUse(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> reserved
end,
{V1@Int2,V1@Buf1}
end.

enc_SpeedAdvice(Val) ->
if 0 =< Val, Val < 501 ->
<<Val:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SpeedAdvice(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SpeedConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= prec100ms ->
<<1:3>>;
Val =:= prec10ms ->
<<2:3>>;
Val =:= prec5ms ->
<<3:3>>;
Val =:= prec1ms ->
<<4:3>>;
Val =:= 'prec0-1ms' ->
<<5:3>>;
Val =:= 'prec0-05ms' ->
<<6:3>>;
Val =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SpeedConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V1@Int2,V1@Buf1}
end.

enc_SpeedLimitType(Val) ->
if Val =:= unknown ->
<<0:1,0:4>>;
Val =:= maxSpeedInSchoolZone ->
<<0:1,1:4>>;
Val =:= maxSpeedInSchoolZoneWhenChildrenArePresent ->
<<0:1,2:4>>;
Val =:= maxSpeedInConstructionZone ->
<<0:1,3:4>>;
Val =:= vehicleMinSpeed ->
<<0:1,4:4>>;
Val =:= vehicleMaxSpeed ->
<<0:1,5:4>>;
Val =:= vehicleNightMaxSpeed ->
<<0:1,6:4>>;
Val =:= truckMinSpeed ->
<<0:1,7:4>>;
Val =:= truckMaxSpeed ->
<<0:1,8:4>>;
Val =:= truckNightMaxSpeed ->
<<0:1,9:4>>;
Val =:= vehiclesWithTrailersMinSpeed ->
<<0:1,10:4>>;
Val =:= vehiclesWithTrailersMaxSpeed ->
<<0:1,11:4>>;
Val =:= vehiclesWithTrailersNightMaxSpeed ->
<<0:1,12:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SpeedLimitType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> maxSpeedInSchoolZone;
2 -> maxSpeedInSchoolZoneWhenChildrenArePresent;
3 -> maxSpeedInConstructionZone;
4 -> vehicleMinSpeed;
5 -> vehicleMaxSpeed;
6 -> vehicleNightMaxSpeed;
7 -> truckMinSpeed;
8 -> truckMaxSpeed;
9 -> truckNightMaxSpeed;
10 -> vehiclesWithTrailersMinSpeed;
11 -> vehiclesWithTrailersMaxSpeed;
12 -> vehiclesWithTrailersNightMaxSpeed;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_SpeedProfileMeasurement(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SpeedProfileMeasurement(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Speed(Val) ->
if Val bsr 13 =:= 0 ->
<<Val:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Speed(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SSPindex(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SSPindex(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_StabilityControlStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_StabilityControlStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V1@Int2,V1@Buf1}
end.

enc_StationID(Val) ->
if Val bsr 32 =:= 0 ->
<<Val:32>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_StationID(Bytes) ->
begin
<<V1@V0:32,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SteeringWheelAngleConfidence(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= prec2deg ->
<<1:2>>;
Val =:= prec1deg ->
<<2:2>>;
Val =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SteeringWheelAngleConfidence(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V1@Int2,V1@Buf1}
end.

enc_SteeringWheelAngleRateOfChange(Val) ->
Val@sub = Val - -127,
if 0 =< Val@sub, Val@sub < 255 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringWheelAngleRateOfChange(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -127,
{V1@Add2,V1@Buf1}
end.

enc_SteeringWheelAngle(Val) ->
Val@sub = Val - -126,
if 0 =< Val@sub, Val@sub < 254 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringWheelAngle(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -126,
{V1@Add2,V1@Buf1}
end.

enc_SunSensor(Val) ->
if 0 =< Val, Val < 1001 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SunSensor(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TemporaryID(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 4 ->
Val
end.


dec_TemporaryID(Bytes) ->
begin
<<V1@V0:4/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_TermDistance(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 30000 ->
<<Val@sub:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TermDistance(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

enc_TermTime(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 1800 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TermTime(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

enc_ThrottleConfidence(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= prec10percent ->
<<1:2>>;
Val =:= prec1percent ->
<<2:2>>;
Val =:= 'prec0-5percent' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ThrottleConfidence(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec10percent;
2 -> prec1percent;
3 -> 'prec0-5percent'
end,
{V1@Int2,V1@Buf1}
end.

enc_ThrottlePosition(Val) ->
if 0 =< Val, Val < 201 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ThrottlePosition(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TimeConfidence(Val) ->
if Val =:= unavailable ->
<<0:6>>;
Val =:= 'time-100-000' ->
<<1:6>>;
Val =:= 'time-050-000' ->
<<2:6>>;
Val =:= 'time-020-000' ->
<<3:6>>;
Val =:= 'time-010-000' ->
<<4:6>>;
Val =:= 'time-002-000' ->
<<5:6>>;
Val =:= 'time-001-000' ->
<<6:6>>;
Val =:= 'time-000-500' ->
<<7:6>>;
Val =:= 'time-000-200' ->
<<8:6>>;
Val =:= 'time-000-100' ->
<<9:6>>;
Val =:= 'time-000-050' ->
<<10:6>>;
Val =:= 'time-000-020' ->
<<11:6>>;
Val =:= 'time-000-010' ->
<<12:6>>;
Val =:= 'time-000-005' ->
<<13:6>>;
Val =:= 'time-000-002' ->
<<14:6>>;
Val =:= 'time-000-001' ->
<<15:6>>;
Val =:= 'time-000-000-5' ->
<<16:6>>;
Val =:= 'time-000-000-2' ->
<<17:6>>;
Val =:= 'time-000-000-1' ->
<<18:6>>;
Val =:= 'time-000-000-05' ->
<<19:6>>;
Val =:= 'time-000-000-02' ->
<<20:6>>;
Val =:= 'time-000-000-01' ->
<<21:6>>;
Val =:= 'time-000-000-005' ->
<<22:6>>;
Val =:= 'time-000-000-002' ->
<<23:6>>;
Val =:= 'time-000-000-001' ->
<<24:6>>;
Val =:= 'time-000-000-000-5' ->
<<25:6>>;
Val =:= 'time-000-000-000-2' ->
<<26:6>>;
Val =:= 'time-000-000-000-1' ->
<<27:6>>;
Val =:= 'time-000-000-000-05' ->
<<28:6>>;
Val =:= 'time-000-000-000-02' ->
<<29:6>>;
Val =:= 'time-000-000-000-01' ->
<<30:6>>;
Val =:= 'time-000-000-000-005' ->
<<31:6>>;
Val =:= 'time-000-000-000-002' ->
<<32:6>>;
Val =:= 'time-000-000-000-001' ->
<<33:6>>;
Val =:= 'time-000-000-000-000-5' ->
<<34:6>>;
Val =:= 'time-000-000-000-000-2' ->
<<35:6>>;
Val =:= 'time-000-000-000-000-1' ->
<<36:6>>;
Val =:= 'time-000-000-000-000-05' ->
<<37:6>>;
Val =:= 'time-000-000-000-000-02' ->
<<38:6>>;
Val =:= 'time-000-000-000-000-01' ->
<<39:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TimeConfidence(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'time-100-000';
2 -> 'time-050-000';
3 -> 'time-020-000';
4 -> 'time-010-000';
5 -> 'time-002-000';
6 -> 'time-001-000';
7 -> 'time-000-500';
8 -> 'time-000-200';
9 -> 'time-000-100';
10 -> 'time-000-050';
11 -> 'time-000-020';
12 -> 'time-000-010';
13 -> 'time-000-005';
14 -> 'time-000-002';
15 -> 'time-000-001';
16 -> 'time-000-000-5';
17 -> 'time-000-000-2';
18 -> 'time-000-000-1';
19 -> 'time-000-000-05';
20 -> 'time-000-000-02';
21 -> 'time-000-000-01';
22 -> 'time-000-000-005';
23 -> 'time-000-000-002';
24 -> 'time-000-000-001';
25 -> 'time-000-000-000-5';
26 -> 'time-000-000-000-2';
27 -> 'time-000-000-000-1';
28 -> 'time-000-000-000-05';
29 -> 'time-000-000-000-02';
30 -> 'time-000-000-000-01';
31 -> 'time-000-000-000-005';
32 -> 'time-000-000-000-002';
33 -> 'time-000-000-000-001';
34 -> 'time-000-000-000-000-5';
35 -> 'time-000-000-000-000-2';
36 -> 'time-000-000-000-000-1';
37 -> 'time-000-000-000-000-05';
38 -> 'time-000-000-000-000-02';
39 -> 'time-000-000-000-000-01';
_ -> exit({error,{asn1,{decode_enumerated,V1@V0}}})
end,
{V1@Int2,V1@Buf1}
end.

enc_TimeIntervalConfidence(Val) ->
if Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TimeIntervalConfidence(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TimeMark(Val) ->
if 0 =< Val, Val < 36002 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TimeMark(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TimeOffset(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TimeOffset(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

enc_TractionControlStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TractionControlStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V1@Int2,V1@Buf1}
end.

enc_TrailerMass(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TrailerMass(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TransitStatus(Val) ->
Enc1@bs = try bit_string_name2pos_117(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 6)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 6 ->
Enc1@bs
end.


dec_TransitStatus(Bytes) ->
begin
<<V1@V0:6/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{none,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{occM,4},{occL,5}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_TransitVehicleOccupancy(Val) ->
if Val =:= occupancyUnknown ->
<<0:3>>;
Val =:= occupancyEmpty ->
<<1:3>>;
Val =:= occupancyVeryLow ->
<<2:3>>;
Val =:= occupancyLow ->
<<3:3>>;
Val =:= occupancyMed ->
<<4:3>>;
Val =:= occupancyHigh ->
<<5:3>>;
Val =:= occupancyNearlyFull ->
<<6:3>>;
Val =:= occupancyFull ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TransitVehicleOccupancy(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> occupancyUnknown;
1 -> occupancyEmpty;
2 -> occupancyVeryLow;
3 -> occupancyLow;
4 -> occupancyMed;
5 -> occupancyHigh;
6 -> occupancyNearlyFull;
7 -> occupancyFull
end,
{V1@Int2,V1@Buf1}
end.

enc_TransitVehicleStatus(Val) ->
Enc1@bs = try bit_string_name2pos_89(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 8)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
Enc1@bs
end.


dec_TransitVehicleStatus(Bytes) ->
begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{loading,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{charging,4},{atStopLine,5}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_TransmissionState(Val) ->
if Val =:= neutral ->
<<0:3>>;
Val =:= park ->
<<1:3>>;
Val =:= forwardGears ->
<<2:3>>;
Val =:= reverseGears ->
<<3:3>>;
Val =:= reserved1 ->
<<4:3>>;
Val =:= reserved2 ->
<<5:3>>;
Val =:= reserved3 ->
<<6:3>>;
Val =:= unavailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TransmissionState(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> neutral;
1 -> park;
2 -> forwardGears;
3 -> reverseGears;
4 -> reserved1;
5 -> reserved2;
6 -> reserved3;
7 -> unavailable
end,
{V1@Int2,V1@Buf1}
end.

enc_TravelerInfoType(Val) ->
if Val =:= unknown ->
<<0:1,0:2>>;
Val =:= advisory ->
<<0:1,1:2>>;
Val =:= roadSignage ->
<<0:1,2:2>>;
Val =:= commercialSignage ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TravelerInfoType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> advisory;
2 -> roadSignage;
3 -> commercialSignage
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_UniqueMSGID(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 9 ->
Val
end.


dec_UniqueMSGID(Bytes) ->
begin
<<V1@V0:9/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_URL-Base'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 7),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 45 ->
[<<Enc1@len@sub:6>>|Enc1@bin]
end.


'dec_URL-Base'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:7,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {decode_chars(V1@V3, 7),V1@Buf4},
{V1@V5,V1@Buf6}
end.

'enc_URL-Link'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 7),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|Enc1@bin]
end.


'dec_URL-Link'(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:7,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {decode_chars(V1@V3, 7),V1@Buf4},
{V1@V5,V1@Buf6}
end.

'enc_URL-Short'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 7),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 15 ->
[<<Enc1@len@sub:4>>|Enc1@bin]
end.


'dec_URL-Short'(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:7,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {decode_chars(V1@V3, 7),V1@Buf4},
{V1@V5,V1@Buf6}
end.

enc_UserSizeAndBehaviour(Val) ->
Enc1@bs = try bit_string_name2pos_19(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 5)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 5 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_UserSizeAndBehaviour(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_VehicleEventFlags(Val) ->
Enc1@bs = try bit_string_name2pos_11(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 13)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 13)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 13 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_VehicleEventFlags(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:13/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_VehicleHeight(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleHeight(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VehicleLength(Val) ->
if Val bsr 12 =:= 0 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleLength(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VehicleMass(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleMass(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VehicleStatusDeviceTypeTag(Val) ->
if Val =:= unknown ->
<<0:1,0:5>>;
Val =:= lights ->
<<0:1,1:5>>;
Val =:= wipers ->
<<0:1,2:5>>;
Val =:= brakes ->
<<0:1,3:5>>;
Val =:= stab ->
<<0:1,4:5>>;
Val =:= trac ->
<<0:1,5:5>>;
Val =:= abs ->
<<0:1,6:5>>;
Val =:= sunS ->
<<0:1,7:5>>;
Val =:= rainS ->
<<0:1,8:5>>;
Val =:= airTemp ->
<<0:1,9:5>>;
Val =:= steering ->
<<0:1,10:5>>;
Val =:= vertAccelThres ->
<<0:1,11:5>>;
Val =:= vertAccel ->
<<0:1,12:5>>;
Val =:= hozAccelLong ->
<<0:1,13:5>>;
Val =:= hozAccelLat ->
<<0:1,14:5>>;
Val =:= hozAccelCon ->
<<0:1,15:5>>;
Val =:= accel4way ->
<<0:1,16:5>>;
Val =:= confidenceSet ->
<<0:1,17:5>>;
Val =:= obDist ->
<<0:1,18:5>>;
Val =:= obDirect ->
<<0:1,19:5>>;
Val =:= yaw ->
<<0:1,20:5>>;
Val =:= yawRateCon ->
<<0:1,21:5>>;
Val =:= dateTime ->
<<0:1,22:5>>;
Val =:= fullPos ->
<<0:1,23:5>>;
Val =:= position2D ->
<<0:1,24:5>>;
Val =:= position3D ->
<<0:1,25:5>>;
Val =:= vehicle ->
<<0:1,26:5>>;
Val =:= speedHeadC ->
<<0:1,27:5>>;
Val =:= speedC ->
<<0:1,28:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_VehicleStatusDeviceTypeTag(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> lights;
2 -> wipers;
3 -> brakes;
4 -> stab;
5 -> trac;
6 -> abs;
7 -> sunS;
8 -> rainS;
9 -> airTemp;
10 -> steering;
11 -> vertAccelThres;
12 -> vertAccel;
13 -> hozAccelLong;
14 -> hozAccelLat;
15 -> hozAccelCon;
16 -> accel4way;
17 -> confidenceSet;
18 -> obDist;
19 -> obDirect;
20 -> yaw;
21 -> yawRateCon;
22 -> dateTime;
23 -> fullPos;
24 -> position2D;
25 -> position3D;
26 -> vehicle;
27 -> speedHeadC;
28 -> speedC;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_VehicleType(Val) ->
if Val =:= none ->
<<0:1,0:4>>;
Val =:= unknown ->
<<0:1,1:4>>;
Val =:= special ->
<<0:1,2:4>>;
Val =:= moto ->
<<0:1,3:4>>;
Val =:= car ->
<<0:1,4:4>>;
Val =:= carOther ->
<<0:1,5:4>>;
Val =:= bus ->
<<0:1,6:4>>;
Val =:= axleCnt2 ->
<<0:1,7:4>>;
Val =:= axleCnt3 ->
<<0:1,8:4>>;
Val =:= axleCnt4 ->
<<0:1,9:4>>;
Val =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Val =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Val =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Val =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Val =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Val =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_VehicleType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_VehicleWidth(Val) ->
if Val bsr 10 =:= 0 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleWidth(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Velocity(Val) ->
if Val bsr 13 =:= 0 ->
<<Val:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Velocity(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VerticalAccelerationThreshold(Val) ->
Enc1@bs = try bit_string_name2pos_80(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 5)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 5 ->
Enc1@bs
end.


dec_VerticalAccelerationThreshold(Bytes) ->
begin
<<V1@V0:5/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_VerticalAcceleration(Val) ->
Val@sub = Val - -127,
if 0 =< Val@sub, Val@sub < 255 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VerticalAcceleration(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -127,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B07'(Val) ->
Val@sub = Val - -64,
if Val@sub bsr 7 =:= 0 ->
<<Val@sub:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B07'(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -64,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B08'(Val) ->
Val@sub = Val - -128,
if Val@sub bsr 8 =:= 0 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B08'(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -128,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B09'(Val) ->
Val@sub = Val - -256,
if Val@sub bsr 9 =:= 0 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B09'(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -256,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B10'(Val) ->
Val@sub = Val - -512,
if Val@sub bsr 10 =:= 0 ->
<<Val@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B10'(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -512,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B11'(Val) ->
Val@sub = Val - -1024,
if Val@sub bsr 11 =:= 0 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B11'(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1024,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B12'(Val) ->
Val@sub = Val - -2048,
if Val@sub bsr 12 =:= 0 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end.

enc_VINstring(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 17 ->
[<<Enc1@len@sub:5>>|Val]
end.


dec_VINstring(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_WaitOnStopline(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_WaitOnStopline(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_WiperRate(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_WiperRate(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_WiperStatus(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= off ->
<<0:1,1:3>>;
Val =:= intermittent ->
<<0:1,2:3>>;
Val =:= low ->
<<0:1,3:3>>;
Val =:= high ->
<<0:1,4:3>>;
Val =:= washerInUse ->
<<0:1,5:3>>;
Val =:= automaticPresent ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_WiperStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> off;
2 -> intermittent;
3 -> low;
4 -> high;
5 -> washerInUse;
6 -> automaticPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_YawRateConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= 'degSec-100-00' ->
<<1:3>>;
Val =:= 'degSec-010-00' ->
<<2:3>>;
Val =:= 'degSec-005-00' ->
<<3:3>>;
Val =:= 'degSec-001-00' ->
<<4:3>>;
Val =:= 'degSec-000-10' ->
<<5:3>>;
Val =:= 'degSec-000-05' ->
<<6:3>>;
Val =:= 'degSec-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_YawRateConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'degSec-100-00';
2 -> 'degSec-010-00';
3 -> 'degSec-005-00';
4 -> 'degSec-001-00';
5 -> 'degSec-000-10';
6 -> 'degSec-000-05';
7 -> 'degSec-000-01'
end,
{V1@Int2,V1@Buf1}
end.

enc_YawRate(Val) ->
Val@sub = Val - -32767,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_YawRate(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32767,
{V1@Add2,V1@Buf1}
end.

enc_ZoneLength(Val) ->
if 0 =< Val, Val < 10001 ->
<<Val:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ZoneLength(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Zoom(Val) ->
if Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Zoom(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

vehicleSafetyExt() ->
0.

specialVehicleExt() ->
1.

supplementalVehicleExt() ->
2.

unknownVehicleClass() ->
0.

specialVehicleClass() ->
1.

'passenger-Vehicle-TypeUnknown'() ->
10.

'passenger-Vehicle-TypeOther'() ->
11.

'lightTruck-Vehicle-TypeUnknown'() ->
20.

'lightTruck-Vehicle-TypeOther'() ->
21.

'truck-Vehicle-TypeUnknown'() ->
25.

'truck-Vehicle-TypeOther'() ->
26.

'truck-axleCnt2'() ->
27.

'truck-axleCnt3'() ->
28.

'truck-axleCnt4'() ->
29.

'truck-axleCnt4Trailer'() ->
30.

'truck-axleCnt5Trailer'() ->
31.

'truck-axleCnt6Trailer'() ->
32.

'truck-axleCnt5MultiTrailer'() ->
33.

'truck-axleCnt6MultiTrailer'() ->
34.

'truck-axleCnt7MultiTrailer'() ->
35.

'motorcycle-TypeUnknown'() ->
40.

'motorcycle-TypeOther'() ->
41.

'motorcycle-Cruiser-Standard'() ->
42.

'motorcycle-SportUnclad'() ->
43.

'motorcycle-SportTouring'() ->
44.

'motorcycle-SuperSport'() ->
45.

'motorcycle-Touring'() ->
46.

'motorcycle-Trike'() ->
47.

'motorcycle-wPassengers'() ->
48.

'transit-TypeUnknown'() ->
50.

'transit-TypeOther'() ->
51.

'transit-BRT'() ->
52.

'transit-ExpressBus'() ->
53.

'transit-LocalBus'() ->
54.

'transit-SchoolBus'() ->
55.

'transit-FixedGuideway'() ->
56.

'transit-Paratransit'() ->
57.

'transit-Paratransit-Ambulance'() ->
58.

'emergency-TypeUnknown'() ->
60.

'emergency-TypeOther'() ->
61.

'emergency-Fire-Light-Vehicle'() ->
62.

'emergency-Fire-Heavy-Vehicle'() ->
63.

'emergency-Fire-Paramedic-Vehicle'() ->
64.

'emergency-Fire-Ambulance-Vehicle'() ->
65.

'emergency-Police-Light-Vehicle'() ->
66.

'emergency-Police-Heavy-Vehicle'() ->
67.

'emergency-Other-Responder'() ->
68.

'emergency-Other-Ambulance'() ->
69.

'otherTraveler-TypeUnknown'() ->
80.

'otherTraveler-TypeOther'() ->
81.

'otherTraveler-Pedestrian'() ->
82.

'otherTraveler-Visually-Disabled'() ->
83.

'otherTraveler-Physically-Disabled'() ->
84.

'otherTraveler-Bicycle'() ->
85.

'otherTraveler-Vulnerable-Roadworker'() ->
86.

'infrastructure-TypeUnknown'() ->
90.

'infrastructure-Fixed'() ->
91.

'infrastructure-Movable'() ->
92.

'equipped-CargoTrailer'() ->
93.

'reservedMessageId-D'() ->
0.

'alaCarteMessage-D'() ->
1.

'basicSafetyMessage-D'() ->
2.

'basicSafetyMessageVerbose-D'() ->
3.

'commonSafetyRequest-D'() ->
4.

'emergencyVehicleAlert-D'() ->
5.

'intersectionCollision-D'() ->
6.

'mapData-D'() ->
7.

'nmeaCorrections-D'() ->
8.

'probeDataManagement-D'() ->
9.

'probeVehicleData-D'() ->
10.

'roadSideAlert-D'() ->
11.

'rtcmCorrections-D'() ->
12.

'signalPhaseAndTimingMessage-D'() ->
13.

'signalRequestMessage-D'() ->
14.

'signalStatusMessage-D'() ->
15.

'travelerInformation-D'() ->
16.

'uperFrame-D'() ->
17.

mapData() ->
18.

signalPhaseAndTimingMessage() ->
19.

basicSafetyMessage() ->
20.

commonSafetyRequest() ->
21.

emergencyVehicleAlert() ->
22.

intersectionCollision() ->
23.

nmeaCorrections() ->
24.

probeDataManagement() ->
25.

probeVehicleData() ->
26.

roadSideAlert() ->
27.

rtcmCorrections() ->
28.

signalRequestMessage() ->
29.

signalStatusMessage() ->
30.

travelerInformation() ->
31.

personalSafetyMessage() ->
32.

testMessage00() ->
240.

testMessage01() ->
241.

testMessage02() ->
242.

testMessage03() ->
243.

testMessage04() ->
244.

testMessage05() ->
245.

testMessage06() ->
246.

testMessage07() ->
247.

testMessage08() ->
248.

testMessage09() ->
249.

testMessage10() ->
250.

testMessage11() ->
251.

testMessage12() ->
252.

testMessage13() ->
253.

testMessage14() ->
254.

testMessage15() ->
255.

unknownFuel() ->
0.

gasoline() ->
1.

ethanol() ->
2.

diesel() ->
3.

electric() ->
4.

hybrid() ->
5.

hydrogen() ->
6.

natGasLiquid() ->
7.

natGasComp() ->
8.

propane() ->
9.

noRegion() ->
0.

addGrpA() ->
1.

addGrpB() ->
2.

addGrpC() ->
3.

typeinfo('MessageFrame') ->
  {sequence,'MessageFrame',2,[{<<109,101,115,115,97,103,101,73,100>>,{'INTEGER',{0,32767}},mandatory},{<<118,97,108,117,101>>,{'ObjClassFieldType',{messageId,1},{componentrelation,{objectset,72,{'Externaltypereference',72,'DSRC','MessageTypes'}},[{innermost,[{'Externalvaluereference',72,'DSRC',messageId}]}]}},mandatory}]};
typeinfo('BasicSafetyMessage') ->
  {sequence,'BasicSafetyMessage',3,[{<<99,111,114,101,68,97,116,97>>,{typeinfo,{'DSRC','BSMcoreData'}},mandatory},{<<112,97,114,116,73,73>>,{sof,{sequence,'BasicSafetyMessage_partII_SEQOF',2,[{<<112,97,114,116,73,73,45,73,100>>,{'INTEGER',{0,63}},mandatory},{<<112,97,114,116,73,73,45,86,97,108,117,101>>,{'ObjClassFieldType',{'partII-Id',1},{componentrelation,{objectset,152,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_1}},[{outermost,[{'Externalvaluereference',152,'DSRC','partII-Id'}]}]}},mandatory}]}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'BasicSafetyMessage_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_2}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('PartII-Id') ->
  {'INTEGER',{0,63}};
typeinfo('CommonSafetyRequest') ->
  {sequence,'CommonSafetyRequest',5,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},'OPTIONAL'},{<<105,100>>,octet_string,'OPTIONAL'},{<<114,101,113,117,101,115,116,115>>,{typeinfo,{'DSRC','RequestedItemList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'CommonSafetyRequest_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_3}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('EmergencyVehicleAlert') ->
  {sequence,'EmergencyVehicleAlert',11,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<105,100>>,octet_string,'OPTIONAL'},{<<114,115,97,77,115,103>>,{typeinfo,{'DSRC','RoadSideAlert'}},mandatory},{<<114,101,115,112,111,110,115,101,84,121,112,101>>,{'ENUMERATED_EXT',#{emergency => 1,slowMoving => 5,notInUseOrNotEquipped => 0,nonEmergency => 2,pursuit => 3,stationary => 4,stopAndGoMovement => 6}},'OPTIONAL'},{<<100,101,116,97,105,108,115>>,{typeinfo,{'DSRC','EmergencyDetails'}},'OPTIONAL'},{<<109,97,115,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<98,97,115,105,99,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},'OPTIONAL'},{<<118,101,104,105,99,108,101,84,121,112,101>>,{'ENUMERATED_EXT',#{'exceptional-loads' => 9237,'vehicles-with-semi-trailers' => 9231,'vehicles-with-parking-permits' => 9244,'lPG-vehicles' => 9249,'vehicles-with-trailers' => 9225,'military-convoys' => 9250,'vehicles-without-catalytic-converters' => 9246,'abnormal-loads' => 9238,'vehicles-with-even-numbered-license-plates' => 9242,'military-vehicles' => 9251,motorcycles => 9219,'wide-vehicles' => 9234,'gas-powered-vehicles' => 9247,'hazardous-loads' => 9236,'delivery-vehicles' => 9241,'diesel-powered-vehicles' => 9248,'vehicles-with-double-trailers' => 9232,trucks => 9227,'all-vehicles' => 9217,'vehicles-with-odd-numbered-license-plates' => 9243,'heavy-vehicles' => 9226,'maintenance-vehicles' => 9240,'light-vehicles' => 9221,buses => 9228,cars => 9220,bicycles => 9218,'high-profile-vehicles' => 9233,'long-vehicles' => 9235,'vehicles-with-catalytic-converters' => 9245,'cars-with-trailers' => 9223,'school-buses' => 9230,'articulated-buses' => 9229,convoys => 9239,'cars-and-light-vehicles' => 9222,'cars-with-recreational-trailers' => 9224}},'OPTIONAL'},{<<114,101,115,112,111,110,115,101,69,113,117,105,112>>,{'ENUMERATED_EXT',#{aircraft => 9988,'flatbed-tow' => 10114,'high-angle-rescue' => 10057,'heavy-tow' => 10092,'track-laying-vehicle' => 10105,'support-equipment' => 9990,'light-and-air-unit' => 10046,'support-apparatus-other' => 10044,'medical-rescue-unit' => 9991,'aircraft-fixed-wing-tanker' => 10025,'tanker-or-tender' => 10008,'dozer-or-plow' => 10005,'bLS-unit' => 10059,'construction-vehicle' => 10088,'ground-fire-suppression' => 9985,'salvage-vehicle' => 10100,'resurfacing-vehicle' => 10097,'rotary-snow-blower' => 10111,'light-tow' => 10094,'marine-equipment-other' => 10034,'supervisor-vehicle' => 10109,'truck-or-aerial' => 9996,helitanker => 10026,tractor => 10006,'privately-owned-vehicle' => 10083,'sand-truck' => 10101,'hedge-cutting-machines' => 10093,'type-ii-hand-crew' => 10079,'aircraft-rescue-firefighting' => 10001,'medical-rescue-unit-other' => 10054,'grass-cutting-machines' => 10090,'heavy-ground-equipment-other' => 10004,'other-apparatus-resource' => 10084,'road-sweeper' => 10098,other => 9993,'dump-truck' => 10108,'steam-roller' => 10103,'urban-search-rescue-unit' => 10056,'farm-tractor' => 10089,engine => 9995,'swat-team-van' => 10104,'snow-blower' => 10110,'unknown-vehicle' => 10106,'heavy-ground-equipment' => 9986,'white-lining-vehicle' => 10107,'refuse-collection-vehicle' => 10096,ambulance => 10085,'boat-no-pump' => 10036,'steam-truck' => 10113,helicopter => 10027,'mobile-command-post' => 10075,'roadside-litter-collection-crews' => 10099,'crash-fire-rescue' => 10058,'breathing-apparatus-support' => 10045,'road-grader' => 10112,'tanker-pumper-combination' => 9998,'ground-fire-suppression-other' => 9994,'combine-harvester' => 10087,'brush-truck' => 10000,'type-i-hand-crew' => 10078,'hAZMAT-containment-tow' => 10091,snowplow => 10102,'mobile-crane' => 10095,'fire-boat-with-pump' => 10035,'hAZMAT-unit' => 10077,'aLS-unit' => 10060,'bomb-squad-van' => 10086,'aircraft-other' => 10024,'chief-officer-car' => 10076,quint => 9997,'rescue-unit' => 10055,'marine-equipment' => 9989}},'OPTIONAL'},{<<114,101,115,112,111,110,100,101,114,84,121,112,101>>,{'ENUMERATED_EXT',#{'emergency-vehicle-units' => 9729,'federal-law-enforcement-units' => 9730,'state-police-units' => 9731,'county-police-units' => 9732,'local-police-units' => 9733,'ambulance-units' => 9734,'rescue-units' => 9735,'fire-units' => 9736,'hAZMAT-units' => 9737,'light-tow-unit' => 9738,'heavy-tow-unit' => 9739,'freeway-service-patrols' => 9740,'transportation-response-units' => 9741,'private-contractor-response-units' => 9742}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'EmergencyVehicleAlert_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_5}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('IntersectionCollision') ->
  {sequence,'IntersectionCollision',10,[{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<105,100>>,octet_string,mandatory},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<112,97,114,116,79,110,101>>,{typeinfo,{'DSRC','BSMcoreData'}},'OPTIONAL'},{<<112,97,116,104>>,{typeinfo,{'DSRC','PathHistory'}},'OPTIONAL'},{<<112,97,116,104,80,114,101,100,105,99,116,105,111,110>>,{typeinfo,{'DSRC','PathPrediction'}},'OPTIONAL'},{<<105,110,116,101,114,115,101,99,116,105,111,110,73,68>>,{typeinfo,{'DSRC','IntersectionReferenceID'}},mandatory},{<<108,97,110,101,78,117,109,98,101,114>>,{typeinfo,{'DSRC','ApproachOrLane'}},mandatory},{<<101,118,101,110,116,70,108,97,103>>,{bit_string_nnl,[{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'IntersectionCollision_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_6}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('MapData') ->
  {sequence,'MapData',9,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<109,115,103,73,115,115,117,101,82,101,118,105,115,105,111,110>>,{'INTEGER',{0,127}},mandatory},{<<108,97,121,101,114,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,mixedContent => 1,generalMapData => 2,intersectionData => 3,curveData => 4,roadwaySectionData => 5,parkingAreaData => 6,sharedLaneData => 7}},'OPTIONAL'},{<<108,97,121,101,114,73,68>>,{'INTEGER',{0,100}},'OPTIONAL'},{<<105,110,116,101,114,115,101,99,116,105,111,110,115>>,{typeinfo,{'DSRC','IntersectionGeometryList'}},'OPTIONAL'},{<<114,111,97,100,83,101,103,109,101,110,116,115>>,{typeinfo,{'DSRC','RoadSegmentList'}},'OPTIONAL'},{<<100,97,116,97,80,97,114,97,109,101,116,101,114,115>>,{typeinfo,{'DSRC','DataParameters'}},'OPTIONAL'},{<<114,101,115,116,114,105,99,116,105,111,110,76,105,115,116>>,{typeinfo,{'DSRC','RestrictionClassList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'MapData_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_18}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('NMEAcorrections') ->
  {sequence,'NMEAcorrections',6,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<114,101,118>>,{'ENUMERATED_EXT',#{unknown => 0,reserved => 1,rev1 => 2,rev2 => 3,rev3 => 4,rev4 => 5,rev5 => 6}},'OPTIONAL'},{<<109,115,103>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<119,100,67,111,117,110,116>>,{'INTEGER',{0,1023}},'OPTIONAL'},{<<112,97,121,108,111,97,100>>,octet_string,mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'NMEAcorrections_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_19}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('PersonalSafetyMessage') ->
  {sequence,'PersonalSafetyMessage',26,[{<<98,97,115,105,99,84,121,112,101>>,{'ENUMERATED_EXT',#{unavailable => 0,aPEDESTRIAN => 1,aPEDALCYCLIST => 2,aPUBLICSAFETYWORKER => 3,anANIMAL => 4}},mandatory},{<<115,101,99,77,97,114,107>>,{'INTEGER',{0,65535}},mandatory},{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<105,100>>,octet_string,mandatory},{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'DSRC','Position3D'}},mandatory},{<<97,99,99,117,114,97,99,121>>,{typeinfo,{'DSRC','PositionalAccuracy'}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},mandatory},{<<97,99,99,101,108,83,101,116>>,{typeinfo,{'DSRC','AccelerationSet4Way'}},'OPTIONAL'},{<<112,97,116,104,72,105,115,116,111,114,121>>,{typeinfo,{'DSRC','PathHistory'}},'OPTIONAL'},{<<112,97,116,104,80,114,101,100,105,99,116,105,111,110>>,{typeinfo,{'DSRC','PathPrediction'}},'OPTIONAL'},{<<112,114,111,112,117,108,115,105,111,110>>,{typeinfo,{'DSRC','PropelledInformation'}},'OPTIONAL'},{<<117,115,101,83,116,97,116,101>>,{bit_string_nnl,[{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]},'OPTIONAL'},{<<99,114,111,115,115,82,101,113,117,101,115,116>>,'BOOLEAN','OPTIONAL'},{<<99,114,111,115,115,83,116,97,116,101>>,'BOOLEAN','OPTIONAL'},{<<99,108,117,115,116,101,114,83,105,122,101>>,{'ENUMERATED_EXT',#{small => 1,large => 3,unavailable => 0,medium => 2}},'OPTIONAL'},{<<99,108,117,115,116,101,114,82,97,100,105,117,115>>,{'INTEGER',{0,100}},'OPTIONAL'},{<<101,118,101,110,116,82,101,115,112,111,110,100,101,114,84,121,112,101>>,{'ENUMERATED_EXT',#{unavailable => 0,towOperater => 1,fireAndEMSWorker => 2,aDOTWorker => 3,lawEnforcement => 4,hazmatResponder => 5,animalControlWorker => 6,otherPersonnel => 7}},'OPTIONAL'},{<<97,99,116,105,118,105,116,121,84,121,112,101>>,{bit_string_nnl,[{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]},'OPTIONAL'},{<<97,99,116,105,118,105,116,121,83,117,98,84,121,112,101>>,{bit_string_nnl,[{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]},'OPTIONAL'},{<<97,115,115,105,115,116,84,121,112,101>>,{bit_string_nnl,[{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]},'OPTIONAL'},{<<115,105,122,105,110,103>>,{bit_string_nnl,[{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]},'OPTIONAL'},{<<97,116,116,97,99,104,109,101,110,116>>,{'ENUMERATED_EXT',#{unavailable => 0,pet => 6,stroller => 1,bicycleTrailer => 2,cart => 3,wheelchair => 4,otherWalkAssistAttachments => 5}},'OPTIONAL'},{<<97,116,116,97,99,104,109,101,110,116,82,97,100,105,117,115>>,{'INTEGER',{0,200}},'OPTIONAL'},{<<97,110,105,109,97,108,84,121,112,101>>,{'ENUMERATED_EXT',#{unavailable => 0,serviceUse => 1,pet => 2,farm => 3}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'PersonalSafetyMessage_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_20}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('ProbeDataManagement') ->
  {sequence,'ProbeDataManagement',8,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,97,109,112,108,101>>,{typeinfo,{'DSRC','Sample'}},mandatory},{<<100,105,114,101,99,116,105,111,110,115>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},mandatory},{<<116,101,114,109>>,{choice,#{<<116,101,114,109,68,105,115,116,97,110,99,101>> => {'INTEGER',{1,30000}},<<116,101,114,109,116,105,109,101>> => {'INTEGER',{1,1800}}}},mandatory},{<<115,110,97,112,115,104,111,116>>,{choice,#{<<115,110,97,112,115,104,111,116,68,105,115,116,97,110,99,101>> => {typeinfo,{'DSRC','SnapshotDistance'}},<<115,110,97,112,115,104,111,116,84,105,109,101>> => {typeinfo,{'DSRC','SnapshotTime'}}}},mandatory},{<<116,120,73,110,116,101,114,118,97,108>>,{'INTEGER',{0,61}},mandatory},{<<100,97,116,97,69,108,101,109,101,110,116,115>>,{typeinfo,{'DSRC','VehicleStatusRequestList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ProbeDataManagement_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_21}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('ProbeVehicleData') ->
  {sequence,'ProbeVehicleData',7,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,103,78,117,109>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<112,114,111,98,101,73,68>>,{typeinfo,{'DSRC','VehicleIdent'}},'OPTIONAL'},{<<115,116,97,114,116,86,101,99,116,111,114>>,{typeinfo,{'DSRC','FullPositionVector'}},mandatory},{<<118,101,104,105,99,108,101,84,121,112,101>>,{typeinfo,{'DSRC','VehicleClassification'}},mandatory},{<<115,110,97,112,115,104,111,116,115>>,{sof,{typeinfo,{'DSRC','Snapshot'}}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ProbeVehicleData_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_23}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('RoadSideAlert') ->
  {sequence,'RoadSideAlert',10,[{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<116,121,112,101,69,118,101,110,116>>,{'INTEGER',{0,65535}},mandatory},{<<100,101,115,99,114,105,112,116,105,111,110>>,{sof,{'INTEGER',{0,65535}}},'OPTIONAL'},{<<112,114,105,111,114,105,116,121>>,octet_string,'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},'OPTIONAL'},{<<101,120,116,101,110,116>>,{'ENUMERATED',#{useInstantlyOnly => 0,useFor3meters => 1,useFor10meters => 2,useFor50meters => 3,useFor100meters => 4,useFor500meters => 5,useFor1000meters => 6,useFor5000meters => 7,useFor10000meters => 8,useFor50000meters => 9,useFor100000meters => 10,useFor500000meters => 11,useFor1000000meters => 12,useFor5000000meters => 13,useFor10000000meters => 14,forever => 15}},'OPTIONAL'},{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'DSRC','FullPositionVector'}},'OPTIONAL'},{<<102,117,114,116,104,101,114,73,110,102,111,73,68>>,octet_string,'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'RoadSideAlert_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_4}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('RTCMcorrections') ->
  {sequence,'RTCMcorrections',7,[{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<114,101,118>>,{'ENUMERATED_EXT',#{unknown => 0,reserved => 3,rtcmRev2 => 1,rtcmRev3 => 2}},mandatory},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<97,110,99,104,111,114,80,111,105,110,116>>,{typeinfo,{'DSRC','FullPositionVector'}},'OPTIONAL'},{<<114,116,99,109,72,101,97,100,101,114>>,{typeinfo,{'DSRC','RTCMheader'}},'OPTIONAL'},{<<109,115,103,115>>,{typeinfo,{'DSRC','RTCMmessageList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'RTCMcorrections_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_24}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('SPAT') ->
  {sequence,'SPAT',4,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,110,116,101,114,115,101,99,116,105,111,110,115>>,{typeinfo,{'DSRC','IntersectionStateList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SPAT_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_30}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('SignalRequestMessage') ->
  {sequence,'SignalRequestMessage',6,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},mandatory},{<<115,101,113,117,101,110,99,101,78,117,109,98,101,114>>,{'INTEGER',{0,127}},'OPTIONAL'},{<<114,101,113,117,101,115,116,115>>,{typeinfo,{'DSRC','SignalRequestList'}},'OPTIONAL'},{<<114,101,113,117,101,115,116,111,114>>,{typeinfo,{'DSRC','RequestorDescription'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SignalRequestMessage_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_35}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('SignalStatusMessage') ->
  {sequence,'SignalStatusMessage',5,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},mandatory},{<<115,101,113,117,101,110,99,101,78,117,109,98,101,114>>,{'INTEGER',{0,127}},'OPTIONAL'},{<<115,116,97,116,117,115>>,{typeinfo,{'DSRC','SignalStatusList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SignalStatusMessage_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_38}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('TravelerInformation') ->
  {sequence,'TravelerInformation',6,[{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<112,97,99,107,101,116,73,68>>,octet_string,'OPTIONAL'},{<<117,114,108,66>>,string,'OPTIONAL'},{<<100,97,116,97,70,114,97,109,101,115>>,{typeinfo,{'DSRC','TravelerDataFrameList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'TravelerInformation_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_43}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('TestMessage00') ->
  {sequence,'TestMessage00',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage00_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_44}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage01') ->
  {sequence,'TestMessage01',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage01_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_45}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage02') ->
  {sequence,'TestMessage02',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage02_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_46}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage03') ->
  {sequence,'TestMessage03',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage03_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_47}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage04') ->
  {sequence,'TestMessage04',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage04_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_48}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage05') ->
  {sequence,'TestMessage05',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage05_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_49}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage06') ->
  {sequence,'TestMessage06',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage06_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_50}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage07') ->
  {sequence,'TestMessage07',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage07_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_51}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage08') ->
  {sequence,'TestMessage08',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage08_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_52}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage09') ->
  {sequence,'TestMessage09',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage09_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_53}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage10') ->
  {sequence,'TestMessage10',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage10_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_54}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage11') ->
  {sequence,'TestMessage11',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage11_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_55}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage12') ->
  {sequence,'TestMessage12',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage12_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_56}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage13') ->
  {sequence,'TestMessage13',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage13_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_57}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage14') ->
  {sequence,'TestMessage14',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage14_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_58}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('TestMessage15') ->
  {sequence,'TestMessage15',2,[{<<104,101,97,100,101,114>>,{typeinfo,{'DSRC','Header'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'TestMessage15_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_59}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('AccelerationSet4Way') ->
  {sequence,'AccelerationSet4Way',4,[{<<108,111,110,103>>,{'INTEGER',{-2000,2001}},mandatory},{<<108,97,116>>,{'INTEGER',{-2000,2001}},mandatory},{<<118,101,114,116>>,{'INTEGER',{-127,127}},mandatory},{<<121,97,119>>,{'INTEGER',{-32767,32767}},mandatory}]};
typeinfo('AccelSteerYawRateConfidence') ->
  {sequence,'AccelSteerYawRateConfidence',3,[{<<121,97,119,82,97,116,101>>,{'ENUMERATED',#{unavailable => 0,'degSec-100-00' => 1,'degSec-010-00' => 2,'degSec-005-00' => 3,'degSec-001-00' => 4,'degSec-000-10' => 5,'degSec-000-05' => 6,'degSec-000-01' => 7}},mandatory},{<<97,99,99,101,108,101,114,97,116,105,111,110>>,{'ENUMERATED',#{unavailable => 0,'accl-100-00' => 1,'accl-010-00' => 2,'accl-005-00' => 3,'accl-001-00' => 4,'accl-000-10' => 5,'accl-000-05' => 6,'accl-000-01' => 7}},mandatory},{<<115,116,101,101,114,105,110,103,87,104,101,101,108,65,110,103,108,101>>,{'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}},mandatory}]};
typeinfo('AdvisorySpeed') ->
  {sequence,'AdvisorySpeed',6,[{<<116,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,greenwave => 1,ecoDrive => 2,transit => 3}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,500}},'OPTIONAL'},{<<99,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}},'OPTIONAL'},{<<100,105,115,116,97,110,99,101>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<99,108,97,115,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'AdvisorySpeed_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_25}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('AdvisorySpeedList') ->
  {sof,{typeinfo,{'DSRC','AdvisorySpeed'}}};
typeinfo('AntennaOffsetSet') ->
  {sequence,'AntennaOffsetSet',3,[{<<97,110,116,79,102,102,115,101,116,88>>,{'INTEGER',{-2048,2047}},mandatory},{<<97,110,116,79,102,102,115,101,116,89>>,{'INTEGER',{-256,255}},mandatory},{<<97,110,116,79,102,102,115,101,116,90>>,{'INTEGER',{-512,511}},mandatory}]};
typeinfo('ApproachOrLane') ->
  {choice,#{<<97,112,112,114,111,97,99,104>> => {'INTEGER',{0,15}},<<108,97,110,101>> => {'INTEGER',{0,255}}}};
typeinfo('BrakeSystemStatus') ->
  {sequence,'BrakeSystemStatus',6,[{<<119,104,101,101,108,66,114,97,107,101,115>>,{{bit_string_nnl,[{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5},mandatory},{<<116,114,97,99,116,105,111,110>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}},mandatory},{<<97,98,115>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}},mandatory},{<<115,99,115>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}},mandatory},{<<98,114,97,107,101,66,111,111,115,116>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0}},mandatory},{<<97,117,120,66,114,97,107,101,115>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,reserved => 3}},mandatory}]};
typeinfo('BSMcoreData') ->
  {sequence,'BSMcoreData',14,[{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<105,100>>,octet_string,mandatory},{<<115,101,99,77,97,114,107>>,{'INTEGER',{0,65535}},mandatory},{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory},{<<108,111,110,103>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<101,108,101,118>>,{'INTEGER',{-4096,61439}},mandatory},{<<97,99,99,117,114,97,99,121>>,{typeinfo,{'DSRC','PositionalAccuracy'}},mandatory},{<<116,114,97,110,115,109,105,115,115,105,111,110>>,{'ENUMERATED',#{neutral => 0,unavailable => 7,reserved1 => 4,park => 1,forwardGears => 2,reverseGears => 3,reserved2 => 5,reserved3 => 6}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},mandatory},{<<97,110,103,108,101>>,{'INTEGER',{-126,127}},mandatory},{<<97,99,99,101,108,83,101,116>>,{typeinfo,{'DSRC','AccelerationSet4Way'}},mandatory},{<<98,114,97,107,101,115>>,{typeinfo,{'DSRC','BrakeSystemStatus'}},mandatory},{<<115,105,122,101>>,{typeinfo,{'DSRC','VehicleSize'}},mandatory}]};
typeinfo('BumperHeights') ->
  {sequence,'BumperHeights',2,[{<<102,114,111,110,116>>,{'INTEGER',{0,127}},mandatory},{<<114,101,97,114>>,{'INTEGER',{0,127}},mandatory}]};
typeinfo('Circle') ->
  {sequence,'Circle',3,[{<<99,101,110,116,101,114>>,{typeinfo,{'DSRC','Position3D'}},mandatory},{<<114,97,100,105,117,115>>,{'INTEGER',{0,4095}},mandatory},{<<117,110,105,116,115>>,{'ENUMERATED',#{centimeter => 0,'cm2-5' => 1,decimeter => 2,meter => 3,kilometer => 4,foot => 5,yard => 6,mile => 7}},mandatory}]};
typeinfo('ComputedLane') ->
  {sequence,'ComputedLane',7,[{<<114,101,102,101,114,101,110,99,101,76,97,110,101,73,100>>,{'INTEGER',{0,255}},mandatory},{<<111,102,102,115,101,116,88,97,120,105,115>>,{choice,#{<<108,97,114,103,101>> => {'INTEGER',{-32767,32767}},<<115,109,97,108,108>> => {'INTEGER',{-2047,2047}}}},mandatory},{<<111,102,102,115,101,116,89,97,120,105,115>>,{choice,#{<<108,97,114,103,101>> => {'INTEGER',{-32767,32767}},<<115,109,97,108,108>> => {'INTEGER',{-2047,2047}}}},mandatory},{<<114,111,116,97,116,101,88,89>>,{'INTEGER',{0,28800}},'OPTIONAL'},{<<115,99,97,108,101,88,97,120,105,115>>,{'INTEGER',{-2048,2047}},'OPTIONAL'},{<<115,99,97,108,101,89,97,120,105,115>>,{'INTEGER',{-2048,2047}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ComputedLane_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_12}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('ConfidenceSet') ->
  {sequence,'ConfidenceSet',7,[{<<97,99,99,101,108,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'DSRC','AccelSteerYawRateConfidence'}},'OPTIONAL'},{<<115,112,101,101,100,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'DSRC','SpeedandHeadingandThrottleConfidence'}},'OPTIONAL'},{<<116,105,109,101,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{'time-000-000-5' => 16,'time-000-000-000-02' => 29,'time-000-000-01' => 21,'time-000-000-000-01' => 30,'time-000-000-000-001' => 33,'time-002-000' => 5,'time-000-000-000-000-2' => 35,'time-020-000' => 3,'time-000-000-000-1' => 27,'time-000-000-005' => 22,'time-000-000-000-005' => 31,'time-000-000-000-05' => 28,'time-000-000-000-002' => 32,'time-000-000-000-000-05' => 37,'time-000-002' => 14,'time-000-000-2' => 17,'time-000-000-002' => 23,'time-000-500' => 7,'time-050-000' => 2,'time-000-010' => 12,'time-000-000-000-5' => 25,'time-000-000-000-2' => 26,'time-000-050' => 10,'time-000-000-001' => 24,'time-001-000' => 6,'time-010-000' => 4,'time-000-005' => 13,'time-000-200' => 8,'time-000-100' => 9,'time-000-000-000-000-02' => 38,'time-000-000-1' => 18,'time-000-000-05' => 19,'time-100-000' => 1,'time-000-000-000-000-5' => 34,'time-000-020' => 11,'time-000-000-000-000-1' => 36,'time-000-000-02' => 20,'time-000-001' => 15,unavailable => 0,'time-000-000-000-000-01' => 39}},'OPTIONAL'},{<<112,111,115,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'DSRC','PositionConfidenceSet'}},'OPTIONAL'},{<<115,116,101,101,114,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}},'OPTIONAL'},{<<104,101,97,100,105,110,103,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec10deg => 1,prec05deg => 2,prec01deg => 3,'prec0-1deg' => 4,'prec0-05deg' => 5,'prec0-01deg' => 6,'prec0-0125deg' => 7}},'OPTIONAL'},{<<116,104,114,111,116,116,108,101,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec10percent => 1,prec1percent => 2,'prec0-5percent' => 3}},'OPTIONAL'}]};
typeinfo('ConnectingLane') ->
  {sequence,'ConnectingLane',2,[{<<108,97,110,101>>,{'INTEGER',{0,255}},mandatory},{<<109,97,110,101,117,118,101,114>>,{{bit_string_nnl,[{maneuverStraightAllowed,0},{maneuverLeftAllowed,1},{maneuverRightAllowed,2},{maneuverUTurnAllowed,3},{maneuverLeftTurnOnRedAllowed,4},{maneuverRightTurnOnRedAllowed,5},{maneuverLaneChangeAllowed,6},{maneuverNoStoppingAllowed,7},{yieldAllwaysRequired,8},{goWithHalt,9},{caution,10},{reserved1,11}]},12},'OPTIONAL'}]};
typeinfo('Connection') ->
  {sequence,'Connection',5,[{<<99,111,110,110,101,99,116,105,110,103,76,97,110,101>>,{typeinfo,{'DSRC','ConnectingLane'}},mandatory},{<<114,101,109,111,116,101,73,110,116,101,114,115,101,99,116,105,111,110>>,{typeinfo,{'DSRC','IntersectionReferenceID'}},'OPTIONAL'},{<<115,105,103,110,97,108,71,114,111,117,112>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<117,115,101,114,67,108,97,115,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<99,111,110,110,101,99,116,105,111,110,73,68>>,{'INTEGER',{0,255}},'OPTIONAL'}]};
typeinfo('ConnectionManeuverAssist') ->
  {sequence,'ConnectionManeuverAssist',6,[{<<99,111,110,110,101,99,116,105,111,110,73,68>>,{'INTEGER',{0,255}},mandatory},{<<113,117,101,117,101,76,101,110,103,116,104>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<97,118,97,105,108,97,98,108,101,83,116,111,114,97,103,101,76,101,110,103,116,104>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<119,97,105,116,79,110,83,116,111,112>>,'BOOLEAN','OPTIONAL'},{<<112,101,100,66,105,99,121,99,108,101,68,101,116,101,99,116>>,'BOOLEAN','OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ConnectionManeuverAssist_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_27}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('ConnectsToList') ->
  {sof,{typeinfo,{'DSRC','Connection'}}};
typeinfo('DataParameters') ->
  {sequence,'DataParameters',4,[{<<112,114,111,99,101,115,115,77,101,116,104,111,100>>,string,'OPTIONAL'},{<<112,114,111,99,101,115,115,65,103,101,110,99,121>>,string,'OPTIONAL'},{<<108,97,115,116,67,104,101,99,107,101,100,68,97,116,101>>,string,'OPTIONAL'},{<<103,101,111,105,100,85,115,101,100>>,string,'OPTIONAL'}]};
typeinfo('DDate') ->
  {sequence,'DDate',3,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},mandatory},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory},{<<100,97,121>>,{'INTEGER',{0,31}},mandatory}]};
typeinfo('DDateTime') ->
  {sequence,'DDateTime',7,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},'OPTIONAL'},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},'OPTIONAL'},{<<100,97,121>>,{'INTEGER',{0,31}},'OPTIONAL'},{<<104,111,117,114>>,{'INTEGER',{0,31}},'OPTIONAL'},{<<109,105,110,117,116,101>>,{'INTEGER',{0,60}},'OPTIONAL'},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<111,102,102,115,101,116>>,{'INTEGER',{-840,840}},'OPTIONAL'}]};
typeinfo('DFullTime') ->
  {sequence,'DFullTime',5,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},mandatory},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory},{<<100,97,121>>,{'INTEGER',{0,31}},mandatory},{<<104,111,117,114>>,{'INTEGER',{0,31}},mandatory},{<<109,105,110,117,116,101>>,{'INTEGER',{0,60}},mandatory}]};
typeinfo('DMonthDay') ->
  {sequence,'DMonthDay',2,[{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory},{<<100,97,121>>,{'INTEGER',{0,31}},mandatory}]};
typeinfo('DTime') ->
  {sequence,'DTime',4,[{<<104,111,117,114>>,{'INTEGER',{0,31}},mandatory},{<<109,105,110,117,116,101>>,{'INTEGER',{0,60}},mandatory},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},mandatory},{<<111,102,102,115,101,116>>,{'INTEGER',{-840,840}},'OPTIONAL'}]};
typeinfo('DYearMonth') ->
  {sequence,'DYearMonth',2,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},mandatory},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory}]};
typeinfo('DisabledVehicle') ->
  {sequence,'DisabledVehicle',2,[{<<115,116,97,116,117,115,68,101,116,97,105,108,115>>,{'INTEGER',{0,65535}},mandatory},{<<108,111,99,97,116,105,111,110,68,101,116,97,105,108,115>>,{'ENUMERATED_EXT',#{'on-the-left' => 7990,'other-than-on-the-roadway' => 7966,'side-road' => 8030,concourse => 7972,southeast => 8004,west => 8001,intersection => 8032,northeast => 8002,'near-the-shore' => 7964,'picnic-areas' => 7985,'in-the-median' => 7948,'customs-point' => 7975,'near-the-beach' => 7967,'upper-level' => 7970,'in-the-center' => 7991,'information-welcome-point' => 7981,depot => 7979,dip => 8010,shoulder => 8027,'in-the-opposite-direction' => 7992,'on-ramps' => 7940,'around-a-curve' => 7942,'across-tracks' => 8024,over => 8019,under => 8018,'on-tracks' => 8009,south => 7999,'at-rest-area' => 7982,'on-the-right' => 7989,'bus-stop' => 8031,'park-and-ride-lot' => 8012,'area-of' => 8017,'in-parts' => 7956,'baggage-claim' => 7974,'westbound-traffic' => 7997,'mountain-pass' => 8006,'eastbound-traffic' => 7995,southwest => 8005,'service-stations' => 7987,'in-the-valley' => 7959,'nearby-basin' => 8008,dock => 7978,'roadside-park' => 8033,'lower-level' => 7969,'traffic-circle' => 8011,'on-minor-roads' => 7943,'at-service-area' => 7983,'moved-to-side-of-road' => 7949,'cross-road' => 8029,'exiting-at' => 8023,'on-the-roadway' => 7951,'northbound-traffic' => 7994,gate => 7973,'on-bend' => 7946,'entering-at' => 8022,'over-the-crest-of-a-hill' => 7965,'adjacent-to-roadway' => 7945,'near-the-foothills' => 7961,'reservation-center' => 8007,'in-tunnels' => 7938,'in-the-inner-city-area' => 7955,east => 8000,platform => 7977,'on-curve' => 8026,from => 8020,approaching => 8021,station => 7976,'on-hill-top' => 7960,'at-weigh-station' => 7984,north => 7998,by => 8015,'near-the-lake' => 7963,'in-shaded-areas' => 7952,'in-street' => 8025,'in-the-downtown-area' => 7954,'in-the-ditch' => 7958,'entering-or-leaving-tunnels' => 7939,'moved-to-shoulder' => 7950,to => 8014,'in-road-construction-area' => 7941,'in-the-opposing-lanes' => 7944,airport => 7971,northwest => 8003,'in-some-places' => 7957,'in-low-lying-areas' => 7953,'cross-traffic' => 7993,crossover => 8028,'ev-charging-point' => 7980,'at-high-altitudes' => 7962,'rest-area' => 7986,toilets => 7988,'near-beach-access-point' => 7968,'southbound-traffic' => 7996,'on-bridges' => 7937,'entire-intersection' => 7947,through => 8016}},'OPTIONAL'}]};
typeinfo('EmergencyDetails') ->
  {sequence,'EmergencyDetails',6,[{<<115,115,112,82,105,103,104,116,115>>,{'INTEGER',{0,31}},mandatory},{<<115,105,114,101,110,85,115,101>>,{'ENUMERATED',#{unavailable => 0,reserved => 3,notInUse => 1,inUse => 2}},mandatory},{<<108,105,103,104,116,115,85,115,101>>,{'ENUMERATED',#{unavailable => 0,notInUse => 1,inUse => 2,yellowCautionLights => 3,schooldBusLights => 4,arrowSignsActive => 5,slowMovingVehicle => 6,freqStops => 7}},mandatory},{<<109,117,108,116,105>>,{'ENUMERATED',#{unavailable => 0,reserved => 3,singleVehicle => 1,multiVehicle => 2}},mandatory},{<<101,118,101,110,116,115>>,{typeinfo,{'DSRC','PrivilegedEvents'}},'OPTIONAL'},{<<114,101,115,112,111,110,115,101,84,121,112,101>>,{'ENUMERATED_EXT',#{emergency => 1,slowMoving => 5,notInUseOrNotEquipped => 0,nonEmergency => 2,pursuit => 3,stationary => 4,stopAndGoMovement => 6}},'OPTIONAL'}]};
typeinfo('EnabledLaneList') ->
  {sof,{'INTEGER',{0,255}}};
typeinfo('EventDescription') ->
  {sequence,'EventDescription',6,[{<<116,121,112,101,69,118,101,110,116>>,{'INTEGER',{0,65535}},mandatory},{<<100,101,115,99,114,105,112,116,105,111,110>>,{sof,{'INTEGER',{0,65535}}},'OPTIONAL'},{<<112,114,105,111,114,105,116,121>>,octet_string,'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},'OPTIONAL'},{<<101,120,116,101,110,116>>,{'ENUMERATED',#{useInstantlyOnly => 0,useFor3meters => 1,useFor10meters => 2,useFor50meters => 3,useFor100meters => 4,useFor500meters => 5,useFor1000meters => 6,useFor5000meters => 7,useFor10000meters => 8,useFor50000meters => 9,useFor100000meters => 10,useFor500000meters => 11,useFor1000000meters => 12,useFor5000000meters => 13,useFor10000000meters => 14,forever => 15}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'EventDescription_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_60}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('FullPositionVector') ->
  {sequence,'FullPositionVector',10,[{<<117,116,99,84,105,109,101>>,{typeinfo,{'DSRC','DDateTime'}},'OPTIONAL'},{<<108,111,110,103>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory},{<<101,108,101,118,97,116,105,111,110>>,{'INTEGER',{-4096,61439}},'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},'OPTIONAL'},{<<115,112,101,101,100>>,{typeinfo,{'DSRC','TransmissionAndSpeed'}},'OPTIONAL'},{<<112,111,115,65,99,99,117,114,97,99,121>>,{typeinfo,{'DSRC','PositionalAccuracy'}},'OPTIONAL'},{<<116,105,109,101,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{'time-000-000-5' => 16,'time-000-000-000-02' => 29,'time-000-000-01' => 21,'time-000-000-000-01' => 30,'time-000-000-000-001' => 33,'time-002-000' => 5,'time-000-000-000-000-2' => 35,'time-020-000' => 3,'time-000-000-000-1' => 27,'time-000-000-005' => 22,'time-000-000-000-005' => 31,'time-000-000-000-05' => 28,'time-000-000-000-002' => 32,'time-000-000-000-000-05' => 37,'time-000-002' => 14,'time-000-000-2' => 17,'time-000-000-002' => 23,'time-000-500' => 7,'time-050-000' => 2,'time-000-010' => 12,'time-000-000-000-5' => 25,'time-000-000-000-2' => 26,'time-000-050' => 10,'time-000-000-001' => 24,'time-001-000' => 6,'time-010-000' => 4,'time-000-005' => 13,'time-000-200' => 8,'time-000-100' => 9,'time-000-000-000-000-02' => 38,'time-000-000-1' => 18,'time-000-000-05' => 19,'time-100-000' => 1,'time-000-000-000-000-5' => 34,'time-000-020' => 11,'time-000-000-000-000-1' => 36,'time-000-000-02' => 20,'time-000-001' => 15,unavailable => 0,'time-000-000-000-000-01' => 39}},'OPTIONAL'},{<<112,111,115,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'DSRC','PositionConfidenceSet'}},'OPTIONAL'},{<<115,112,101,101,100,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'DSRC','SpeedandHeadingandThrottleConfidence'}},'OPTIONAL'}]};
typeinfo('GenericLane') ->
  {sequence,'GenericLane',10,[{<<108,97,110,101,73,68>>,{'INTEGER',{0,255}},mandatory},{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,110,103,114,101,115,115,65,112,112,114,111,97,99,104>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<101,103,114,101,115,115,65,112,112,114,111,97,99,104>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<108,97,110,101,65,116,116,114,105,98,117,116,101,115>>,{typeinfo,{'DSRC','LaneAttributes'}},mandatory},{<<109,97,110,101,117,118,101,114,115>>,{{bit_string_nnl,[{maneuverStraightAllowed,0},{maneuverLeftAllowed,1},{maneuverRightAllowed,2},{maneuverUTurnAllowed,3},{maneuverLeftTurnOnRedAllowed,4},{maneuverRightTurnOnRedAllowed,5},{maneuverLaneChangeAllowed,6},{maneuverNoStoppingAllowed,7},{yieldAllwaysRequired,8},{goWithHalt,9},{caution,10},{reserved1,11}]},12},'OPTIONAL'},{<<110,111,100,101,76,105,115,116>>,{typeinfo,{'DSRC','NodeListXY'}},mandatory},{<<99,111,110,110,101,99,116,115,84,111>>,{typeinfo,{'DSRC','ConnectsToList'}},'OPTIONAL'},{<<111,118,101,114,108,97,121,115>>,{typeinfo,{'DSRC','OverlayLaneList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'GenericLane_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_13}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('GeographicalPath') ->
  {sequence,'GeographicalPath',9,[{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,100>>,{typeinfo,{'DSRC','RoadSegmentReferenceID'}},'OPTIONAL'},{<<97,110,99,104,111,114>>,{typeinfo,{'DSRC','Position3D'}},'OPTIONAL'},{<<108,97,110,101,87,105,100,116,104>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<100,105,114,101,99,116,105,111,110,97,108,105,116,121>>,{'ENUMERATED',#{reverse => 2,both => 3,unavailable => 0,forward => 1}},'OPTIONAL'},{<<99,108,111,115,101,100,80,97,116,104>>,'BOOLEAN','OPTIONAL'},{<<100,105,114,101,99,116,105,111,110>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},'OPTIONAL'},{<<100,101,115,99,114,105,112,116,105,111,110>>,{choice,#{<<103,101,111,109,101,116,114,121>> => {typeinfo,{'DSRC','GeometricProjection'}},<<111,108,100,82,101,103,105,111,110>> => {typeinfo,{'DSRC','ValidRegion'}},<<112,97,116,104>> => {typeinfo,{'DSRC','OffsetSystem'}}}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'GeographicalPath_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_42}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('GeometricProjection') ->
  {sequence,'GeometricProjection',5,[{<<100,105,114,101,99,116,105,111,110>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},mandatory},{<<101,120,116,101,110,116>>,{'ENUMERATED',#{useInstantlyOnly => 0,useFor3meters => 1,useFor10meters => 2,useFor50meters => 3,useFor100meters => 4,useFor500meters => 5,useFor1000meters => 6,useFor5000meters => 7,useFor10000meters => 8,useFor50000meters => 9,useFor100000meters => 10,useFor500000meters => 11,useFor1000000meters => 12,useFor5000000meters => 13,useFor10000000meters => 14,forever => 15}},'OPTIONAL'},{<<108,97,110,101,87,105,100,116,104>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<99,105,114,99,108,101>>,{typeinfo,{'DSRC','Circle'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'GeometricProjection_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_41}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('Header') ->
  {sequence,'Header',4,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},'OPTIONAL'},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,99,77,97,114,107>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<109,115,103,73,115,115,117,101,82,101,118,105,115,105,111,110>>,{'INTEGER',{0,127}},'OPTIONAL'}]};
typeinfo('IntersectionAccessPoint') ->
  {choice,#{<<97,112,112,114,111,97,99,104>> => {'INTEGER',{0,15}},<<99,111,110,110,101,99,116,105,111,110>> => {'INTEGER',{0,255}},<<108,97,110,101>> => {'INTEGER',{0,255}}}};
typeinfo('IntersectionGeometry') ->
  {sequence,'IntersectionGeometry',9,[{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,100>>,{typeinfo,{'DSRC','IntersectionReferenceID'}},mandatory},{<<114,101,118,105,115,105,111,110>>,{'INTEGER',{0,127}},mandatory},{<<114,101,102,80,111,105,110,116>>,{typeinfo,{'DSRC','Position3D'}},mandatory},{<<108,97,110,101,87,105,100,116,104>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<115,112,101,101,100,76,105,109,105,116,115>>,{typeinfo,{'DSRC','SpeedLimitList'}},'OPTIONAL'},{<<108,97,110,101,83,101,116>>,{typeinfo,{'DSRC','LaneList'}},mandatory},{<<112,114,101,101,109,112,116,80,114,105,111,114,105,116,121,68,97,116,97>>,{typeinfo,{'DSRC','PreemptPriorityList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'IntersectionGeometry_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_15}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('IntersectionGeometryList') ->
  {sof,{typeinfo,{'DSRC','IntersectionGeometry'}}};
typeinfo('IntersectionReferenceID') ->
  {sequence,'IntersectionReferenceID',2,[{<<114,101,103,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<105,100>>,{'INTEGER',{0,65535}},mandatory}]};
typeinfo('IntersectionState') ->
  {sequence,'IntersectionState',10,[{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,100>>,{typeinfo,{'DSRC','IntersectionReferenceID'}},mandatory},{<<114,101,118,105,115,105,111,110>>,{'INTEGER',{0,127}},mandatory},{<<115,116,97,116,117,115>>,{{bit_string_nnl,[{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]},16},mandatory},{<<109,111,121>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<101,110,97,98,108,101,100,76,97,110,101,115>>,{typeinfo,{'DSRC','EnabledLaneList'}},'OPTIONAL'},{<<115,116,97,116,101,115>>,{typeinfo,{'DSRC','MovementList'}},mandatory},{<<109,97,110,101,117,118,101,114,65,115,115,105,115,116,76,105,115,116>>,{typeinfo,{'DSRC','ManeuverAssistList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'IntersectionState_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_29}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('IntersectionStateList') ->
  {sof,{typeinfo,{'DSRC','IntersectionState'}}};
typeinfo('ExitService') ->
  {sof,{sequence,'ExitService_SEQOF',1,[{<<105,116,101,109>>,{choice,#{<<105,116,105,115>> => {'INTEGER',{0,65535}},<<116,101,120,116>> => string}},mandatory}]}};
typeinfo('GenericSignage') ->
  {sof,{sequence,'GenericSignage_SEQOF',1,[{<<105,116,101,109>>,{choice,#{<<105,116,105,115>> => {'INTEGER',{0,65535}},<<116,101,120,116>> => string}},mandatory}]}};
typeinfo('SpeedLimit') ->
  {sof,{sequence,'SpeedLimit_SEQOF',1,[{<<105,116,101,109>>,{choice,#{<<105,116,105,115>> => {'INTEGER',{0,65535}},<<116,101,120,116>> => string}},mandatory}]}};
typeinfo('WorkZone') ->
  {sof,{sequence,'WorkZone_SEQOF',1,[{<<105,116,101,109>>,{choice,#{<<105,116,105,115>> => {'INTEGER',{0,65535}},<<116,101,120,116>> => string}},mandatory}]}};
typeinfo('J1939data') ->
  {sequence,'J1939data',10,[{<<116,105,114,101,115>>,{typeinfo,{'DSRC','TireDataList'}},'OPTIONAL'},{<<97,120,108,101,115>>,{typeinfo,{'DSRC','AxleWeightList'}},'OPTIONAL'},{<<116,114,97,105,108,101,114,87,101,105,103,104,116>>,{'INTEGER',{0,64255}},'OPTIONAL'},{<<99,97,114,103,111,87,101,105,103,104,116>>,{'INTEGER',{0,64255}},'OPTIONAL'},{<<115,116,101,101,114,105,110,103,65,120,108,101,84,101,109,112,101,114,97,116,117,114,101>>,{'INTEGER',{-40,210}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,76,111,99,97,116,105,111,110>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,76,105,102,116,65,105,114,80,114,101,115,115,117,114,101>>,{'INTEGER',{0,1000}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,84,101,109,112,101,114,97,116,117,114,101>>,{'INTEGER',{-40,210}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,76,117,98,101,80,114,101,115,115,117,114,101>>,{'INTEGER',{0,250}},'OPTIONAL'},{<<115,116,101,101,114,105,110,103,65,120,108,101,76,117,98,101,80,114,101,115,115,117,114,101>>,{'INTEGER',{0,250}},'OPTIONAL'}]};
typeinfo('TireDataList') ->
  {sof,{typeinfo,{'DSRC','TireData'}}};
typeinfo('TireData') ->
  {sequence,'TireData',7,[{<<108,111,99,97,116,105,111,110>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<112,114,101,115,115,117,114,101>>,{'INTEGER',{0,250}},'OPTIONAL'},{<<116,101,109,112>>,{'INTEGER',{-8736,55519}},'OPTIONAL'},{<<119,104,101,101,108,83,101,110,115,111,114,83,116,97,116,117,115>>,{'ENUMERATED',#{off => 0,on => 1,notDefined => 2,notSupported => 3}},'OPTIONAL'},{<<119,104,101,101,108,69,110,100,69,108,101,99,116,70,97,117,108,116>>,{'ENUMERATED',#{isOk => 0,isNotDefined => 1,isError => 2,isNotSupported => 3}},'OPTIONAL'},{<<108,101,97,107,97,103,101,82,97,116,101>>,{'INTEGER',{0,64255}},'OPTIONAL'},{<<100,101,116,101,99,116,105,111,110>>,{'ENUMERATED',#{undefined => 5,noData => 0,overPressure => 1,noWarningPressure => 2,underPressure => 3,extremeUnderPressure => 4,errorIndicator => 6,notAvailable => 7}},'OPTIONAL'}]};
typeinfo('AxleWeightList') ->
  {sof,{typeinfo,{'DSRC','AxleWeightSet'}}};
typeinfo('AxleWeightSet') ->
  {sequence,'AxleWeightSet',2,[{<<108,111,99,97,116,105,111,110>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<119,101,105,103,104,116>>,{'INTEGER',{0,64255}},'OPTIONAL'}]};
typeinfo('LaneAttributes') ->
  {sequence,'LaneAttributes',4,[{<<100,105,114,101,99,116,105,111,110,97,108,85,115,101>>,{{bit_string_nnl,[{ingressPath,0},{egressPath,1}]},2},mandatory},{<<115,104,97,114,101,100,87,105,116,104>>,{{bit_string_nnl,[{overlappingLaneDescriptionProvided,0},{multipleLanesTreatedAsOneLane,1},{otherNonMotorizedTrafficTypes,2},{individualMotorizedVehicleTraffic,3},{busVehicleTraffic,4},{taxiVehicleTraffic,5},{pedestriansTraffic,6},{cyclistVehicleTraffic,7},{trackedVehicleTraffic,8},{pedestrianTraffic,9}]},10},mandatory},{<<108,97,110,101,84,121,112,101>>,{typeinfo,{'DSRC','LaneTypeAttributes'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sequence,'LaneAttributes_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_8}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('LaneDataAttribute') ->
  {choice,#{<<108,97,110,101,65,110,103,108,101>> => {'INTEGER',{-180,180}},<<108,97,110,101,67,114,111,119,110,80,111,105,110,116,67,101,110,116,101,114>> => {'INTEGER',{-128,127}},<<108,97,110,101,67,114,111,119,110,80,111,105,110,116,76,101,102,116>> => {'INTEGER',{-128,127}},<<108,97,110,101,67,114,111,119,110,80,111,105,110,116,82,105,103,104,116>> => {'INTEGER',{-128,127}},<<112,97,116,104,69,110,100,80,111,105,110,116,65,110,103,108,101>> => {'INTEGER',{-150,150}},<<114,101,103,105,111,110,97,108>> => {sof,{sequence,'LaneDataAttribute_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_10}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},<<115,112,101,101,100,76,105,109,105,116,115>> => {typeinfo,{'DSRC','SpeedLimitList'}}}};
typeinfo('LaneDataAttributeList') ->
  {sof,{typeinfo,{'DSRC','LaneDataAttribute'}}};
typeinfo('LaneList') ->
  {sof,{typeinfo,{'DSRC','GenericLane'}}};
typeinfo('LaneTypeAttributes') ->
  {choice,#{<<98,105,107,101,76,97,110,101>> => {{bit_string_nnl,[{bikeRevocableLane,0},{pedestrianUseAllowed,1},{isBikeFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{isolatedByBarrier,5},{unsignalizedSegmentsPresent,6}]},16},<<99,114,111,115,115,119,97,108,107>> => {{bit_string_nnl,[{crosswalkRevocableLane,0},{bicyleUseAllowed,1},{isXwalkFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{hasPushToWalkButton,5},{audioSupport,6},{rfSignalRequestPresent,7},{unsignalizedSegmentsPresent,8}]},16},<<109,101,100,105,97,110>> => {{bit_string_nnl,[{'median-RevocableLane',0},{median,1},{whiteLineHashing,2},{stripedLines,3},{doubleStripedLines,4},{trafficCones,5},{constructionBarrier,6},{trafficChannels,7},{lowCurbs,8},{highCurbs,9}]},16},<<112,97,114,107,105,110,103>> => {{bit_string_nnl,[{parkingRevocableLane,0},{parallelParkingInUse,1},{headInParkingInUse,2},{doNotParkZone,3},{parkingForBusUse,4},{parkingForTaxiUse,5},{noPublicParkingUse,6}]},16},<<115,105,100,101,119,97,108,107>> => {{bit_string_nnl,[{'sidewalk-RevocableLane',0},{bicyleUseAllowed,1},{isSidewalkFlyOverLane,2},{walkBikes,3}]},16},<<115,116,114,105,112,105,110,103>> => {{bit_string_nnl,[{stripeToConnectingLanesRevocableLane,0},{stripeDrawOnLeft,1},{stripeDrawOnRight,2},{stripeToConnectingLanesLeft,3},{stripeToConnectingLanesRight,4},{stripeToConnectingLanesAhead,5}]},16},<<116,114,97,99,107,101,100,86,101,104,105,99,108,101>> => {{bit_string_nnl,[{'spec-RevocableLane',0},{'spec-commuterRailRoadTrack',1},{'spec-lightRailRoadTrack',2},{'spec-heavyRailRoadTrack',3},{'spec-otherRailType',4}]},16},<<118,101,104,105,99,108,101>> => {bit_string_nnl,[{isVehicleRevocableLane,0},{isVehicleFlyOverLane,1},{hovLaneUseOnly,2},{restrictedToBusUse,3},{restrictedToTaxiUse,4},{restrictedFromPublicUse,5},{hasIRbeaconCoverage,6},{permissionOnRequest,7}]}}};
typeinfo('ManeuverAssistList') ->
  {sof,{typeinfo,{'DSRC','ConnectionManeuverAssist'}}};
typeinfo('MovementEventList') ->
  {sof,{typeinfo,{'DSRC','MovementEvent'}}};
typeinfo('MovementEvent') ->
  {sequence,'MovementEvent',4,[{<<101,118,101,110,116,83,116,97,116,101>>,{'ENUMERATED',#{unavailable => 0,dark => 1,'stop-Then-Proceed' => 2,'stop-And-Remain' => 3,'pre-Movement' => 4,'permissive-Movement-Allowed' => 5,'protected-Movement-Allowed' => 6,'permissive-clearance' => 7,'protected-clearance' => 8,'caution-Conflicting-Traffic' => 9}},mandatory},{<<116,105,109,105,110,103>>,{typeinfo,{'DSRC','TimeChangeDetails'}},'OPTIONAL'},{<<115,112,101,101,100,115>>,{typeinfo,{'DSRC','AdvisorySpeedList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'MovementEvent_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_26}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('MovementList') ->
  {sof,{typeinfo,{'DSRC','MovementState'}}};
typeinfo('MovementState') ->
  {sequence,'MovementState',5,[{<<109,111,118,101,109,101,110,116,78,97,109,101>>,string,'OPTIONAL'},{<<115,105,103,110,97,108,71,114,111,117,112>>,{'INTEGER',{0,255}},mandatory},{<<115,116,97,116,101,45,116,105,109,101,45,115,112,101,101,100>>,{typeinfo,{'DSRC','MovementEventList'}},mandatory},{<<109,97,110,101,117,118,101,114,65,115,115,105,115,116,76,105,115,116>>,{typeinfo,{'DSRC','ManeuverAssistList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'MovementState_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_28}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('Node-LL-24B') ->
  {sequence,'Node-LL-24B',2,[{<<108,111,110>>,{'INTEGER',{-2048,2047}},mandatory},{<<108,97,116>>,{'INTEGER',{-2048,2047}},mandatory}]};
typeinfo('Node-LL-28B') ->
  {sequence,'Node-LL-28B',2,[{<<108,111,110>>,{'INTEGER',{-8192,8191}},mandatory},{<<108,97,116>>,{'INTEGER',{-8192,8191}},mandatory}]};
typeinfo('Node-LL-32B') ->
  {sequence,'Node-LL-32B',2,[{<<108,111,110>>,{'INTEGER',{-32768,32767}},mandatory},{<<108,97,116>>,{'INTEGER',{-32768,32767}},mandatory}]};
typeinfo('Node-LL-36B') ->
  {sequence,'Node-LL-36B',2,[{<<108,111,110>>,{'INTEGER',{-131072,131071}},mandatory},{<<108,97,116>>,{'INTEGER',{-131072,131071}},mandatory}]};
typeinfo('Node-LL-44B') ->
  {sequence,'Node-LL-44B',2,[{<<108,111,110>>,{'INTEGER',{-2097152,2097151}},mandatory},{<<108,97,116>>,{'INTEGER',{-2097152,2097151}},mandatory}]};
typeinfo('Node-LL-48B') ->
  {sequence,'Node-LL-48B',2,[{<<108,111,110>>,{'INTEGER',{-8388608,8388607}},mandatory},{<<108,97,116>>,{'INTEGER',{-8388608,8388607}},mandatory}]};
typeinfo('Node-LLmD-64b') ->
  {sequence,'Node-LLmD-64b',2,[{<<108,111,110>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory}]};
typeinfo('Node-XY-20b') ->
  {sequence,'Node-XY-20b',2,[{<<120>>,{'INTEGER',{-512,511}},mandatory},{<<121>>,{'INTEGER',{-512,511}},mandatory}]};
typeinfo('Node-XY-22b') ->
  {sequence,'Node-XY-22b',2,[{<<120>>,{'INTEGER',{-1024,1023}},mandatory},{<<121>>,{'INTEGER',{-1024,1023}},mandatory}]};
typeinfo('Node-XY-24b') ->
  {sequence,'Node-XY-24b',2,[{<<120>>,{'INTEGER',{-2048,2047}},mandatory},{<<121>>,{'INTEGER',{-2048,2047}},mandatory}]};
typeinfo('Node-XY-26b') ->
  {sequence,'Node-XY-26b',2,[{<<120>>,{'INTEGER',{-4096,4095}},mandatory},{<<121>>,{'INTEGER',{-4096,4095}},mandatory}]};
typeinfo('Node-XY-28b') ->
  {sequence,'Node-XY-28b',2,[{<<120>>,{'INTEGER',{-8192,8191}},mandatory},{<<121>>,{'INTEGER',{-8192,8191}},mandatory}]};
typeinfo('Node-XY-32b') ->
  {sequence,'Node-XY-32b',2,[{<<120>>,{'INTEGER',{-32768,32767}},mandatory},{<<121>>,{'INTEGER',{-32768,32767}},mandatory}]};
typeinfo('NodeAttributeLLList') ->
  {sof,{'ENUMERATED_EXT',#{reserved => 0,stopLine => 1,roundedCapStyleA => 2,roundedCapStyleB => 3,mergePoint => 4,divergePoint => 5,downstreamStopLine => 6,downstreamStartNode => 7,closedToTraffic => 8,safeIsland => 9,curbPresentAtStepOff => 10,hydrantPresent => 11}}};
typeinfo('NodeAttributeSetLL') ->
  {sequence,'NodeAttributeSetLL',7,[{<<108,111,99,97,108,78,111,100,101>>,{typeinfo,{'DSRC','NodeAttributeLLList'}},'OPTIONAL'},{<<100,105,115,97,98,108,101,100>>,{typeinfo,{'DSRC','SegmentAttributeLLList'}},'OPTIONAL'},{<<101,110,97,98,108,101,100>>,{typeinfo,{'DSRC','SegmentAttributeLLList'}},'OPTIONAL'},{<<100,97,116,97>>,{typeinfo,{'DSRC','LaneDataAttributeList'}},'OPTIONAL'},{<<100,87,105,100,116,104>>,{'INTEGER',{-512,511}},'OPTIONAL'},{<<100,69,108,101,118,97,116,105,111,110>>,{'INTEGER',{-512,511}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'NodeAttributeSetLL_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_40}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('NodeAttributeSetXY') ->
  {sequence,'NodeAttributeSetXY',7,[{<<108,111,99,97,108,78,111,100,101>>,{typeinfo,{'DSRC','NodeAttributeXYList'}},'OPTIONAL'},{<<100,105,115,97,98,108,101,100>>,{typeinfo,{'DSRC','SegmentAttributeXYList'}},'OPTIONAL'},{<<101,110,97,98,108,101,100>>,{typeinfo,{'DSRC','SegmentAttributeXYList'}},'OPTIONAL'},{<<100,97,116,97>>,{typeinfo,{'DSRC','LaneDataAttributeList'}},'OPTIONAL'},{<<100,87,105,100,116,104>>,{'INTEGER',{-512,511}},'OPTIONAL'},{<<100,69,108,101,118,97,116,105,111,110>>,{'INTEGER',{-512,511}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'NodeAttributeSetXY_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_11}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('NodeAttributeXYList') ->
  {sof,{'ENUMERATED_EXT',#{reserved => 0,stopLine => 1,roundedCapStyleA => 2,roundedCapStyleB => 3,mergePoint => 4,divergePoint => 5,downstreamStopLine => 6,downstreamStartNode => 7,closedToTraffic => 8,safeIsland => 9,curbPresentAtStepOff => 10,hydrantPresent => 11}}};
typeinfo('NodeListLL') ->
  {choice,#{<<110,111,100,101,115>> => {typeinfo,{'DSRC','NodeSetLL'}}}};
typeinfo('NodeListXY') ->
  {choice,#{<<99,111,109,112,117,116,101,100>> => {typeinfo,{'DSRC','ComputedLane'}},<<110,111,100,101,115>> => {typeinfo,{'DSRC','NodeSetXY'}}}};
typeinfo('NodeLL') ->
  {sequence,'NodeLL',2,[{<<100,101,108,116,97>>,{typeinfo,{'DSRC','NodeOffsetPointLL'}},mandatory},{<<97,116,116,114,105,98,117,116,101,115>>,{typeinfo,{'DSRC','NodeAttributeSetLL'}},'OPTIONAL'}]};
typeinfo('NodeOffsetPointLL') ->
  {choice,#{<<110,111,100,101,45,76,76,49>> => {typeinfo,{'DSRC','Node-LL-24B'}},<<110,111,100,101,45,76,76,50>> => {typeinfo,{'DSRC','Node-LL-28B'}},<<110,111,100,101,45,76,76,51>> => {typeinfo,{'DSRC','Node-LL-32B'}},<<110,111,100,101,45,76,76,52>> => {typeinfo,{'DSRC','Node-LL-36B'}},<<110,111,100,101,45,76,76,53>> => {typeinfo,{'DSRC','Node-LL-44B'}},<<110,111,100,101,45,76,76,54>> => {typeinfo,{'DSRC','Node-LL-48B'}},<<110,111,100,101,45,76,97,116,76,111,110>> => {typeinfo,{'DSRC','Node-LLmD-64b'}},<<114,101,103,105,111,110,97,108>> => {sequence,'NodeOffsetPointLL_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_39}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}}};
typeinfo('NodeOffsetPointXY') ->
  {choice,#{<<110,111,100,101,45,76,97,116,76,111,110>> => {typeinfo,{'DSRC','Node-LLmD-64b'}},<<110,111,100,101,45,88,89,49>> => {typeinfo,{'DSRC','Node-XY-20b'}},<<110,111,100,101,45,88,89,50>> => {typeinfo,{'DSRC','Node-XY-22b'}},<<110,111,100,101,45,88,89,51>> => {typeinfo,{'DSRC','Node-XY-24b'}},<<110,111,100,101,45,88,89,52>> => {typeinfo,{'DSRC','Node-XY-26b'}},<<110,111,100,101,45,88,89,53>> => {typeinfo,{'DSRC','Node-XY-28b'}},<<110,111,100,101,45,88,89,54>> => {typeinfo,{'DSRC','Node-XY-32b'}},<<114,101,103,105,111,110,97,108>> => {sequence,'NodeOffsetPointXY_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_9}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}}};
typeinfo('NodeSetLL') ->
  {sof,{typeinfo,{'DSRC','NodeLL'}}};
typeinfo('NodeSetXY') ->
  {sof,{typeinfo,{'DSRC','NodeXY'}}};
typeinfo('NodeXY') ->
  {sequence,'NodeXY',2,[{<<100,101,108,116,97>>,{typeinfo,{'DSRC','NodeOffsetPointXY'}},mandatory},{<<97,116,116,114,105,98,117,116,101,115>>,{typeinfo,{'DSRC','NodeAttributeSetXY'}},'OPTIONAL'}]};
typeinfo('ObstacleDetection') ->
  {sequence,'ObstacleDetection',6,[{<<111,98,68,105,115,116>>,{'INTEGER',{0,32767}},mandatory},{<<111,98,68,105,114,101,99,116>>,{'INTEGER',{0,28800}},mandatory},{<<100,101,115,99,114,105,112,116,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<108,111,99,97,116,105,111,110,68,101,116,97,105,108,115>>,{'ENUMERATED_EXT',#{'on-the-left' => 7990,'other-than-on-the-roadway' => 7966,'side-road' => 8030,concourse => 7972,southeast => 8004,west => 8001,intersection => 8032,northeast => 8002,'near-the-shore' => 7964,'picnic-areas' => 7985,'in-the-median' => 7948,'customs-point' => 7975,'near-the-beach' => 7967,'upper-level' => 7970,'in-the-center' => 7991,'information-welcome-point' => 7981,depot => 7979,dip => 8010,shoulder => 8027,'in-the-opposite-direction' => 7992,'on-ramps' => 7940,'around-a-curve' => 7942,'across-tracks' => 8024,over => 8019,under => 8018,'on-tracks' => 8009,south => 7999,'at-rest-area' => 7982,'on-the-right' => 7989,'bus-stop' => 8031,'park-and-ride-lot' => 8012,'area-of' => 8017,'in-parts' => 7956,'baggage-claim' => 7974,'westbound-traffic' => 7997,'mountain-pass' => 8006,'eastbound-traffic' => 7995,southwest => 8005,'service-stations' => 7987,'in-the-valley' => 7959,'nearby-basin' => 8008,dock => 7978,'roadside-park' => 8033,'lower-level' => 7969,'traffic-circle' => 8011,'on-minor-roads' => 7943,'at-service-area' => 7983,'moved-to-side-of-road' => 7949,'cross-road' => 8029,'exiting-at' => 8023,'on-the-roadway' => 7951,'northbound-traffic' => 7994,gate => 7973,'on-bend' => 7946,'entering-at' => 8022,'over-the-crest-of-a-hill' => 7965,'adjacent-to-roadway' => 7945,'near-the-foothills' => 7961,'reservation-center' => 8007,'in-tunnels' => 7938,'in-the-inner-city-area' => 7955,east => 8000,platform => 7977,'on-curve' => 8026,from => 8020,approaching => 8021,station => 7976,'on-hill-top' => 7960,'at-weigh-station' => 7984,north => 7998,by => 8015,'near-the-lake' => 7963,'in-shaded-areas' => 7952,'in-street' => 8025,'in-the-downtown-area' => 7954,'in-the-ditch' => 7958,'entering-or-leaving-tunnels' => 7939,'moved-to-shoulder' => 7950,to => 8014,'in-road-construction-area' => 7941,'in-the-opposing-lanes' => 7944,airport => 7971,northwest => 8003,'in-some-places' => 7957,'in-low-lying-areas' => 7953,'cross-traffic' => 7993,crossover => 8028,'ev-charging-point' => 7980,'at-high-altitudes' => 7962,'rest-area' => 7986,toilets => 7988,'near-beach-access-point' => 7968,'southbound-traffic' => 7996,'on-bridges' => 7937,'entire-intersection' => 7947,through => 8016}},'OPTIONAL'},{<<100,97,116,101,84,105,109,101>>,{typeinfo,{'DSRC','DDateTime'}},mandatory},{<<118,101,114,116,69,118,101,110,116>>,{{bit_string_nnl,[{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5},'OPTIONAL'}]};
typeinfo('OffsetSystem') ->
  {sequence,'OffsetSystem',2,[{<<115,99,97,108,101>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<111,102,102,115,101,116>>,{choice,#{<<108,108>> => {typeinfo,{'DSRC','NodeListLL'}},<<120,121>> => {typeinfo,{'DSRC','NodeListXY'}}}},mandatory}]};
typeinfo('OverlayLaneList') ->
  {sof,{'INTEGER',{0,255}}};
typeinfo('PathHistory') ->
  {sequence,'PathHistory',3,[{<<105,110,105,116,105,97,108,80,111,115,105,116,105,111,110>>,{typeinfo,{'DSRC','FullPositionVector'}},'OPTIONAL'},{<<99,117,114,114,71,78,83,83,115,116,97,116,117,115>>,{{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8},'OPTIONAL'},{<<99,114,117,109,98,68,97,116,97>>,{typeinfo,{'DSRC','PathHistoryPointList'}},mandatory}]};
typeinfo('PathHistoryPointList') ->
  {sof,{typeinfo,{'DSRC','PathHistoryPoint'}}};
typeinfo('PathHistoryPoint') ->
  {sequence,'PathHistoryPoint',7,[{<<108,97,116,79,102,102,115,101,116>>,{'INTEGER',{-131072,131071}},mandatory},{<<108,111,110,79,102,102,115,101,116>>,{'INTEGER',{-131072,131071}},mandatory},{<<101,108,101,118,97,116,105,111,110,79,102,102,115,101,116>>,{'INTEGER',{-2048,2047}},mandatory},{<<116,105,109,101,79,102,102,115,101,116>>,{'INTEGER',{1,65535}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},'OPTIONAL'},{<<112,111,115,65,99,99,117,114,97,99,121>>,{typeinfo,{'DSRC','PositionalAccuracy'}},'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,240}},'OPTIONAL'}]};
typeinfo('PathPrediction') ->
  {sequence,'PathPrediction',2,[{<<114,97,100,105,117,115,79,102,67,117,114,118,101>>,{'INTEGER',{-32767,32767}},mandatory},{<<99,111,110,102,105,100,101,110,99,101>>,{'INTEGER',{0,200}},mandatory}]};
typeinfo('PivotPointDescription') ->
  {sequence,'PivotPointDescription',3,[{<<112,105,118,111,116,79,102,102,115,101,116>>,{'INTEGER',{-1024,1023}},mandatory},{<<112,105,118,111,116,65,110,103,108,101>>,{'INTEGER',{0,28800}},mandatory},{<<112,105,118,111,116,115>>,'BOOLEAN',mandatory}]};
typeinfo('Position3D') ->
  {sequence,'Position3D',4,[{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory},{<<108,111,110,103>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<101,108,101,118,97,116,105,111,110>>,{'INTEGER',{-4096,61439}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'Position3D_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_7}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('PositionalAccuracy') ->
  {sequence,'PositionalAccuracy',3,[{<<115,101,109,105,77,97,106,111,114>>,{'INTEGER',{0,255}},mandatory},{<<115,101,109,105,77,105,110,111,114>>,{'INTEGER',{0,255}},mandatory},{<<111,114,105,101,110,116,97,116,105,111,110>>,{'INTEGER',{0,65535}},mandatory}]};
typeinfo('PositionConfidenceSet') ->
  {sequence,'PositionConfidenceSet',2,[{<<112,111,115>>,{'ENUMERATED',#{unavailable => 0,a500m => 1,a200m => 2,a100m => 3,a50m => 4,a20m => 5,a10m => 6,a5m => 7,a2m => 8,a1m => 9,a50cm => 10,a20cm => 11,a10cm => 12,a5cm => 13,a2cm => 14,a1cm => 15}},mandatory},{<<101,108,101,118,97,116,105,111,110>>,{'ENUMERATED',#{unavailable => 0,'elev-500-00' => 1,'elev-200-00' => 2,'elev-100-00' => 3,'elev-050-00' => 4,'elev-020-00' => 5,'elev-010-00' => 6,'elev-005-00' => 7,'elev-002-00' => 8,'elev-001-00' => 9,'elev-000-50' => 10,'elev-000-20' => 11,'elev-000-10' => 12,'elev-000-05' => 13,'elev-000-02' => 14,'elev-000-01' => 15}},mandatory}]};
typeinfo('PreemptPriorityList') ->
  {sof,{typeinfo,{'DSRC','SignalControlZone'}}};
typeinfo('SignalControlZone') ->
  {sequence,'SignalControlZone',1,[{<<122,111,110,101>>,{sequence,'SignalControlZone_zone',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_14}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},mandatory}]};
typeinfo('PrivilegedEvents') ->
  {sequence,'PrivilegedEvents',2,[{<<115,115,112,82,105,103,104,116,115>>,{'INTEGER',{0,31}},mandatory},{<<101,118,101,110,116>>,{{bit_string_nnl,[{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]},16},mandatory}]};
typeinfo('PropelledInformation') ->
  {choice,#{<<97,110,105,109,97,108>> => {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,animalMounted => 2,animalDrawnCarriage => 3}},<<104,117,109,97,110>> => {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelchair => 5,onFoot => 2,skateboard => 3,pushOrKickScooter => 4}},<<109,111,116,111,114>> => {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelChair => 2,bicycle => 3,scooter => 4,selfBalancingDevice => 5}}}};
typeinfo('RegionList') ->
  {sof,{typeinfo,{'DSRC','RegionOffsets'}}};
typeinfo('RegionOffsets') ->
  {sequence,'RegionOffsets',3,[{<<120,79,102,102,115,101,116>>,{'INTEGER',{-32768,32767}},mandatory},{<<121,79,102,102,115,101,116>>,{'INTEGER',{-32768,32767}},mandatory},{<<122,79,102,102,115,101,116>>,{'INTEGER',{-32768,32767}},'OPTIONAL'}]};
typeinfo('RegionPointSet') ->
  {sequence,'RegionPointSet',3,[{<<97,110,99,104,111,114>>,{typeinfo,{'DSRC','Position3D'}},'OPTIONAL'},{<<115,99,97,108,101>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<110,111,100,101,76,105,115,116>>,{typeinfo,{'DSRC','RegionList'}},mandatory}]};
typeinfo('RegulatorySpeedLimit') ->
  {sequence,'RegulatorySpeedLimit',2,[{<<116,121,112,101>>,{'ENUMERATED_EXT',#{unknown => 0,maxSpeedInSchoolZone => 1,maxSpeedInSchoolZoneWhenChildrenArePresent => 2,maxSpeedInConstructionZone => 3,vehicleMinSpeed => 4,vehicleMaxSpeed => 5,vehicleNightMaxSpeed => 6,truckMinSpeed => 7,truckMaxSpeed => 8,truckNightMaxSpeed => 9,vehiclesWithTrailersMinSpeed => 10,vehiclesWithTrailersMaxSpeed => 11,vehiclesWithTrailersNightMaxSpeed => 12}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory}]};
typeinfo('RequestedItemList') ->
  {sof,{'ENUMERATED_EXT',#{reserved => 0,itemA => 1,itemB => 2,itemC => 3,itemD => 4,itemE => 5,itemF => 6,itemG => 7,itemI => 8,itemJ => 9,itemK => 10,itemL => 11,itemM => 12,itemN => 13,itemO => 14,itemP => 15,itemQ => 16}}};
typeinfo('RequestorDescription') ->
  {sequence,'RequestorDescription',9,[{<<105,100>>,{typeinfo,{'DSRC','VehicleID'}},mandatory},{<<116,121,112,101>>,{typeinfo,{'DSRC','RequestorType'}},'OPTIONAL'},{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'DSRC','RequestorPositionVector'}},'OPTIONAL'},{<<110,97,109,101>>,string,'OPTIONAL'},{<<114,111,117,116,101,78,97,109,101>>,string,'OPTIONAL'},{<<116,114,97,110,115,105,116,83,116,97,116,117,115>>,{{bit_string_nnl,[{loading,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{charging,4},{atStopLine,5}]},8},'OPTIONAL'},{<<116,114,97,110,115,105,116,79,99,99,117,112,97,110,99,121>>,{'ENUMERATED',#{occupancyUnknown => 0,occupancyEmpty => 1,occupancyVeryLow => 2,occupancyLow => 3,occupancyMed => 4,occupancyHigh => 5,occupancyNearlyFull => 6,occupancyFull => 7}},'OPTIONAL'},{<<116,114,97,110,115,105,116,83,99,104,101,100,117,108,101>>,{'INTEGER',{-122,121}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'RequestorDescription_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_34}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('RequestorPositionVector') ->
  {sequence,'RequestorPositionVector',3,[{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'DSRC','Position3D'}},mandatory},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},'OPTIONAL'},{<<115,112,101,101,100>>,{typeinfo,{'DSRC','TransmissionAndSpeed'}},'OPTIONAL'}]};
typeinfo('RequestorType') ->
  {sequence,'RequestorType',6,[{<<114,111,108,101>>,{'ENUMERATED_EXT',#{dot => 15,emergency => 6,transit => 16,basicVehicle => 0,publicTransport => 1,specialTransport => 2,dangerousGoods => 3,roadWork => 4,roadRescue => 5,safetyCar => 7,'none-unknown' => 8,truck => 9,motorcycle => 10,roadSideSource => 11,police => 12,fire => 13,ambulance => 14,slowMoving => 17,stopNgo => 18,cyclist => 19,pedestrian => 20,nonMotorized => 21,military => 22}},mandatory},{<<115,117,98,114,111,108,101>>,{'ENUMERATED',#{requestSubRoleUnKnown => 0,requestSubRole1 => 1,requestSubRole2 => 2,requestSubRole3 => 3,requestSubRole4 => 4,requestSubRole5 => 5,requestSubRole6 => 6,requestSubRole7 => 7,requestSubRole8 => 8,requestSubRole9 => 9,requestSubRole10 => 10,requestSubRole11 => 11,requestSubRole12 => 12,requestSubRole13 => 13,requestSubRole14 => 14,requestSubRoleReserved => 15}},'OPTIONAL'},{<<114,101,113,117,101,115,116>>,{'ENUMERATED',#{requestImportanceLevelUnKnown => 0,requestImportanceLevel1 => 1,requestImportanceLevel2 => 2,requestImportanceLevel3 => 3,requestImportanceLevel4 => 4,requestImportanceLevel5 => 5,requestImportanceLevel6 => 6,requestImportanceLevel7 => 7,requestImportanceLevel8 => 8,requestImportanceLevel9 => 9,requestImportanceLevel10 => 10,requestImportanceLevel11 => 11,requestImportanceLevel12 => 12,requestImportanceLevel13 => 13,requestImportanceLevel14 => 14,requestImportanceReserved => 15}},'OPTIONAL'},{<<105,115,111,51,56,56,51>>,{'INTEGER',{0,100}},'OPTIONAL'},{<<104,112,109,115,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'RequestorType_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_33}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('RestrictionClassAssignment') ->
  {sequence,'RestrictionClassAssignment',2,[{<<105,100>>,{'INTEGER',{0,255}},mandatory},{<<117,115,101,114,115>>,{typeinfo,{'DSRC','RestrictionUserTypeList'}},mandatory}]};
typeinfo('RestrictionClassList') ->
  {sof,{typeinfo,{'DSRC','RestrictionClassAssignment'}}};
typeinfo('RestrictionUserTypeList') ->
  {sof,{typeinfo,{'DSRC','RestrictionUserType'}}};
typeinfo('RestrictionUserType') ->
  {choice,#{<<98,97,115,105,99,84,121,112,101>> => {'ENUMERATED_EXT',#{none => 0,equippedTransit => 1,equippedTaxis => 2,equippedOther => 3,emissionCompliant => 4,equippedBicycle => 5,weightCompliant => 6,heightCompliant => 7,pedestrians => 8,slowMovingPersons => 9,wheelchairUsers => 10,visualDisabilities => 11,audioDisabilities => 12,otherUnknownDisabilities => 13}},<<114,101,103,105,111,110,97,108>> => {sof,{sequence,'RestrictionUserType_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_17}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}}}};
typeinfo('RoadLaneSetList') ->
  {sof,{typeinfo,{'DSRC','GenericLane'}}};
typeinfo('RoadSegmentList') ->
  {sof,{typeinfo,{'DSRC','RoadSegment'}}};
typeinfo('RoadSegmentReferenceID') ->
  {sequence,'RoadSegmentReferenceID',2,[{<<114,101,103,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<105,100>>,{'INTEGER',{0,65535}},mandatory}]};
typeinfo('RoadSegment') ->
  {sequence,'RoadSegment',8,[{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,100>>,{typeinfo,{'DSRC','RoadSegmentReferenceID'}},mandatory},{<<114,101,118,105,115,105,111,110>>,{'INTEGER',{0,127}},mandatory},{<<114,101,102,80,111,105,110,116>>,{typeinfo,{'DSRC','Position3D'}},mandatory},{<<108,97,110,101,87,105,100,116,104>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<115,112,101,101,100,76,105,109,105,116,115>>,{typeinfo,{'DSRC','SpeedLimitList'}},'OPTIONAL'},{<<114,111,97,100,76,97,110,101,83,101,116>>,{typeinfo,{'DSRC','RoadLaneSetList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'RoadSegment_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_16}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('RoadSignID') ->
  {sequence,'RoadSignID',4,[{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'DSRC','Position3D'}},mandatory},{<<118,105,101,119,65,110,103,108,101>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},mandatory},{<<109,117,116,99,100,67,111,100,101>>,{'ENUMERATED_EXT',#{none => 0,warning => 2,regulatory => 1,maintenance => 3,motoristService => 4,guide => 5,rec => 6}},'OPTIONAL'},{<<99,114,99>>,octet_string,'OPTIONAL'}]};
typeinfo('RTCMheader') ->
  {sequence,'RTCMheader',2,[{<<115,116,97,116,117,115>>,{{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8},mandatory},{<<111,102,102,115,101,116,83,101,116>>,{typeinfo,{'DSRC','AntennaOffsetSet'}},mandatory}]};
typeinfo('RTCMmessageList') ->
  {sof,octet_string};
typeinfo('RTCMPackage') ->
  {sequence,'RTCMPackage',2,[{<<114,116,99,109,72,101,97,100,101,114>>,{typeinfo,{'DSRC','RTCMheader'}},'OPTIONAL'},{<<109,115,103,115>>,{typeinfo,{'DSRC','RTCMmessageList'}},mandatory}]};
typeinfo('Sample') ->
  {sequence,'Sample',2,[{<<115,97,109,112,108,101,83,116,97,114,116>>,{'INTEGER',{0,255}},mandatory},{<<115,97,109,112,108,101,69,110,100>>,{'INTEGER',{0,255}},mandatory}]};
typeinfo('SegmentAttributeLLList') ->
  {sof,{'ENUMERATED_EXT',#{lowCurbsPresent => 22,bikeBoxInFront => 16,rfSignalRequestPresent => 26,sharedWithTrackedVehicle => 20,headInParking => 32,sharedBikeLane => 15,partialCurbIntrusion => 27,parallelParking => 31,rumbleStripPresent => 23,audibleSignalingPresent => 24,transitStopOnRight => 18,safeIsland => 21,adjacentBikeLaneOnLeft => 13,taperToRight => 29,costToPark => 35,loadingzoneOnRight => 8,whiteLine => 2,freeParking => 33,mergingLaneLeft => 3,transitStopOnLeft => 17,adjacentParkingOnRight => 12,turnOutPointOnRight => 10,timeRestrictionsOnParking => 34,curbOnRight => 6,midBlockCurbPresent => 36,loadingzoneOnLeft => 7,unEvenPavementPresent => 37,transitStopInLane => 19,adjacentParkingOnLeft => 11,taperToLeft => 28,taperToCenterLine => 30,curbOnLeft => 5,doNotBlock => 1,turnOutPointOnLeft => 9,reserved => 0,mergingLaneRight => 4,adjacentBikeLaneOnRight => 14,adaptiveTimingPresent => 25}}};
typeinfo('SegmentAttributeXYList') ->
  {sof,{'ENUMERATED_EXT',#{lowCurbsPresent => 22,bikeBoxInFront => 16,rfSignalRequestPresent => 26,sharedWithTrackedVehicle => 20,headInParking => 32,sharedBikeLane => 15,partialCurbIntrusion => 27,parallelParking => 31,rumbleStripPresent => 23,audibleSignalingPresent => 24,transitStopOnRight => 18,safeIsland => 21,adjacentBikeLaneOnLeft => 13,taperToRight => 29,costToPark => 35,loadingzoneOnRight => 8,whiteLine => 2,freeParking => 33,mergingLaneLeft => 3,transitStopOnLeft => 17,adjacentParkingOnRight => 12,turnOutPointOnRight => 10,timeRestrictionsOnParking => 34,curbOnRight => 6,midBlockCurbPresent => 36,loadingzoneOnLeft => 7,unEvenPavementPresent => 37,transitStopInLane => 19,adjacentParkingOnLeft => 11,taperToLeft => 28,taperToCenterLine => 30,curbOnLeft => 5,doNotBlock => 1,turnOutPointOnLeft => 9,reserved => 0,mergingLaneRight => 4,adjacentBikeLaneOnRight => 14,adaptiveTimingPresent => 25}}};
typeinfo('ShapePointSet') ->
  {sequence,'ShapePointSet',4,[{<<97,110,99,104,111,114>>,{typeinfo,{'DSRC','Position3D'}},'OPTIONAL'},{<<108,97,110,101,87,105,100,116,104>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<100,105,114,101,99,116,105,111,110,97,108,105,116,121>>,{'ENUMERATED',#{reverse => 2,both => 3,unavailable => 0,forward => 1}},'OPTIONAL'},{<<110,111,100,101,76,105,115,116>>,{typeinfo,{'DSRC','NodeListXY'}},mandatory}]};
typeinfo('SignalRequesterInfo') ->
  {sequence,'SignalRequesterInfo',5,[{<<105,100>>,{typeinfo,{'DSRC','VehicleID'}},mandatory},{<<114,101,113,117,101,115,116>>,{'INTEGER',{0,255}},mandatory},{<<115,101,113,117,101,110,99,101,78,117,109,98,101,114>>,{'INTEGER',{0,127}},mandatory},{<<114,111,108,101>>,{'ENUMERATED_EXT',#{dot => 15,emergency => 6,transit => 16,basicVehicle => 0,publicTransport => 1,specialTransport => 2,dangerousGoods => 3,roadWork => 4,roadRescue => 5,safetyCar => 7,'none-unknown' => 8,truck => 9,motorcycle => 10,roadSideSource => 11,police => 12,fire => 13,ambulance => 14,slowMoving => 17,stopNgo => 18,cyclist => 19,pedestrian => 20,nonMotorized => 21,military => 22}},'OPTIONAL'},{<<116,121,112,101,68,97,116,97>>,{typeinfo,{'DSRC','RequestorType'}},'OPTIONAL'}]};
typeinfo('SignalRequestList') ->
  {sof,{typeinfo,{'DSRC','SignalRequestPackage'}}};
typeinfo('SignalRequestPackage') ->
  {sequence,'SignalRequestPackage',5,[{<<114,101,113,117,101,115,116>>,{typeinfo,{'DSRC','SignalRequest'}},mandatory},{<<109,105,110,117,116,101>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<100,117,114,97,116,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SignalRequestPackage_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_32}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('SignalRequest') ->
  {sequence,'SignalRequest',6,[{<<105,100>>,{typeinfo,{'DSRC','IntersectionReferenceID'}},mandatory},{<<114,101,113,117,101,115,116,73,68>>,{'INTEGER',{0,255}},mandatory},{<<114,101,113,117,101,115,116,84,121,112,101>>,{'ENUMERATED_EXT',#{priorityRequestTypeReserved => 0,priorityRequest => 1,priorityRequestUpdate => 2,priorityCancellation => 3}},mandatory},{<<105,110,66,111,117,110,100,76,97,110,101>>,{typeinfo,{'DSRC','IntersectionAccessPoint'}},mandatory},{<<111,117,116,66,111,117,110,100,76,97,110,101>>,{typeinfo,{'DSRC','IntersectionAccessPoint'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SignalRequest_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_31}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('SignalStatusList') ->
  {sof,{typeinfo,{'DSRC','SignalStatus'}}};
typeinfo('SignalStatusPackageList') ->
  {sof,{typeinfo,{'DSRC','SignalStatusPackage'}}};
typeinfo('SignalStatusPackage') ->
  {sequence,'SignalStatusPackage',8,[{<<114,101,113,117,101,115,116,101,114>>,{typeinfo,{'DSRC','SignalRequesterInfo'}},'OPTIONAL'},{<<105,110,98,111,117,110,100,79,110>>,{typeinfo,{'DSRC','IntersectionAccessPoint'}},mandatory},{<<111,117,116,98,111,117,110,100,79,110>>,{typeinfo,{'DSRC','IntersectionAccessPoint'}},'OPTIONAL'},{<<109,105,110,117,116,101>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<100,117,114,97,116,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<115,116,97,116,117,115>>,{'ENUMERATED_EXT',#{unknown => 0,rejected => 5,requested => 1,processing => 2,watchOtherTraffic => 3,granted => 4,maxPresence => 6,reserviceLocked => 7}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SignalStatusPackage_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_36}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('SignalStatus') ->
  {sequence,'SignalStatus',4,[{<<115,101,113,117,101,110,99,101,78,117,109,98,101,114>>,{'INTEGER',{0,127}},mandatory},{<<105,100>>,{typeinfo,{'DSRC','IntersectionReferenceID'}},mandatory},{<<115,105,103,83,116,97,116,117,115>>,{typeinfo,{'DSRC','SignalStatusPackageList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SignalStatus_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_37}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('SnapshotDistance') ->
  {sequence,'SnapshotDistance',4,[{<<100,105,115,116,97,110,99,101,49>>,{'INTEGER',{0,1023}},mandatory},{<<115,112,101,101,100,49>>,{'INTEGER',{0,31}},mandatory},{<<100,105,115,116,97,110,99,101,50>>,{'INTEGER',{0,1023}},mandatory},{<<115,112,101,101,100,50>>,{'INTEGER',{0,31}},mandatory}]};
typeinfo('Snapshot') ->
  {sequence,'Snapshot',3,[{<<116,104,101,80,111,115,105,116,105,111,110>>,{typeinfo,{'DSRC','FullPositionVector'}},mandatory},{<<115,97,102,101,116,121,69,120,116>>,{typeinfo,{'DSRC','VehicleSafetyExtensions'}},'OPTIONAL'},{<<100,97,116,97,83,101,116>>,{typeinfo,{'DSRC','VehicleStatus'}},'OPTIONAL'}]};
typeinfo('SnapshotTime') ->
  {sequence,'SnapshotTime',4,[{<<115,112,101,101,100,49>>,{'INTEGER',{0,31}},mandatory},{<<116,105,109,101,49>>,{'INTEGER',{0,61}},mandatory},{<<115,112,101,101,100,50>>,{'INTEGER',{0,31}},mandatory},{<<116,105,109,101,50>>,{'INTEGER',{0,61}},mandatory}]};
typeinfo('SpecialVehicleExtensions') ->
  {sequence,'SpecialVehicleExtensions',3,[{<<118,101,104,105,99,108,101,65,108,101,114,116,115>>,{typeinfo,{'DSRC','EmergencyDetails'}},'OPTIONAL'},{<<100,101,115,99,114,105,112,116,105,111,110>>,{typeinfo,{'DSRC','EventDescription'}},'OPTIONAL'},{<<116,114,97,105,108,101,114,115>>,{typeinfo,{'DSRC','TrailerData'}},'OPTIONAL'}]};
typeinfo('SpeedandHeadingandThrottleConfidence') ->
  {sequence,'SpeedandHeadingandThrottleConfidence',3,[{<<104,101,97,100,105,110,103>>,{'ENUMERATED',#{unavailable => 0,prec10deg => 1,prec05deg => 2,prec01deg => 3,'prec0-1deg' => 4,'prec0-05deg' => 5,'prec0-01deg' => 6,'prec0-0125deg' => 7}},mandatory},{<<115,112,101,101,100>>,{'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}},mandatory},{<<116,104,114,111,116,116,108,101>>,{'ENUMERATED',#{unavailable => 0,prec10percent => 1,prec1percent => 2,'prec0-5percent' => 3}},mandatory}]};
typeinfo('SpeedLimitList') ->
  {sof,{typeinfo,{'DSRC','RegulatorySpeedLimit'}}};
typeinfo('SpeedProfileMeasurementList') ->
  {sof,{'INTEGER',{0,31}}};
typeinfo('SpeedProfile') ->
  {sequence,'SpeedProfile',1,[{<<115,112,101,101,100,82,101,112,111,114,116,115>>,{typeinfo,{'DSRC','SpeedProfileMeasurementList'}},mandatory}]};
typeinfo('SupplementalVehicleExtensions') ->
  {sequence,'SupplementalVehicleExtensions',10,[{<<99,108,97,115,115,105,102,105,99,97,116,105,111,110>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<99,108,97,115,115,68,101,116,97,105,108,115>>,{typeinfo,{'DSRC','VehicleClassification'}},'OPTIONAL'},{<<118,101,104,105,99,108,101,68,97,116,97>>,{typeinfo,{'DSRC','VehicleData'}},'OPTIONAL'},{<<119,101,97,116,104,101,114,82,101,112,111,114,116>>,{typeinfo,{'DSRC','WeatherReport'}},'OPTIONAL'},{<<119,101,97,116,104,101,114,80,114,111,98,101>>,{typeinfo,{'DSRC','WeatherProbe'}},'OPTIONAL'},{<<111,98,115,116,97,99,108,101>>,{typeinfo,{'DSRC','ObstacleDetection'}},'OPTIONAL'},{<<115,116,97,116,117,115>>,{typeinfo,{'DSRC','DisabledVehicle'}},'OPTIONAL'},{<<115,112,101,101,100,80,114,111,102,105,108,101>>,{typeinfo,{'DSRC','SpeedProfile'}},'OPTIONAL'},{<<116,104,101,82,84,67,77>>,{typeinfo,{'DSRC','RTCMPackage'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SupplementalVehicleExtensions_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_61}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('TimeChangeDetails') ->
  {sequence,'TimeChangeDetails',6,[{<<115,116,97,114,116,84,105,109,101>>,{'INTEGER',{0,36001}},'OPTIONAL'},{<<109,105,110,69,110,100,84,105,109,101>>,{'INTEGER',{0,36001}},mandatory},{<<109,97,120,69,110,100,84,105,109,101>>,{'INTEGER',{0,36001}},'OPTIONAL'},{<<108,105,107,101,108,121,84,105,109,101>>,{'INTEGER',{0,36001}},'OPTIONAL'},{<<99,111,110,102,105,100,101,110,99,101>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<110,101,120,116,84,105,109,101>>,{'INTEGER',{0,36001}},'OPTIONAL'}]};
typeinfo('TrailerData') ->
  {sequence,'TrailerData',3,[{<<115,115,112,82,105,103,104,116,115>>,{'INTEGER',{0,31}},mandatory},{<<99,111,110,110,101,99,116,105,111,110>>,{typeinfo,{'DSRC','PivotPointDescription'}},mandatory},{<<117,110,105,116,115>>,{typeinfo,{'DSRC','TrailerUnitDescriptionList'}},mandatory}]};
typeinfo('TrailerHistoryPointList') ->
  {sof,{typeinfo,{'DSRC','TrailerHistoryPoint'}}};
typeinfo('TrailerHistoryPoint') ->
  {sequence,'TrailerHistoryPoint',5,[{<<112,105,118,111,116,65,110,103,108,101>>,{'INTEGER',{0,28800}},mandatory},{<<116,105,109,101,79,102,102,115,101,116>>,{'INTEGER',{1,65535}},mandatory},{<<112,111,115,105,116,105,111,110,79,102,102,115,101,116>>,{typeinfo,{'DSRC','Node-XY-24b'}},mandatory},{<<101,108,101,118,97,116,105,111,110,79,102,102,115,101,116>>,{'INTEGER',{-64,63}},'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,240}},'OPTIONAL'}]};
typeinfo('TrailerUnitDescriptionList') ->
  {sof,{typeinfo,{'DSRC','TrailerUnitDescription'}}};
typeinfo('TrailerUnitDescription') ->
  {sequence,'TrailerUnitDescription',13,[{<<105,115,68,111,108,108,121>>,'BOOLEAN',mandatory},{<<119,105,100,116,104>>,{'INTEGER',{0,1023}},mandatory},{<<108,101,110,103,116,104>>,{'INTEGER',{0,4095}},mandatory},{<<104,101,105,103,104,116>>,{'INTEGER',{0,127}},'OPTIONAL'},{<<109,97,115,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<98,117,109,112,101,114,72,101,105,103,104,116,115>>,{typeinfo,{'DSRC','BumperHeights'}},'OPTIONAL'},{<<99,101,110,116,101,114,79,102,71,114,97,118,105,116,121>>,{'INTEGER',{0,127}},'OPTIONAL'},{<<102,114,111,110,116,80,105,118,111,116>>,{typeinfo,{'DSRC','PivotPointDescription'}},mandatory},{<<114,101,97,114,80,105,118,111,116>>,{typeinfo,{'DSRC','PivotPointDescription'}},'OPTIONAL'},{<<114,101,97,114,87,104,101,101,108,79,102,102,115,101,116>>,{'INTEGER',{-2048,2047}},'OPTIONAL'},{<<112,111,115,105,116,105,111,110,79,102,102,115,101,116>>,{typeinfo,{'DSRC','Node-XY-24b'}},mandatory},{<<101,108,101,118,97,116,105,111,110,79,102,102,115,101,116>>,{'INTEGER',{-64,63}},'OPTIONAL'},{<<99,114,117,109,98,68,97,116,97>>,{typeinfo,{'DSRC','TrailerHistoryPointList'}},'OPTIONAL'}]};
typeinfo('TransmissionAndSpeed') ->
  {sequence,'TransmissionAndSpeed',2,[{<<116,114,97,110,115,109,105,115,115,111,110>>,{'ENUMERATED',#{neutral => 0,unavailable => 7,reserved1 => 4,park => 1,forwardGears => 2,reverseGears => 3,reserved2 => 5,reserved3 => 6}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory}]};
typeinfo('TravelerDataFrameList') ->
  {sof,{typeinfo,{'DSRC','TravelerDataFrame'}}};
typeinfo('TravelerDataFrame') ->
  {sequence,'TravelerDataFrame',13,[{<<115,115,112,84,105,109,82,105,103,104,116,115>>,{'INTEGER',{0,31}},mandatory},{<<102,114,97,109,101,84,121,112,101>>,{'ENUMERATED_EXT',#{unknown => 0,advisory => 1,roadSignage => 2,commercialSignage => 3}},mandatory},{<<109,115,103,73,100>>,{choice,#{<<102,117,114,116,104,101,114,73,110,102,111,73,68>> => octet_string,<<114,111,97,100,83,105,103,110,73,68>> => {typeinfo,{'DSRC','RoadSignID'}}}},mandatory},{<<115,116,97,114,116,89,101,97,114>>,{'INTEGER',{0,4095}},'OPTIONAL'},{<<115,116,97,114,116,84,105,109,101>>,{'INTEGER',{0,527040}},mandatory},{<<100,117,114,97,116,111,110,84,105,109,101>>,{'INTEGER',{0,32000}},mandatory},{<<112,114,105,111,114,105,116,121>>,{'INTEGER',{0,7}},mandatory},{<<115,115,112,76,111,99,97,116,105,111,110,82,105,103,104,116,115>>,{'INTEGER',{0,31}},mandatory},{<<114,101,103,105,111,110,115>>,{sof,{typeinfo,{'DSRC','GeographicalPath'}}},mandatory},{<<115,115,112,77,115,103,82,105,103,104,116,115,49>>,{'INTEGER',{0,31}},mandatory},{<<115,115,112,77,115,103,82,105,103,104,116,115,50>>,{'INTEGER',{0,31}},mandatory},{<<99,111,110,116,101,110,116>>,{choice,#{<<97,100,118,105,115,111,114,121>> => {typeinfo,{'ITIS','ITIScodesAndText'}},<<101,120,105,116,83,101,114,118,105,99,101>> => {typeinfo,{'DSRC','ExitService'}},<<103,101,110,101,114,105,99,83,105,103,110>> => {typeinfo,{'DSRC','GenericSignage'}},<<115,112,101,101,100,76,105,109,105,116>> => {typeinfo,{'DSRC','SpeedLimit'}},<<119,111,114,107,90,111,110,101>> => {typeinfo,{'DSRC','WorkZone'}}}},mandatory},{<<117,114,108>>,string,'OPTIONAL'}]};
typeinfo('ValidRegion') ->
  {sequence,'ValidRegion',3,[{<<100,105,114,101,99,116,105,111,110>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},mandatory},{<<101,120,116,101,110,116>>,{'ENUMERATED',#{useInstantlyOnly => 0,useFor3meters => 1,useFor10meters => 2,useFor50meters => 3,useFor100meters => 4,useFor500meters => 5,useFor1000meters => 6,useFor5000meters => 7,useFor10000meters => 8,useFor50000meters => 9,useFor100000meters => 10,useFor500000meters => 11,useFor1000000meters => 12,useFor5000000meters => 13,useFor10000000meters => 14,forever => 15}},'OPTIONAL'},{<<97,114,101,97>>,{choice,#{<<99,105,114,99,108,101>> => {typeinfo,{'DSRC','Circle'}},<<114,101,103,105,111,110,80,111,105,110,116,83,101,116>> => {typeinfo,{'DSRC','RegionPointSet'}},<<115,104,97,112,101,80,111,105,110,116,83,101,116>> => {typeinfo,{'DSRC','ShapePointSet'}}}},mandatory}]};
typeinfo('VehicleClassification') ->
  {sequence,'VehicleClassification',9,[{<<107,101,121,84,121,112,101>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<114,111,108,101>>,{'ENUMERATED_EXT',#{dot => 15,emergency => 6,transit => 16,basicVehicle => 0,publicTransport => 1,specialTransport => 2,dangerousGoods => 3,roadWork => 4,roadRescue => 5,safetyCar => 7,'none-unknown' => 8,truck => 9,motorcycle => 10,roadSideSource => 11,police => 12,fire => 13,ambulance => 14,slowMoving => 17,stopNgo => 18,cyclist => 19,pedestrian => 20,nonMotorized => 21,military => 22}},'OPTIONAL'},{<<105,115,111,51,56,56,51>>,{'INTEGER',{0,100}},'OPTIONAL'},{<<104,112,109,115,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},'OPTIONAL'},{<<118,101,104,105,99,108,101,84,121,112,101>>,{'ENUMERATED_EXT',#{'exceptional-loads' => 9237,'vehicles-with-semi-trailers' => 9231,'vehicles-with-parking-permits' => 9244,'lPG-vehicles' => 9249,'vehicles-with-trailers' => 9225,'military-convoys' => 9250,'vehicles-without-catalytic-converters' => 9246,'abnormal-loads' => 9238,'vehicles-with-even-numbered-license-plates' => 9242,'military-vehicles' => 9251,motorcycles => 9219,'wide-vehicles' => 9234,'gas-powered-vehicles' => 9247,'hazardous-loads' => 9236,'delivery-vehicles' => 9241,'diesel-powered-vehicles' => 9248,'vehicles-with-double-trailers' => 9232,trucks => 9227,'all-vehicles' => 9217,'vehicles-with-odd-numbered-license-plates' => 9243,'heavy-vehicles' => 9226,'maintenance-vehicles' => 9240,'light-vehicles' => 9221,buses => 9228,cars => 9220,bicycles => 9218,'high-profile-vehicles' => 9233,'long-vehicles' => 9235,'vehicles-with-catalytic-converters' => 9245,'cars-with-trailers' => 9223,'school-buses' => 9230,'articulated-buses' => 9229,convoys => 9239,'cars-and-light-vehicles' => 9222,'cars-with-recreational-trailers' => 9224}},'OPTIONAL'},{<<114,101,115,112,111,110,115,101,69,113,117,105,112>>,{'ENUMERATED_EXT',#{aircraft => 9988,'flatbed-tow' => 10114,'high-angle-rescue' => 10057,'heavy-tow' => 10092,'track-laying-vehicle' => 10105,'support-equipment' => 9990,'light-and-air-unit' => 10046,'support-apparatus-other' => 10044,'medical-rescue-unit' => 9991,'aircraft-fixed-wing-tanker' => 10025,'tanker-or-tender' => 10008,'dozer-or-plow' => 10005,'bLS-unit' => 10059,'construction-vehicle' => 10088,'ground-fire-suppression' => 9985,'salvage-vehicle' => 10100,'resurfacing-vehicle' => 10097,'rotary-snow-blower' => 10111,'light-tow' => 10094,'marine-equipment-other' => 10034,'supervisor-vehicle' => 10109,'truck-or-aerial' => 9996,helitanker => 10026,tractor => 10006,'privately-owned-vehicle' => 10083,'sand-truck' => 10101,'hedge-cutting-machines' => 10093,'type-ii-hand-crew' => 10079,'aircraft-rescue-firefighting' => 10001,'medical-rescue-unit-other' => 10054,'grass-cutting-machines' => 10090,'heavy-ground-equipment-other' => 10004,'other-apparatus-resource' => 10084,'road-sweeper' => 10098,other => 9993,'dump-truck' => 10108,'steam-roller' => 10103,'urban-search-rescue-unit' => 10056,'farm-tractor' => 10089,engine => 9995,'swat-team-van' => 10104,'snow-blower' => 10110,'unknown-vehicle' => 10106,'heavy-ground-equipment' => 9986,'white-lining-vehicle' => 10107,'refuse-collection-vehicle' => 10096,ambulance => 10085,'boat-no-pump' => 10036,'steam-truck' => 10113,helicopter => 10027,'mobile-command-post' => 10075,'roadside-litter-collection-crews' => 10099,'crash-fire-rescue' => 10058,'breathing-apparatus-support' => 10045,'road-grader' => 10112,'tanker-pumper-combination' => 9998,'ground-fire-suppression-other' => 9994,'combine-harvester' => 10087,'brush-truck' => 10000,'type-i-hand-crew' => 10078,'hAZMAT-containment-tow' => 10091,snowplow => 10102,'mobile-crane' => 10095,'fire-boat-with-pump' => 10035,'hAZMAT-unit' => 10077,'aLS-unit' => 10060,'bomb-squad-van' => 10086,'aircraft-other' => 10024,'chief-officer-car' => 10076,quint => 9997,'rescue-unit' => 10055,'marine-equipment' => 9989}},'OPTIONAL'},{<<114,101,115,112,111,110,100,101,114,84,121,112,101>>,{'ENUMERATED_EXT',#{'emergency-vehicle-units' => 9729,'federal-law-enforcement-units' => 9730,'state-police-units' => 9731,'county-police-units' => 9732,'local-police-units' => 9733,'ambulance-units' => 9734,'rescue-units' => 9735,'fire-units' => 9736,'hAZMAT-units' => 9737,'light-tow-unit' => 9738,'heavy-tow-unit' => 9739,'freeway-service-patrols' => 9740,'transportation-response-units' => 9741,'private-contractor-response-units' => 9742}},'OPTIONAL'},{<<102,117,101,108,84,121,112,101>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'VehicleClassification_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_22}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('VehicleData') ->
  {sequence,'VehicleData',4,[{<<104,101,105,103,104,116>>,{'INTEGER',{0,127}},'OPTIONAL'},{<<98,117,109,112,101,114,115>>,{typeinfo,{'DSRC','BumperHeights'}},'OPTIONAL'},{<<109,97,115,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<116,114,97,105,108,101,114,87,101,105,103,104,116>>,{'INTEGER',{0,64255}},'OPTIONAL'}]};
typeinfo('VehicleIdent') ->
  {sequence,'VehicleIdent',6,[{<<110,97,109,101>>,string,'OPTIONAL'},{<<118,105,110>>,octet_string,'OPTIONAL'},{<<111,119,110,101,114,67,111,100,101>>,string,'OPTIONAL'},{<<105,100>>,{typeinfo,{'DSRC','VehicleID'}},'OPTIONAL'},{<<118,101,104,105,99,108,101,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},'OPTIONAL'},{<<118,101,104,105,99,108,101,67,108,97,115,115>>,{choice,#{<<114,69,113,117,105,112>> => {'ENUMERATED_EXT',#{aircraft => 9988,'flatbed-tow' => 10114,'high-angle-rescue' => 10057,'heavy-tow' => 10092,'track-laying-vehicle' => 10105,'support-equipment' => 9990,'light-and-air-unit' => 10046,'support-apparatus-other' => 10044,'medical-rescue-unit' => 9991,'aircraft-fixed-wing-tanker' => 10025,'tanker-or-tender' => 10008,'dozer-or-plow' => 10005,'bLS-unit' => 10059,'construction-vehicle' => 10088,'ground-fire-suppression' => 9985,'salvage-vehicle' => 10100,'resurfacing-vehicle' => 10097,'rotary-snow-blower' => 10111,'light-tow' => 10094,'marine-equipment-other' => 10034,'supervisor-vehicle' => 10109,'truck-or-aerial' => 9996,helitanker => 10026,tractor => 10006,'privately-owned-vehicle' => 10083,'sand-truck' => 10101,'hedge-cutting-machines' => 10093,'type-ii-hand-crew' => 10079,'aircraft-rescue-firefighting' => 10001,'medical-rescue-unit-other' => 10054,'grass-cutting-machines' => 10090,'heavy-ground-equipment-other' => 10004,'other-apparatus-resource' => 10084,'road-sweeper' => 10098,other => 9993,'dump-truck' => 10108,'steam-roller' => 10103,'urban-search-rescue-unit' => 10056,'farm-tractor' => 10089,engine => 9995,'swat-team-van' => 10104,'snow-blower' => 10110,'unknown-vehicle' => 10106,'heavy-ground-equipment' => 9986,'white-lining-vehicle' => 10107,'refuse-collection-vehicle' => 10096,ambulance => 10085,'boat-no-pump' => 10036,'steam-truck' => 10113,helicopter => 10027,'mobile-command-post' => 10075,'roadside-litter-collection-crews' => 10099,'crash-fire-rescue' => 10058,'breathing-apparatus-support' => 10045,'road-grader' => 10112,'tanker-pumper-combination' => 9998,'ground-fire-suppression-other' => 9994,'combine-harvester' => 10087,'brush-truck' => 10000,'type-i-hand-crew' => 10078,'hAZMAT-containment-tow' => 10091,snowplow => 10102,'mobile-crane' => 10095,'fire-boat-with-pump' => 10035,'hAZMAT-unit' => 10077,'aLS-unit' => 10060,'bomb-squad-van' => 10086,'aircraft-other' => 10024,'chief-officer-car' => 10076,quint => 9997,'rescue-unit' => 10055,'marine-equipment' => 9989}},<<114,71,114,111,117,112>> => {'ENUMERATED_EXT',#{'emergency-vehicle-units' => 9729,'federal-law-enforcement-units' => 9730,'state-police-units' => 9731,'county-police-units' => 9732,'local-police-units' => 9733,'ambulance-units' => 9734,'rescue-units' => 9735,'fire-units' => 9736,'hAZMAT-units' => 9737,'light-tow-unit' => 9738,'heavy-tow-unit' => 9739,'freeway-service-patrols' => 9740,'transportation-response-units' => 9741,'private-contractor-response-units' => 9742}},<<118,71,114,111,117,112>> => {'ENUMERATED_EXT',#{'exceptional-loads' => 9237,'vehicles-with-semi-trailers' => 9231,'vehicles-with-parking-permits' => 9244,'lPG-vehicles' => 9249,'vehicles-with-trailers' => 9225,'military-convoys' => 9250,'vehicles-without-catalytic-converters' => 9246,'abnormal-loads' => 9238,'vehicles-with-even-numbered-license-plates' => 9242,'military-vehicles' => 9251,motorcycles => 9219,'wide-vehicles' => 9234,'gas-powered-vehicles' => 9247,'hazardous-loads' => 9236,'delivery-vehicles' => 9241,'diesel-powered-vehicles' => 9248,'vehicles-with-double-trailers' => 9232,trucks => 9227,'all-vehicles' => 9217,'vehicles-with-odd-numbered-license-plates' => 9243,'heavy-vehicles' => 9226,'maintenance-vehicles' => 9240,'light-vehicles' => 9221,buses => 9228,cars => 9220,bicycles => 9218,'high-profile-vehicles' => 9233,'long-vehicles' => 9235,'vehicles-with-catalytic-converters' => 9245,'cars-with-trailers' => 9223,'school-buses' => 9230,'articulated-buses' => 9229,convoys => 9239,'cars-and-light-vehicles' => 9222,'cars-with-recreational-trailers' => 9224}}}},'OPTIONAL'}]};
typeinfo('VehicleID') ->
  {choice,#{<<101,110,116,105,116,121,73,68>> => octet_string,<<115,116,97,116,105,111,110,73,68>> => {'INTEGER',{0,4294967295}}}};
typeinfo('VehicleSafetyExtensions') ->
  {sequence,'VehicleSafetyExtensions',4,[{<<101,118,101,110,116,115>>,{bit_string_nnl,[{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]},'OPTIONAL'},{<<112,97,116,104,72,105,115,116,111,114,121>>,{typeinfo,{'DSRC','PathHistory'}},'OPTIONAL'},{<<112,97,116,104,80,114,101,100,105,99,116,105,111,110>>,{typeinfo,{'DSRC','PathPrediction'}},'OPTIONAL'},{<<108,105,103,104,116,115>>,{bit_string_nnl,[{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]},'OPTIONAL'}]};
typeinfo('VehicleSize') ->
  {sequence,'VehicleSize',2,[{<<119,105,100,116,104>>,{'INTEGER',{0,1023}},mandatory},{<<108,101,110,103,116,104>>,{'INTEGER',{0,4095}},mandatory}]};
typeinfo('VehicleStatusRequest') ->
  {sequence,'VehicleStatusRequest',5,[{<<100,97,116,97,84,121,112,101>>,{'ENUMERATED_EXT',#{abs => 6,unknown => 0,yaw => 20,brakes => 3,vehicle => 26,obDist => 18,obDirect => 19,dateTime => 22,lights => 1,wipers => 2,airTemp => 9,steering => 10,accel4way => 16,vertAccelThres => 11,yawRateCon => 21,hozAccelCon => 15,confidenceSet => 17,fullPos => 23,speedHeadC => 27,speedC => 28,stab => 4,trac => 5,sunS => 7,rainS => 8,vertAccel => 12,hozAccelLong => 13,hozAccelLat => 14,position2D => 24,position3D => 25}},mandatory},{<<115,117,98,84,121,112,101>>,{'INTEGER',{1,15}},'OPTIONAL'},{<<115,101,110,100,79,110,76,101,115,115,84,104,101,110,86,97,108,117,101>>,{'INTEGER',{-32767,32767}},'OPTIONAL'},{<<115,101,110,100,79,110,77,111,114,101,84,104,101,110,86,97,108,117,101>>,{'INTEGER',{-32767,32767}},'OPTIONAL'},{<<115,101,110,100,65,108,108>>,'BOOLEAN','OPTIONAL'}]};
typeinfo('VehicleStatusRequestList') ->
  {sof,{typeinfo,{'DSRC','VehicleStatusRequest'}}};
typeinfo('VehicleStatus') ->
  {sequence,'VehicleStatus',22,[{<<108,105,103,104,116,115>>,{bit_string_nnl,[{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]},'OPTIONAL'},{<<108,105,103,104,116,66,97,114>>,{'ENUMERATED',#{unavailable => 0,notInUse => 1,inUse => 2,yellowCautionLights => 3,schooldBusLights => 4,arrowSignsActive => 5,slowMovingVehicle => 6,freqStops => 7}},'OPTIONAL'},{<<119,105,112,101,114,115>>,{typeinfo,{'DSRC','WiperSet'}},'OPTIONAL'},{<<98,114,97,107,101,83,116,97,116,117,115>>,{typeinfo,{'DSRC','BrakeSystemStatus'}},'OPTIONAL'},{<<98,114,97,107,101,80,114,101,115,115,117,114,101>>,{'ENUMERATED',#{unavailable => 0,minPressure => 1,'bkLvl-2' => 2,'bkLvl-3' => 3,'bkLvl-4' => 4,'bkLvl-5' => 5,'bkLvl-6' => 6,'bkLvl-7' => 7,'bkLvl-8' => 8,'bkLvl-9' => 9,'bkLvl-10' => 10,'bkLvl-11' => 11,'bkLvl-12' => 12,'bkLvl-13' => 13,'bkLvl-14' => 14,maxPressure => 15}},'OPTIONAL'},{<<114,111,97,100,70,114,105,99,116,105,111,110>>,{'INTEGER',{0,50}},'OPTIONAL'},{<<115,117,110,68,97,116,97>>,{'INTEGER',{0,1000}},'OPTIONAL'},{<<114,97,105,110,68,97,116,97>>,{'ENUMERATED',#{none => 0,lightMist => 1,heavyMist => 2,lightRainOrDrizzle => 3,rain => 4,moderateRain => 5,heavyRain => 6,heavyDownpour => 7}},'OPTIONAL'},{<<97,105,114,84,101,109,112>>,{'INTEGER',{0,191}},'OPTIONAL'},{<<97,105,114,80,114,101,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<115,116,101,101,114,105,110,103>>,{sequence,'VehicleStatus_steering',4,[{<<97,110,103,108,101>>,{'INTEGER',{-126,127}},mandatory},{<<99,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}},'OPTIONAL'},{<<114,97,116,101>>,{'INTEGER',{-127,127}},'OPTIONAL'},{<<119,104,101,101,108,115>>,{'INTEGER',{-128,127}},'OPTIONAL'}]},'OPTIONAL'},{<<97,99,99,101,108,83,101,116,115>>,{sequence,'VehicleStatus_accelSets',5,[{<<97,99,99,101,108,52,119,97,121>>,{typeinfo,{'DSRC','AccelerationSet4Way'}},'OPTIONAL'},{<<118,101,114,116,65,99,99,101,108,84,104,114,101,115>>,{{bit_string_nnl,[{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5},'OPTIONAL'},{<<121,97,119,82,97,116,101,67,111,110>>,{'ENUMERATED',#{unavailable => 0,'degSec-100-00' => 1,'degSec-010-00' => 2,'degSec-005-00' => 3,'degSec-001-00' => 4,'degSec-000-10' => 5,'degSec-000-05' => 6,'degSec-000-01' => 7}},'OPTIONAL'},{<<104,111,122,65,99,99,101,108,67,111,110>>,{'ENUMERATED',#{unavailable => 0,'accl-100-00' => 1,'accl-010-00' => 2,'accl-005-00' => 3,'accl-001-00' => 4,'accl-000-10' => 5,'accl-000-05' => 6,'accl-000-01' => 7}},'OPTIONAL'},{<<99,111,110,102,105,100,101,110,99,101,83,101,116>>,{typeinfo,{'DSRC','ConfidenceSet'}},'OPTIONAL'}]},'OPTIONAL'},{<<111,98,106,101,99,116>>,{sequence,'VehicleStatus_object',3,[{<<111,98,68,105,115,116>>,{'INTEGER',{0,32767}},mandatory},{<<111,98,68,105,114,101,99,116>>,{'INTEGER',{0,28800}},mandatory},{<<100,97,116,101,84,105,109,101>>,{typeinfo,{'DSRC','DDateTime'}},mandatory}]},'OPTIONAL'},{<<102,117,108,108,80,111,115>>,{typeinfo,{'DSRC','FullPositionVector'}},'OPTIONAL'},{<<116,104,114,111,116,116,108,101,80,111,115>>,{'INTEGER',{0,200}},'OPTIONAL'},{<<115,112,101,101,100,72,101,97,100,67>>,{typeinfo,{'DSRC','SpeedandHeadingandThrottleConfidence'}},'OPTIONAL'},{<<115,112,101,101,100,67>>,{'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}},'OPTIONAL'},{<<118,101,104,105,99,108,101,68,97,116,97>>,{sequence,'VehicleStatus_vehicleData',5,[{<<104,101,105,103,104,116>>,{'INTEGER',{0,127}},mandatory},{<<98,117,109,112,101,114,115>>,{typeinfo,{'DSRC','BumperHeights'}},mandatory},{<<109,97,115,115>>,{'INTEGER',{0,255}},mandatory},{<<116,114,97,105,108,101,114,87,101,105,103,104,116>>,{'INTEGER',{0,64255}},mandatory},{<<116,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},mandatory}]},'OPTIONAL'},{<<118,101,104,105,99,108,101,73,100,101,110,116>>,{typeinfo,{'DSRC','VehicleIdent'}},'OPTIONAL'},{<<106,49,57,51,57,100,97,116,97>>,{typeinfo,{'DSRC','J1939data'}},'OPTIONAL'},{<<119,101,97,116,104,101,114,82,101,112,111,114,116>>,{sequence,'VehicleStatus_weatherReport',5,[{<<105,115,82,97,105,110,105,110,103>>,{'ENUMERATED',#{error => 3,precip => 1,noPrecip => 2}},mandatory},{<<114,97,105,110,82,97,116,101>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<112,114,101,99,105,112,83,105,116,117,97,116,105,111,110>>,{'ENUMERATED',#{other => 1,unknown => 2,noPrecipitation => 3,unidentifiedSlight => 4,unidentifiedModerate => 5,unidentifiedHeavy => 6,snowSlight => 7,snowModerate => 8,snowHeavy => 9,rainSlight => 10,rainModerate => 11,rainHeavy => 12,frozenPrecipitationSlight => 13,frozenPrecipitationModerate => 14,frozenPrecipitationHeavy => 15}},'OPTIONAL'},{<<115,111,108,97,114,82,97,100,105,97,116,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<102,114,105,99,116,105,111,110>>,{'INTEGER',{0,101}},'OPTIONAL'}]},'OPTIONAL'},{<<103,110,115,115,83,116,97,116,117,115>>,{{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8},'OPTIONAL'}]};
typeinfo('VerticalOffset') ->
  {choice,#{<<101,108,101,118,97,116,105,111,110>> => {'INTEGER',{-4096,61439}},<<111,102,102,115,101,116,49>> => {'INTEGER',{-64,63}},<<111,102,102,115,101,116,50>> => {'INTEGER',{-128,127}},<<111,102,102,115,101,116,51>> => {'INTEGER',{-256,255}},<<111,102,102,115,101,116,52>> => {'INTEGER',{-512,511}},<<111,102,102,115,101,116,53>> => {'INTEGER',{-1024,1023}},<<111,102,102,115,101,116,54>> => {'INTEGER',{-2048,2047}},<<114,101,103,105,111,110,97,108>> => {sequence,'VerticalOffset_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,125,{'Externaltypereference',undefined,'DSRC',internal_object_set_argument_62}},[{outermost,[{'Externalvaluereference',125,'DSRC',regionId}]}]}},mandatory}]}}};
typeinfo('WeatherProbe') ->
  {sequence,'WeatherProbe',3,[{<<97,105,114,84,101,109,112>>,{'INTEGER',{0,191}},'OPTIONAL'},{<<97,105,114,80,114,101,115,115,117,114,101>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<114,97,105,110,82,97,116,101,115>>,{typeinfo,{'DSRC','WiperSet'}},'OPTIONAL'}]};
typeinfo('WeatherReport') ->
  {sequence,'WeatherReport',6,[{<<105,115,82,97,105,110,105,110,103>>,{'ENUMERATED',#{error => 3,precip => 1,noPrecip => 2}},mandatory},{<<114,97,105,110,82,97,116,101>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<112,114,101,99,105,112,83,105,116,117,97,116,105,111,110>>,{'ENUMERATED',#{other => 1,unknown => 2,noPrecipitation => 3,unidentifiedSlight => 4,unidentifiedModerate => 5,unidentifiedHeavy => 6,snowSlight => 7,snowModerate => 8,snowHeavy => 9,rainSlight => 10,rainModerate => 11,rainHeavy => 12,frozenPrecipitationSlight => 13,frozenPrecipitationModerate => 14,frozenPrecipitationHeavy => 15}},'OPTIONAL'},{<<115,111,108,97,114,82,97,100,105,97,116,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<102,114,105,99,116,105,111,110>>,{'INTEGER',{0,101}},'OPTIONAL'},{<<114,111,97,100,70,114,105,99,116,105,111,110>>,{'INTEGER',{0,50}},'OPTIONAL'}]};
typeinfo('WiperSet') ->
  {sequence,'WiperSet',4,[{<<115,116,97,116,117,115,70,114,111,110,116>>,{'ENUMERATED_EXT',#{high => 4,low => 3,off => 1,unavailable => 0,intermittent => 2,washerInUse => 5,automaticPresent => 6}},mandatory},{<<114,97,116,101,70,114,111,110,116>>,{'INTEGER',{0,127}},mandatory},{<<115,116,97,116,117,115,82,101,97,114>>,{'ENUMERATED_EXT',#{high => 4,low => 3,off => 1,unavailable => 0,intermittent => 2,washerInUse => 5,automaticPresent => 6}},'OPTIONAL'},{<<114,97,116,101,82,101,97,114>>,{'INTEGER',{0,127}},'OPTIONAL'}]};
typeinfo('Acceleration') ->
  {'INTEGER',{-2000,2001}};
typeinfo('AccelerationConfidence') ->
  {'ENUMERATED',#{unavailable => 0,'accl-100-00' => 1,'accl-010-00' => 2,'accl-005-00' => 3,'accl-001-00' => 4,'accl-000-10' => 5,'accl-000-05' => 6,'accl-000-01' => 7}};
typeinfo('AdvisorySpeedType') ->
  {'ENUMERATED_EXT',#{none => 0,greenwave => 1,ecoDrive => 2,transit => 3}};
typeinfo('AllowedManeuvers') ->
  {{bit_string_nnl,[{maneuverStraightAllowed,0},{maneuverLeftAllowed,1},{maneuverRightAllowed,2},{maneuverUTurnAllowed,3},{maneuverLeftTurnOnRedAllowed,4},{maneuverRightTurnOnRedAllowed,5},{maneuverLaneChangeAllowed,6},{maneuverNoStoppingAllowed,7},{yieldAllwaysRequired,8},{goWithHalt,9},{caution,10},{reserved1,11}]},12};
typeinfo('AmbientAirPressure') ->
  {'INTEGER',{0,255}};
typeinfo('AmbientAirTemperature') ->
  {'INTEGER',{0,191}};
typeinfo('Angle') ->
  {'INTEGER',{0,28800}};
typeinfo('AnimalPropelledType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,animalMounted => 2,animalDrawnCarriage => 3}};
typeinfo('AnimalType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,serviceUse => 1,pet => 2,farm => 3}};
typeinfo('AntiLockBrakeStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}};
typeinfo('ApproachID') ->
  {'INTEGER',{0,15}};
typeinfo('Attachment') ->
  {'ENUMERATED_EXT',#{unavailable => 0,pet => 6,stroller => 1,bicycleTrailer => 2,cart => 3,wheelchair => 4,otherWalkAssistAttachments => 5}};
typeinfo('AttachmentRadius') ->
  {'INTEGER',{0,200}};
typeinfo('AuxiliaryBrakeStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,reserved => 3}};
typeinfo('BasicVehicleClass') ->
  {'INTEGER',{0,255}};
typeinfo('BasicVehicleRole') ->
  {'ENUMERATED_EXT',#{dot => 15,emergency => 6,transit => 16,basicVehicle => 0,publicTransport => 1,specialTransport => 2,dangerousGoods => 3,roadWork => 4,roadRescue => 5,safetyCar => 7,'none-unknown' => 8,truck => 9,motorcycle => 10,roadSideSource => 11,police => 12,fire => 13,ambulance => 14,slowMoving => 17,stopNgo => 18,cyclist => 19,pedestrian => 20,nonMotorized => 21,military => 22}};
typeinfo('BrakeAppliedPressure') ->
  {'ENUMERATED',#{unavailable => 0,minPressure => 1,'bkLvl-2' => 2,'bkLvl-3' => 3,'bkLvl-4' => 4,'bkLvl-5' => 5,'bkLvl-6' => 6,'bkLvl-7' => 7,'bkLvl-8' => 8,'bkLvl-9' => 9,'bkLvl-10' => 10,'bkLvl-11' => 11,'bkLvl-12' => 12,'bkLvl-13' => 13,'bkLvl-14' => 14,maxPressure => 15}};
typeinfo('BrakeAppliedStatus') ->
  {{bit_string_nnl,[{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5};
typeinfo('BrakeBoostApplied') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0}};
typeinfo('BumperHeight') ->
  {'INTEGER',{0,127}};
typeinfo('CoarseHeading') ->
  {'INTEGER',{0,240}};
typeinfo('CodeWord') ->
  octet_string;
typeinfo('CoefficientOfFriction') ->
  {'INTEGER',{0,50}};
typeinfo('Confidence') ->
  {'INTEGER',{0,200}};
typeinfo('Count') ->
  {'INTEGER',{0,32}};
typeinfo('DDay') ->
  {'INTEGER',{0,31}};
typeinfo('DeltaAngle') ->
  {'INTEGER',{-150,150}};
typeinfo('DeltaTime') ->
  {'INTEGER',{-122,121}};
typeinfo('DescriptiveName') ->
  string;
typeinfo('DHour') ->
  {'INTEGER',{0,31}};
typeinfo('DirectionOfUse') ->
  {'ENUMERATED',#{reverse => 2,both => 3,unavailable => 0,forward => 1}};
typeinfo('DistanceUnits') ->
  {'ENUMERATED',#{centimeter => 0,'cm2-5' => 1,decimeter => 2,meter => 3,kilometer => 4,foot => 5,yard => 6,mile => 7}};
typeinfo('DMinute') ->
  {'INTEGER',{0,60}};
typeinfo('DMonth') ->
  {'INTEGER',{0,12}};
typeinfo('DOffset') ->
  {'INTEGER',{-840,840}};
typeinfo('DrivenLineOffsetLg') ->
  {'INTEGER',{-32767,32767}};
typeinfo('DrivenLineOffsetSm') ->
  {'INTEGER',{-2047,2047}};
typeinfo('DrivingWheelAngle') ->
  {'INTEGER',{-128,127}};
typeinfo('DSecond') ->
  {'INTEGER',{0,65535}};
typeinfo('DSRCmsgID') ->
  {'INTEGER',{0,32767}};
typeinfo('Duration') ->
  {'INTEGER',{0,3600}};
typeinfo('DYear') ->
  {'INTEGER',{0,4095}};
typeinfo('ElevationConfidence') ->
  {'ENUMERATED',#{unavailable => 0,'elev-500-00' => 1,'elev-200-00' => 2,'elev-100-00' => 3,'elev-050-00' => 4,'elev-020-00' => 5,'elev-010-00' => 6,'elev-005-00' => 7,'elev-002-00' => 8,'elev-001-00' => 9,'elev-000-50' => 10,'elev-000-20' => 11,'elev-000-10' => 12,'elev-000-05' => 13,'elev-000-02' => 14,'elev-000-01' => 15}};
typeinfo('Elevation') ->
  {'INTEGER',{-4096,61439}};
typeinfo('Extent') ->
  {'ENUMERATED',#{useInstantlyOnly => 0,useFor3meters => 1,useFor10meters => 2,useFor50meters => 3,useFor100meters => 4,useFor500meters => 5,useFor1000meters => 6,useFor5000meters => 7,useFor10000meters => 8,useFor50000meters => 9,useFor100000meters => 10,useFor500000meters => 11,useFor1000000meters => 12,useFor5000000meters => 13,useFor10000000meters => 14,forever => 15}};
typeinfo('ExteriorLights') ->
  {bit_string_nnl,[{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]};
typeinfo('FuelType') ->
  {'INTEGER',{0,15}};
typeinfo('FurtherInfoID') ->
  octet_string;
typeinfo('GNSSstatus') ->
  {{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8};
typeinfo('GrossDistance') ->
  {'INTEGER',{0,1023}};
typeinfo('GrossSpeed') ->
  {'INTEGER',{0,31}};
typeinfo('HeadingConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec10deg => 1,prec05deg => 2,prec01deg => 3,'prec0-1deg' => 4,'prec0-05deg' => 5,'prec0-01deg' => 6,'prec0-0125deg' => 7}};
typeinfo('Heading') ->
  {'INTEGER',{0,28800}};
typeinfo('HeadingSlice') ->
  {{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16};
typeinfo('IntersectionID') ->
  {'INTEGER',{0,65535}};
typeinfo('IntersectionStatusObject') ->
  {{bit_string_nnl,[{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]},16};
typeinfo('IsDolly') ->
  'BOOLEAN';
typeinfo('Iso3833VehicleType') ->
  {'INTEGER',{0,100}};
typeinfo('ITIStextPhrase') ->
  string;
typeinfo('AxleLocation') ->
  {'INTEGER',{0,255}};
typeinfo('AxleWeight') ->
  {'INTEGER',{0,64255}};
typeinfo('CargoWeight') ->
  {'INTEGER',{0,64255}};
typeinfo('DriveAxleLiftAirPressure') ->
  {'INTEGER',{0,1000}};
typeinfo('DriveAxleLocation') ->
  {'INTEGER',{0,255}};
typeinfo('DriveAxleLubePressure') ->
  {'INTEGER',{0,250}};
typeinfo('DriveAxleTemperature') ->
  {'INTEGER',{-40,210}};
typeinfo('SteeringAxleLubePressure') ->
  {'INTEGER',{0,250}};
typeinfo('SteeringAxleTemperature') ->
  {'INTEGER',{-40,210}};
typeinfo('TireLeakageRate') ->
  {'INTEGER',{0,64255}};
typeinfo('TireLocation') ->
  {'INTEGER',{0,255}};
typeinfo('TirePressureThresholdDetection') ->
  {'ENUMERATED',#{undefined => 5,noData => 0,overPressure => 1,noWarningPressure => 2,underPressure => 3,extremeUnderPressure => 4,errorIndicator => 6,notAvailable => 7}};
typeinfo('TirePressure') ->
  {'INTEGER',{0,250}};
typeinfo('TireTemp') ->
  {'INTEGER',{-8736,55519}};
typeinfo('TrailerWeight') ->
  {'INTEGER',{0,64255}};
typeinfo('WheelEndElectFault') ->
  {'ENUMERATED',#{isOk => 0,isNotDefined => 1,isError => 2,isNotSupported => 3}};
typeinfo('WheelSensorStatus') ->
  {'ENUMERATED',#{off => 0,on => 1,notDefined => 2,notSupported => 3}};
typeinfo('LaneAttributes-Barrier') ->
  {{bit_string_nnl,[{'median-RevocableLane',0},{median,1},{whiteLineHashing,2},{stripedLines,3},{doubleStripedLines,4},{trafficCones,5},{constructionBarrier,6},{trafficChannels,7},{lowCurbs,8},{highCurbs,9}]},16};
typeinfo('LaneAttributes-Bike') ->
  {{bit_string_nnl,[{bikeRevocableLane,0},{pedestrianUseAllowed,1},{isBikeFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{isolatedByBarrier,5},{unsignalizedSegmentsPresent,6}]},16};
typeinfo('LaneAttributes-Crosswalk') ->
  {{bit_string_nnl,[{crosswalkRevocableLane,0},{bicyleUseAllowed,1},{isXwalkFlyOverLane,2},{fixedCycleTime,3},{biDirectionalCycleTimes,4},{hasPushToWalkButton,5},{audioSupport,6},{rfSignalRequestPresent,7},{unsignalizedSegmentsPresent,8}]},16};
typeinfo('LaneAttributes-Parking') ->
  {{bit_string_nnl,[{parkingRevocableLane,0},{parallelParkingInUse,1},{headInParkingInUse,2},{doNotParkZone,3},{parkingForBusUse,4},{parkingForTaxiUse,5},{noPublicParkingUse,6}]},16};
typeinfo('LaneAttributes-Sidewalk') ->
  {{bit_string_nnl,[{'sidewalk-RevocableLane',0},{bicyleUseAllowed,1},{isSidewalkFlyOverLane,2},{walkBikes,3}]},16};
typeinfo('LaneAttributes-Striping') ->
  {{bit_string_nnl,[{stripeToConnectingLanesRevocableLane,0},{stripeDrawOnLeft,1},{stripeDrawOnRight,2},{stripeToConnectingLanesLeft,3},{stripeToConnectingLanesRight,4},{stripeToConnectingLanesAhead,5}]},16};
typeinfo('LaneAttributes-TrackedVehicle') ->
  {{bit_string_nnl,[{'spec-RevocableLane',0},{'spec-commuterRailRoadTrack',1},{'spec-lightRailRoadTrack',2},{'spec-heavyRailRoadTrack',3},{'spec-otherRailType',4}]},16};
typeinfo('LaneAttributes-Vehicle') ->
  {bit_string_nnl,[{isVehicleRevocableLane,0},{isVehicleFlyOverLane,1},{hovLaneUseOnly,2},{restrictedToBusUse,3},{restrictedToTaxiUse,4},{restrictedFromPublicUse,5},{hasIRbeaconCoverage,6},{permissionOnRequest,7}]};
typeinfo('LaneConnectionID') ->
  {'INTEGER',{0,255}};
typeinfo('LaneDirection') ->
  {{bit_string_nnl,[{ingressPath,0},{egressPath,1}]},2};
typeinfo('LaneID') ->
  {'INTEGER',{0,255}};
typeinfo('LaneSharing') ->
  {{bit_string_nnl,[{overlappingLaneDescriptionProvided,0},{multipleLanesTreatedAsOneLane,1},{otherNonMotorizedTrafficTypes,2},{individualMotorizedVehicleTraffic,3},{busVehicleTraffic,4},{taxiVehicleTraffic,5},{pedestriansTraffic,6},{cyclistVehicleTraffic,7},{trackedVehicleTraffic,8},{pedestrianTraffic,9}]},10};
typeinfo('LaneWidth') ->
  {'INTEGER',{0,32767}};
typeinfo('Latitude') ->
  {'INTEGER',{-900000000,900000001}};
typeinfo('LayerID') ->
  {'INTEGER',{0,100}};
typeinfo('LayerType') ->
  {'ENUMERATED_EXT',#{none => 0,mixedContent => 1,generalMapData => 2,intersectionData => 3,curveData => 4,roadwaySectionData => 5,parkingAreaData => 6,sharedLaneData => 7}};
typeinfo('LightbarInUse') ->
  {'ENUMERATED',#{unavailable => 0,notInUse => 1,inUse => 2,yellowCautionLights => 3,schooldBusLights => 4,arrowSignsActive => 5,slowMovingVehicle => 6,freqStops => 7}};
typeinfo('Longitude') ->
  {'INTEGER',{-1799999999,1800000001}};
typeinfo('Location-quality') ->
  {'ENUMERATED',#{'loc-qual-bt1m' => 0,'loc-qual-bt5m' => 1,'loc-qual-bt12m' => 2,'loc-qual-bt50m' => 3,'loc-qual-bt125m' => 4,'loc-qual-bt500m' => 5,'loc-qual-bt1250m' => 6,'loc-qual-unknown' => 7}};
typeinfo('Location-tech') ->
  {'ENUMERATED_EXT',#{'loc-tech-unknown' => 0,'loc-tech-GNSS' => 1,'loc-tech-DGPS' => 2,'loc-tech-RTK' => 3,'loc-tech-PPP' => 4,'loc-tech-drGPS' => 5,'loc-tech-drDGPS' => 6,'loc-tech-dr' => 7,'loc-tech-nav' => 8,'loc-tech-fault' => 9}};
typeinfo('MergeDivergeNodeAngle') ->
  {'INTEGER',{-180,180}};
typeinfo('MessageBLOB') ->
  octet_string;
typeinfo('MinuteOfTheYear') ->
  {'INTEGER',{0,527040}};
typeinfo('MinutesDuration') ->
  {'INTEGER',{0,32000}};
typeinfo('MotorizedPropelledType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelChair => 2,bicycle => 3,scooter => 4,selfBalancingDevice => 5}};
typeinfo('MovementPhaseState') ->
  {'ENUMERATED',#{unavailable => 0,dark => 1,'stop-Then-Proceed' => 2,'stop-And-Remain' => 3,'pre-Movement' => 4,'permissive-Movement-Allowed' => 5,'protected-Movement-Allowed' => 6,'permissive-clearance' => 7,'protected-clearance' => 8,'caution-Conflicting-Traffic' => 9}};
typeinfo('MsgCount') ->
  {'INTEGER',{0,127}};
typeinfo('MsgCRC') ->
  octet_string;
typeinfo('MultiVehicleResponse') ->
  {'ENUMERATED',#{unavailable => 0,reserved => 3,singleVehicle => 1,multiVehicle => 2}};
typeinfo('MUTCDCode') ->
  {'ENUMERATED_EXT',#{none => 0,warning => 2,regulatory => 1,maintenance => 3,motoristService => 4,guide => 5,rec => 6}};
typeinfo('NMEA-MsgType') ->
  {'INTEGER',{0,32767}};
typeinfo('NMEA-Payload') ->
  octet_string;
typeinfo('NMEA-Revision') ->
  {'ENUMERATED_EXT',#{unknown => 0,reserved => 1,rev1 => 2,rev2 => 3,rev3 => 4,rev4 => 5,rev5 => 6}};
typeinfo('NodeAttributeLL') ->
  {'ENUMERATED_EXT',#{reserved => 0,stopLine => 1,roundedCapStyleA => 2,roundedCapStyleB => 3,mergePoint => 4,divergePoint => 5,downstreamStopLine => 6,downstreamStartNode => 7,closedToTraffic => 8,safeIsland => 9,curbPresentAtStepOff => 10,hydrantPresent => 11}};
typeinfo('NodeAttributeXY') ->
  {'ENUMERATED_EXT',#{reserved => 0,stopLine => 1,roundedCapStyleA => 2,roundedCapStyleB => 3,mergePoint => 4,divergePoint => 5,downstreamStopLine => 6,downstreamStartNode => 7,closedToTraffic => 8,safeIsland => 9,curbPresentAtStepOff => 10,hydrantPresent => 11}};
typeinfo('NumberOfParticipantsInCluster') ->
  {'ENUMERATED_EXT',#{small => 1,large => 3,unavailable => 0,medium => 2}};
typeinfo('ObjectCount') ->
  {'INTEGER',{0,1023}};
typeinfo('ObstacleDirection') ->
  {'INTEGER',{0,28800}};
typeinfo('ObstacleDistance') ->
  {'INTEGER',{0,32767}};
typeinfo('Offset-B09') ->
  {'INTEGER',{-256,255}};
typeinfo('Offset-B10') ->
  {'INTEGER',{-512,511}};
typeinfo('Offset-B11') ->
  {'INTEGER',{-1024,1023}};
typeinfo('Offset-B12') ->
  {'INTEGER',{-2048,2047}};
typeinfo('Offset-B13') ->
  {'INTEGER',{-4096,4095}};
typeinfo('Offset-B14') ->
  {'INTEGER',{-8192,8191}};
typeinfo('Offset-B16') ->
  {'INTEGER',{-32768,32767}};
typeinfo('OffsetLL-B12') ->
  {'INTEGER',{-2048,2047}};
typeinfo('OffsetLL-B14') ->
  {'INTEGER',{-8192,8191}};
typeinfo('OffsetLL-B16') ->
  {'INTEGER',{-32768,32767}};
typeinfo('OffsetLL-B18') ->
  {'INTEGER',{-131072,131071}};
typeinfo('OffsetLL-B22') ->
  {'INTEGER',{-2097152,2097151}};
typeinfo('OffsetLL-B24') ->
  {'INTEGER',{-8388608,8388607}};
typeinfo('PayloadData') ->
  octet_string;
typeinfo('PedestrianBicycleDetect') ->
  'BOOLEAN';
typeinfo('HumanPropelledType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelchair => 5,onFoot => 2,skateboard => 3,pushOrKickScooter => 4}};
typeinfo('PersonalAssistive') ->
  {bit_string_nnl,[{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]};
typeinfo('PersonalClusterRadius') ->
  {'INTEGER',{0,100}};
typeinfo('PersonalCrossingInProgress') ->
  'BOOLEAN';
typeinfo('PersonalCrossingRequest') ->
  'BOOLEAN';
typeinfo('PersonalDeviceUsageState') ->
  {bit_string_nnl,[{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]};
typeinfo('PersonalDeviceUserType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,aPEDESTRIAN => 1,aPEDALCYCLIST => 2,aPUBLICSAFETYWORKER => 3,anANIMAL => 4}};
typeinfo('PivotingAllowed') ->
  'BOOLEAN';
typeinfo('PositionConfidence') ->
  {'ENUMERATED',#{unavailable => 0,a500m => 1,a200m => 2,a100m => 3,a50m => 4,a20m => 5,a10m => 6,a5m => 7,a2m => 8,a1m => 9,a50cm => 10,a20cm => 11,a10cm => 12,a5cm => 13,a2cm => 14,a1cm => 15}};
typeinfo('PrioritizationResponseStatus') ->
  {'ENUMERATED_EXT',#{unknown => 0,rejected => 5,requested => 1,processing => 2,watchOtherTraffic => 3,granted => 4,maxPresence => 6,reserviceLocked => 7}};
typeinfo('Priority') ->
  octet_string;
typeinfo('PriorityRequestType') ->
  {'ENUMERATED_EXT',#{priorityRequestTypeReserved => 0,priorityRequest => 1,priorityRequestUpdate => 2,priorityCancellation => 3}};
typeinfo('PrivilegedEventFlags') ->
  {{bit_string_nnl,[{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]},16};
typeinfo('ProbeSegmentNumber') ->
  {'INTEGER',{0,32767}};
typeinfo('PublicSafetyAndRoadWorkerActivity') ->
  {bit_string_nnl,[{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]};
typeinfo('PublicSafetyDirectingTrafficSubType') ->
  {bit_string_nnl,[{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]};
typeinfo('PublicSafetyEventResponderWorkerType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,towOperater => 1,fireAndEMSWorker => 2,aDOTWorker => 3,lawEnforcement => 4,hazmatResponder => 5,animalControlWorker => 6,otherPersonnel => 7}};
typeinfo('RadiusOfCurvature') ->
  {'INTEGER',{-32767,32767}};
typeinfo('Radius-B12') ->
  {'INTEGER',{0,4095}};
typeinfo('RainSensor') ->
  {'ENUMERATED',#{none => 0,lightMist => 1,heavyMist => 2,lightRainOrDrizzle => 3,rain => 4,moderateRain => 5,heavyRain => 6,heavyDownpour => 7}};
typeinfo('RegionId') ->
  {'INTEGER',{0,255}};
typeinfo('RequestedItem') ->
  {'ENUMERATED_EXT',#{reserved => 0,itemA => 1,itemB => 2,itemC => 3,itemD => 4,itemE => 5,itemF => 6,itemG => 7,itemI => 8,itemJ => 9,itemK => 10,itemL => 11,itemM => 12,itemN => 13,itemO => 14,itemP => 15,itemQ => 16}};
typeinfo('RequestID') ->
  {'INTEGER',{0,255}};
typeinfo('RequestImportanceLevel') ->
  {'ENUMERATED',#{requestImportanceLevelUnKnown => 0,requestImportanceLevel1 => 1,requestImportanceLevel2 => 2,requestImportanceLevel3 => 3,requestImportanceLevel4 => 4,requestImportanceLevel5 => 5,requestImportanceLevel6 => 6,requestImportanceLevel7 => 7,requestImportanceLevel8 => 8,requestImportanceLevel9 => 9,requestImportanceLevel10 => 10,requestImportanceLevel11 => 11,requestImportanceLevel12 => 12,requestImportanceLevel13 => 13,requestImportanceLevel14 => 14,requestImportanceReserved => 15}};
typeinfo('RequestSubRole') ->
  {'ENUMERATED',#{requestSubRoleUnKnown => 0,requestSubRole1 => 1,requestSubRole2 => 2,requestSubRole3 => 3,requestSubRole4 => 4,requestSubRole5 => 5,requestSubRole6 => 6,requestSubRole7 => 7,requestSubRole8 => 8,requestSubRole9 => 9,requestSubRole10 => 10,requestSubRole11 => 11,requestSubRole12 => 12,requestSubRole13 => 13,requestSubRole14 => 14,requestSubRoleReserved => 15}};
typeinfo('ResponseType') ->
  {'ENUMERATED_EXT',#{emergency => 1,slowMoving => 5,notInUseOrNotEquipped => 0,nonEmergency => 2,pursuit => 3,stationary => 4,stopAndGoMovement => 6}};
typeinfo('RestrictionAppliesTo') ->
  {'ENUMERATED_EXT',#{none => 0,equippedTransit => 1,equippedTaxis => 2,equippedOther => 3,emissionCompliant => 4,equippedBicycle => 5,weightCompliant => 6,heightCompliant => 7,pedestrians => 8,slowMovingPersons => 9,wheelchairUsers => 10,visualDisabilities => 11,audioDisabilities => 12,otherUnknownDisabilities => 13}};
typeinfo('RestrictionClassID') ->
  {'INTEGER',{0,255}};
typeinfo('RoadRegulatorID') ->
  {'INTEGER',{0,65535}};
typeinfo('RoadSegmentID') ->
  {'INTEGER',{0,65535}};
typeinfo('RoadwayCrownAngle') ->
  {'INTEGER',{-128,127}};
typeinfo('RTCM-Revision') ->
  {'ENUMERATED_EXT',#{unknown => 0,reserved => 3,rtcmRev2 => 1,rtcmRev3 => 2}};
typeinfo('RTCMmessage') ->
  octet_string;
typeinfo('Scale-B12') ->
  {'INTEGER',{-2048,2047}};
typeinfo('SecondOfTime') ->
  {'INTEGER',{0,61}};
typeinfo('SegmentAttributeLL') ->
  {'ENUMERATED_EXT',#{lowCurbsPresent => 22,bikeBoxInFront => 16,rfSignalRequestPresent => 26,sharedWithTrackedVehicle => 20,headInParking => 32,sharedBikeLane => 15,partialCurbIntrusion => 27,parallelParking => 31,rumbleStripPresent => 23,audibleSignalingPresent => 24,transitStopOnRight => 18,safeIsland => 21,adjacentBikeLaneOnLeft => 13,taperToRight => 29,costToPark => 35,loadingzoneOnRight => 8,whiteLine => 2,freeParking => 33,mergingLaneLeft => 3,transitStopOnLeft => 17,adjacentParkingOnRight => 12,turnOutPointOnRight => 10,timeRestrictionsOnParking => 34,curbOnRight => 6,midBlockCurbPresent => 36,loadingzoneOnLeft => 7,unEvenPavementPresent => 37,transitStopInLane => 19,adjacentParkingOnLeft => 11,taperToLeft => 28,taperToCenterLine => 30,curbOnLeft => 5,doNotBlock => 1,turnOutPointOnLeft => 9,reserved => 0,mergingLaneRight => 4,adjacentBikeLaneOnRight => 14,adaptiveTimingPresent => 25}};
typeinfo('SegmentAttributeXY') ->
  {'ENUMERATED_EXT',#{lowCurbsPresent => 22,bikeBoxInFront => 16,rfSignalRequestPresent => 26,sharedWithTrackedVehicle => 20,headInParking => 32,sharedBikeLane => 15,partialCurbIntrusion => 27,parallelParking => 31,rumbleStripPresent => 23,audibleSignalingPresent => 24,transitStopOnRight => 18,safeIsland => 21,adjacentBikeLaneOnLeft => 13,taperToRight => 29,costToPark => 35,loadingzoneOnRight => 8,whiteLine => 2,freeParking => 33,mergingLaneLeft => 3,transitStopOnLeft => 17,adjacentParkingOnRight => 12,turnOutPointOnRight => 10,timeRestrictionsOnParking => 34,curbOnRight => 6,midBlockCurbPresent => 36,loadingzoneOnLeft => 7,unEvenPavementPresent => 37,transitStopInLane => 19,adjacentParkingOnLeft => 11,taperToLeft => 28,taperToCenterLine => 30,curbOnLeft => 5,doNotBlock => 1,turnOutPointOnLeft => 9,reserved => 0,mergingLaneRight => 4,adjacentBikeLaneOnRight => 14,adaptiveTimingPresent => 25}};
typeinfo('SemiMajorAxisAccuracy') ->
  {'INTEGER',{0,255}};
typeinfo('SemiMajorAxisOrientation') ->
  {'INTEGER',{0,65535}};
typeinfo('SemiMinorAxisAccuracy') ->
  {'INTEGER',{0,255}};
typeinfo('SignalGroupID') ->
  {'INTEGER',{0,255}};
typeinfo('SignalReqScheme') ->
  octet_string;
typeinfo('SignPrority') ->
  {'INTEGER',{0,7}};
typeinfo('SirenInUse') ->
  {'ENUMERATED',#{unavailable => 0,reserved => 3,notInUse => 1,inUse => 2}};
typeinfo('SpeedAdvice') ->
  {'INTEGER',{0,500}};
typeinfo('SpeedConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}};
typeinfo('SpeedLimitType') ->
  {'ENUMERATED_EXT',#{unknown => 0,maxSpeedInSchoolZone => 1,maxSpeedInSchoolZoneWhenChildrenArePresent => 2,maxSpeedInConstructionZone => 3,vehicleMinSpeed => 4,vehicleMaxSpeed => 5,vehicleNightMaxSpeed => 6,truckMinSpeed => 7,truckMaxSpeed => 8,truckNightMaxSpeed => 9,vehiclesWithTrailersMinSpeed => 10,vehiclesWithTrailersMaxSpeed => 11,vehiclesWithTrailersNightMaxSpeed => 12}};
typeinfo('SpeedProfileMeasurement') ->
  {'INTEGER',{0,31}};
typeinfo('Speed') ->
  {'INTEGER',{0,8191}};
typeinfo('SSPindex') ->
  {'INTEGER',{0,31}};
typeinfo('StabilityControlStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}};
typeinfo('StationID') ->
  {'INTEGER',{0,4294967295}};
typeinfo('SteeringWheelAngleConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}};
typeinfo('SteeringWheelAngleRateOfChange') ->
  {'INTEGER',{-127,127}};
typeinfo('SteeringWheelAngle') ->
  {'INTEGER',{-126,127}};
typeinfo('SunSensor') ->
  {'INTEGER',{0,1000}};
typeinfo('TemporaryID') ->
  octet_string;
typeinfo('TermDistance') ->
  {'INTEGER',{1,30000}};
typeinfo('TermTime') ->
  {'INTEGER',{1,1800}};
typeinfo('ThrottleConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec10percent => 1,prec1percent => 2,'prec0-5percent' => 3}};
typeinfo('ThrottlePosition') ->
  {'INTEGER',{0,200}};
typeinfo('TimeConfidence') ->
  {'ENUMERATED',#{'time-000-000-5' => 16,'time-000-000-000-02' => 29,'time-000-000-01' => 21,'time-000-000-000-01' => 30,'time-000-000-000-001' => 33,'time-002-000' => 5,'time-000-000-000-000-2' => 35,'time-020-000' => 3,'time-000-000-000-1' => 27,'time-000-000-005' => 22,'time-000-000-000-005' => 31,'time-000-000-000-05' => 28,'time-000-000-000-002' => 32,'time-000-000-000-000-05' => 37,'time-000-002' => 14,'time-000-000-2' => 17,'time-000-000-002' => 23,'time-000-500' => 7,'time-050-000' => 2,'time-000-010' => 12,'time-000-000-000-5' => 25,'time-000-000-000-2' => 26,'time-000-050' => 10,'time-000-000-001' => 24,'time-001-000' => 6,'time-010-000' => 4,'time-000-005' => 13,'time-000-200' => 8,'time-000-100' => 9,'time-000-000-000-000-02' => 38,'time-000-000-1' => 18,'time-000-000-05' => 19,'time-100-000' => 1,'time-000-000-000-000-5' => 34,'time-000-020' => 11,'time-000-000-000-000-1' => 36,'time-000-000-02' => 20,'time-000-001' => 15,unavailable => 0,'time-000-000-000-000-01' => 39}};
typeinfo('TimeIntervalConfidence') ->
  {'INTEGER',{0,15}};
typeinfo('TimeMark') ->
  {'INTEGER',{0,36001}};
typeinfo('TimeOffset') ->
  {'INTEGER',{1,65535}};
typeinfo('TractionControlStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}};
typeinfo('TrailerMass') ->
  {'INTEGER',{0,255}};
typeinfo('TransitStatus') ->
  {{bit_string_nnl,[{none,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{occM,4},{occL,5}]},6};
typeinfo('TransitVehicleOccupancy') ->
  {'ENUMERATED',#{occupancyUnknown => 0,occupancyEmpty => 1,occupancyVeryLow => 2,occupancyLow => 3,occupancyMed => 4,occupancyHigh => 5,occupancyNearlyFull => 6,occupancyFull => 7}};
typeinfo('TransitVehicleStatus') ->
  {{bit_string_nnl,[{loading,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{charging,4},{atStopLine,5}]},8};
typeinfo('TransmissionState') ->
  {'ENUMERATED',#{neutral => 0,unavailable => 7,reserved1 => 4,park => 1,forwardGears => 2,reverseGears => 3,reserved2 => 5,reserved3 => 6}};
typeinfo('TravelerInfoType') ->
  {'ENUMERATED_EXT',#{unknown => 0,advisory => 1,roadSignage => 2,commercialSignage => 3}};
typeinfo('UniqueMSGID') ->
  octet_string;
typeinfo('URL-Base') ->
  string;
typeinfo('URL-Link') ->
  string;
typeinfo('URL-Short') ->
  string;
typeinfo('UserSizeAndBehaviour') ->
  {bit_string_nnl,[{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]};
typeinfo('VehicleEventFlags') ->
  {bit_string_nnl,[{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]};
typeinfo('VehicleHeight') ->
  {'INTEGER',{0,127}};
typeinfo('VehicleLength') ->
  {'INTEGER',{0,4095}};
typeinfo('VehicleMass') ->
  {'INTEGER',{0,255}};
typeinfo('VehicleStatusDeviceTypeTag') ->
  {'ENUMERATED_EXT',#{abs => 6,unknown => 0,yaw => 20,brakes => 3,vehicle => 26,obDist => 18,obDirect => 19,dateTime => 22,lights => 1,wipers => 2,airTemp => 9,steering => 10,accel4way => 16,vertAccelThres => 11,yawRateCon => 21,hozAccelCon => 15,confidenceSet => 17,fullPos => 23,speedHeadC => 27,speedC => 28,stab => 4,trac => 5,sunS => 7,rainS => 8,vertAccel => 12,hozAccelLong => 13,hozAccelLat => 14,position2D => 24,position3D => 25}};
typeinfo('VehicleType') ->
  {'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}};
typeinfo('VehicleWidth') ->
  {'INTEGER',{0,1023}};
typeinfo('Velocity') ->
  {'INTEGER',{0,8191}};
typeinfo('VerticalAccelerationThreshold') ->
  {{bit_string_nnl,[{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5};
typeinfo('VerticalAcceleration') ->
  {'INTEGER',{-127,127}};
typeinfo('VertOffset-B07') ->
  {'INTEGER',{-64,63}};
typeinfo('VertOffset-B08') ->
  {'INTEGER',{-128,127}};
typeinfo('VertOffset-B09') ->
  {'INTEGER',{-256,255}};
typeinfo('VertOffset-B10') ->
  {'INTEGER',{-512,511}};
typeinfo('VertOffset-B11') ->
  {'INTEGER',{-1024,1023}};
typeinfo('VertOffset-B12') ->
  {'INTEGER',{-2048,2047}};
typeinfo('VINstring') ->
  octet_string;
typeinfo('WaitOnStopline') ->
  'BOOLEAN';
typeinfo('WiperRate') ->
  {'INTEGER',{0,127}};
typeinfo('WiperStatus') ->
  {'ENUMERATED_EXT',#{high => 4,low => 3,off => 1,unavailable => 0,intermittent => 2,washerInUse => 5,automaticPresent => 6}};
typeinfo('YawRateConfidence') ->
  {'ENUMERATED',#{unavailable => 0,'degSec-100-00' => 1,'degSec-010-00' => 2,'degSec-005-00' => 3,'degSec-001-00' => 4,'degSec-000-10' => 5,'degSec-000-05' => 6,'degSec-000-01' => 7}};
typeinfo('YawRate') ->
  {'INTEGER',{-32767,32767}};
typeinfo('ZoneLength') ->
  {'INTEGER',{0,10000}};
typeinfo('Zoom') ->
  {'INTEGER',{0,15}};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_11([eventHazardLights | T]) ->
    [0 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventStopLineViolation | T]) ->
    [1 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventABSactivated | T]) ->
    [2 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventTractionControlLoss | T]) ->
    [3 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventStabilityControlactivated | T]) ->
    [4 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventHazardousMaterials | T]) ->
    [5 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventReserved1 | T]) ->
    [6 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventHardBraking | T]) ->
    [7 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventLightsChanged | T]) ->
    [8 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventWipersChanged | T]) ->
    [9 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventFlatTire | T]) ->
    [10 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventDisabledVehicle | T]) ->
    [11 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([eventAirBagDeployment | T]) ->
    [12 | bit_string_name2pos_11(T)];
bit_string_name2pos_11([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_11(T)];
bit_string_name2pos_11([]) ->
    [];
bit_string_name2pos_11(_) ->
    throw(invalid).

bit_string_name2pos_115([lowBeamHeadlightsOn | T]) ->
    [0 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([highBeamHeadlightsOn | T]) ->
    [1 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([leftTurnSignalOn | T]) ->
    [2 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([rightTurnSignalOn | T]) ->
    [3 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([hazardSignalOn | T]) ->
    [4 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([automaticLightControlOn | T]) ->
    [5 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([daytimeRunningLightsOn | T]) ->
    [6 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([fogLightOn | T]) ->
    [7 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([parkingLightsOn | T]) ->
    [8 | bit_string_name2pos_115(T)];
bit_string_name2pos_115([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_115(T)];
bit_string_name2pos_115([]) ->
    [];
bit_string_name2pos_115(_) ->
    throw(invalid).

bit_string_name2pos_117([none | T]) ->
    [0 | bit_string_name2pos_117(T)];
bit_string_name2pos_117([anADAuse | T]) ->
    [1 | bit_string_name2pos_117(T)];
bit_string_name2pos_117([aBikeLoad | T]) ->
    [2 | bit_string_name2pos_117(T)];
bit_string_name2pos_117([doorOpen | T]) ->
    [3 | bit_string_name2pos_117(T)];
bit_string_name2pos_117([occM | T]) ->
    [4 | bit_string_name2pos_117(T)];
bit_string_name2pos_117([occL | T]) ->
    [5 | bit_string_name2pos_117(T)];
bit_string_name2pos_117([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_117(T)];
bit_string_name2pos_117([]) ->
    [];
bit_string_name2pos_117(_) ->
    throw(invalid).

bit_string_name2pos_15([unavailable | T]) ->
    [0 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([other | T]) ->
    [1 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([idle | T]) ->
    [2 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([listeningToAudio | T]) ->
    [3 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([typing | T]) ->
    [4 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([calling | T]) ->
    [5 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([playingGames | T]) ->
    [6 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([reading | T]) ->
    [7 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([viewing | T]) ->
    [8 | bit_string_name2pos_15(T)];
bit_string_name2pos_15([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_15(T)];
bit_string_name2pos_15([]) ->
    [];
bit_string_name2pos_15(_) ->
    throw(invalid).

bit_string_name2pos_16([unavailable | T]) ->
    [0 | bit_string_name2pos_16(T)];
bit_string_name2pos_16([workingOnRoad | T]) ->
    [1 | bit_string_name2pos_16(T)];
bit_string_name2pos_16([settingUpClosures | T]) ->
    [2 | bit_string_name2pos_16(T)];
bit_string_name2pos_16([respondingToEvents | T]) ->
    [3 | bit_string_name2pos_16(T)];
bit_string_name2pos_16([directingTraffic | T]) ->
    [4 | bit_string_name2pos_16(T)];
bit_string_name2pos_16([otherActivities | T]) ->
    [5 | bit_string_name2pos_16(T)];
bit_string_name2pos_16([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_16(T)];
bit_string_name2pos_16([]) ->
    [];
bit_string_name2pos_16(_) ->
    throw(invalid).

bit_string_name2pos_17([unavailable | T]) ->
    [0 | bit_string_name2pos_17(T)];
bit_string_name2pos_17([policeAndTrafficOfficers | T]) ->
    [1 | bit_string_name2pos_17(T)];
bit_string_name2pos_17([trafficControlPersons | T]) ->
    [2 | bit_string_name2pos_17(T)];
bit_string_name2pos_17([railroadCrossingGuards | T]) ->
    [3 | bit_string_name2pos_17(T)];
bit_string_name2pos_17([civilDefenseNationalGuardMilitaryPolice | T]) ->
    [4 | bit_string_name2pos_17(T)];
bit_string_name2pos_17([emergencyOrganizationPersonnel | T]) ->
    [5 | bit_string_name2pos_17(T)];
bit_string_name2pos_17([highwayServiceVehiclePersonnel | T]) ->
    [6 | bit_string_name2pos_17(T)];
bit_string_name2pos_17([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_17(T)];
bit_string_name2pos_17([]) ->
    [];
bit_string_name2pos_17(_) ->
    throw(invalid).

bit_string_name2pos_18([unavailable | T]) ->
    [0 | bit_string_name2pos_18(T)];
bit_string_name2pos_18([otherType | T]) ->
    [1 | bit_string_name2pos_18(T)];
bit_string_name2pos_18([vision | T]) ->
    [2 | bit_string_name2pos_18(T)];
bit_string_name2pos_18([hearing | T]) ->
    [3 | bit_string_name2pos_18(T)];
bit_string_name2pos_18([movement | T]) ->
    [4 | bit_string_name2pos_18(T)];
bit_string_name2pos_18([cognition | T]) ->
    [5 | bit_string_name2pos_18(T)];
bit_string_name2pos_18([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_18(T)];
bit_string_name2pos_18([]) ->
    [];
bit_string_name2pos_18(_) ->
    throw(invalid).

bit_string_name2pos_19([unavailable | T]) ->
    [0 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([smallStature | T]) ->
    [1 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([largeStature | T]) ->
    [2 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([erraticMoving | T]) ->
    [3 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([slowMoving | T]) ->
    [4 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_19(T)];
bit_string_name2pos_19([]) ->
    [];
bit_string_name2pos_19(_) ->
    throw(invalid).

bit_string_name2pos_21(['from000-0to022-5degrees' | T]) ->
    [0 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from022-5to045-0degrees' | T]) ->
    [1 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from045-0to067-5degrees' | T]) ->
    [2 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from067-5to090-0degrees' | T]) ->
    [3 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from090-0to112-5degrees' | T]) ->
    [4 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from112-5to135-0degrees' | T]) ->
    [5 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from135-0to157-5degrees' | T]) ->
    [6 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from157-5to180-0degrees' | T]) ->
    [7 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from180-0to202-5degrees' | T]) ->
    [8 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from202-5to225-0degrees' | T]) ->
    [9 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from225-0to247-5degrees' | T]) ->
    [10 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from247-5to270-0degrees' | T]) ->
    [11 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from270-0to292-5degrees' | T]) ->
    [12 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from292-5to315-0degrees' | T]) ->
    [13 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from315-0to337-5degrees' | T]) ->
    [14 | bit_string_name2pos_21(T)];
bit_string_name2pos_21(['from337-5to360-0degrees' | T]) ->
    [15 | bit_string_name2pos_21(T)];
bit_string_name2pos_21([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_21(T)];
bit_string_name2pos_21([]) ->
    [];
bit_string_name2pos_21(_) ->
    throw(invalid).

bit_string_name2pos_34([unavailable | T]) ->
    [0 | bit_string_name2pos_34(T)];
bit_string_name2pos_34([leftFront | T]) ->
    [1 | bit_string_name2pos_34(T)];
bit_string_name2pos_34([leftRear | T]) ->
    [2 | bit_string_name2pos_34(T)];
bit_string_name2pos_34([rightFront | T]) ->
    [3 | bit_string_name2pos_34(T)];
bit_string_name2pos_34([rightRear | T]) ->
    [4 | bit_string_name2pos_34(T)];
bit_string_name2pos_34([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_34(T)];
bit_string_name2pos_34([]) ->
    [];
bit_string_name2pos_34(_) ->
    throw(invalid).

bit_string_name2pos_36([maneuverStraightAllowed | T]) ->
    [0 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([maneuverLeftAllowed | T]) ->
    [1 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([maneuverRightAllowed | T]) ->
    [2 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([maneuverUTurnAllowed | T]) ->
    [3 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([maneuverLeftTurnOnRedAllowed | T]) ->
    [4 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([maneuverRightTurnOnRedAllowed | T]) ->
    [5 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([maneuverLaneChangeAllowed | T]) ->
    [6 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([maneuverNoStoppingAllowed | T]) ->
    [7 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([yieldAllwaysRequired | T]) ->
    [8 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([goWithHalt | T]) ->
    [9 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([caution | T]) ->
    [10 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([reserved1 | T]) ->
    [11 | bit_string_name2pos_36(T)];
bit_string_name2pos_36([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_36(T)];
bit_string_name2pos_36([]) ->
    [];
bit_string_name2pos_36(_) ->
    throw(invalid).

bit_string_name2pos_47([manualControlIsEnabled | T]) ->
    [0 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([stopTimeIsActivated | T]) ->
    [1 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([failureFlash | T]) ->
    [2 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([preemptIsActive | T]) ->
    [3 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([signalPriorityIsActive | T]) ->
    [4 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([fixedTimeOperation | T]) ->
    [5 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([trafficDependentOperation | T]) ->
    [6 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([standbyOperation | T]) ->
    [7 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([failureMode | T]) ->
    [8 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([off | T]) ->
    [9 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([recentMAPmessageUpdate | T]) ->
    [10 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([recentChangeInMAPassignedLanesIDsUsed | T]) ->
    [11 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([noValidMAPisAvailableAtThisTime | T]) ->
    [12 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([noValidSPATisAvailableAtThisTime | T]) ->
    [13 | bit_string_name2pos_47(T)];
bit_string_name2pos_47([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_47(T)];
bit_string_name2pos_47([]) ->
    [];
bit_string_name2pos_47(_) ->
    throw(invalid).

bit_string_name2pos_56([ingressPath | T]) ->
    [0 | bit_string_name2pos_56(T)];
bit_string_name2pos_56([egressPath | T]) ->
    [1 | bit_string_name2pos_56(T)];
bit_string_name2pos_56([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_56(T)];
bit_string_name2pos_56([]) ->
    [];
bit_string_name2pos_56(_) ->
    throw(invalid).

bit_string_name2pos_57([overlappingLaneDescriptionProvided | T]) ->
    [0 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([multipleLanesTreatedAsOneLane | T]) ->
    [1 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([otherNonMotorizedTrafficTypes | T]) ->
    [2 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([individualMotorizedVehicleTraffic | T]) ->
    [3 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([busVehicleTraffic | T]) ->
    [4 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([taxiVehicleTraffic | T]) ->
    [5 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([pedestriansTraffic | T]) ->
    [6 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([cyclistVehicleTraffic | T]) ->
    [7 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([trackedVehicleTraffic | T]) ->
    [8 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([pedestrianTraffic | T]) ->
    [9 | bit_string_name2pos_57(T)];
bit_string_name2pos_57([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_57(T)];
bit_string_name2pos_57([]) ->
    [];
bit_string_name2pos_57(_) ->
    throw(invalid).

bit_string_name2pos_61([isVehicleRevocableLane | T]) ->
    [0 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([isVehicleFlyOverLane | T]) ->
    [1 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([hovLaneUseOnly | T]) ->
    [2 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([restrictedToBusUse | T]) ->
    [3 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([restrictedToTaxiUse | T]) ->
    [4 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([restrictedFromPublicUse | T]) ->
    [5 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([hasIRbeaconCoverage | T]) ->
    [6 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([permissionOnRequest | T]) ->
    [7 | bit_string_name2pos_61(T)];
bit_string_name2pos_61([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_61(T)];
bit_string_name2pos_61([]) ->
    [];
bit_string_name2pos_61(_) ->
    throw(invalid).

bit_string_name2pos_62([crosswalkRevocableLane | T]) ->
    [0 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([bicyleUseAllowed | T]) ->
    [1 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([isXwalkFlyOverLane | T]) ->
    [2 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([fixedCycleTime | T]) ->
    [3 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([biDirectionalCycleTimes | T]) ->
    [4 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([hasPushToWalkButton | T]) ->
    [5 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([audioSupport | T]) ->
    [6 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([rfSignalRequestPresent | T]) ->
    [7 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([unsignalizedSegmentsPresent | T]) ->
    [8 | bit_string_name2pos_62(T)];
bit_string_name2pos_62([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_62(T)];
bit_string_name2pos_62([]) ->
    [];
bit_string_name2pos_62(_) ->
    throw(invalid).

bit_string_name2pos_63([bikeRevocableLane | T]) ->
    [0 | bit_string_name2pos_63(T)];
bit_string_name2pos_63([pedestrianUseAllowed | T]) ->
    [1 | bit_string_name2pos_63(T)];
bit_string_name2pos_63([isBikeFlyOverLane | T]) ->
    [2 | bit_string_name2pos_63(T)];
bit_string_name2pos_63([fixedCycleTime | T]) ->
    [3 | bit_string_name2pos_63(T)];
bit_string_name2pos_63([biDirectionalCycleTimes | T]) ->
    [4 | bit_string_name2pos_63(T)];
bit_string_name2pos_63([isolatedByBarrier | T]) ->
    [5 | bit_string_name2pos_63(T)];
bit_string_name2pos_63([unsignalizedSegmentsPresent | T]) ->
    [6 | bit_string_name2pos_63(T)];
bit_string_name2pos_63([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_63(T)];
bit_string_name2pos_63([]) ->
    [];
bit_string_name2pos_63(_) ->
    throw(invalid).

bit_string_name2pos_64(['sidewalk-RevocableLane' | T]) ->
    [0 | bit_string_name2pos_64(T)];
bit_string_name2pos_64([bicyleUseAllowed | T]) ->
    [1 | bit_string_name2pos_64(T)];
bit_string_name2pos_64([isSidewalkFlyOverLane | T]) ->
    [2 | bit_string_name2pos_64(T)];
bit_string_name2pos_64([walkBikes | T]) ->
    [3 | bit_string_name2pos_64(T)];
bit_string_name2pos_64([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_64(T)];
bit_string_name2pos_64([]) ->
    [];
bit_string_name2pos_64(_) ->
    throw(invalid).

bit_string_name2pos_65(['median-RevocableLane' | T]) ->
    [0 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([median | T]) ->
    [1 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([whiteLineHashing | T]) ->
    [2 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([stripedLines | T]) ->
    [3 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([doubleStripedLines | T]) ->
    [4 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([trafficCones | T]) ->
    [5 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([constructionBarrier | T]) ->
    [6 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([trafficChannels | T]) ->
    [7 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([lowCurbs | T]) ->
    [8 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([highCurbs | T]) ->
    [9 | bit_string_name2pos_65(T)];
bit_string_name2pos_65([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_65(T)];
bit_string_name2pos_65([]) ->
    [];
bit_string_name2pos_65(_) ->
    throw(invalid).

bit_string_name2pos_66([stripeToConnectingLanesRevocableLane | T]) ->
    [0 | bit_string_name2pos_66(T)];
bit_string_name2pos_66([stripeDrawOnLeft | T]) ->
    [1 | bit_string_name2pos_66(T)];
bit_string_name2pos_66([stripeDrawOnRight | T]) ->
    [2 | bit_string_name2pos_66(T)];
bit_string_name2pos_66([stripeToConnectingLanesLeft | T]) ->
    [3 | bit_string_name2pos_66(T)];
bit_string_name2pos_66([stripeToConnectingLanesRight | T]) ->
    [4 | bit_string_name2pos_66(T)];
bit_string_name2pos_66([stripeToConnectingLanesAhead | T]) ->
    [5 | bit_string_name2pos_66(T)];
bit_string_name2pos_66([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_66(T)];
bit_string_name2pos_66([]) ->
    [];
bit_string_name2pos_66(_) ->
    throw(invalid).

bit_string_name2pos_67(['spec-RevocableLane' | T]) ->
    [0 | bit_string_name2pos_67(T)];
bit_string_name2pos_67(['spec-commuterRailRoadTrack' | T]) ->
    [1 | bit_string_name2pos_67(T)];
bit_string_name2pos_67(['spec-lightRailRoadTrack' | T]) ->
    [2 | bit_string_name2pos_67(T)];
bit_string_name2pos_67(['spec-heavyRailRoadTrack' | T]) ->
    [3 | bit_string_name2pos_67(T)];
bit_string_name2pos_67(['spec-otherRailType' | T]) ->
    [4 | bit_string_name2pos_67(T)];
bit_string_name2pos_67([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_67(T)];
bit_string_name2pos_67([]) ->
    [];
bit_string_name2pos_67(_) ->
    throw(invalid).

bit_string_name2pos_68([parkingRevocableLane | T]) ->
    [0 | bit_string_name2pos_68(T)];
bit_string_name2pos_68([parallelParkingInUse | T]) ->
    [1 | bit_string_name2pos_68(T)];
bit_string_name2pos_68([headInParkingInUse | T]) ->
    [2 | bit_string_name2pos_68(T)];
bit_string_name2pos_68([doNotParkZone | T]) ->
    [3 | bit_string_name2pos_68(T)];
bit_string_name2pos_68([parkingForBusUse | T]) ->
    [4 | bit_string_name2pos_68(T)];
bit_string_name2pos_68([parkingForTaxiUse | T]) ->
    [5 | bit_string_name2pos_68(T)];
bit_string_name2pos_68([noPublicParkingUse | T]) ->
    [6 | bit_string_name2pos_68(T)];
bit_string_name2pos_68([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_68(T)];
bit_string_name2pos_68([]) ->
    [];
bit_string_name2pos_68(_) ->
    throw(invalid).

bit_string_name2pos_80([notEquipped | T]) ->
    [0 | bit_string_name2pos_80(T)];
bit_string_name2pos_80([leftFront | T]) ->
    [1 | bit_string_name2pos_80(T)];
bit_string_name2pos_80([leftRear | T]) ->
    [2 | bit_string_name2pos_80(T)];
bit_string_name2pos_80([rightFront | T]) ->
    [3 | bit_string_name2pos_80(T)];
bit_string_name2pos_80([rightRear | T]) ->
    [4 | bit_string_name2pos_80(T)];
bit_string_name2pos_80([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_80(T)];
bit_string_name2pos_80([]) ->
    [];
bit_string_name2pos_80(_) ->
    throw(invalid).

bit_string_name2pos_82([unavailable | T]) ->
    [0 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([isHealthy | T]) ->
    [1 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([isMonitored | T]) ->
    [2 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([baseStationType | T]) ->
    [3 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([aPDOPofUnder5 | T]) ->
    [4 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([inViewOfUnder5 | T]) ->
    [5 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([localCorrectionsPresent | T]) ->
    [6 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([networkCorrectionsPresent | T]) ->
    [7 | bit_string_name2pos_82(T)];
bit_string_name2pos_82([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_82(T)];
bit_string_name2pos_82([]) ->
    [];
bit_string_name2pos_82(_) ->
    throw(invalid).

bit_string_name2pos_86([peUnavailable | T]) ->
    [0 | bit_string_name2pos_86(T)];
bit_string_name2pos_86([peEmergencyResponse | T]) ->
    [1 | bit_string_name2pos_86(T)];
bit_string_name2pos_86([peEmergencyLightsActive | T]) ->
    [2 | bit_string_name2pos_86(T)];
bit_string_name2pos_86([peEmergencySoundActive | T]) ->
    [3 | bit_string_name2pos_86(T)];
bit_string_name2pos_86([peNonEmergencyLightsActive | T]) ->
    [4 | bit_string_name2pos_86(T)];
bit_string_name2pos_86([peNonEmergencySoundActive | T]) ->
    [5 | bit_string_name2pos_86(T)];
bit_string_name2pos_86([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_86(T)];
bit_string_name2pos_86([]) ->
    [];
bit_string_name2pos_86(_) ->
    throw(invalid).

bit_string_name2pos_89([loading | T]) ->
    [0 | bit_string_name2pos_89(T)];
bit_string_name2pos_89([anADAuse | T]) ->
    [1 | bit_string_name2pos_89(T)];
bit_string_name2pos_89([aBikeLoad | T]) ->
    [2 | bit_string_name2pos_89(T)];
bit_string_name2pos_89([doorOpen | T]) ->
    [3 | bit_string_name2pos_89(T)];
bit_string_name2pos_89([charging | T]) ->
    [4 | bit_string_name2pos_89(T)];
bit_string_name2pos_89([atStopLine | T]) ->
    [5 | bit_string_name2pos_89(T)];
bit_string_name2pos_89([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_89(T)];
bit_string_name2pos_89([]) ->
    [];
bit_string_name2pos_89(_) ->
    throw(invalid).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = dec_EmergencyVehicleAlert_regional_RegionalExtension(Bytes),
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components100(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components100(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalRequestPackage(Bytes),
dec_components100(Num-1, Remain, [Term|Acc]).

dec_components101(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components101(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalRequestPackage_regional_RegionalExtension(Bytes),
dec_components101(Num-1, Remain, [Term|Acc]).

dec_components102(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components102(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalRequest_regional_RegionalExtension(Bytes),
dec_components102(Num-1, Remain, [Term|Acc]).

dec_components103(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components103(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalStatus(Bytes),
dec_components103(Num-1, Remain, [Term|Acc]).

dec_components104(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components104(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalStatusPackage(Bytes),
dec_components104(Num-1, Remain, [Term|Acc]).

dec_components105(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components105(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalStatusPackage_regional_RegionalExtension(Bytes),
dec_components105(Num-1, Remain, [Term|Acc]).

dec_components106(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components106(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalStatus_regional_RegionalExtension(Bytes),
dec_components106(Num-1, Remain, [Term|Acc]).

dec_components107(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components107(Num, Bytes, Acc) ->
{Term,Remain} = dec_RegulatorySpeedLimit(Bytes),
dec_components107(Num-1, Remain, [Term|Acc]).

dec_components108(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components108(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
dec_components108(Num-1, Remain, [Term|Acc]).

dec_components109(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components109(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupplementalVehicleExtensions_regional_RegionalExtension(Bytes),
dec_components109(Num-1, Remain, [Term|Acc]).

dec_components110(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components110(Num, Bytes, Acc) ->
{Term,Remain} = dec_TrailerHistoryPoint(Bytes),
dec_components110(Num-1, Remain, [Term|Acc]).

dec_components111(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components111(Num, Bytes, Acc) ->
{Term,Remain} = dec_TrailerUnitDescription(Bytes),
dec_components111(Num-1, Remain, [Term|Acc]).

dec_components112(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components112(Num, Bytes, Acc) ->
{Term,Remain} = dec_TravelerDataFrame(Bytes),
dec_components112(Num-1, Remain, [Term|Acc]).

dec_components113(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components113(Num, Bytes, Acc) ->
{Term,Remain} = dec_GeographicalPath(Bytes),
dec_components113(Num-1, Remain, [Term|Acc]).

dec_components114(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components114(Num, Bytes, Acc) ->
{Term,Remain} = dec_VehicleClassification_regional_RegionalExtension(Bytes),
dec_components114(Num-1, Remain, [Term|Acc]).

dec_components116(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components116(Num, Bytes, Acc) ->
{Term,Remain} = dec_VehicleStatusRequest(Bytes),
dec_components116(Num-1, Remain, [Term|Acc]).

dec_components12(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components12(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntersectionCollision_regional_RegionalExtension(Bytes),
dec_components12(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = dec_MapData_regional_RegionalExtension(Bytes),
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = dec_NMEAcorrections_regional_RegionalExtension(Bytes),
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = dec_PersonalSafetyMessage_regional_RegionalExtension(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components22(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components22(Num, Bytes, Acc) ->
{Term,Remain} = dec_ProbeDataManagement_regional_RegionalExtension(Bytes),
dec_components22(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = dec_Snapshot(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components24(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components24(Num, Bytes, Acc) ->
{Term,Remain} = dec_ProbeVehicleData_regional_RegionalExtension(Bytes),
dec_components24(Num-1, Remain, [Term|Acc]).

dec_components25(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components25(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes,
{V2@V0,V2@Buf1}
end,
dec_components25(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = dec_RoadSideAlert_regional_RegionalExtension(Bytes),
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components27(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components27(Num, Bytes, Acc) ->
{Term,Remain} = dec_RTCMcorrections_regional_RegionalExtension(Bytes),
dec_components27(Num-1, Remain, [Term|Acc]).

dec_components28(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components28(Num, Bytes, Acc) ->
{Term,Remain} = dec_SPAT_regional_RegionalExtension(Bytes),
dec_components28(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalRequestMessage_regional_RegionalExtension(Bytes),
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components30(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components30(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalStatusMessage_regional_RegionalExtension(Bytes),
dec_components30(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = dec_TravelerInformation_regional_RegionalExtension(Bytes),
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components32(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components32(Num, Bytes, Acc) ->
{Term,Remain} = dec_AdvisorySpeed_regional_RegionalExtension(Bytes),
dec_components32(Num-1, Remain, [Term|Acc]).

dec_components33(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components33(Num, Bytes, Acc) ->
{Term,Remain} = dec_AdvisorySpeed(Bytes),
dec_components33(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = dec_ComputedLane_regional_RegionalExtension(Bytes),
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components37(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components37(Num, Bytes, Acc) ->
{Term,Remain} = dec_ConnectionManeuverAssist_regional_RegionalExtension(Bytes),
dec_components37(Num-1, Remain, [Term|Acc]).

dec_components38(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components38(Num, Bytes, Acc) ->
{Term,Remain} = dec_Connection(Bytes),
dec_components38(Num-1, Remain, [Term|Acc]).

dec_components39(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components39(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes,
{V3@V0,V3@Buf1}
end,
dec_components39(Num-1, Remain, [Term|Acc]).

dec_components40(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components40(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes,
{V4@V0,V4@Buf1}
end,
dec_components40(Num-1, Remain, [Term|Acc]).

dec_components41(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components41(Num, Bytes, Acc) ->
{Term,Remain} = dec_EventDescription_regional_RegionalExtension(Bytes),
dec_components41(Num-1, Remain, [Term|Acc]).

dec_components42(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components42(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericLane_regional_RegionalExtension(Bytes),
dec_components42(Num-1, Remain, [Term|Acc]).

dec_components43(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components43(Num, Bytes, Acc) ->
{Term,Remain} = dec_GeographicalPath_regional_RegionalExtension(Bytes),
dec_components43(Num-1, Remain, [Term|Acc]).

dec_components44(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components44(Num, Bytes, Acc) ->
{Term,Remain} = dec_GeometricProjection_regional_RegionalExtension(Bytes),
dec_components44(Num-1, Remain, [Term|Acc]).

dec_components45(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components45(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntersectionGeometry_regional_RegionalExtension(Bytes),
dec_components45(Num-1, Remain, [Term|Acc]).

dec_components46(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components46(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntersectionGeometry(Bytes),
dec_components46(Num-1, Remain, [Term|Acc]).

dec_components48(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components48(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntersectionState_regional_RegionalExtension(Bytes),
dec_components48(Num-1, Remain, [Term|Acc]).

dec_components49(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components49(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntersectionState(Bytes),
dec_components49(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = dec_BasicSafetyMessage_partII_PartIIcontent(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components50(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components50(Num, Bytes, Acc) ->
{Term,Remain} = dec_ExitService_SEQOF(Bytes),
dec_components50(Num-1, Remain, [Term|Acc]).

dec_components51(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components51(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericSignage_SEQOF(Bytes),
dec_components51(Num-1, Remain, [Term|Acc]).

dec_components52(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components52(Num, Bytes, Acc) ->
{Term,Remain} = dec_SpeedLimit_SEQOF(Bytes),
dec_components52(Num-1, Remain, [Term|Acc]).

dec_components53(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components53(Num, Bytes, Acc) ->
{Term,Remain} = dec_WorkZone_SEQOF(Bytes),
dec_components53(Num-1, Remain, [Term|Acc]).

dec_components54(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components54(Num, Bytes, Acc) ->
{Term,Remain} = dec_TireData(Bytes),
dec_components54(Num-1, Remain, [Term|Acc]).

dec_components55(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components55(Num, Bytes, Acc) ->
{Term,Remain} = dec_AxleWeightSet(Bytes),
dec_components55(Num-1, Remain, [Term|Acc]).

dec_components58(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components58(Num, Bytes, Acc) ->
{Term,Remain} = dec_LaneDataAttribute_regional_RegionalExtension(Bytes),
dec_components58(Num-1, Remain, [Term|Acc]).

dec_components59(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components59(Num, Bytes, Acc) ->
{Term,Remain} = dec_LaneDataAttribute(Bytes),
dec_components59(Num-1, Remain, [Term|Acc]).

dec_components60(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components60(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericLane(Bytes),
dec_components60(Num-1, Remain, [Term|Acc]).

dec_components69(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components69(Num, Bytes, Acc) ->
{Term,Remain} = dec_ConnectionManeuverAssist(Bytes),
dec_components69(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = dec_BasicSafetyMessage_regional_RegionalExtension(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components70(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components70(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementEvent(Bytes),
dec_components70(Num-1, Remain, [Term|Acc]).

dec_components71(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components71(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementEvent_regional_RegionalExtension(Bytes),
dec_components71(Num-1, Remain, [Term|Acc]).

dec_components72(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components72(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementState(Bytes),
dec_components72(Num-1, Remain, [Term|Acc]).

dec_components73(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components73(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementState_regional_RegionalExtension(Bytes),
dec_components73(Num-1, Remain, [Term|Acc]).

dec_components74(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components74(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V5@V0,V5@Buf1} = case Bytes of
<<0:1,V5@V3:4,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> reserved;
1 -> stopLine;
2 -> roundedCapStyleA;
3 -> roundedCapStyleB;
4 -> mergePoint;
5 -> divergePoint;
6 -> downstreamStopLine;
7 -> downstreamStartNode;
8 -> closedToTraffic;
9 -> safeIsland;
10 -> curbPresentAtStepOff;
11 -> hydrantPresent;
_ -> exit({error,{asn1,{decode_enumerated,V5@V3}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<0:1,V5@V9:7,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10};
<<1:1,0:1,V5@V10:14,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<1:1,1:1,V5@V10:6,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
V5@Mul12 = V5@V10 * 16384,
{V5@Mul12,V5@Buf11}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,
dec_components74(Num-1, Remain, [Term|Acc]).

dec_components75(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components75(Num, Bytes, Acc) ->
{Term,Remain} = dec_NodeAttributeSetLL_regional_RegionalExtension(Bytes),
dec_components75(Num-1, Remain, [Term|Acc]).

dec_components76(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components76(Num, Bytes, Acc) ->
{Term,Remain} = dec_NodeAttributeSetXY_regional_RegionalExtension(Bytes),
dec_components76(Num-1, Remain, [Term|Acc]).

dec_components77(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components77(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V6@V0,V6@Buf1} = case Bytes of
<<0:1,V6@V3:4,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> reserved;
1 -> stopLine;
2 -> roundedCapStyleA;
3 -> roundedCapStyleB;
4 -> mergePoint;
5 -> divergePoint;
6 -> downstreamStopLine;
7 -> downstreamStartNode;
8 -> closedToTraffic;
9 -> safeIsland;
10 -> curbPresentAtStepOff;
11 -> hydrantPresent;
_ -> exit({error,{asn1,{decode_enumerated,V6@V3}}})
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<0:1,V6@V9:7,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10};
<<1:1,0:1,V6@V10:14,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
{V6@V10,V6@Buf11};
<<1:1,1:1,V6@V10:6,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
V6@Mul12 = V6@V10 * 16384,
{V6@Mul12,V6@Buf11}
end,
<<V6@V13:V6@V6/unit:8,V6@Buf14/bitstring>> = V6@Buf7,
{V6@V13,V6@Buf14}
end,
V6@Int15 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int15,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end,
dec_components77(Num-1, Remain, [Term|Acc]).

dec_components78(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components78(Num, Bytes, Acc) ->
{Term,Remain} = dec_NodeLL(Bytes),
dec_components78(Num-1, Remain, [Term|Acc]).

dec_components79(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components79(Num, Bytes, Acc) ->
{Term,Remain} = dec_NodeXY(Bytes),
dec_components79(Num-1, Remain, [Term|Acc]).

dec_components81(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components81(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes,
{V7@V0,V7@Buf1}
end,
dec_components81(Num-1, Remain, [Term|Acc]).

dec_components83(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components83(Num, Bytes, Acc) ->
{Term,Remain} = dec_PathHistoryPoint(Bytes),
dec_components83(Num-1, Remain, [Term|Acc]).

dec_components84(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components84(Num, Bytes, Acc) ->
{Term,Remain} = dec_Position3D_regional_RegionalExtension(Bytes),
dec_components84(Num-1, Remain, [Term|Acc]).

dec_components85(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components85(Num, Bytes, Acc) ->
{Term,Remain} = dec_SignalControlZone(Bytes),
dec_components85(Num-1, Remain, [Term|Acc]).

dec_components87(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components87(Num, Bytes, Acc) ->
{Term,Remain} = dec_RegionOffsets(Bytes),
dec_components87(Num-1, Remain, [Term|Acc]).

dec_components88(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components88(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V8@V0,V8@Buf1} = case Bytes of
<<0:1,V8@V3:5,V8@Buf4/bitstring>> ->
V8@Int5 = case V8@V3 of
0 -> reserved;
1 -> itemA;
2 -> itemB;
3 -> itemC;
4 -> itemD;
5 -> itemE;
6 -> itemF;
7 -> itemG;
8 -> itemI;
9 -> itemJ;
10 -> itemK;
11 -> itemL;
12 -> itemM;
13 -> itemN;
14 -> itemO;
15 -> itemP;
16 -> itemQ;
_ -> exit({error,{asn1,{decode_enumerated,V8@V3}}})
end,
{V8@Int5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V6,V8@Buf7};
<<1:1,V8@Buf5/bitstring>> ->
{V8@V6,V8@Buf7} = case V8@Buf5 of
<<0:1,V8@V9:7,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10};
<<1:1,0:1,V8@V10:14,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
{V8@V10,V8@Buf11};
<<1:1,1:1,V8@V10:6,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
V8@Mul12 = V8@V10 * 16384,
{V8@Mul12,V8@Buf11}
end,
<<V8@V13:V8@V6/unit:8,V8@Buf14/bitstring>> = V8@Buf7,
{V8@V13,V8@Buf14}
end,
V8@Int15 = case V8@V3 of
_ -> {asn1_enum,V8@V3}
end,
{V8@Int15,V8@Buf4}
end,
{V8@V0,V8@Buf1}
end,
dec_components88(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = dec_CommonSafetyRequest_regional_RegionalExtension(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

dec_components90(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components90(Num, Bytes, Acc) ->
{Term,Remain} = dec_RequestorDescription_regional_RegionalExtension(Bytes),
dec_components90(Num-1, Remain, [Term|Acc]).

dec_components91(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components91(Num, Bytes, Acc) ->
{Term,Remain} = dec_RestrictionClassAssignment(Bytes),
dec_components91(Num-1, Remain, [Term|Acc]).

dec_components92(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components92(Num, Bytes, Acc) ->
{Term,Remain} = dec_RestrictionUserType(Bytes),
dec_components92(Num-1, Remain, [Term|Acc]).

dec_components93(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components93(Num, Bytes, Acc) ->
{Term,Remain} = dec_RestrictionUserType_regional_RegionalExtension(Bytes),
dec_components93(Num-1, Remain, [Term|Acc]).

dec_components94(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components94(Num, Bytes, Acc) ->
{Term,Remain} = dec_GenericLane(Bytes),
dec_components94(Num-1, Remain, [Term|Acc]).

dec_components95(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components95(Num, Bytes, Acc) ->
{Term,Remain} = dec_RoadSegment(Bytes),
dec_components95(Num-1, Remain, [Term|Acc]).

dec_components96(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components96(Num, Bytes, Acc) ->
{Term,Remain} = dec_RoadSegment_regional_RegionalExtension(Bytes),
dec_components96(Num-1, Remain, [Term|Acc]).

dec_components97(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components97(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V9@V0:10,V9@Buf1/bitstring>> = Bytes,
V9@Add2 = V9@V0 + 1,
<<V9@V3:V9@Add2/binary-unit:8,V9@Buf4/bitstring>> = V9@Buf1,
V9@Conv5 = binary:copy(V9@V3),
{V9@Conv5,V9@Buf4}
end,
dec_components97(Num-1, Remain, [Term|Acc]).

dec_components98(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components98(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V10@V0,V10@Buf1} = case Bytes of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Int5 = case V10@V3 of
0 -> reserved;
1 -> doNotBlock;
2 -> whiteLine;
3 -> mergingLaneLeft;
4 -> mergingLaneRight;
5 -> curbOnLeft;
6 -> curbOnRight;
7 -> loadingzoneOnLeft;
8 -> loadingzoneOnRight;
9 -> turnOutPointOnLeft;
10 -> turnOutPointOnRight;
11 -> adjacentParkingOnLeft;
12 -> adjacentParkingOnRight;
13 -> adjacentBikeLaneOnLeft;
14 -> adjacentBikeLaneOnRight;
15 -> sharedBikeLane;
16 -> bikeBoxInFront;
17 -> transitStopOnLeft;
18 -> transitStopOnRight;
19 -> transitStopInLane;
20 -> sharedWithTrackedVehicle;
21 -> safeIsland;
22 -> lowCurbsPresent;
23 -> rumbleStripPresent;
24 -> audibleSignalingPresent;
25 -> adaptiveTimingPresent;
26 -> rfSignalRequestPresent;
27 -> partialCurbIntrusion;
28 -> taperToLeft;
29 -> taperToRight;
30 -> taperToCenterLine;
31 -> parallelParking;
32 -> headInParking;
33 -> freeParking;
34 -> timeRestrictionsOnParking;
35 -> costToPark;
36 -> midBlockCurbPresent;
37 -> unEvenPavementPresent;
_ -> exit({error,{asn1,{decode_enumerated,V10@V3}}})
end,
{V10@Int5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:6,V10@Buf7/bitstring>> ->
{V10@V6,V10@Buf7};
<<1:1,V10@Buf5/bitstring>> ->
{V10@V6,V10@Buf7} = case V10@Buf5 of
<<0:1,V10@V9:7,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10};
<<1:1,0:1,V10@V10:14,V10@Buf11/bitstring>> when V10@V10 =/= 0 ->
{V10@V10,V10@Buf11};
<<1:1,1:1,V10@V10:6,V10@Buf11/bitstring>> when V10@V10 =/= 0 ->
V10@Mul12 = V10@V10 * 16384,
{V10@Mul12,V10@Buf11}
end,
<<V10@V13:V10@V6/unit:8,V10@Buf14/bitstring>> = V10@Buf7,
{V10@V13,V10@Buf14}
end,
V10@Int15 = case V10@V3 of
_ -> {asn1_enum,V10@V3}
end,
{V10@Int15,V10@Buf4}
end,
{V10@V0,V10@Buf1}
end,
dec_components98(Num-1, Remain, [Term|Acc]).

dec_components99(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components99(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V11@V0,V11@Buf1} = case Bytes of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Int5 = case V11@V3 of
0 -> reserved;
1 -> doNotBlock;
2 -> whiteLine;
3 -> mergingLaneLeft;
4 -> mergingLaneRight;
5 -> curbOnLeft;
6 -> curbOnRight;
7 -> loadingzoneOnLeft;
8 -> loadingzoneOnRight;
9 -> turnOutPointOnLeft;
10 -> turnOutPointOnRight;
11 -> adjacentParkingOnLeft;
12 -> adjacentParkingOnRight;
13 -> adjacentBikeLaneOnLeft;
14 -> adjacentBikeLaneOnRight;
15 -> sharedBikeLane;
16 -> bikeBoxInFront;
17 -> transitStopOnLeft;
18 -> transitStopOnRight;
19 -> transitStopInLane;
20 -> sharedWithTrackedVehicle;
21 -> safeIsland;
22 -> lowCurbsPresent;
23 -> rumbleStripPresent;
24 -> audibleSignalingPresent;
25 -> adaptiveTimingPresent;
26 -> rfSignalRequestPresent;
27 -> partialCurbIntrusion;
28 -> taperToLeft;
29 -> taperToRight;
30 -> taperToCenterLine;
31 -> parallelParking;
32 -> headInParking;
33 -> freeParking;
34 -> timeRestrictionsOnParking;
35 -> costToPark;
36 -> midBlockCurbPresent;
37 -> unEvenPavementPresent;
_ -> exit({error,{asn1,{decode_enumerated,V11@V3}}})
end,
{V11@Int5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:6,V11@Buf7/bitstring>> ->
{V11@V6,V11@Buf7};
<<1:1,V11@Buf5/bitstring>> ->
{V11@V6,V11@Buf7} = case V11@Buf5 of
<<0:1,V11@V9:7,V11@Buf10/bitstring>> when V11@V9 =/= 0 ->
{V11@V9,V11@Buf10};
<<1:1,0:1,V11@V10:14,V11@Buf11/bitstring>> when V11@V10 =/= 0 ->
{V11@V10,V11@Buf11};
<<1:1,1:1,V11@V10:6,V11@Buf11/bitstring>> when V11@V10 =/= 0 ->
V11@Mul12 = V11@V10 * 16384,
{V11@Mul12,V11@Buf11}
end,
<<V11@V13:V11@V6/unit:8,V11@Buf14/bitstring>> = V11@Buf7,
{V11@V13,V11@Buf14}
end,
V11@Int15 = case V11@V3 of
_ -> {asn1_enum,V11@V3}
end,
{V11@Int15,V11@Buf4}
end,
{V11@V0,V11@Buf1}
end,
dec_components99(Num-1, Remain, [Term|Acc]).

dec_os_Type2(Bytes, Id) when Id =:= 18 ->
{Term,_} = dec_MapData(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 19 ->
{Term,_} = dec_SPAT(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 20 ->
{Term,_} = dec_BasicSafetyMessage(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 21 ->
{Term,_} = dec_CommonSafetyRequest(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 22 ->
{Term,_} = dec_EmergencyVehicleAlert(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 23 ->
{Term,_} = dec_IntersectionCollision(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 24 ->
{Term,_} = dec_NMEAcorrections(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 25 ->
{Term,_} = dec_ProbeDataManagement(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 26 ->
{Term,_} = dec_ProbeVehicleData(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 27 ->
{Term,_} = dec_RoadSideAlert(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 28 ->
{Term,_} = dec_RTCMcorrections(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 29 ->
{Term,_} = dec_SignalRequestMessage(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 30 ->
{Term,_} = dec_SignalStatusMessage(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 31 ->
{Term,_} = dec_TravelerInformation(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 32 ->
{Term,_} = dec_PersonalSafetyMessage(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 240 ->
{Term,_} = dec_TestMessage00(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 241 ->
{Term,_} = dec_TestMessage01(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 242 ->
{Term,_} = dec_TestMessage02(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 243 ->
{Term,_} = dec_TestMessage03(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 244 ->
{Term,_} = dec_TestMessage04(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 245 ->
{Term,_} = dec_TestMessage05(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 246 ->
{Term,_} = dec_TestMessage06(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 247 ->
{Term,_} = dec_TestMessage07(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 248 ->
{Term,_} = dec_TestMessage08(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 249 ->
{Term,_} = dec_TestMessage09(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 250 ->
{Term,_} = dec_TestMessage10(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 251 ->
{Term,_} = dec_TestMessage11(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 252 ->
{Term,_} = dec_TestMessage12(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 253 ->
{Term,_} = dec_TestMessage13(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 254 ->
{Term,_} = dec_TestMessage14(Bytes),
Term;
dec_os_Type2(Bytes, Id) when Id =:= 255 ->
{Term,_} = dec_TestMessage15(Bytes),
Term;
dec_os_Type2(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type6(Bytes, Id) when Id =:= 0 ->
{Term,_} = dec_VehicleSafetyExtensions(Bytes),
Term;
dec_os_Type6(Bytes, Id) when Id =:= 1 ->
{Term,_} = dec_SpecialVehicleExtensions(Bytes),
Term;
dec_os_Type6(Bytes, Id) when Id =:= 2 ->
{Term,_} = dec_SupplementalVehicleExtensions(Bytes),
Term;
dec_os_Type6(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type8(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Type1(Val, Id) ->
if Id =:= 18 ->
enc_MapData(Val);
Id =:= 19 ->
enc_SPAT(Val);
Id =:= 20 ->
enc_BasicSafetyMessage(Val);
Id =:= 21 ->
enc_CommonSafetyRequest(Val);
Id =:= 22 ->
enc_EmergencyVehicleAlert(Val);
Id =:= 23 ->
enc_IntersectionCollision(Val);
Id =:= 24 ->
enc_NMEAcorrections(Val);
Id =:= 25 ->
enc_ProbeDataManagement(Val);
Id =:= 26 ->
enc_ProbeVehicleData(Val);
Id =:= 27 ->
enc_RoadSideAlert(Val);
Id =:= 28 ->
enc_RTCMcorrections(Val);
Id =:= 29 ->
enc_SignalRequestMessage(Val);
Id =:= 30 ->
enc_SignalStatusMessage(Val);
Id =:= 31 ->
enc_TravelerInformation(Val);
Id =:= 32 ->
enc_PersonalSafetyMessage(Val);
Id =:= 240 ->
enc_TestMessage00(Val);
Id =:= 241 ->
enc_TestMessage01(Val);
Id =:= 242 ->
enc_TestMessage02(Val);
Id =:= 243 ->
enc_TestMessage03(Val);
Id =:= 244 ->
enc_TestMessage04(Val);
Id =:= 245 ->
enc_TestMessage05(Val);
Id =:= 246 ->
enc_TestMessage06(Val);
Id =:= 247 ->
enc_TestMessage07(Val);
Id =:= 248 ->
enc_TestMessage08(Val);
Id =:= 249 ->
enc_TestMessage09(Val);
Id =:= 250 ->
enc_TestMessage10(Val);
Id =:= 251 ->
enc_TestMessage11(Val);
Id =:= 252 ->
enc_TestMessage12(Val);
Id =:= 253 ->
enc_TestMessage13(Val);
Id =:= 254 ->
enc_TestMessage14(Val);
Id =:= 255 ->
enc_TestMessage15(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Type3(Val, Id) ->
if Id =:= 0 ->
enc_VehicleSafetyExtensions(Val);
Id =:= 1 ->
enc_SpecialVehicleExtensions(Val);
Id =:= 2 ->
enc_SupplementalVehicleExtensions(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Type4(Val, Id) ->
open_type_to_binary(Val).

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_chars(Val, N) ->
    [ 
     C ||
         <<C:N>> <= Val
    ].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

encode_chars(Val, NumBits) ->
    << 
      <<C:NumBits>> ||
          C <- Val
    >>.

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

open_type_to_binary({asn1_OPENTYPE, Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
