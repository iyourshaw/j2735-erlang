%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in PersonalSafetyMessage.

-module('PersonalSafetyMessage').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("PersonalSafetyMessage.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'PersonalSafetyMessage'},
            {options,[{i,"./ebin"},uper,jer,verbose,{i,"./asn"},{outdir,"./ebin"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_PersonalSafetyMessage/1,
enc_PropelledInformation/1,
enc_AnimalPropelledType/1,
enc_AnimalType/1,
enc_Attachment/1,
enc_AttachmentRadius/1,
enc_MotorizedPropelledType/1,
enc_NumberOfParticipantsInCluster/1,
enc_HumanPropelledType/1,
enc_PersonalAssistive/1,
enc_PersonalClusterRadius/1,
enc_PersonalCrossingInProgress/1,
enc_PersonalCrossingRequest/1,
enc_PersonalDeviceUsageState/1,
enc_PersonalDeviceUserType/1,
enc_PublicSafetyAndRoadWorkerActivity/1,
enc_PublicSafetyDirectingTrafficSubType/1,
enc_PublicSafetyEventResponderWorkerType/1,
enc_UserSizeAndBehaviour/1
]).

-export([
dec_PersonalSafetyMessage/1,
dec_PropelledInformation/1,
dec_AnimalPropelledType/1,
dec_AnimalType/1,
dec_Attachment/1,
dec_AttachmentRadius/1,
dec_MotorizedPropelledType/1,
dec_NumberOfParticipantsInCluster/1,
dec_HumanPropelledType/1,
dec_PersonalAssistive/1,
dec_PersonalClusterRadius/1,
dec_PersonalCrossingInProgress/1,
dec_PersonalCrossingRequest/1,
dec_PersonalDeviceUsageState/1,
dec_PersonalDeviceUserType/1,
dec_PublicSafetyAndRoadWorkerActivity/1,
dec_PublicSafetyDirectingTrafficSubType/1,
dec_PublicSafetyEventResponderWorkerType/1,
dec_UserSizeAndBehaviour/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('PersonalSafetyMessage', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('PersonalSafetyMessage', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('PersonalSafetyMessage', Data) -> enc_PersonalSafetyMessage(Data);
encode_disp('PropelledInformation', Data) -> enc_PropelledInformation(Data);
encode_disp('AnimalPropelledType', Data) -> enc_AnimalPropelledType(Data);
encode_disp('AnimalType', Data) -> enc_AnimalType(Data);
encode_disp('Attachment', Data) -> enc_Attachment(Data);
encode_disp('AttachmentRadius', Data) -> enc_AttachmentRadius(Data);
encode_disp('MotorizedPropelledType', Data) -> enc_MotorizedPropelledType(Data);
encode_disp('NumberOfParticipantsInCluster', Data) -> enc_NumberOfParticipantsInCluster(Data);
encode_disp('HumanPropelledType', Data) -> enc_HumanPropelledType(Data);
encode_disp('PersonalAssistive', Data) -> enc_PersonalAssistive(Data);
encode_disp('PersonalClusterRadius', Data) -> enc_PersonalClusterRadius(Data);
encode_disp('PersonalCrossingInProgress', Data) -> enc_PersonalCrossingInProgress(Data);
encode_disp('PersonalCrossingRequest', Data) -> enc_PersonalCrossingRequest(Data);
encode_disp('PersonalDeviceUsageState', Data) -> enc_PersonalDeviceUsageState(Data);
encode_disp('PersonalDeviceUserType', Data) -> enc_PersonalDeviceUserType(Data);
encode_disp('PublicSafetyAndRoadWorkerActivity', Data) -> enc_PublicSafetyAndRoadWorkerActivity(Data);
encode_disp('PublicSafetyDirectingTrafficSubType', Data) -> enc_PublicSafetyDirectingTrafficSubType(Data);
encode_disp('PublicSafetyEventResponderWorkerType', Data) -> enc_PublicSafetyEventResponderWorkerType(Data);
encode_disp('UserSizeAndBehaviour', Data) -> enc_UserSizeAndBehaviour(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('PersonalSafetyMessage', Data) -> dec_PersonalSafetyMessage(Data);
decode_disp('PropelledInformation', Data) -> dec_PropelledInformation(Data);
decode_disp('AnimalPropelledType', Data) -> dec_AnimalPropelledType(Data);
decode_disp('AnimalType', Data) -> dec_AnimalType(Data);
decode_disp('Attachment', Data) -> dec_Attachment(Data);
decode_disp('AttachmentRadius', Data) -> dec_AttachmentRadius(Data);
decode_disp('MotorizedPropelledType', Data) -> dec_MotorizedPropelledType(Data);
decode_disp('NumberOfParticipantsInCluster', Data) -> dec_NumberOfParticipantsInCluster(Data);
decode_disp('HumanPropelledType', Data) -> dec_HumanPropelledType(Data);
decode_disp('PersonalAssistive', Data) -> dec_PersonalAssistive(Data);
decode_disp('PersonalClusterRadius', Data) -> dec_PersonalClusterRadius(Data);
decode_disp('PersonalCrossingInProgress', Data) -> dec_PersonalCrossingInProgress(Data);
decode_disp('PersonalCrossingRequest', Data) -> dec_PersonalCrossingRequest(Data);
decode_disp('PersonalDeviceUsageState', Data) -> dec_PersonalDeviceUsageState(Data);
decode_disp('PersonalDeviceUserType', Data) -> dec_PersonalDeviceUserType(Data);
decode_disp('PublicSafetyAndRoadWorkerActivity', Data) -> dec_PublicSafetyAndRoadWorkerActivity(Data);
decode_disp('PublicSafetyDirectingTrafficSubType', Data) -> dec_PublicSafetyDirectingTrafficSubType(Data);
decode_disp('PublicSafetyEventResponderWorkerType', Data) -> dec_PublicSafetyEventResponderWorkerType(Data);
decode_disp('UserSizeAndBehaviour', Data) -> dec_UserSizeAndBehaviour(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_PersonalSafetyMessage(Val) ->
[begin
Enc1@element = element(10, Val),
Enc2@element = element(11, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(12, Val),
Enc4@element = element(13, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(14, Val),
Enc6@element = element(15, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(16, Val),
Enc8@element = element(17, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(18, Val),
Enc10@element = element(19, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(20, Val),
Enc12@element = element(21, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(22, Val),
Enc14@element = element(23, Val),
if Enc13@element =:= asn1_NOVALUE ->
if Enc14@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc14@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(24, Val),
Enc16@element = element(25, Val),
if Enc15@element =:= asn1_NOVALUE ->
if Enc16@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc16@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(26, Val),
Enc18@element = element(27, Val),
if Enc17@element =:= asn1_NOVALUE ->
if Enc18@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc18@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute basicType(1) with type ENUMERATED
Enc20@element = element(2, Val),
if Enc20@element =:= unavailable ->
<<0:1,0:3>>;
Enc20@element =:= aPEDESTRIAN ->
<<0:1,1:3>>;
Enc20@element =:= aPEDALCYCLIST ->
<<0:1,2:3>>;
Enc20@element =:= aPUBLICSAFETYWORKER ->
<<0:1,3:3>>;
Enc20@element =:= anANIMAL ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc20@element}}})
end
end,
begin
%% attribute secMark(2) with type INTEGER
Enc22@element = element(3, Val),
if Enc22@element bsr 16 =:= 0 ->
<<Enc22@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc22@element}}})
end
end,
begin
%% attribute msgCnt(3) with type INTEGER
Enc24@element = element(4, Val),
if Enc24@element bsr 7 =:= 0 ->
<<Enc24@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc24@element}}})
end
end,
begin
%% attribute id(4) with type OCTET STRING
Enc26@element = element(5, Val),
Enc27@len = byte_size(Enc26@element),
if Enc27@len =:= 4 ->
Enc26@element
end
end,
begin
%% attribute position(5) with type Position3D
Enc28@element = element(6, Val),
'Common':enc_Position3D(Enc28@element)
end,
begin
%% attribute accuracy(6) with type PositionalAccuracy
Enc29@element = element(7, Val),
'Common':enc_PositionalAccuracy(Enc29@element)
end,
begin
%% attribute speed(7) with type INTEGER
Enc30@element = element(8, Val),
if Enc30@element bsr 13 =:= 0 ->
<<Enc30@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc30@element}}})
end
end,
begin
%% attribute heading(8) with type INTEGER
Enc32@element = element(9, Val),
if 0 =< Enc32@element, Enc32@element < 28801 ->
<<Enc32@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc32@element}}})
end
end,
begin
%% attribute accelSet(9) with type AccelerationSet4Way
Enc34@element = element(10, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_AccelerationSet4Way(Enc34@element)
end
end,
begin
%% attribute pathHistory(10) with type PathHistory
Enc36@element = element(11, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_PathHistory(Enc36@element)
end
end,
begin
%% attribute pathPrediction(11) with type PathPrediction
Enc38@element = element(12, Val),
if Enc38@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_PathPrediction(Enc38@element)
end
end,
begin
%% attribute propulsion(12) with type PropelledInformation
Enc40@element = element(13, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
true ->
enc_PropelledInformation(Enc40@element)
end
end,
begin
%% attribute useState(13) with type BIT STRING
Enc42@element = element(14, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc43@bs = try bit_string_name2pos_1(Enc42@element) of
Enc43@positions ->
bitstring_from_positions(Enc43@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Enc42@element, 9)
end,
Enc43@bits = bit_size(Enc43@bs),
if Enc43@bits =:= 9 ->
[<<0:1>>|Enc43@bs];
Enc43@bits < 128 ->
[<<1:1,Enc43@bits:8>>|Enc43@bs];
Enc43@bits < 16384 ->
[<<1:1,2:2,Enc43@bits:14>>|Enc43@bs];
true ->
[<<1:1>>|encode_fragmented(Enc43@bs, 1)]
end
end
end
end,
begin
%% attribute crossRequest(14) with type BOOLEAN
Enc45@element = element(15, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
Enc45@element =:= false ->
<<0:1>>;
Enc45@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc45@element}}})
end
end,
begin
%% attribute crossState(15) with type BOOLEAN
Enc48@element = element(16, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
Enc48@element =:= false ->
<<0:1>>;
Enc48@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc48@element}}})
end
end,
begin
%% attribute clusterSize(16) with type ENUMERATED
Enc51@element = element(17, Val),
if Enc51@element =:= asn1_NOVALUE ->
[];
Enc51@element =:= unavailable ->
<<0:1,0:2>>;
Enc51@element =:= small ->
<<0:1,1:2>>;
Enc51@element =:= medium ->
<<0:1,2:2>>;
Enc51@element =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc51@element}}})
end
end,
begin
%% attribute clusterRadius(17) with type INTEGER
Enc54@element = element(18, Val),
if Enc54@element =:= asn1_NOVALUE ->
[];
0 =< Enc54@element, Enc54@element < 101 ->
<<Enc54@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc54@element}}})
end
end,
begin
%% attribute eventResponderType(18) with type ENUMERATED
Enc57@element = element(19, Val),
if Enc57@element =:= asn1_NOVALUE ->
[];
Enc57@element =:= unavailable ->
<<0:1,0:3>>;
Enc57@element =:= towOperater ->
<<0:1,1:3>>;
Enc57@element =:= fireAndEMSWorker ->
<<0:1,2:3>>;
Enc57@element =:= aDOTWorker ->
<<0:1,3:3>>;
Enc57@element =:= lawEnforcement ->
<<0:1,4:3>>;
Enc57@element =:= hazmatResponder ->
<<0:1,5:3>>;
Enc57@element =:= animalControlWorker ->
<<0:1,6:3>>;
Enc57@element =:= otherPersonnel ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc57@element}}})
end
end,
begin
%% attribute activityType(19) with type BIT STRING
Enc60@element = element(20, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc61@bs = try bit_string_name2pos_2(Enc60@element) of
Enc61@positions ->
bitstring_from_positions(Enc61@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Enc60@element, 6)
end,
Enc61@bits = bit_size(Enc61@bs),
if Enc61@bits =:= 6 ->
[<<0:1>>|Enc61@bs];
Enc61@bits < 128 ->
[<<1:1,Enc61@bits:8>>|Enc61@bs];
Enc61@bits < 16384 ->
[<<1:1,2:2,Enc61@bits:14>>|Enc61@bs];
true ->
[<<1:1>>|encode_fragmented(Enc61@bs, 1)]
end
end
end
end,
begin
%% attribute activitySubType(20) with type BIT STRING
Enc63@element = element(21, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc64@bs = try bit_string_name2pos_3(Enc63@element) of
Enc64@positions ->
bitstring_from_positions(Enc64@positions, 7)
catch throw:invalid ->
adjust_trailing_zeroes(Enc63@element, 7)
end,
Enc64@bits = bit_size(Enc64@bs),
if Enc64@bits =:= 7 ->
[<<0:1>>|Enc64@bs];
Enc64@bits < 128 ->
[<<1:1,Enc64@bits:8>>|Enc64@bs];
Enc64@bits < 16384 ->
[<<1:1,2:2,Enc64@bits:14>>|Enc64@bs];
true ->
[<<1:1>>|encode_fragmented(Enc64@bs, 1)]
end
end
end
end,
begin
%% attribute assistType(21) with type BIT STRING
Enc66@element = element(22, Val),
if Enc66@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc67@bs = try bit_string_name2pos_4(Enc66@element) of
Enc67@positions ->
bitstring_from_positions(Enc67@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Enc66@element, 6)
end,
Enc67@bits = bit_size(Enc67@bs),
if Enc67@bits =:= 6 ->
[<<0:1>>|Enc67@bs];
Enc67@bits < 128 ->
[<<1:1,Enc67@bits:8>>|Enc67@bs];
Enc67@bits < 16384 ->
[<<1:1,2:2,Enc67@bits:14>>|Enc67@bs];
true ->
[<<1:1>>|encode_fragmented(Enc67@bs, 1)]
end
end
end
end,
begin
%% attribute sizing(22) with type BIT STRING
Enc69@element = element(23, Val),
if Enc69@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc70@bs = try bit_string_name2pos_5(Enc69@element) of
Enc70@positions ->
bitstring_from_positions(Enc70@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Enc69@element, 5)
end,
Enc70@bits = bit_size(Enc70@bs),
if Enc70@bits =:= 5 ->
[<<0:1>>|Enc70@bs];
Enc70@bits < 128 ->
[<<1:1,Enc70@bits:8>>|Enc70@bs];
Enc70@bits < 16384 ->
[<<1:1,2:2,Enc70@bits:14>>|Enc70@bs];
true ->
[<<1:1>>|encode_fragmented(Enc70@bs, 1)]
end
end
end
end,
begin
%% attribute attachment(23) with type ENUMERATED
Enc72@element = element(24, Val),
if Enc72@element =:= asn1_NOVALUE ->
[];
Enc72@element =:= unavailable ->
<<0:1,0:3>>;
Enc72@element =:= stroller ->
<<0:1,1:3>>;
Enc72@element =:= bicycleTrailer ->
<<0:1,2:3>>;
Enc72@element =:= cart ->
<<0:1,3:3>>;
Enc72@element =:= wheelchair ->
<<0:1,4:3>>;
Enc72@element =:= otherWalkAssistAttachments ->
<<0:1,5:3>>;
Enc72@element =:= pet ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc72@element}}})
end
end,
begin
%% attribute attachmentRadius(24) with type INTEGER
Enc75@element = element(25, Val),
if Enc75@element =:= asn1_NOVALUE ->
[];
0 =< Enc75@element, Enc75@element < 201 ->
Enc75@element;
true ->
exit({error,{asn1,{illegal_integer,Enc75@element}}})
end
end,
begin
%% attribute animalType(25) with type ENUMERATED
Enc78@element = element(26, Val),
if Enc78@element =:= asn1_NOVALUE ->
[];
Enc78@element =:= unavailable ->
<<0:1,0:2>>;
Enc78@element =:= serviceUse ->
<<0:1,1:2>>;
Enc78@element =:= pet ->
<<0:1,2:2>>;
Enc78@element =:= farm ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc78@element}}})
end
end|begin
%% attribute regional(26) with type SEQUENCE OF
Enc81@element = element(27, Val),
if Enc81@element =:= asn1_NOVALUE ->
[];
true ->
enc_PersonalSafetyMessage_regional(Enc81@element)
end
end].
enc_PersonalSafetyMessage_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_PersonalSafetyMessage_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_PersonalSafetyMessage_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type6(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_PersonalSafetyMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:18,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute basicType(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:3,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unavailable;
1 -> aPEDESTRIAN;
2 -> aPEDALCYCLIST;
3 -> aPUBLICSAFETYWORKER;
4 -> anANIMAL;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute secMark(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute msgCnt(3) with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute id(4) with type OCTET STRING
{Term4,Bytes6} = begin
<<V6@V0:4/binary-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Conv2 = binary:copy(V6@V0),
{V6@Conv2,V6@Buf1}
end,

%% attribute position(5) with type Position3D
{Term5,Bytes7} = 'Common':dec_Position3D(Bytes6),

%% attribute accuracy(6) with type PositionalAccuracy
{Term6,Bytes8} = 'Common':dec_PositionalAccuracy(Bytes7),

%% attribute speed(7) with type INTEGER
{Term7,Bytes9} = begin
<<V7@V0:13,V7@Buf1/bitstring>> = Bytes8,
{V7@V0,V7@Buf1}
end,

%% attribute heading(8) with type INTEGER
{Term8,Bytes10} = begin
<<V8@V0:15,V8@Buf1/bitstring>> = Bytes9,
{V8@V0,V8@Buf1}
end,

%% attribute accelSet(9) with type AccelerationSet4Way
{Term9,Bytes11} = case (Opt bsr 17) band 1 of
1 ->
'Common':dec_AccelerationSet4Way(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute pathHistory(10) with type PathHistory
{Term10,Bytes12} = case (Opt bsr 16) band 1 of
1 ->
'Common':dec_PathHistory(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute pathPrediction(11) with type PathPrediction
{Term11,Bytes13} = case (Opt bsr 15) band 1 of
1 ->
'Common':dec_PathPrediction(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute propulsion(12) with type PropelledInformation
{Term12,Bytes14} = case (Opt bsr 14) band 1 of
1 ->
dec_PropelledInformation(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute useState(13) with type BIT STRING
{Term13,Bytes15} = case (Opt bsr 13) band 1 of
1 ->
begin
{V9@V0,V9@Buf1} = case Bytes14 of
<<0:1,V9@V3:9/binary-unit:1,V9@Buf4/bitstring>> ->
{V9@V3,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@V8:V9@V6/binary-unit:1,V9@Buf9/bitstring>> ->
{V9@V8,V9@Buf9};
<<1:1,0:1,V9@V7:14,V9@V9:V9@V7/binary-unit:1,V9@Buf10/bitstring>> ->
{V9@V9,V9@Buf10};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> ->
{V9@V9,V9@Buf10}  = decode_fragmented(V9@V7, V9@Buf8, 1),
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
{V9@V11,V9@Buf12}  = {decode_named_bit_string(V9@V0, [{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]),V9@Buf1},
{V9@V11,V9@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute crossRequest(14) with type BOOLEAN
{Term14,Bytes16} = case (Opt bsr 12) band 1 of
1 ->
begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes15,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute crossState(15) with type BOOLEAN
{Term15,Bytes17} = case (Opt bsr 11) band 1 of
1 ->
begin
<<V11@V0:1,V11@Buf1/bitstring>> = Bytes16,
V11@Int2 = case V11@V0 of
0 -> false;
1 -> true
end,
{V11@Int2,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute clusterSize(16) with type ENUMERATED
{Term16,Bytes18} = case (Opt bsr 10) band 1 of
1 ->
begin
{V12@V0,V12@Buf1} = case Bytes17 of
<<0:1,V12@V3:2,V12@Buf4/bitstring>> ->
V12@Int5 = case V12@V3 of
0 -> unavailable;
1 -> small;
2 -> medium;
3 -> large
end,
{V12@Int5,V12@Buf4};
<<1:1,V12@Buf2/bitstring>> ->
{V12@V3,V12@Buf4} = case V12@Buf2 of
<<0:1,V12@V6:6,V12@Buf7/bitstring>> ->
{V12@V6,V12@Buf7};
<<1:1,V12@Buf5/bitstring>> ->
{V12@V6,V12@Buf7} = case V12@Buf5 of
<<0:1,V12@V9:7,V12@Buf10/bitstring>> when V12@V9 =/= 0 ->
{V12@V9,V12@Buf10};
<<1:1,0:1,V12@V10:14,V12@Buf11/bitstring>> when V12@V10 =/= 0 ->
{V12@V10,V12@Buf11};
<<1:1,1:1,V12@V10:6,V12@Buf11/bitstring>> when V12@V10 =/= 0 ->
V12@Mul12 = V12@V10 * 16384,
{V12@Mul12,V12@Buf11}
end,
<<V12@V13:V12@V6/unit:8,V12@Buf14/bitstring>> = V12@Buf7,
{V12@V13,V12@Buf14}
end,
V12@Int15 = case V12@V3 of
_ -> {asn1_enum,V12@V3}
end,
{V12@Int15,V12@Buf4}
end,
{V12@V0,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute clusterRadius(17) with type INTEGER
{Term17,Bytes19} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V13@V0:7,V13@Buf1/bitstring>> = Bytes18,
{V13@V0,V13@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute eventResponderType(18) with type ENUMERATED
{Term18,Bytes20} = case (Opt bsr 8) band 1 of
1 ->
begin
{V14@V0,V14@Buf1} = case Bytes19 of
<<0:1,V14@V3:3,V14@Buf4/bitstring>> ->
V14@Int5 = case V14@V3 of
0 -> unavailable;
1 -> towOperater;
2 -> fireAndEMSWorker;
3 -> aDOTWorker;
4 -> lawEnforcement;
5 -> hazmatResponder;
6 -> animalControlWorker;
7 -> otherPersonnel
end,
{V14@Int5,V14@Buf4};
<<1:1,V14@Buf2/bitstring>> ->
{V14@V3,V14@Buf4} = case V14@Buf2 of
<<0:1,V14@V6:6,V14@Buf7/bitstring>> ->
{V14@V6,V14@Buf7};
<<1:1,V14@Buf5/bitstring>> ->
{V14@V6,V14@Buf7} = case V14@Buf5 of
<<0:1,V14@V9:7,V14@Buf10/bitstring>> when V14@V9 =/= 0 ->
{V14@V9,V14@Buf10};
<<1:1,0:1,V14@V10:14,V14@Buf11/bitstring>> when V14@V10 =/= 0 ->
{V14@V10,V14@Buf11};
<<1:1,1:1,V14@V10:6,V14@Buf11/bitstring>> when V14@V10 =/= 0 ->
V14@Mul12 = V14@V10 * 16384,
{V14@Mul12,V14@Buf11}
end,
<<V14@V13:V14@V6/unit:8,V14@Buf14/bitstring>> = V14@Buf7,
{V14@V13,V14@Buf14}
end,
V14@Int15 = case V14@V3 of
_ -> {asn1_enum,V14@V3}
end,
{V14@Int15,V14@Buf4}
end,
{V14@V0,V14@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute activityType(19) with type BIT STRING
{Term19,Bytes21} = case (Opt bsr 7) band 1 of
1 ->
begin
{V15@V0,V15@Buf1} = case Bytes20 of
<<0:1,V15@V3:6/binary-unit:1,V15@Buf4/bitstring>> ->
{V15@V3,V15@Buf4};
<<1:1,V15@Buf2/bitstring>> ->
{V15@V3,V15@Buf4} = case V15@Buf2 of
<<0:1,V15@V6:7,V15@V8:V15@V6/binary-unit:1,V15@Buf9/bitstring>> ->
{V15@V8,V15@Buf9};
<<1:1,0:1,V15@V7:14,V15@V9:V15@V7/binary-unit:1,V15@Buf10/bitstring>> ->
{V15@V9,V15@Buf10};
<<1:1,1:1,V15@V7:6,V15@Buf8/bitstring>> ->
{V15@V9,V15@Buf10}  = decode_fragmented(V15@V7, V15@Buf8, 1),
{V15@V9,V15@Buf10}
end,
{V15@V3,V15@Buf4}
end,
{V15@V11,V15@Buf12}  = {decode_named_bit_string(V15@V0, [{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]),V15@Buf1},
{V15@V11,V15@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute activitySubType(20) with type BIT STRING
{Term20,Bytes22} = case (Opt bsr 6) band 1 of
1 ->
begin
{V16@V0,V16@Buf1} = case Bytes21 of
<<0:1,V16@V3:7/binary-unit:1,V16@Buf4/bitstring>> ->
{V16@V3,V16@Buf4};
<<1:1,V16@Buf2/bitstring>> ->
{V16@V3,V16@Buf4} = case V16@Buf2 of
<<0:1,V16@V6:7,V16@V8:V16@V6/binary-unit:1,V16@Buf9/bitstring>> ->
{V16@V8,V16@Buf9};
<<1:1,0:1,V16@V7:14,V16@V9:V16@V7/binary-unit:1,V16@Buf10/bitstring>> ->
{V16@V9,V16@Buf10};
<<1:1,1:1,V16@V7:6,V16@Buf8/bitstring>> ->
{V16@V9,V16@Buf10}  = decode_fragmented(V16@V7, V16@Buf8, 1),
{V16@V9,V16@Buf10}
end,
{V16@V3,V16@Buf4}
end,
{V16@V11,V16@Buf12}  = {decode_named_bit_string(V16@V0, [{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]),V16@Buf1},
{V16@V11,V16@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute assistType(21) with type BIT STRING
{Term21,Bytes23} = case (Opt bsr 5) band 1 of
1 ->
begin
{V17@V0,V17@Buf1} = case Bytes22 of
<<0:1,V17@V3:6/binary-unit:1,V17@Buf4/bitstring>> ->
{V17@V3,V17@Buf4};
<<1:1,V17@Buf2/bitstring>> ->
{V17@V3,V17@Buf4} = case V17@Buf2 of
<<0:1,V17@V6:7,V17@V8:V17@V6/binary-unit:1,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<1:1,0:1,V17@V7:14,V17@V9:V17@V7/binary-unit:1,V17@Buf10/bitstring>> ->
{V17@V9,V17@Buf10};
<<1:1,1:1,V17@V7:6,V17@Buf8/bitstring>> ->
{V17@V9,V17@Buf10}  = decode_fragmented(V17@V7, V17@Buf8, 1),
{V17@V9,V17@Buf10}
end,
{V17@V3,V17@Buf4}
end,
{V17@V11,V17@Buf12}  = {decode_named_bit_string(V17@V0, [{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]),V17@Buf1},
{V17@V11,V17@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute sizing(22) with type BIT STRING
{Term22,Bytes24} = case (Opt bsr 4) band 1 of
1 ->
begin
{V18@V0,V18@Buf1} = case Bytes23 of
<<0:1,V18@V3:5/binary-unit:1,V18@Buf4/bitstring>> ->
{V18@V3,V18@Buf4};
<<1:1,V18@Buf2/bitstring>> ->
{V18@V3,V18@Buf4} = case V18@Buf2 of
<<0:1,V18@V6:7,V18@V8:V18@V6/binary-unit:1,V18@Buf9/bitstring>> ->
{V18@V8,V18@Buf9};
<<1:1,0:1,V18@V7:14,V18@V9:V18@V7/binary-unit:1,V18@Buf10/bitstring>> ->
{V18@V9,V18@Buf10};
<<1:1,1:1,V18@V7:6,V18@Buf8/bitstring>> ->
{V18@V9,V18@Buf10}  = decode_fragmented(V18@V7, V18@Buf8, 1),
{V18@V9,V18@Buf10}
end,
{V18@V3,V18@Buf4}
end,
{V18@V11,V18@Buf12}  = {decode_named_bit_string(V18@V0, [{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]),V18@Buf1},
{V18@V11,V18@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes23}
end,

%% attribute attachment(23) with type ENUMERATED
{Term23,Bytes25} = case (Opt bsr 3) band 1 of
1 ->
begin
{V19@V0,V19@Buf1} = case Bytes24 of
<<0:1,V19@V3:3,V19@Buf4/bitstring>> ->
V19@Int5 = case V19@V3 of
0 -> unavailable;
1 -> stroller;
2 -> bicycleTrailer;
3 -> cart;
4 -> wheelchair;
5 -> otherWalkAssistAttachments;
6 -> pet;
_ -> exit({error,{asn1,{decode_enumerated,V19@V3}}})
end,
{V19@Int5,V19@Buf4};
<<1:1,V19@Buf2/bitstring>> ->
{V19@V3,V19@Buf4} = case V19@Buf2 of
<<0:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V6,V19@Buf7};
<<1:1,V19@Buf5/bitstring>> ->
{V19@V6,V19@Buf7} = case V19@Buf5 of
<<0:1,V19@V9:7,V19@Buf10/bitstring>> when V19@V9 =/= 0 ->
{V19@V9,V19@Buf10};
<<1:1,0:1,V19@V10:14,V19@Buf11/bitstring>> when V19@V10 =/= 0 ->
{V19@V10,V19@Buf11};
<<1:1,1:1,V19@V10:6,V19@Buf11/bitstring>> when V19@V10 =/= 0 ->
V19@Mul12 = V19@V10 * 16384,
{V19@Mul12,V19@Buf11}
end,
<<V19@V13:V19@V6/unit:8,V19@Buf14/bitstring>> = V19@Buf7,
{V19@V13,V19@Buf14}
end,
V19@Int15 = case V19@V3 of
_ -> {asn1_enum,V19@V3}
end,
{V19@Int15,V19@Buf4}
end,
{V19@V0,V19@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes24}
end,

%% attribute attachmentRadius(24) with type INTEGER
{Term24,Bytes26} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V20@V0:8,V20@Buf1/bitstring>> = Bytes25,
{V20@V0,V20@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes25}
end,

%% attribute animalType(25) with type ENUMERATED
{Term25,Bytes27} = case (Opt bsr 1) band 1 of
1 ->
begin
{V21@V0,V21@Buf1} = case Bytes26 of
<<0:1,V21@V3:2,V21@Buf4/bitstring>> ->
V21@Int5 = case V21@V3 of
0 -> unavailable;
1 -> serviceUse;
2 -> pet;
3 -> farm
end,
{V21@Int5,V21@Buf4};
<<1:1,V21@Buf2/bitstring>> ->
{V21@V3,V21@Buf4} = case V21@Buf2 of
<<0:1,V21@V6:6,V21@Buf7/bitstring>> ->
{V21@V6,V21@Buf7};
<<1:1,V21@Buf5/bitstring>> ->
{V21@V6,V21@Buf7} = case V21@Buf5 of
<<0:1,V21@V9:7,V21@Buf10/bitstring>> when V21@V9 =/= 0 ->
{V21@V9,V21@Buf10};
<<1:1,0:1,V21@V10:14,V21@Buf11/bitstring>> when V21@V10 =/= 0 ->
{V21@V10,V21@Buf11};
<<1:1,1:1,V21@V10:6,V21@Buf11/bitstring>> when V21@V10 =/= 0 ->
V21@Mul12 = V21@V10 * 16384,
{V21@Mul12,V21@Buf11}
end,
<<V21@V13:V21@V6/unit:8,V21@Buf14/bitstring>> = V21@Buf7,
{V21@V13,V21@Buf14}
end,
V21@Int15 = case V21@V3 of
_ -> {asn1_enum,V21@V3}
end,
{V21@Int15,V21@Buf4}
end,
{V21@V0,V21@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes26}
end,

%% attribute regional(26) with type SEQUENCE OF
{Term26,Bytes28} = case Opt band 1 of
1 ->
dec_PersonalSafetyMessage_regional(Bytes27);
0 ->
{asn1_NOVALUE,Bytes27}
end,

%% Extensions
{Extensions,Bytes29} = case Ext of
0 -> {<<>>,Bytes28};
1 ->
{V22@V0,V22@Buf1} = case Bytes28 of
<<0:1,V22@V3:6,V22@Buf4/bitstring>> ->
V22@Add5 = V22@V3 + 1,
{V22@Add5,V22@Buf4};
<<1:1,V22@Buf2/bitstring>> ->
{V22@V3,V22@Buf4} = case V22@Buf2 of
<<0:1,V22@V6:7,V22@Buf7/bitstring>> when V22@V6 =/= 0 ->
{V22@V6,V22@Buf7};
<<1:1,0:1,V22@V7:14,V22@Buf8/bitstring>> when V22@V7 =/= 0 ->
{V22@V7,V22@Buf8};
<<1:1,1:1,V22@V7:6,V22@Buf8/bitstring>> when V22@V7 =/= 0 ->
V22@Mul9 = V22@V7 * 16384,
{V22@Mul9,V22@Buf8}
end,
{V22@V3,V22@Buf4}
end,
<<V22@V10:V22@V0/bitstring-unit:1,V22@Buf11/bitstring>> = V22@Buf1,
{V22@V10,V22@Buf11}
end,
Bytes30= skipextensions(Bytes29, 1, Extensions),
Res1 = {'PersonalSafetyMessage',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22,Term23,Term24,Term25,Term26},
{Res1,Bytes30}.


dec_PersonalSafetyMessage_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components7(V1@Add2, V1@Buf1, []).


dec_PersonalSafetyMessage_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_PropelledInformation(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= human ->
if ChoiceVal =:= unavailable ->
<<0:1,0:2,0:1,0:3>>;
ChoiceVal =:= otherTypes ->
<<0:1,0:2,0:1,1:3>>;
ChoiceVal =:= onFoot ->
<<0:1,0:2,0:1,2:3>>;
ChoiceVal =:= skateboard ->
<<0:1,0:2,0:1,3:3>>;
ChoiceVal =:= pushOrKickScooter ->
<<0:1,0:2,0:1,4:3>>;
ChoiceVal =:= wheelchair ->
<<0:1,0:2,0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= animal ->
if ChoiceVal =:= unavailable ->
<<0:1,1:2,0:1,0:2>>;
ChoiceVal =:= otherTypes ->
<<0:1,1:2,0:1,1:2>>;
ChoiceVal =:= animalMounted ->
<<0:1,1:2,0:1,2:2>>;
ChoiceVal =:= animalDrawnCarriage ->
<<0:1,1:2,0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= motor ->
if ChoiceVal =:= unavailable ->
<<0:1,2:2,0:1,0:3>>;
ChoiceVal =:= otherTypes ->
<<0:1,2:2,0:1,1:3>>;
ChoiceVal =:= wheelChair ->
<<0:1,2:2,0:1,2:3>>;
ChoiceVal =:= bicycle ->
<<0:1,2:2,0:1,3:3>>;
ChoiceVal =:= scooter ->
<<0:1,2:2,0:1,4:3>>;
ChoiceVal =:= selfBalancingDevice ->
<<0:1,2:2,0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end
end.


dec_PropelledInformation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> onFoot;
3 -> skateboard;
4 -> pushOrKickScooter;
5 -> wheelchair;
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{human,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> animalMounted;
3 -> animalDrawnCarriage
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end
end,
{{animal,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes2 of
<<0:1,V4@V3:3,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> wheelChair;
3 -> bicycle;
4 -> scooter;
5 -> selfBalancingDevice;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end
end,
{{motor,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_AnimalPropelledType(Val) ->
if Val =:= unavailable ->
<<0:1,0:2>>;
Val =:= otherTypes ->
<<0:1,1:2>>;
Val =:= animalMounted ->
<<0:1,2:2>>;
Val =:= animalDrawnCarriage ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AnimalPropelledType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> animalMounted;
3 -> animalDrawnCarriage
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_AnimalType(Val) ->
if Val =:= unavailable ->
<<0:1,0:2>>;
Val =:= serviceUse ->
<<0:1,1:2>>;
Val =:= pet ->
<<0:1,2:2>>;
Val =:= farm ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AnimalType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> serviceUse;
2 -> pet;
3 -> farm
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_Attachment(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= stroller ->
<<0:1,1:3>>;
Val =:= bicycleTrailer ->
<<0:1,2:3>>;
Val =:= cart ->
<<0:1,3:3>>;
Val =:= wheelchair ->
<<0:1,4:3>>;
Val =:= otherWalkAssistAttachments ->
<<0:1,5:3>>;
Val =:= pet ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_Attachment(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> stroller;
2 -> bicycleTrailer;
3 -> cart;
4 -> wheelchair;
5 -> otherWalkAssistAttachments;
6 -> pet;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_AttachmentRadius(Val) ->
if 0 =< Val, Val < 201 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AttachmentRadius(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MotorizedPropelledType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= otherTypes ->
<<0:1,1:3>>;
Val =:= wheelChair ->
<<0:1,2:3>>;
Val =:= bicycle ->
<<0:1,3:3>>;
Val =:= scooter ->
<<0:1,4:3>>;
Val =:= selfBalancingDevice ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MotorizedPropelledType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> wheelChair;
3 -> bicycle;
4 -> scooter;
5 -> selfBalancingDevice;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_NumberOfParticipantsInCluster(Val) ->
if Val =:= unavailable ->
<<0:1,0:2>>;
Val =:= small ->
<<0:1,1:2>>;
Val =:= medium ->
<<0:1,2:2>>;
Val =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_NumberOfParticipantsInCluster(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> small;
2 -> medium;
3 -> large
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_HumanPropelledType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= otherTypes ->
<<0:1,1:3>>;
Val =:= onFoot ->
<<0:1,2:3>>;
Val =:= skateboard ->
<<0:1,3:3>>;
Val =:= pushOrKickScooter ->
<<0:1,4:3>>;
Val =:= wheelchair ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_HumanPropelledType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> otherTypes;
2 -> onFoot;
3 -> skateboard;
4 -> pushOrKickScooter;
5 -> wheelchair;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_PersonalAssistive(Val) ->
Enc1@bs = try bit_string_name2pos_4(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 6)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 6 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PersonalAssistive(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PersonalClusterRadius(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_PersonalClusterRadius(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_PersonalCrossingInProgress(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PersonalCrossingInProgress(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_PersonalCrossingRequest(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PersonalCrossingRequest(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_PersonalDeviceUsageState(Val) ->
Enc1@bs = try bit_string_name2pos_1(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 9)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 9 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PersonalDeviceUsageState(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:9/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PersonalDeviceUserType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= aPEDESTRIAN ->
<<0:1,1:3>>;
Val =:= aPEDALCYCLIST ->
<<0:1,2:3>>;
Val =:= aPUBLICSAFETYWORKER ->
<<0:1,3:3>>;
Val =:= anANIMAL ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PersonalDeviceUserType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> aPEDESTRIAN;
2 -> aPEDALCYCLIST;
3 -> aPUBLICSAFETYWORKER;
4 -> anANIMAL;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_PublicSafetyAndRoadWorkerActivity(Val) ->
Enc1@bs = try bit_string_name2pos_2(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 6)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 6 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PublicSafetyAndRoadWorkerActivity(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PublicSafetyDirectingTrafficSubType(Val) ->
Enc1@bs = try bit_string_name2pos_3(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 7)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 7)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 7 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_PublicSafetyDirectingTrafficSubType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:7/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_PublicSafetyEventResponderWorkerType(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= towOperater ->
<<0:1,1:3>>;
Val =:= fireAndEMSWorker ->
<<0:1,2:3>>;
Val =:= aDOTWorker ->
<<0:1,3:3>>;
Val =:= lawEnforcement ->
<<0:1,4:3>>;
Val =:= hazmatResponder ->
<<0:1,5:3>>;
Val =:= animalControlWorker ->
<<0:1,6:3>>;
Val =:= otherPersonnel ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PublicSafetyEventResponderWorkerType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> towOperater;
2 -> fireAndEMSWorker;
3 -> aDOTWorker;
4 -> lawEnforcement;
5 -> hazmatResponder;
6 -> animalControlWorker;
7 -> otherPersonnel
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_UserSizeAndBehaviour(Val) ->
Enc1@bs = try bit_string_name2pos_5(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 5)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 5 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_UserSizeAndBehaviour(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

typeinfo('PersonalSafetyMessage') ->
  {sequence,'PersonalSafetyMessage',26,[{<<98,97,115,105,99,84,121,112,101>>,{'ENUMERATED_EXT',#{unavailable => 0,aPEDESTRIAN => 1,aPEDALCYCLIST => 2,aPUBLICSAFETYWORKER => 3,anANIMAL => 4}},mandatory},{<<115,101,99,77,97,114,107>>,{'INTEGER',{0,65535}},mandatory},{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<105,100>>,octet_string,mandatory},{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'Common','Position3D'}},mandatory},{<<97,99,99,117,114,97,99,121>>,{typeinfo,{'Common','PositionalAccuracy'}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},mandatory},{<<97,99,99,101,108,83,101,116>>,{typeinfo,{'Common','AccelerationSet4Way'}},'OPTIONAL'},{<<112,97,116,104,72,105,115,116,111,114,121>>,{typeinfo,{'Common','PathHistory'}},'OPTIONAL'},{<<112,97,116,104,80,114,101,100,105,99,116,105,111,110>>,{typeinfo,{'Common','PathPrediction'}},'OPTIONAL'},{<<112,114,111,112,117,108,115,105,111,110>>,{typeinfo,{'PersonalSafetyMessage','PropelledInformation'}},'OPTIONAL'},{<<117,115,101,83,116,97,116,101>>,{bit_string_nnl,[{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]},'OPTIONAL'},{<<99,114,111,115,115,82,101,113,117,101,115,116>>,'BOOLEAN','OPTIONAL'},{<<99,114,111,115,115,83,116,97,116,101>>,'BOOLEAN','OPTIONAL'},{<<99,108,117,115,116,101,114,83,105,122,101>>,{'ENUMERATED_EXT',#{unavailable => 0,small => 1,large => 3,medium => 2}},'OPTIONAL'},{<<99,108,117,115,116,101,114,82,97,100,105,117,115>>,{'INTEGER',{0,100}},'OPTIONAL'},{<<101,118,101,110,116,82,101,115,112,111,110,100,101,114,84,121,112,101>>,{'ENUMERATED_EXT',#{unavailable => 0,towOperater => 1,fireAndEMSWorker => 2,aDOTWorker => 3,lawEnforcement => 4,hazmatResponder => 5,animalControlWorker => 6,otherPersonnel => 7}},'OPTIONAL'},{<<97,99,116,105,118,105,116,121,84,121,112,101>>,{bit_string_nnl,[{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]},'OPTIONAL'},{<<97,99,116,105,118,105,116,121,83,117,98,84,121,112,101>>,{bit_string_nnl,[{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]},'OPTIONAL'},{<<97,115,115,105,115,116,84,121,112,101>>,{bit_string_nnl,[{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]},'OPTIONAL'},{<<115,105,122,105,110,103>>,{bit_string_nnl,[{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]},'OPTIONAL'},{<<97,116,116,97,99,104,109,101,110,116>>,{'ENUMERATED_EXT',#{unavailable => 0,pet => 6,stroller => 1,bicycleTrailer => 2,cart => 3,wheelchair => 4,otherWalkAssistAttachments => 5}},'OPTIONAL'},{<<97,116,116,97,99,104,109,101,110,116,82,97,100,105,117,115>>,{'INTEGER',{0,200}},'OPTIONAL'},{<<97,110,105,109,97,108,84,121,112,101>>,{'ENUMERATED_EXT',#{unavailable => 0,serviceUse => 1,pet => 2,farm => 3}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'PersonalSafetyMessage_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,134,{'Externaltypereference',undefined,'PersonalSafetyMessage',internal_object_set_argument_1}},[{outermost,[{'Externalvaluereference',134,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('PropelledInformation') ->
  {choice,#{<<97,110,105,109,97,108>> => {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,animalMounted => 2,animalDrawnCarriage => 3}},<<104,117,109,97,110>> => {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelchair => 5,onFoot => 2,skateboard => 3,pushOrKickScooter => 4}},<<109,111,116,111,114>> => {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelChair => 2,bicycle => 3,scooter => 4,selfBalancingDevice => 5}}}};
typeinfo('AnimalPropelledType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,animalMounted => 2,animalDrawnCarriage => 3}};
typeinfo('AnimalType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,serviceUse => 1,pet => 2,farm => 3}};
typeinfo('Attachment') ->
  {'ENUMERATED_EXT',#{unavailable => 0,pet => 6,stroller => 1,bicycleTrailer => 2,cart => 3,wheelchair => 4,otherWalkAssistAttachments => 5}};
typeinfo('AttachmentRadius') ->
  {'INTEGER',{0,200}};
typeinfo('MotorizedPropelledType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelChair => 2,bicycle => 3,scooter => 4,selfBalancingDevice => 5}};
typeinfo('NumberOfParticipantsInCluster') ->
  {'ENUMERATED_EXT',#{unavailable => 0,small => 1,large => 3,medium => 2}};
typeinfo('HumanPropelledType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,otherTypes => 1,wheelchair => 5,onFoot => 2,skateboard => 3,pushOrKickScooter => 4}};
typeinfo('PersonalAssistive') ->
  {bit_string_nnl,[{unavailable,0},{otherType,1},{vision,2},{hearing,3},{movement,4},{cognition,5}]};
typeinfo('PersonalClusterRadius') ->
  {'INTEGER',{0,100}};
typeinfo('PersonalCrossingInProgress') ->
  'BOOLEAN';
typeinfo('PersonalCrossingRequest') ->
  'BOOLEAN';
typeinfo('PersonalDeviceUsageState') ->
  {bit_string_nnl,[{unavailable,0},{other,1},{idle,2},{listeningToAudio,3},{typing,4},{calling,5},{playingGames,6},{reading,7},{viewing,8}]};
typeinfo('PersonalDeviceUserType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,aPEDESTRIAN => 1,aPEDALCYCLIST => 2,aPUBLICSAFETYWORKER => 3,anANIMAL => 4}};
typeinfo('PublicSafetyAndRoadWorkerActivity') ->
  {bit_string_nnl,[{unavailable,0},{workingOnRoad,1},{settingUpClosures,2},{respondingToEvents,3},{directingTraffic,4},{otherActivities,5}]};
typeinfo('PublicSafetyDirectingTrafficSubType') ->
  {bit_string_nnl,[{unavailable,0},{policeAndTrafficOfficers,1},{trafficControlPersons,2},{railroadCrossingGuards,3},{civilDefenseNationalGuardMilitaryPolice,4},{emergencyOrganizationPersonnel,5},{highwayServiceVehiclePersonnel,6}]};
typeinfo('PublicSafetyEventResponderWorkerType') ->
  {'ENUMERATED_EXT',#{unavailable => 0,towOperater => 1,fireAndEMSWorker => 2,aDOTWorker => 3,lawEnforcement => 4,hazmatResponder => 5,animalControlWorker => 6,otherPersonnel => 7}};
typeinfo('UserSizeAndBehaviour') ->
  {bit_string_nnl,[{unavailable,0},{smallStature,1},{largeStature,2},{erraticMoving,3},{slowMoving,4}]};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_1([unavailable | T]) ->
    [0 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([other | T]) ->
    [1 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([idle | T]) ->
    [2 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([listeningToAudio | T]) ->
    [3 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([typing | T]) ->
    [4 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([calling | T]) ->
    [5 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([playingGames | T]) ->
    [6 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([reading | T]) ->
    [7 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([viewing | T]) ->
    [8 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_1(T)];
bit_string_name2pos_1([]) ->
    [];
bit_string_name2pos_1(_) ->
    throw(invalid).

bit_string_name2pos_2([unavailable | T]) ->
    [0 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([workingOnRoad | T]) ->
    [1 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([settingUpClosures | T]) ->
    [2 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([respondingToEvents | T]) ->
    [3 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([directingTraffic | T]) ->
    [4 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([otherActivities | T]) ->
    [5 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_2(T)];
bit_string_name2pos_2([]) ->
    [];
bit_string_name2pos_2(_) ->
    throw(invalid).

bit_string_name2pos_3([unavailable | T]) ->
    [0 | bit_string_name2pos_3(T)];
bit_string_name2pos_3([policeAndTrafficOfficers | T]) ->
    [1 | bit_string_name2pos_3(T)];
bit_string_name2pos_3([trafficControlPersons | T]) ->
    [2 | bit_string_name2pos_3(T)];
bit_string_name2pos_3([railroadCrossingGuards | T]) ->
    [3 | bit_string_name2pos_3(T)];
bit_string_name2pos_3([civilDefenseNationalGuardMilitaryPolice | T]) ->
    [4 | bit_string_name2pos_3(T)];
bit_string_name2pos_3([emergencyOrganizationPersonnel | T]) ->
    [5 | bit_string_name2pos_3(T)];
bit_string_name2pos_3([highwayServiceVehiclePersonnel | T]) ->
    [6 | bit_string_name2pos_3(T)];
bit_string_name2pos_3([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_3(T)];
bit_string_name2pos_3([]) ->
    [];
bit_string_name2pos_3(_) ->
    throw(invalid).

bit_string_name2pos_4([unavailable | T]) ->
    [0 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([otherType | T]) ->
    [1 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([vision | T]) ->
    [2 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([hearing | T]) ->
    [3 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([movement | T]) ->
    [4 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([cognition | T]) ->
    [5 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_4(T)];
bit_string_name2pos_4([]) ->
    [];
bit_string_name2pos_4(_) ->
    throw(invalid).

bit_string_name2pos_5([unavailable | T]) ->
    [0 | bit_string_name2pos_5(T)];
bit_string_name2pos_5([smallStature | T]) ->
    [1 | bit_string_name2pos_5(T)];
bit_string_name2pos_5([largeStature | T]) ->
    [2 | bit_string_name2pos_5(T)];
bit_string_name2pos_5([erraticMoving | T]) ->
    [3 | bit_string_name2pos_5(T)];
bit_string_name2pos_5([slowMoving | T]) ->
    [4 | bit_string_name2pos_5(T)];
bit_string_name2pos_5([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_5(T)];
bit_string_name2pos_5([]) ->
    [];
bit_string_name2pos_5(_) ->
    throw(invalid).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = dec_PersonalSafetyMessage_regional_RegionalExtension(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_os_Type8(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Type6(Val, Id) ->
open_type_to_binary(Val).

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

open_type_to_binary({asn1_OPENTYPE, Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
