%% Generated by the Erlang ASN.1 compiler. Version: 5.3.1
%% Purpose: Erlang record definitions for each named and unnamed
%% SEQUENCE and SET, and macro definitions for each value
%% definition in module ProbeDataConfig.

-ifndef(_PROBEDATACONFIG_HRL_).
-define(_PROBEDATACONFIG_HRL_, true).

-record('ProbeDataConfig', {
  descriptor,
  triggers,
  maxAgeOfData,
  boundary = asn1_NOVALUE
  %% with extension mark
}).

-record('ConfigDescriptor', {
  identifier,
  vehClass = asn1_NOVALUE,
  roadAuthorityID = asn1_NOVALUE,
  percentOfResp = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgVehicleClass', {
  motorcycles,
  passengerCars,
  other2axle4tireSingleUnitVehs,
  buses,
  twoAxle6TireSingleUnitTrucks,
  threeAxleSingleUnitTrucks,
  fourOrMoreAxleSingleUnitTrucks,
  fourOrFewerAxleSingleTrailerTrucks,
  fiveAxleSingleTrailerTrucks,
  sixOrMoreAxleSingleTrailerTrucks,
  fiveOrFewerAxleMultiTrailerTrucks,
  sixAxleMultiTrailerTrucks,
  sevenOrMoreAxleMultiTrailerTrucks
  %% with extension mark
}).

-record('ConfigTemporalBoundary', {
  beginTime,
  endTime,
  recurring
  %% with extension mark
}).

-record('CfgEventRecurrence', {
  startTime = asn1_NOVALUE,
  endTime = asn1_NOVALUE,
  startDate = asn1_NOVALUE,
  endDate = asn1_NOVALUE,
  monday,
  tuesday,
  wednesday,
  thursday,
  friday,
  saturday,
  sunday,
  exclusion = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgIntervalEvents', {
  interval,
  wiperStatus = asn1_NOVALUE,
  vehCount = asn1_NOVALUE,
  weatherData = asn1_NOVALUE,
  transitVehData = asn1_NOVALUE,
  numOfOccupants = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgTransitVehicleData', {
  currNumPasngers = asn1_NOVALUE,
  avgNumPasngers = asn1_NOVALUE,
  trnstVehSchAdh = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgVehicleEvents', {
  headLights = asn1_NOVALUE,
  fogLights = asn1_NOVALUE,
  hazardLights = asn1_NOVALUE,
  kinematicEvents = asn1_NOVALUE,
  wiperStatusChange = asn1_NOVALUE,
  lowSpeed = asn1_NOVALUE,
  resumedSpeed = asn1_NOVALUE,
  vehEntrsExitsRegion = asn1_NOVALUE,
  emerVehDetect = asn1_NOVALUE,
  emerAndTransInfo = asn1_NOVALUE,
  v2xMsgRecption = asn1_NOVALUE,
  driverAlertsAndWarnings = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgKinematicEvents', {
  events,
  hysteresis = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgEvents', {
  absActivated = asn1_NOVALUE,
  tractionCtlLoss = asn1_NOVALUE,
  stabilityCtlActivated = asn1_NOVALUE,
  hardBraking = asn1_NOVALUE,
  swerveThreshold = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgHysteresis', {
  hysSamples,
  hysRate
  %% with extension mark
}).

-record('CfgMsgRecepIndicators', {
  msgDictionary = asn1_NOVALUE,
  messages = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgRoadwayEvents', {
  obstacleDetected,
  adverseRoadSurface,
  trafficSigEncounters = asn1_NOVALUE,
  trfsigLightOut,
  trfsigRoadGeoMismatch,
  roadSignInfo = asn1_NOVALUE,
  lowLaneMarkReflect = asn1_NOVALUE,
  roadsignIncnstncy,
  laneGeoIncnstncy,
  incidentDetect,
  workZoneCharDetect,
  inclWeatherDetect,
  railrdCrossActivated,
  drawBridgeActivated
  %% with extension mark
}).

-record('CfgTrafficSigEncounters', {
  intersections = asn1_NOVALUE,
  trfcsigApproachDelay = asn1_NOVALUE,
  trfsigApproachSpeed = asn1_NOVALUE,
  trfsigArrivalGreen = asn1_NOVALUE,
  trfsigArrivalRed = asn1_NOVALUE,
  trfsigPedDelay = asn1_NOVALUE,
  trfsigSpatMismatch = asn1_NOVALUE,
  trfsigSpatTimingError = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgRoadSignInfo', {
  roadsignDetection,
  lowRoadsignReflect1 = asn1_NOVALUE,
  lowRoadsignReflect2 = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgRoadSignTypes', {
  whiteOnGreen = asn1_NOVALUE,
  blackOnYellow = asn1_NOVALUE,
  blackOnOrange = asn1_NOVALUE,
  whiteOnRed = asn1_NOVALUE,
  blackOnWhite = asn1_NOVALUE,
  octagon = asn1_NOVALUE,
  eqlatTriangle = asn1_NOVALUE,
  circle = asn1_NOVALUE,
  pennant = asn1_NOVALUE,
  pentagon = asn1_NOVALUE,
  crossbuck = asn1_NOVALUE,
  diamond = asn1_NOVALUE,
  trapezoid = asn1_NOVALUE,
  other = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgCommSysPerfEvents', {
  'j2945-1ChanBusyThresh' = asn1_NOVALUE,
  rfDataRsuInfo = asn1_NOVALUE,
  numRsusObservedThresh = asn1_NOVALUE,
  rfV2xJamDetectThresh = asn1_NOVALUE,
  'j2945-1VehDensThresh' = asn1_NOVALUE,
  'j2945-1CqiBelowThresh' = asn1_NOVALUE,
  'j2945-1TrackErrorThresh' = asn1_NOVALUE,
  gnssHdopExceedsThresh = asn1_NOVALUE,
  gnssSatsBelowThresh = asn1_NOVALUE,
  gnssJammingDetect = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgAveragedTriggers', {
  avgSpeed = asn1_NOVALUE,
  avgStopDuration = asn1_NOVALUE,
  avgFuelConsumption = asn1_NOVALUE,
  avgEmissions = asn1_NOVALUE,
  avgNumOfOccupants = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgSummaryTriggers', {
  regTravelTime = asn1_NOVALUE,
  regVehDistTraveled = asn1_NOVALUE,
  regVehTimeTraveled = asn1_NOVALUE,
  fuelConsumption = asn1_NOVALUE,
  totalVehEmissions = asn1_NOVALUE,
  numOfLowSpeedEvents = asn1_NOVALUE,
  timeStopped = asn1_NOVALUE,
  numOfStopped = asn1_NOVALUE,
  locOfStops = asn1_NOVALUE,
  regNumOfVehPassed = asn1_NOVALUE,
  regNumOfSurpassedVeh = asn1_NOVALUE,
  totalMsgsReceived = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgLowSpeedCriteria', {
  lowSpeedThreshold,
  lowSpeedTimeThresh = asn1_NOVALUE
  %% with extension mark
}).

-record('CfgStoppedCriteria', {
  stoppedSpeedThreshold,
  amountOfTimeBelow
  %% with extension mark
}).

-endif. %% _PROBEDATACONFIG_HRL_
