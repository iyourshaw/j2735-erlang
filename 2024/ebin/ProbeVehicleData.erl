%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in ProbeVehicleData.

-module('ProbeVehicleData').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("ProbeVehicleData.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'ProbeVehicleData'},
            {options,[{i,"./ebin"},uper,jer,verbose,{i,"./asn"},{outdir,"./ebin"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_ProbeVehicleData/1,
enc_AccelSteerYawRateConfidence/1,
enc_ConfidenceSet/1,
enc_J1939data/1,
enc_TireDataList/1,
enc_TireData/1,
enc_AxleWeightList/1,
enc_AxleWeightSet/1,
enc_Snapshot/1,
enc_VehicleIdent/1,
enc_VehicleStatus/1,
enc_AccelerationConfidence/1,
enc_BrakeAppliedPressure/1,
enc_DrivingWheelAngle/1,
enc_AxleLocation/1,
enc_AxleWeight/1,
enc_CargoWeight/1,
enc_DriveAxleLiftAirPressure/1,
enc_DriveAxleLocation/1,
enc_DriveAxleLubePressure/1,
enc_DriveAxleTemperature/1,
enc_SteeringAxleLubePressure/1,
enc_SteeringAxleTemperature/1,
enc_TireLeakageRate/1,
enc_TireLocation/1,
enc_TirePressureThresholdDetection/1,
enc_TirePressure/1,
enc_TireTemp/1,
enc_WheelEndElectFault/1,
enc_WheelSensorStatus/1,
enc_ProbeSegmentNumber/1,
enc_RainSensor/1,
enc_SteeringWheelAngleConfidence/1,
enc_SteeringWheelAngleRateOfChange/1,
enc_SunSensor/1,
enc_ThrottlePosition/1,
enc_VINstring/1,
enc_YawRateConfidence/1
]).

-export([
dec_ProbeVehicleData/1,
dec_AccelSteerYawRateConfidence/1,
dec_ConfidenceSet/1,
dec_J1939data/1,
dec_TireDataList/1,
dec_TireData/1,
dec_AxleWeightList/1,
dec_AxleWeightSet/1,
dec_Snapshot/1,
dec_VehicleIdent/1,
dec_VehicleStatus/1,
dec_AccelerationConfidence/1,
dec_BrakeAppliedPressure/1,
dec_DrivingWheelAngle/1,
dec_AxleLocation/1,
dec_AxleWeight/1,
dec_CargoWeight/1,
dec_DriveAxleLiftAirPressure/1,
dec_DriveAxleLocation/1,
dec_DriveAxleLubePressure/1,
dec_DriveAxleTemperature/1,
dec_SteeringAxleLubePressure/1,
dec_SteeringAxleTemperature/1,
dec_TireLeakageRate/1,
dec_TireLocation/1,
dec_TirePressureThresholdDetection/1,
dec_TirePressure/1,
dec_TireTemp/1,
dec_WheelEndElectFault/1,
dec_WheelSensorStatus/1,
dec_ProbeSegmentNumber/1,
dec_RainSensor/1,
dec_SteeringWheelAngleConfidence/1,
dec_SteeringWheelAngleRateOfChange/1,
dec_SunSensor/1,
dec_ThrottlePosition/1,
dec_VINstring/1,
dec_YawRateConfidence/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('ProbeVehicleData', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('ProbeVehicleData', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ProbeVehicleData', Data) -> enc_ProbeVehicleData(Data);
encode_disp('AccelSteerYawRateConfidence', Data) -> enc_AccelSteerYawRateConfidence(Data);
encode_disp('ConfidenceSet', Data) -> enc_ConfidenceSet(Data);
encode_disp('J1939data', Data) -> enc_J1939data(Data);
encode_disp('TireDataList', Data) -> enc_TireDataList(Data);
encode_disp('TireData', Data) -> enc_TireData(Data);
encode_disp('AxleWeightList', Data) -> enc_AxleWeightList(Data);
encode_disp('AxleWeightSet', Data) -> enc_AxleWeightSet(Data);
encode_disp('Snapshot', Data) -> enc_Snapshot(Data);
encode_disp('VehicleIdent', Data) -> enc_VehicleIdent(Data);
encode_disp('VehicleStatus', Data) -> enc_VehicleStatus(Data);
encode_disp('AccelerationConfidence', Data) -> enc_AccelerationConfidence(Data);
encode_disp('BrakeAppliedPressure', Data) -> enc_BrakeAppliedPressure(Data);
encode_disp('DrivingWheelAngle', Data) -> enc_DrivingWheelAngle(Data);
encode_disp('AxleLocation', Data) -> enc_AxleLocation(Data);
encode_disp('AxleWeight', Data) -> enc_AxleWeight(Data);
encode_disp('CargoWeight', Data) -> enc_CargoWeight(Data);
encode_disp('DriveAxleLiftAirPressure', Data) -> enc_DriveAxleLiftAirPressure(Data);
encode_disp('DriveAxleLocation', Data) -> enc_DriveAxleLocation(Data);
encode_disp('DriveAxleLubePressure', Data) -> enc_DriveAxleLubePressure(Data);
encode_disp('DriveAxleTemperature', Data) -> enc_DriveAxleTemperature(Data);
encode_disp('SteeringAxleLubePressure', Data) -> enc_SteeringAxleLubePressure(Data);
encode_disp('SteeringAxleTemperature', Data) -> enc_SteeringAxleTemperature(Data);
encode_disp('TireLeakageRate', Data) -> enc_TireLeakageRate(Data);
encode_disp('TireLocation', Data) -> enc_TireLocation(Data);
encode_disp('TirePressureThresholdDetection', Data) -> enc_TirePressureThresholdDetection(Data);
encode_disp('TirePressure', Data) -> enc_TirePressure(Data);
encode_disp('TireTemp', Data) -> enc_TireTemp(Data);
encode_disp('WheelEndElectFault', Data) -> enc_WheelEndElectFault(Data);
encode_disp('WheelSensorStatus', Data) -> enc_WheelSensorStatus(Data);
encode_disp('ProbeSegmentNumber', Data) -> enc_ProbeSegmentNumber(Data);
encode_disp('RainSensor', Data) -> enc_RainSensor(Data);
encode_disp('SteeringWheelAngleConfidence', Data) -> enc_SteeringWheelAngleConfidence(Data);
encode_disp('SteeringWheelAngleRateOfChange', Data) -> enc_SteeringWheelAngleRateOfChange(Data);
encode_disp('SunSensor', Data) -> enc_SunSensor(Data);
encode_disp('ThrottlePosition', Data) -> enc_ThrottlePosition(Data);
encode_disp('VINstring', Data) -> enc_VINstring(Data);
encode_disp('YawRateConfidence', Data) -> enc_YawRateConfidence(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ProbeVehicleData', Data) -> dec_ProbeVehicleData(Data);
decode_disp('AccelSteerYawRateConfidence', Data) -> dec_AccelSteerYawRateConfidence(Data);
decode_disp('ConfidenceSet', Data) -> dec_ConfidenceSet(Data);
decode_disp('J1939data', Data) -> dec_J1939data(Data);
decode_disp('TireDataList', Data) -> dec_TireDataList(Data);
decode_disp('TireData', Data) -> dec_TireData(Data);
decode_disp('AxleWeightList', Data) -> dec_AxleWeightList(Data);
decode_disp('AxleWeightSet', Data) -> dec_AxleWeightSet(Data);
decode_disp('Snapshot', Data) -> dec_Snapshot(Data);
decode_disp('VehicleIdent', Data) -> dec_VehicleIdent(Data);
decode_disp('VehicleStatus', Data) -> dec_VehicleStatus(Data);
decode_disp('AccelerationConfidence', Data) -> dec_AccelerationConfidence(Data);
decode_disp('BrakeAppliedPressure', Data) -> dec_BrakeAppliedPressure(Data);
decode_disp('DrivingWheelAngle', Data) -> dec_DrivingWheelAngle(Data);
decode_disp('AxleLocation', Data) -> dec_AxleLocation(Data);
decode_disp('AxleWeight', Data) -> dec_AxleWeight(Data);
decode_disp('CargoWeight', Data) -> dec_CargoWeight(Data);
decode_disp('DriveAxleLiftAirPressure', Data) -> dec_DriveAxleLiftAirPressure(Data);
decode_disp('DriveAxleLocation', Data) -> dec_DriveAxleLocation(Data);
decode_disp('DriveAxleLubePressure', Data) -> dec_DriveAxleLubePressure(Data);
decode_disp('DriveAxleTemperature', Data) -> dec_DriveAxleTemperature(Data);
decode_disp('SteeringAxleLubePressure', Data) -> dec_SteeringAxleLubePressure(Data);
decode_disp('SteeringAxleTemperature', Data) -> dec_SteeringAxleTemperature(Data);
decode_disp('TireLeakageRate', Data) -> dec_TireLeakageRate(Data);
decode_disp('TireLocation', Data) -> dec_TireLocation(Data);
decode_disp('TirePressureThresholdDetection', Data) -> dec_TirePressureThresholdDetection(Data);
decode_disp('TirePressure', Data) -> dec_TirePressure(Data);
decode_disp('TireTemp', Data) -> dec_TireTemp(Data);
decode_disp('WheelEndElectFault', Data) -> dec_WheelEndElectFault(Data);
decode_disp('WheelSensorStatus', Data) -> dec_WheelSensorStatus(Data);
decode_disp('ProbeSegmentNumber', Data) -> dec_ProbeSegmentNumber(Data);
decode_disp('RainSensor', Data) -> dec_RainSensor(Data);
decode_disp('SteeringWheelAngleConfidence', Data) -> dec_SteeringWheelAngleConfidence(Data);
decode_disp('SteeringWheelAngleRateOfChange', Data) -> dec_SteeringWheelAngleRateOfChange(Data);
decode_disp('SunSensor', Data) -> dec_SunSensor(Data);
decode_disp('ThrottlePosition', Data) -> dec_ThrottlePosition(Data);
decode_disp('VINstring', Data) -> dec_VINstring(Data);
decode_disp('YawRateConfidence', Data) -> dec_YawRateConfidence(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_ProbeVehicleData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
0 =< Enc6@element, Enc6@element < 527041 ->
<<Enc6@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute segNum(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 15 =:= 0 ->
<<Enc9@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute probeID(3) with type VehicleIdent
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleIdent(Enc12@element)
end
end,
begin
%% attribute startVector(4) with type FullPositionVector
Enc14@element = element(5, Val),
'Common':enc_FullPositionVector(Enc14@element)
end,
begin
%% attribute vehicleType(5) with type VehicleClassification
Enc15@element = element(6, Val),
'Common':enc_VehicleClassification(Enc15@element)
end,
begin
%% attribute snapshots(6) with type SEQUENCE OF
Enc16@element = element(7, Val),
enc_ProbeVehicleData_snapshots(Enc16@element)
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc17@element = element(8, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ProbeVehicleData_regional(Enc17@element)
end
end].
enc_ProbeVehicleData_snapshots(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_Snapshot(Comp) || Comp <- Val]]
end.

enc_ProbeVehicleData_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ProbeVehicleData_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ProbeVehicleData_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type1(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ProbeVehicleData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute segNum(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:15,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute probeID(3) with type VehicleIdent
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_VehicleIdent(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute startVector(4) with type FullPositionVector
{Term4,Bytes6} = 'Common':dec_FullPositionVector(Bytes5),

%% attribute vehicleType(5) with type VehicleClassification
{Term5,Bytes7} = 'Common':dec_VehicleClassification(Bytes6),

%% attribute snapshots(6) with type SEQUENCE OF
{Term6,Bytes8} = dec_ProbeVehicleData_snapshots(Bytes7),

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_ProbeVehicleData_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V5@V0,V5@Buf1} = case Bytes9 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'ProbeVehicleData',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_ProbeVehicleData_snapshots(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components2(V1@Add2, V1@Buf1, []).


dec_ProbeVehicleData_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components3(V1@Add2, V1@Buf1, []).


dec_ProbeVehicleData_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type4(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_AccelSteerYawRateConfidence(Val) ->
[begin
%% attribute yawRate(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unavailable ->
<<0:3>>;
Enc1@element =:= 'degSec-100-00' ->
<<1:3>>;
Enc1@element =:= 'degSec-010-00' ->
<<2:3>>;
Enc1@element =:= 'degSec-005-00' ->
<<3:3>>;
Enc1@element =:= 'degSec-001-00' ->
<<4:3>>;
Enc1@element =:= 'degSec-000-10' ->
<<5:3>>;
Enc1@element =:= 'degSec-000-05' ->
<<6:3>>;
Enc1@element =:= 'degSec-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end,
begin
%% attribute acceleration(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:3>>;
Enc3@element =:= 'accl-100-00' ->
<<1:3>>;
Enc3@element =:= 'accl-010-00' ->
<<2:3>>;
Enc3@element =:= 'accl-005-00' ->
<<3:3>>;
Enc3@element =:= 'accl-001-00' ->
<<4:3>>;
Enc3@element =:= 'accl-000-10' ->
<<5:3>>;
Enc3@element =:= 'accl-000-05' ->
<<6:3>>;
Enc3@element =:= 'accl-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end|begin
%% attribute steeringWheelAngle(3) with type ENUMERATED
Enc5@element = element(4, Val),
if Enc5@element =:= unavailable ->
<<0:2>>;
Enc5@element =:= prec2deg ->
<<1:2>>;
Enc5@element =:= prec1deg ->
<<2:2>>;
Enc5@element =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end].


dec_AccelSteerYawRateConfidence(Bytes) ->

%% attribute yawRate(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'degSec-100-00';
2 -> 'degSec-010-00';
3 -> 'degSec-005-00';
4 -> 'degSec-001-00';
5 -> 'degSec-000-10';
6 -> 'degSec-000-05';
7 -> 'degSec-000-01'
end,
{V1@Int2,V1@Buf1}
end,

%% attribute acceleration(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> 'accl-100-00';
2 -> 'accl-010-00';
3 -> 'accl-005-00';
4 -> 'accl-001-00';
5 -> 'accl-000-10';
6 -> 'accl-000-05';
7 -> 'accl-000-01'
end,
{V2@Int2,V2@Buf1}
end,

%% attribute steeringWheelAngle(3) with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V3@Int2,V3@Buf1}
end,
Res1 = {'AccelSteerYawRateConfidence',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_ConfidenceSet(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute accelConfidence(1) with type AccelSteerYawRateConfidence
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_AccelSteerYawRateConfidence(Enc9@element)
end
end,
begin
%% attribute speedConfidence(2) with type SpeedandHeadingandThrottleConfidence
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_SpeedandHeadingandThrottleConfidence(Enc11@element)
end
end,
begin
%% attribute timeConfidence(3) with type ENUMERATED
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element =:= unavailable ->
<<0:6>>;
Enc13@element =:= 'time-100-000' ->
<<1:6>>;
Enc13@element =:= 'time-050-000' ->
<<2:6>>;
Enc13@element =:= 'time-020-000' ->
<<3:6>>;
Enc13@element =:= 'time-010-000' ->
<<4:6>>;
Enc13@element =:= 'time-002-000' ->
<<5:6>>;
Enc13@element =:= 'time-001-000' ->
<<6:6>>;
Enc13@element =:= 'time-000-500' ->
<<7:6>>;
Enc13@element =:= 'time-000-200' ->
<<8:6>>;
Enc13@element =:= 'time-000-100' ->
<<9:6>>;
Enc13@element =:= 'time-000-050' ->
<<10:6>>;
Enc13@element =:= 'time-000-020' ->
<<11:6>>;
Enc13@element =:= 'time-000-010' ->
<<12:6>>;
Enc13@element =:= 'time-000-005' ->
<<13:6>>;
Enc13@element =:= 'time-000-002' ->
<<14:6>>;
Enc13@element =:= 'time-000-001' ->
<<15:6>>;
Enc13@element =:= 'time-000-000-5' ->
<<16:6>>;
Enc13@element =:= 'time-000-000-2' ->
<<17:6>>;
Enc13@element =:= 'time-000-000-1' ->
<<18:6>>;
Enc13@element =:= 'time-000-000-05' ->
<<19:6>>;
Enc13@element =:= 'time-000-000-02' ->
<<20:6>>;
Enc13@element =:= 'time-000-000-01' ->
<<21:6>>;
Enc13@element =:= 'time-000-000-005' ->
<<22:6>>;
Enc13@element =:= 'time-000-000-002' ->
<<23:6>>;
Enc13@element =:= 'time-000-000-001' ->
<<24:6>>;
Enc13@element =:= 'time-000-000-000-5' ->
<<25:6>>;
Enc13@element =:= 'time-000-000-000-2' ->
<<26:6>>;
Enc13@element =:= 'time-000-000-000-1' ->
<<27:6>>;
Enc13@element =:= 'time-000-000-000-05' ->
<<28:6>>;
Enc13@element =:= 'time-000-000-000-02' ->
<<29:6>>;
Enc13@element =:= 'time-000-000-000-01' ->
<<30:6>>;
Enc13@element =:= 'time-000-000-000-005' ->
<<31:6>>;
Enc13@element =:= 'time-000-000-000-002' ->
<<32:6>>;
Enc13@element =:= 'time-000-000-000-001' ->
<<33:6>>;
Enc13@element =:= 'time-000-000-000-000-5' ->
<<34:6>>;
Enc13@element =:= 'time-000-000-000-000-2' ->
<<35:6>>;
Enc13@element =:= 'time-000-000-000-000-1' ->
<<36:6>>;
Enc13@element =:= 'time-000-000-000-000-05' ->
<<37:6>>;
Enc13@element =:= 'time-000-000-000-000-02' ->
<<38:6>>;
Enc13@element =:= 'time-000-000-000-000-01' ->
<<39:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc13@element}}})
end
end,
begin
%% attribute posConfidence(4) with type PositionConfidenceSet
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_PositionConfidenceSet(Enc16@element)
end
end,
begin
%% attribute steerConfidence(5) with type ENUMERATED
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= unavailable ->
<<0:2>>;
Enc18@element =:= prec2deg ->
<<1:2>>;
Enc18@element =:= prec1deg ->
<<2:2>>;
Enc18@element =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc18@element}}})
end
end,
begin
%% attribute headingConfidence(6) with type ENUMERATED
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
Enc21@element =:= unavailable ->
<<0:3>>;
Enc21@element =:= prec10deg ->
<<1:3>>;
Enc21@element =:= prec05deg ->
<<2:3>>;
Enc21@element =:= prec01deg ->
<<3:3>>;
Enc21@element =:= 'prec0-1deg' ->
<<4:3>>;
Enc21@element =:= 'prec0-05deg' ->
<<5:3>>;
Enc21@element =:= 'prec0-01deg' ->
<<6:3>>;
Enc21@element =:= 'prec0-0125deg' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc21@element}}})
end
end|begin
%% attribute throttleConfidence(7) with type ENUMERATED
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
Enc24@element =:= unavailable ->
<<0:2>>;
Enc24@element =:= prec10percent ->
<<1:2>>;
Enc24@element =:= prec1percent ->
<<2:2>>;
Enc24@element =:= 'prec0-5percent' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc24@element}}})
end
end].


dec_ConfidenceSet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute accelConfidence(1) with type AccelSteerYawRateConfidence
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
dec_AccelSteerYawRateConfidence(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute speedConfidence(2) with type SpeedandHeadingandThrottleConfidence
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
'Common':dec_SpeedandHeadingandThrottleConfidence(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute timeConfidence(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> 'time-100-000';
2 -> 'time-050-000';
3 -> 'time-020-000';
4 -> 'time-010-000';
5 -> 'time-002-000';
6 -> 'time-001-000';
7 -> 'time-000-500';
8 -> 'time-000-200';
9 -> 'time-000-100';
10 -> 'time-000-050';
11 -> 'time-000-020';
12 -> 'time-000-010';
13 -> 'time-000-005';
14 -> 'time-000-002';
15 -> 'time-000-001';
16 -> 'time-000-000-5';
17 -> 'time-000-000-2';
18 -> 'time-000-000-1';
19 -> 'time-000-000-05';
20 -> 'time-000-000-02';
21 -> 'time-000-000-01';
22 -> 'time-000-000-005';
23 -> 'time-000-000-002';
24 -> 'time-000-000-001';
25 -> 'time-000-000-000-5';
26 -> 'time-000-000-000-2';
27 -> 'time-000-000-000-1';
28 -> 'time-000-000-000-05';
29 -> 'time-000-000-000-02';
30 -> 'time-000-000-000-01';
31 -> 'time-000-000-000-005';
32 -> 'time-000-000-000-002';
33 -> 'time-000-000-000-001';
34 -> 'time-000-000-000-000-5';
35 -> 'time-000-000-000-000-2';
36 -> 'time-000-000-000-000-1';
37 -> 'time-000-000-000-000-05';
38 -> 'time-000-000-000-000-02';
39 -> 'time-000-000-000-000-01';
_ -> exit({error,{asn1,{decode_enumerated,V3@V0}}})
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute posConfidence(4) with type PositionConfidenceSet
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
'Common':dec_PositionConfidenceSet(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute steerConfidence(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes6,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute headingConfidence(6) with type ENUMERATED
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes7,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> prec10deg;
2 -> prec05deg;
3 -> prec01deg;
4 -> 'prec0-1deg';
5 -> 'prec0-05deg';
6 -> 'prec0-01deg';
7 -> 'prec0-0125deg'
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute throttleConfidence(7) with type ENUMERATED
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes8,
V6@Int2 = case V6@V0 of
0 -> unavailable;
1 -> prec10percent;
2 -> prec1percent;
3 -> 'prec0-5percent'
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V7@V0,V7@Buf1} = case Bytes9 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'ConfidenceSet',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.

enc_J1939data(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
Enc10@element = element(11, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute tires(1) with type TireDataList
Enc12@element = element(2, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_TireDataList(Enc12@element)
end
end,
begin
%% attribute axles(2) with type AxleWeightList
Enc14@element = element(3, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_AxleWeightList(Enc14@element)
end
end,
begin
%% attribute trailerWeight(3) with type INTEGER
Enc16@element = element(4, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
0 =< Enc16@element, Enc16@element < 64256 ->
<<Enc16@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute cargoWeight(4) with type INTEGER
Enc19@element = element(5, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
0 =< Enc19@element, Enc19@element < 64256 ->
<<Enc19@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute steeringAxleTemperature(5) with type INTEGER
Enc22@element = element(6, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@element@sub = Enc22@element - -40,
if 0 =< Enc22@element@sub, Enc22@element@sub < 251 ->
Enc22@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc22@element}}})
end
end
end
end,
begin
%% attribute driveAxleLocation(6) with type INTEGER
Enc25@element = element(7, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
Enc25@element bsr 8 =:= 0 ->
Enc25@element;
true ->
exit({error,{asn1,{illegal_integer,Enc25@element}}})
end
end,
begin
%% attribute driveAxleLiftAirPressure(7) with type INTEGER
Enc28@element = element(8, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
0 =< Enc28@element, Enc28@element < 1001 ->
<<Enc28@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc28@element}}})
end
end,
begin
%% attribute driveAxleTemperature(8) with type INTEGER
Enc31@element = element(9, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@element@sub = Enc31@element - -40,
if 0 =< Enc31@element@sub, Enc31@element@sub < 251 ->
Enc31@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc31@element}}})
end
end
end
end,
begin
%% attribute driveAxleLubePressure(9) with type INTEGER
Enc34@element = element(10, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
0 =< Enc34@element, Enc34@element < 251 ->
Enc34@element;
true ->
exit({error,{asn1,{illegal_integer,Enc34@element}}})
end
end|begin
%% attribute steeringAxleLubePressure(10) with type INTEGER
Enc37@element = element(11, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
0 =< Enc37@element, Enc37@element < 251 ->
[Enc37@element];
true ->
exit({error,{asn1,{illegal_integer,Enc37@element}}})
end
end].


dec_J1939data(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute tires(1) with type TireDataList
{Term1,Bytes3} = case (Opt bsr 9) band 1 of
1 ->
dec_TireDataList(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute axles(2) with type AxleWeightList
{Term2,Bytes4} = case (Opt bsr 8) band 1 of
1 ->
dec_AxleWeightList(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute trailerWeight(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes4,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute cargoWeight(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute steeringAxleTemperature(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes6,
V5@Add2 = V5@V0 + -40,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute driveAxleLocation(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes7,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute driveAxleLiftAirPressure(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V7@V0:10,V7@Buf1/bitstring>> = Bytes8,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute driveAxleTemperature(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V8@V0:8,V8@Buf1/bitstring>> = Bytes9,
V8@Add2 = V8@V0 + -40,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute driveAxleLubePressure(9) with type INTEGER
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V9@V0:8,V9@Buf1/bitstring>> = Bytes10,
{V9@V0,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute steeringAxleLubePressure(10) with type INTEGER
{Term10,Bytes12} = case Opt band 1 of
1 ->
begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes11,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V11@V0,V11@Buf1} = case Bytes12 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:7,V11@Buf7/bitstring>> when V11@V6 =/= 0 ->
{V11@V6,V11@Buf7};
<<1:1,0:1,V11@V7:14,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
{V11@V7,V11@Buf8};
<<1:1,1:1,V11@V7:6,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
V11@Mul9 = V11@V7 * 16384,
{V11@Mul9,V11@Buf8}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V10:V11@V0/bitstring-unit:1,V11@Buf11/bitstring>> = V11@Buf1,
{V11@V10,V11@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'J1939data',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.

enc_TireDataList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_TireData(Comp) || Comp <- Val]]
end.



dec_TireDataList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components5(V1@Add2, V1@Buf1, []).

enc_TireData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute location(1) with type INTEGER
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 8 =:= 0 ->
Enc9@element;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute pressure(2) with type INTEGER
Enc12@element = element(3, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 251 ->
Enc12@element;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute temp(3) with type INTEGER
Enc15@element = element(4, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@element@sub = Enc15@element - -8736,
if 0 =< Enc15@element@sub, Enc15@element@sub < 64256 ->
<<Enc15@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end
end
end,
begin
%% attribute wheelSensorStatus(4) with type ENUMERATED
Enc18@element = element(5, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= off ->
<<0:2>>;
Enc18@element =:= on ->
<<1:2>>;
Enc18@element =:= notDefined ->
<<2:2>>;
Enc18@element =:= notSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc18@element}}})
end
end,
begin
%% attribute wheelEndElectFault(5) with type ENUMERATED
Enc21@element = element(6, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
Enc21@element =:= isOk ->
<<0:2>>;
Enc21@element =:= isNotDefined ->
<<1:2>>;
Enc21@element =:= isError ->
<<2:2>>;
Enc21@element =:= isNotSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc21@element}}})
end
end,
begin
%% attribute leakageRate(6) with type INTEGER
Enc24@element = element(7, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
0 =< Enc24@element, Enc24@element < 64256 ->
<<Enc24@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc24@element}}})
end
end|begin
%% attribute detection(7) with type ENUMERATED
Enc27@element = element(8, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
Enc27@element =:= noData ->
<<0:3>>;
Enc27@element =:= overPressure ->
<<1:3>>;
Enc27@element =:= noWarningPressure ->
<<2:3>>;
Enc27@element =:= underPressure ->
<<3:3>>;
Enc27@element =:= extremeUnderPressure ->
<<4:3>>;
Enc27@element =:= undefined ->
<<5:3>>;
Enc27@element =:= errorIndicator ->
<<6:3>>;
Enc27@element =:= notAvailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc27@element}}})
end
end].


dec_TireData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute location(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute pressure(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute temp(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -8736,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute wheelSensorStatus(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> off;
1 -> on;
2 -> notDefined;
3 -> notSupported
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute wheelEndElectFault(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:2,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> isOk;
1 -> isNotDefined;
2 -> isError;
3 -> isNotSupported
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute leakageRate(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V8@V0:16,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute detection(7) with type ENUMERATED
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V9@V0:3,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> noData;
1 -> overPressure;
2 -> noWarningPressure;
3 -> underPressure;
4 -> extremeUnderPressure;
5 -> undefined;
6 -> errorIndicator;
7 -> notAvailable
end,
{V9@Int2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V10@V0,V10@Buf1} = case Bytes9 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:7,V10@Buf7/bitstring>> when V10@V6 =/= 0 ->
{V10@V6,V10@Buf7};
<<1:1,0:1,V10@V7:14,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
{V10@V7,V10@Buf8};
<<1:1,1:1,V10@V7:6,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
V10@Mul9 = V10@V7 * 16384,
{V10@Mul9,V10@Buf8}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V10:V10@V0/bitstring-unit:1,V10@Buf11/bitstring>> = V10@Buf1,
{V10@V10,V10@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'TireData',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.

enc_AxleWeightList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_AxleWeightSet(Comp) || Comp <- Val]]
end.



dec_AxleWeightList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components6(V1@Add2, V1@Buf1, []).

enc_AxleWeightSet(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute location(1) with type INTEGER
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
Enc4@element bsr 8 =:= 0 ->
Enc4@element;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end|begin
%% attribute weight(2) with type INTEGER
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
0 =< Enc7@element, Enc7@element < 64256 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_AxleWeightSet(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute location(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute weight(2) with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'AxleWeightSet',Term1,Term2},
{Res1,Bytes6}.

enc_Snapshot(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute thePosition(1) with type FullPositionVector
Enc4@element = element(2, Val),
'Common':enc_FullPositionVector(Enc4@element)
end,
begin
%% attribute safetyExt(2) with type VehicleSafetyExtensions
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_VehicleSafetyExtensions(Enc5@element)
end
end|begin
%% attribute dataSet(3) with type VehicleStatus
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus(Enc7@element)
end
end].


dec_Snapshot(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute thePosition(1) with type FullPositionVector
{Term1,Bytes3} = 'Common':dec_FullPositionVector(Bytes2),

%% attribute safetyExt(2) with type VehicleSafetyExtensions
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'Common':dec_VehicleSafetyExtensions(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute dataSet(3) with type VehicleStatus
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_VehicleStatus(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'Snapshot',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_VehicleIdent(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute name(1) with type IA5String
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@element),
Enc9@bin = encode_chars(Enc8@element, 7),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 63 ->
[<<Enc9@len@sub:6>>|Enc9@bin]
end
end
end
end,
begin
%% attribute vin(2) with type OCTET STRING
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = byte_size(Enc11@element),
Enc12@len@sub = Enc12@len - 1,
if 0 =< Enc12@len@sub, Enc12@len@sub < 17 ->
[<<Enc12@len@sub:5>>|Enc11@element]
end
end
end
end,
begin
%% attribute ownerCode(3) with type IA5String
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@len = length(Enc14@element),
Enc15@bin = encode_chars(Enc14@element, 7),
Enc15@len@sub = Enc15@len - 1,
if Enc15@len@sub bsr 5 =:= 0 ->
[<<Enc15@len@sub:5>>|Enc15@bin]
end
end
end
end,
begin
%% attribute id(4) with type VehicleID
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_VehicleID(Enc17@element)
end
end,
begin
%% attribute vehicleType(5) with type ENUMERATED
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element =:= none ->
<<0:1,0:4>>;
Enc19@element =:= unknown ->
<<0:1,1:4>>;
Enc19@element =:= special ->
<<0:1,2:4>>;
Enc19@element =:= moto ->
<<0:1,3:4>>;
Enc19@element =:= car ->
<<0:1,4:4>>;
Enc19@element =:= carOther ->
<<0:1,5:4>>;
Enc19@element =:= bus ->
<<0:1,6:4>>;
Enc19@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc19@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc19@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc19@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc19@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc19@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc19@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc19@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc19@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc19@element}}})
end
end|begin
%% attribute vehicleClass(6) with type CHOICE
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleIdent_vehicleClass(Enc22@element)
end
end].
enc_VehicleIdent_vehicleClass(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= vGroup ->
if ChoiceVal =:= 'all-vehicles' ->
<<0:2,0:1,0:6>>;
ChoiceVal =:= bicycles ->
<<0:2,0:1,1:6>>;
ChoiceVal =:= motorcycles ->
<<0:2,0:1,2:6>>;
ChoiceVal =:= cars ->
<<0:2,0:1,3:6>>;
ChoiceVal =:= 'light-vehicles' ->
<<0:2,0:1,4:6>>;
ChoiceVal =:= 'cars-and-light-vehicles' ->
<<0:2,0:1,5:6>>;
ChoiceVal =:= 'cars-with-trailers' ->
<<0:2,0:1,6:6>>;
ChoiceVal =:= 'cars-with-recreational-trailers' ->
<<0:2,0:1,7:6>>;
ChoiceVal =:= 'vehicles-with-trailers' ->
<<0:2,0:1,8:6>>;
ChoiceVal =:= 'heavy-vehicles' ->
<<0:2,0:1,9:6>>;
ChoiceVal =:= trucks ->
<<0:2,0:1,10:6>>;
ChoiceVal =:= buses ->
<<0:2,0:1,11:6>>;
ChoiceVal =:= 'articulated-buses' ->
<<0:2,0:1,12:6>>;
ChoiceVal =:= 'school-buses' ->
<<0:2,0:1,13:6>>;
ChoiceVal =:= 'vehicles-with-semi-trailers' ->
<<0:2,0:1,14:6>>;
ChoiceVal =:= 'vehicles-with-double-trailers' ->
<<0:2,0:1,15:6>>;
ChoiceVal =:= 'high-profile-vehicles' ->
<<0:2,0:1,16:6>>;
ChoiceVal =:= 'wide-vehicles' ->
<<0:2,0:1,17:6>>;
ChoiceVal =:= 'long-vehicles' ->
<<0:2,0:1,18:6>>;
ChoiceVal =:= 'hazardous-loads' ->
<<0:2,0:1,19:6>>;
ChoiceVal =:= 'exceptional-loads' ->
<<0:2,0:1,20:6>>;
ChoiceVal =:= 'abnormal-loads' ->
<<0:2,0:1,21:6>>;
ChoiceVal =:= convoys ->
<<0:2,0:1,22:6>>;
ChoiceVal =:= 'maintenance-vehicles' ->
<<0:2,0:1,23:6>>;
ChoiceVal =:= 'delivery-vehicles' ->
<<0:2,0:1,24:6>>;
ChoiceVal =:= 'vehicles-with-even-numbered-license-plates' ->
<<0:2,0:1,25:6>>;
ChoiceVal =:= 'vehicles-with-odd-numbered-license-plates' ->
<<0:2,0:1,26:6>>;
ChoiceVal =:= 'vehicles-with-parking-permits' ->
<<0:2,0:1,27:6>>;
ChoiceVal =:= 'vehicles-with-catalytic-converters' ->
<<0:2,0:1,28:6>>;
ChoiceVal =:= 'vehicles-without-catalytic-converters' ->
<<0:2,0:1,29:6>>;
ChoiceVal =:= 'gas-powered-vehicles' ->
<<0:2,0:1,30:6>>;
ChoiceVal =:= 'diesel-powered-vehicles' ->
<<0:2,0:1,31:6>>;
ChoiceVal =:= 'lPG-vehicles' ->
<<0:2,0:1,32:6>>;
ChoiceVal =:= 'military-convoys' ->
<<0:2,0:1,33:6>>;
ChoiceVal =:= 'military-vehicles' ->
<<0:2,0:1,34:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= rGroup ->
if ChoiceVal =:= 'emergency-vehicle-units' ->
<<1:2,0:1,0:4>>;
ChoiceVal =:= 'federal-law-enforcement-units' ->
<<1:2,0:1,1:4>>;
ChoiceVal =:= 'state-police-units' ->
<<1:2,0:1,2:4>>;
ChoiceVal =:= 'county-police-units' ->
<<1:2,0:1,3:4>>;
ChoiceVal =:= 'local-police-units' ->
<<1:2,0:1,4:4>>;
ChoiceVal =:= 'ambulance-units' ->
<<1:2,0:1,5:4>>;
ChoiceVal =:= 'rescue-units' ->
<<1:2,0:1,6:4>>;
ChoiceVal =:= 'fire-units' ->
<<1:2,0:1,7:4>>;
ChoiceVal =:= 'hAZMAT-units' ->
<<1:2,0:1,8:4>>;
ChoiceVal =:= 'light-tow-unit' ->
<<1:2,0:1,9:4>>;
ChoiceVal =:= 'heavy-tow-unit' ->
<<1:2,0:1,10:4>>;
ChoiceVal =:= 'freeway-service-patrols' ->
<<1:2,0:1,11:4>>;
ChoiceVal =:= 'transportation-response-units' ->
<<1:2,0:1,12:4>>;
ChoiceVal =:= 'private-contractor-response-units' ->
<<1:2,0:1,13:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end;
ChoiceTag =:= rEquip ->
if ChoiceVal =:= 'ground-fire-suppression' ->
<<2:2,0:1,0:7>>;
ChoiceVal =:= 'heavy-ground-equipment' ->
<<2:2,0:1,1:7>>;
ChoiceVal =:= aircraft ->
<<2:2,0:1,2:7>>;
ChoiceVal =:= 'marine-equipment' ->
<<2:2,0:1,3:7>>;
ChoiceVal =:= 'support-equipment' ->
<<2:2,0:1,4:7>>;
ChoiceVal =:= 'medical-rescue-unit' ->
<<2:2,0:1,5:7>>;
ChoiceVal =:= other ->
<<2:2,0:1,6:7>>;
ChoiceVal =:= 'ground-fire-suppression-other' ->
<<2:2,0:1,7:7>>;
ChoiceVal =:= engine ->
<<2:2,0:1,8:7>>;
ChoiceVal =:= 'truck-or-aerial' ->
<<2:2,0:1,9:7>>;
ChoiceVal =:= quint ->
<<2:2,0:1,10:7>>;
ChoiceVal =:= 'tanker-pumper-combination' ->
<<2:2,0:1,11:7>>;
ChoiceVal =:= 'brush-truck' ->
<<2:2,0:1,12:7>>;
ChoiceVal =:= 'aircraft-rescue-firefighting' ->
<<2:2,0:1,13:7>>;
ChoiceVal =:= 'heavy-ground-equipment-other' ->
<<2:2,0:1,14:7>>;
ChoiceVal =:= 'dozer-or-plow' ->
<<2:2,0:1,15:7>>;
ChoiceVal =:= tractor ->
<<2:2,0:1,16:7>>;
ChoiceVal =:= 'tanker-or-tender' ->
<<2:2,0:1,17:7>>;
ChoiceVal =:= 'aircraft-other' ->
<<2:2,0:1,18:7>>;
ChoiceVal =:= 'aircraft-fixed-wing-tanker' ->
<<2:2,0:1,19:7>>;
ChoiceVal =:= helitanker ->
<<2:2,0:1,20:7>>;
ChoiceVal =:= helicopter ->
<<2:2,0:1,21:7>>;
ChoiceVal =:= 'marine-equipment-other' ->
<<2:2,0:1,22:7>>;
ChoiceVal =:= 'fire-boat-with-pump' ->
<<2:2,0:1,23:7>>;
ChoiceVal =:= 'boat-no-pump' ->
<<2:2,0:1,24:7>>;
ChoiceVal =:= 'support-apparatus-other' ->
<<2:2,0:1,25:7>>;
ChoiceVal =:= 'breathing-apparatus-support' ->
<<2:2,0:1,26:7>>;
ChoiceVal =:= 'light-and-air-unit' ->
<<2:2,0:1,27:7>>;
ChoiceVal =:= 'medical-rescue-unit-other' ->
<<2:2,0:1,28:7>>;
ChoiceVal =:= 'rescue-unit' ->
<<2:2,0:1,29:7>>;
ChoiceVal =:= 'urban-search-rescue-unit' ->
<<2:2,0:1,30:7>>;
ChoiceVal =:= 'high-angle-rescue' ->
<<2:2,0:1,31:7>>;
ChoiceVal =:= 'crash-fire-rescue' ->
<<2:2,0:1,32:7>>;
ChoiceVal =:= 'bLS-unit' ->
<<2:2,0:1,33:7>>;
ChoiceVal =:= 'aLS-unit' ->
<<2:2,0:1,34:7>>;
ChoiceVal =:= 'mobile-command-post' ->
<<2:2,0:1,35:7>>;
ChoiceVal =:= 'chief-officer-car' ->
<<2:2,0:1,36:7>>;
ChoiceVal =:= 'hAZMAT-unit' ->
<<2:2,0:1,37:7>>;
ChoiceVal =:= 'type-i-hand-crew' ->
<<2:2,0:1,38:7>>;
ChoiceVal =:= 'type-ii-hand-crew' ->
<<2:2,0:1,39:7>>;
ChoiceVal =:= 'privately-owned-vehicle' ->
<<2:2,0:1,40:7>>;
ChoiceVal =:= 'other-apparatus-resource' ->
<<2:2,0:1,41:7>>;
ChoiceVal =:= ambulance ->
<<2:2,0:1,42:7>>;
ChoiceVal =:= 'bomb-squad-van' ->
<<2:2,0:1,43:7>>;
ChoiceVal =:= 'combine-harvester' ->
<<2:2,0:1,44:7>>;
ChoiceVal =:= 'construction-vehicle' ->
<<2:2,0:1,45:7>>;
ChoiceVal =:= 'farm-tractor' ->
<<2:2,0:1,46:7>>;
ChoiceVal =:= 'grass-cutting-machines' ->
<<2:2,0:1,47:7>>;
ChoiceVal =:= 'hAZMAT-containment-tow' ->
<<2:2,0:1,48:7>>;
ChoiceVal =:= 'heavy-tow' ->
<<2:2,0:1,49:7>>;
ChoiceVal =:= 'hedge-cutting-machines' ->
<<2:2,0:1,50:7>>;
ChoiceVal =:= 'light-tow' ->
<<2:2,0:1,51:7>>;
ChoiceVal =:= 'mobile-crane' ->
<<2:2,0:1,52:7>>;
ChoiceVal =:= 'refuse-collection-vehicle' ->
<<2:2,0:1,53:7>>;
ChoiceVal =:= 'resurfacing-vehicle' ->
<<2:2,0:1,54:7>>;
ChoiceVal =:= 'road-sweeper' ->
<<2:2,0:1,55:7>>;
ChoiceVal =:= 'roadside-litter-collection-crews' ->
<<2:2,0:1,56:7>>;
ChoiceVal =:= 'salvage-vehicle' ->
<<2:2,0:1,57:7>>;
ChoiceVal =:= 'sand-truck' ->
<<2:2,0:1,58:7>>;
ChoiceVal =:= snowplow ->
<<2:2,0:1,59:7>>;
ChoiceVal =:= 'steam-roller' ->
<<2:2,0:1,60:7>>;
ChoiceVal =:= 'swat-team-van' ->
<<2:2,0:1,61:7>>;
ChoiceVal =:= 'track-laying-vehicle' ->
<<2:2,0:1,62:7>>;
ChoiceVal =:= 'unknown-vehicle' ->
<<2:2,0:1,63:7>>;
ChoiceVal =:= 'white-lining-vehicle' ->
<<2:2,0:1,64:7>>;
ChoiceVal =:= 'dump-truck' ->
<<2:2,0:1,65:7>>;
ChoiceVal =:= 'supervisor-vehicle' ->
<<2:2,0:1,66:7>>;
ChoiceVal =:= 'snow-blower' ->
<<2:2,0:1,67:7>>;
ChoiceVal =:= 'rotary-snow-blower' ->
<<2:2,0:1,68:7>>;
ChoiceVal =:= 'road-grader' ->
<<2:2,0:1,69:7>>;
ChoiceVal =:= 'steam-truck' ->
<<2:2,0:1,70:7>>;
ChoiceVal =:= 'flatbed-tow' ->
<<2:2,0:1,71:7>>;
true ->
exit({error,{asn1,{illegal_enumerated,ChoiceVal}}})
end
end.


dec_VehicleIdent(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute name(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute vin(2) with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
V4@Conv5 = binary:copy(V4@V3),
{V4@Conv5,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute ownerCode(3) with type IA5String
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
<<V5@V3:V5@Add2/binary-unit:7,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V5,V5@Buf6}  = {decode_chars(V5@V3, 7),V5@Buf4},
{V5@V5,V5@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute id(4) with type VehicleID
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
'Common':dec_VehicleID(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute vehicleType(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:4,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<0:1,V6@V9:7,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10};
<<1:1,0:1,V6@V10:14,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
{V6@V10,V6@Buf11};
<<1:1,1:1,V6@V10:6,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
V6@Mul12 = V6@V10 * 16384,
{V6@Mul12,V6@Buf11}
end,
<<V6@V13:V6@V6/unit:8,V6@Buf14/bitstring>> = V6@Buf7,
{V6@V13,V6@Buf14}
end,
V6@Int15 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int15,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute vehicleClass(6) with type CHOICE
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_VehicleIdent_vehicleClass(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'VehicleIdent',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_VehicleIdent_vehicleClass(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> 'all-vehicles';
1 -> bicycles;
2 -> motorcycles;
3 -> cars;
4 -> 'light-vehicles';
5 -> 'cars-and-light-vehicles';
6 -> 'cars-with-trailers';
7 -> 'cars-with-recreational-trailers';
8 -> 'vehicles-with-trailers';
9 -> 'heavy-vehicles';
10 -> trucks;
11 -> buses;
12 -> 'articulated-buses';
13 -> 'school-buses';
14 -> 'vehicles-with-semi-trailers';
15 -> 'vehicles-with-double-trailers';
16 -> 'high-profile-vehicles';
17 -> 'wide-vehicles';
18 -> 'long-vehicles';
19 -> 'hazardous-loads';
20 -> 'exceptional-loads';
21 -> 'abnormal-loads';
22 -> convoys;
23 -> 'maintenance-vehicles';
24 -> 'delivery-vehicles';
25 -> 'vehicles-with-even-numbered-license-plates';
26 -> 'vehicles-with-odd-numbered-license-plates';
27 -> 'vehicles-with-parking-permits';
28 -> 'vehicles-with-catalytic-converters';
29 -> 'vehicles-without-catalytic-converters';
30 -> 'gas-powered-vehicles';
31 -> 'diesel-powered-vehicles';
32 -> 'lPG-vehicles';
33 -> 'military-convoys';
34 -> 'military-vehicles';
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{vGroup,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes1 of
<<0:1,V3@V3:4,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> 'emergency-vehicle-units';
1 -> 'federal-law-enforcement-units';
2 -> 'state-police-units';
3 -> 'county-police-units';
4 -> 'local-police-units';
5 -> 'ambulance-units';
6 -> 'rescue-units';
7 -> 'fire-units';
8 -> 'hAZMAT-units';
9 -> 'light-tow-unit';
10 -> 'heavy-tow-unit';
11 -> 'freeway-service-patrols';
12 -> 'transportation-response-units';
13 -> 'private-contractor-response-units';
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end
end,
{{rGroup,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes1 of
<<0:1,V4@V3:7,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> 'ground-fire-suppression';
1 -> 'heavy-ground-equipment';
2 -> aircraft;
3 -> 'marine-equipment';
4 -> 'support-equipment';
5 -> 'medical-rescue-unit';
6 -> other;
7 -> 'ground-fire-suppression-other';
8 -> engine;
9 -> 'truck-or-aerial';
10 -> quint;
11 -> 'tanker-pumper-combination';
12 -> 'brush-truck';
13 -> 'aircraft-rescue-firefighting';
14 -> 'heavy-ground-equipment-other';
15 -> 'dozer-or-plow';
16 -> tractor;
17 -> 'tanker-or-tender';
18 -> 'aircraft-other';
19 -> 'aircraft-fixed-wing-tanker';
20 -> helitanker;
21 -> helicopter;
22 -> 'marine-equipment-other';
23 -> 'fire-boat-with-pump';
24 -> 'boat-no-pump';
25 -> 'support-apparatus-other';
26 -> 'breathing-apparatus-support';
27 -> 'light-and-air-unit';
28 -> 'medical-rescue-unit-other';
29 -> 'rescue-unit';
30 -> 'urban-search-rescue-unit';
31 -> 'high-angle-rescue';
32 -> 'crash-fire-rescue';
33 -> 'bLS-unit';
34 -> 'aLS-unit';
35 -> 'mobile-command-post';
36 -> 'chief-officer-car';
37 -> 'hAZMAT-unit';
38 -> 'type-i-hand-crew';
39 -> 'type-ii-hand-crew';
40 -> 'privately-owned-vehicle';
41 -> 'other-apparatus-resource';
42 -> ambulance;
43 -> 'bomb-squad-van';
44 -> 'combine-harvester';
45 -> 'construction-vehicle';
46 -> 'farm-tractor';
47 -> 'grass-cutting-machines';
48 -> 'hAZMAT-containment-tow';
49 -> 'heavy-tow';
50 -> 'hedge-cutting-machines';
51 -> 'light-tow';
52 -> 'mobile-crane';
53 -> 'refuse-collection-vehicle';
54 -> 'resurfacing-vehicle';
55 -> 'road-sweeper';
56 -> 'roadside-litter-collection-crews';
57 -> 'salvage-vehicle';
58 -> 'sand-truck';
59 -> snowplow;
60 -> 'steam-roller';
61 -> 'swat-team-van';
62 -> 'track-laying-vehicle';
63 -> 'unknown-vehicle';
64 -> 'white-lining-vehicle';
65 -> 'dump-truck';
66 -> 'supervisor-vehicle';
67 -> 'snow-blower';
68 -> 'rotary-snow-blower';
69 -> 'road-grader';
70 -> 'steam-truck';
71 -> 'flatbed-tow';
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end
end,
{{rEquip,Val},NewBytes}
end.
enc_VehicleStatus(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
Enc10@element = element(11, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(12, Val),
Enc12@element = element(13, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(14, Val),
Enc14@element = element(15, Val),
if Enc13@element =:= asn1_NOVALUE ->
if Enc14@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc14@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(16, Val),
Enc16@element = element(17, Val),
if Enc15@element =:= asn1_NOVALUE ->
if Enc16@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc16@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(18, Val),
Enc18@element = element(19, Val),
if Enc17@element =:= asn1_NOVALUE ->
if Enc18@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc18@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc19@element = element(20, Val),
Enc20@element = element(21, Val),
if Enc19@element =:= asn1_NOVALUE ->
if Enc20@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc20@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc21@element = element(22, Val),
Enc22@element = element(23, Val),
if Enc21@element =:= asn1_NOVALUE ->
if Enc22@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc22@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute lights(1) with type BIT STRING
Enc24@element = element(2, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@bs = try bit_string_name2pos_7(Enc24@element) of
Enc25@positions ->
bitstring_from_positions(Enc25@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Enc24@element, 9)
end,
Enc25@bits = bit_size(Enc25@bs),
if Enc25@bits =:= 9 ->
[<<0:1>>|Enc25@bs];
Enc25@bits < 128 ->
[<<1:1,Enc25@bits:8>>|Enc25@bs];
Enc25@bits < 16384 ->
[<<1:1,2:2,Enc25@bits:14>>|Enc25@bs];
true ->
[<<1:1>>|encode_fragmented(Enc25@bs, 1)]
end
end
end
end,
begin
%% attribute lightBar(2) with type ENUMERATED
Enc27@element = element(3, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
Enc27@element =:= unavailable ->
<<0:3>>;
Enc27@element =:= notInUse ->
<<1:3>>;
Enc27@element =:= inUse ->
<<2:3>>;
Enc27@element =:= yellowCautionLights ->
<<3:3>>;
Enc27@element =:= schooldBusLights ->
<<4:3>>;
Enc27@element =:= arrowSignsActive ->
<<5:3>>;
Enc27@element =:= slowMovingVehicle ->
<<6:3>>;
Enc27@element =:= freqStops ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc27@element}}})
end
end,
begin
%% attribute wipers(3) with type WiperSet
Enc30@element = element(4, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_WiperSet(Enc30@element)
end
end,
begin
%% attribute brakeStatus(4) with type BrakeSystemStatus
Enc32@element = element(5, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_BrakeSystemStatus(Enc32@element)
end
end,
begin
%% attribute brakePressure(5) with type ENUMERATED
Enc34@element = element(6, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
Enc34@element =:= unavailable ->
<<0:4>>;
Enc34@element =:= minPressure ->
<<1:4>>;
Enc34@element =:= 'bkLvl-2' ->
<<2:4>>;
Enc34@element =:= 'bkLvl-3' ->
<<3:4>>;
Enc34@element =:= 'bkLvl-4' ->
<<4:4>>;
Enc34@element =:= 'bkLvl-5' ->
<<5:4>>;
Enc34@element =:= 'bkLvl-6' ->
<<6:4>>;
Enc34@element =:= 'bkLvl-7' ->
<<7:4>>;
Enc34@element =:= 'bkLvl-8' ->
<<8:4>>;
Enc34@element =:= 'bkLvl-9' ->
<<9:4>>;
Enc34@element =:= 'bkLvl-10' ->
<<10:4>>;
Enc34@element =:= 'bkLvl-11' ->
<<11:4>>;
Enc34@element =:= 'bkLvl-12' ->
<<12:4>>;
Enc34@element =:= 'bkLvl-13' ->
<<13:4>>;
Enc34@element =:= 'bkLvl-14' ->
<<14:4>>;
Enc34@element =:= maxPressure ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc34@element}}})
end
end,
begin
%% attribute roadFriction(6) with type INTEGER
Enc37@element = element(7, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
0 =< Enc37@element, Enc37@element < 51 ->
<<Enc37@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc37@element}}})
end
end,
begin
%% attribute sunData(7) with type INTEGER
Enc40@element = element(8, Val),
if Enc40@element =:= asn1_NOVALUE ->
[];
0 =< Enc40@element, Enc40@element < 1001 ->
<<Enc40@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc40@element}}})
end
end,
begin
%% attribute rainData(8) with type ENUMERATED
Enc43@element = element(9, Val),
if Enc43@element =:= asn1_NOVALUE ->
[];
Enc43@element =:= none ->
<<0:3>>;
Enc43@element =:= lightMist ->
<<1:3>>;
Enc43@element =:= heavyMist ->
<<2:3>>;
Enc43@element =:= lightRainOrDrizzle ->
<<3:3>>;
Enc43@element =:= rain ->
<<4:3>>;
Enc43@element =:= moderateRain ->
<<5:3>>;
Enc43@element =:= heavyRain ->
<<6:3>>;
Enc43@element =:= heavyDownpour ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc43@element}}})
end
end,
begin
%% attribute airTemp(9) with type INTEGER
Enc46@element = element(10, Val),
if Enc46@element =:= asn1_NOVALUE ->
[];
0 =< Enc46@element, Enc46@element < 192 ->
Enc46@element;
true ->
exit({error,{asn1,{illegal_integer,Enc46@element}}})
end
end,
begin
%% attribute airPres(10) with type INTEGER
Enc49@element = element(11, Val),
if Enc49@element =:= asn1_NOVALUE ->
[];
Enc49@element bsr 8 =:= 0 ->
Enc49@element;
true ->
exit({error,{asn1,{illegal_integer,Enc49@element}}})
end
end,
begin
%% attribute steering(11) with type SEQUENCE
Enc52@element = element(12, Val),
if Enc52@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_steering(Enc52@element)
end
end,
begin
%% attribute accelSets(12) with type SEQUENCE
Enc54@element = element(13, Val),
if Enc54@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_accelSets(Enc54@element)
end
end,
begin
%% attribute object(13) with type SEQUENCE
Enc56@element = element(14, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_object(Enc56@element)
end
end,
begin
%% attribute fullPos(14) with type FullPositionVector
Enc58@element = element(15, Val),
if Enc58@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_FullPositionVector(Enc58@element)
end
end,
begin
%% attribute throttlePos(15) with type INTEGER
Enc60@element = element(16, Val),
if Enc60@element =:= asn1_NOVALUE ->
[];
0 =< Enc60@element, Enc60@element < 201 ->
Enc60@element;
true ->
exit({error,{asn1,{illegal_integer,Enc60@element}}})
end
end,
begin
%% attribute speedHeadC(16) with type SpeedandHeadingandThrottleConfidence
Enc63@element = element(17, Val),
if Enc63@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_SpeedandHeadingandThrottleConfidence(Enc63@element)
end
end,
begin
%% attribute speedC(17) with type ENUMERATED
Enc65@element = element(18, Val),
if Enc65@element =:= asn1_NOVALUE ->
[];
Enc65@element =:= unavailable ->
<<0:3>>;
Enc65@element =:= prec100ms ->
<<1:3>>;
Enc65@element =:= prec10ms ->
<<2:3>>;
Enc65@element =:= prec5ms ->
<<3:3>>;
Enc65@element =:= prec1ms ->
<<4:3>>;
Enc65@element =:= 'prec0-1ms' ->
<<5:3>>;
Enc65@element =:= 'prec0-05ms' ->
<<6:3>>;
Enc65@element =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc65@element}}})
end
end,
begin
%% attribute vehicleData(18) with type SEQUENCE
Enc68@element = element(19, Val),
if Enc68@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_vehicleData(Enc68@element)
end
end,
begin
%% attribute vehicleIdent(19) with type VehicleIdent
Enc70@element = element(20, Val),
if Enc70@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleIdent(Enc70@element)
end
end,
begin
%% attribute j1939data(20) with type J1939data
Enc72@element = element(21, Val),
if Enc72@element =:= asn1_NOVALUE ->
[];
true ->
enc_J1939data(Enc72@element)
end
end,
begin
%% attribute weatherReport(21) with type SEQUENCE
Enc74@element = element(22, Val),
if Enc74@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatus_weatherReport(Enc74@element)
end
end|begin
%% attribute gnssStatus(22) with type BIT STRING
Enc76@element = element(23, Val),
if Enc76@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc77@bs = try bit_string_name2pos_8(Enc76@element) of
Enc77@positions ->
bitstring_from_positions(Enc77@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc76@element, 8)
end,
Enc77@bits = bit_size(Enc77@bs),
if Enc77@bits =:= 8 ->
Enc77@bs
end
end
end
end].
enc_VehicleStatus_steering(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute angle(1) with type INTEGER
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - -126,
if 0 =< Enc4@element@sub, Enc4@element@sub < 254 ->
Enc4@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute confidence(2) with type ENUMERATED
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element =:= unavailable ->
<<0:2>>;
Enc6@element =:= prec2deg ->
<<1:2>>;
Enc6@element =:= prec1deg ->
<<2:2>>;
Enc6@element =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end,
begin
%% attribute rate(3) with type INTEGER
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@element@sub = Enc9@element - -127,
if 0 =< Enc9@element@sub, Enc9@element@sub < 255 ->
Enc9@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end
end
end|begin
%% attribute wheels(4) with type INTEGER
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@element@sub = Enc12@element - -128,
if Enc12@element@sub bsr 8 =:= 0 ->
[Enc12@element@sub];
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end
end
end].
enc_VehicleStatus_accelSets(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute accel4way(1) with type AccelerationSet4Way
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_AccelerationSet4Way(Enc6@element)
end
end,
begin
%% attribute vertAccelThres(2) with type BIT STRING
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@bs = try bit_string_name2pos_9(Enc8@element) of
Enc9@positions ->
bitstring_from_positions(Enc9@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Enc8@element, 5)
end,
Enc9@bits = bit_size(Enc9@bs),
if Enc9@bits =:= 5 ->
Enc9@bs
end
end
end
end,
begin
%% attribute yawRateCon(3) with type ENUMERATED
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element =:= unavailable ->
<<0:3>>;
Enc11@element =:= 'degSec-100-00' ->
<<1:3>>;
Enc11@element =:= 'degSec-010-00' ->
<<2:3>>;
Enc11@element =:= 'degSec-005-00' ->
<<3:3>>;
Enc11@element =:= 'degSec-001-00' ->
<<4:3>>;
Enc11@element =:= 'degSec-000-10' ->
<<5:3>>;
Enc11@element =:= 'degSec-000-05' ->
<<6:3>>;
Enc11@element =:= 'degSec-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc11@element}}})
end
end,
begin
%% attribute hozAccelCon(4) with type ENUMERATED
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element =:= unavailable ->
<<0:3>>;
Enc14@element =:= 'accl-100-00' ->
<<1:3>>;
Enc14@element =:= 'accl-010-00' ->
<<2:3>>;
Enc14@element =:= 'accl-005-00' ->
<<3:3>>;
Enc14@element =:= 'accl-001-00' ->
<<4:3>>;
Enc14@element =:= 'accl-000-10' ->
<<5:3>>;
Enc14@element =:= 'accl-000-05' ->
<<6:3>>;
Enc14@element =:= 'accl-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end|begin
%% attribute confidenceSet(5) with type ConfidenceSet
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConfidenceSet(Enc17@element)
end
end].
enc_VehicleStatus_object(Val) ->
[begin
%% attribute obDist(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 15 =:= 0 ->
<<Enc1@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute obDirect(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 28801 ->
<<Enc3@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute dateTime(3) with type DDateTime
Enc5@element = element(4, Val),
'Common':enc_DDateTime(Enc5@element)
end].
enc_VehicleStatus_vehicleData(Val) ->
[begin
%% attribute height(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 7 =:= 0 ->
<<Enc1@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute bumpers(2) with type BumperHeights
Enc3@element = element(3, Val),
'Common':enc_BumperHeights(Enc3@element)
end,
begin
%% attribute mass(3) with type INTEGER
Enc4@element = element(4, Val),
if Enc4@element bsr 8 =:= 0 ->
Enc4@element;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute trailerWeight(4) with type INTEGER
Enc6@element = element(5, Val),
if 0 =< Enc6@element, Enc6@element < 64256 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end|begin
%% attribute type(5) with type ENUMERATED
Enc8@element = element(6, Val),
if Enc8@element =:= none ->
<<0:1,0:4>>;
Enc8@element =:= unknown ->
<<0:1,1:4>>;
Enc8@element =:= special ->
<<0:1,2:4>>;
Enc8@element =:= moto ->
<<0:1,3:4>>;
Enc8@element =:= car ->
<<0:1,4:4>>;
Enc8@element =:= carOther ->
<<0:1,5:4>>;
Enc8@element =:= bus ->
<<0:1,6:4>>;
Enc8@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc8@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc8@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc8@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc8@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc8@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc8@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc8@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc8@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc8@element}}})
end
end].
enc_VehicleStatus_weatherReport(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute isRaining(1) with type ENUMERATED
Enc5@element = element(2, Val),
if Enc5@element =:= precip ->
<<0:2>>;
Enc5@element =:= noPrecip ->
<<1:2>>;
Enc5@element =:= error ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end,
begin
%% attribute rainRate(2) with type INTEGER
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 16 =:= 0 ->
<<Enc7@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute precipSituation(3) with type ENUMERATED
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element =:= other ->
<<0:4>>;
Enc10@element =:= unknown ->
<<1:4>>;
Enc10@element =:= noPrecipitation ->
<<2:4>>;
Enc10@element =:= unidentifiedSlight ->
<<3:4>>;
Enc10@element =:= unidentifiedModerate ->
<<4:4>>;
Enc10@element =:= unidentifiedHeavy ->
<<5:4>>;
Enc10@element =:= snowSlight ->
<<6:4>>;
Enc10@element =:= snowModerate ->
<<7:4>>;
Enc10@element =:= snowHeavy ->
<<8:4>>;
Enc10@element =:= rainSlight ->
<<9:4>>;
Enc10@element =:= rainModerate ->
<<10:4>>;
Enc10@element =:= rainHeavy ->
<<11:4>>;
Enc10@element =:= frozenPrecipitationSlight ->
<<12:4>>;
Enc10@element =:= frozenPrecipitationModerate ->
<<13:4>>;
Enc10@element =:= frozenPrecipitationHeavy ->
<<14:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc10@element}}})
end
end,
begin
%% attribute solarRadiation(4) with type INTEGER
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 16 =:= 0 ->
<<Enc13@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end|begin
%% attribute friction(5) with type INTEGER
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
0 =< Enc16@element, Enc16@element < 102 ->
<<Enc16@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end].


dec_VehicleStatus(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:22,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute lights(1) with type BIT STRING
{Term1,Bytes3} = case (Opt bsr 21) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:9/binary-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@V8:V3@V6/binary-unit:1,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<1:1,0:1,V3@V7:14,V3@V9:V3@V7/binary-unit:1,V3@Buf10/bitstring>> ->
{V3@V9,V3@Buf10};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> ->
{V3@V9,V3@Buf10}  = decode_fragmented(V3@V7, V3@Buf8, 1),
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
{V3@V11,V3@Buf12}  = {decode_named_bit_string(V3@V0, [{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]),V3@Buf1},
{V3@V11,V3@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute lightBar(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 20) band 1 of
1 ->
begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> yellowCautionLights;
4 -> schooldBusLights;
5 -> arrowSignsActive;
6 -> slowMovingVehicle;
7 -> freqStops
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute wipers(3) with type WiperSet
{Term3,Bytes5} = case (Opt bsr 19) band 1 of
1 ->
'Common':dec_WiperSet(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute brakeStatus(4) with type BrakeSystemStatus
{Term4,Bytes6} = case (Opt bsr 18) band 1 of
1 ->
'Common':dec_BrakeSystemStatus(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute brakePressure(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 17) band 1 of
1 ->
begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes6,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> minPressure;
2 -> 'bkLvl-2';
3 -> 'bkLvl-3';
4 -> 'bkLvl-4';
5 -> 'bkLvl-5';
6 -> 'bkLvl-6';
7 -> 'bkLvl-7';
8 -> 'bkLvl-8';
9 -> 'bkLvl-9';
10 -> 'bkLvl-10';
11 -> 'bkLvl-11';
12 -> 'bkLvl-12';
13 -> 'bkLvl-13';
14 -> 'bkLvl-14';
15 -> maxPressure
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute roadFriction(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 16) band 1 of
1 ->
begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes7,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute sunData(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 15) band 1 of
1 ->
begin
<<V7@V0:10,V7@Buf1/bitstring>> = Bytes8,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute rainData(8) with type ENUMERATED
{Term8,Bytes10} = case (Opt bsr 14) band 1 of
1 ->
begin
<<V8@V0:3,V8@Buf1/bitstring>> = Bytes9,
V8@Int2 = case V8@V0 of
0 -> none;
1 -> lightMist;
2 -> heavyMist;
3 -> lightRainOrDrizzle;
4 -> rain;
5 -> moderateRain;
6 -> heavyRain;
7 -> heavyDownpour
end,
{V8@Int2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute airTemp(9) with type INTEGER
{Term9,Bytes11} = case (Opt bsr 13) band 1 of
1 ->
begin
<<V9@V0:8,V9@Buf1/bitstring>> = Bytes10,
{V9@V0,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute airPres(10) with type INTEGER
{Term10,Bytes12} = case (Opt bsr 12) band 1 of
1 ->
begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes11,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute steering(11) with type SEQUENCE
{Term11,Bytes13} = case (Opt bsr 11) band 1 of
1 ->
dec_VehicleStatus_steering(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute accelSets(12) with type SEQUENCE
{Term12,Bytes14} = case (Opt bsr 10) band 1 of
1 ->
dec_VehicleStatus_accelSets(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute object(13) with type SEQUENCE
{Term13,Bytes15} = case (Opt bsr 9) band 1 of
1 ->
dec_VehicleStatus_object(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute fullPos(14) with type FullPositionVector
{Term14,Bytes16} = case (Opt bsr 8) band 1 of
1 ->
'Common':dec_FullPositionVector(Bytes15);
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute throttlePos(15) with type INTEGER
{Term15,Bytes17} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V11@V0:8,V11@Buf1/bitstring>> = Bytes16,
{V11@V0,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute speedHeadC(16) with type SpeedandHeadingandThrottleConfidence
{Term16,Bytes18} = case (Opt bsr 6) band 1 of
1 ->
'Common':dec_SpeedandHeadingandThrottleConfidence(Bytes17);
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute speedC(17) with type ENUMERATED
{Term17,Bytes19} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V12@V0:3,V12@Buf1/bitstring>> = Bytes18,
V12@Int2 = case V12@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V12@Int2,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute vehicleData(18) with type SEQUENCE
{Term18,Bytes20} = case (Opt bsr 4) band 1 of
1 ->
dec_VehicleStatus_vehicleData(Bytes19);
0 ->
{asn1_NOVALUE,Bytes19}
end,

%% attribute vehicleIdent(19) with type VehicleIdent
{Term19,Bytes21} = case (Opt bsr 3) band 1 of
1 ->
dec_VehicleIdent(Bytes20);
0 ->
{asn1_NOVALUE,Bytes20}
end,

%% attribute j1939data(20) with type J1939data
{Term20,Bytes22} = case (Opt bsr 2) band 1 of
1 ->
dec_J1939data(Bytes21);
0 ->
{asn1_NOVALUE,Bytes21}
end,

%% attribute weatherReport(21) with type SEQUENCE
{Term21,Bytes23} = case (Opt bsr 1) band 1 of
1 ->
dec_VehicleStatus_weatherReport(Bytes22);
0 ->
{asn1_NOVALUE,Bytes22}
end,

%% attribute gnssStatus(22) with type BIT STRING
{Term22,Bytes24} = case Opt band 1 of
1 ->
begin
<<V13@V0:8/binary-unit:1,V13@Buf1/bitstring>> = Bytes23,
{V13@V2,V13@Buf3}  = {decode_named_bit_string(V13@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V13@Buf1},
{V13@V2,V13@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes23}
end,

%% Extensions
{Extensions,Bytes25} = case Ext of
0 -> {<<>>,Bytes24};
1 ->
{V14@V0,V14@Buf1} = case Bytes24 of
<<0:1,V14@V3:6,V14@Buf4/bitstring>> ->
V14@Add5 = V14@V3 + 1,
{V14@Add5,V14@Buf4};
<<1:1,V14@Buf2/bitstring>> ->
{V14@V3,V14@Buf4} = case V14@Buf2 of
<<0:1,V14@V6:7,V14@Buf7/bitstring>> when V14@V6 =/= 0 ->
{V14@V6,V14@Buf7};
<<1:1,0:1,V14@V7:14,V14@Buf8/bitstring>> when V14@V7 =/= 0 ->
{V14@V7,V14@Buf8};
<<1:1,1:1,V14@V7:6,V14@Buf8/bitstring>> when V14@V7 =/= 0 ->
V14@Mul9 = V14@V7 * 16384,
{V14@Mul9,V14@Buf8}
end,
{V14@V3,V14@Buf4}
end,
<<V14@V10:V14@V0/bitstring-unit:1,V14@Buf11/bitstring>> = V14@Buf1,
{V14@V10,V14@Buf11}
end,
Bytes26= skipextensions(Bytes25, 1, Extensions),
Res1 = {'VehicleStatus',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18,Term19,Term20,Term21,Term22},
{Res1,Bytes26}.


dec_VehicleStatus_steering(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute angle(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -126,
{V2@Add2,V2@Buf1}
end,

%% attribute confidence(2) with type ENUMERATED
{Term2,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute rate(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -127,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute wheels(4) with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -128,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'VehicleStatus_steering',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.


dec_VehicleStatus_accelSets(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute accel4way(1) with type AccelerationSet4Way
{Term1,Bytes2} = case (Opt bsr 4) band 1 of
1 ->
'Common':dec_AccelerationSet4Way(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute vertAccelThres(2) with type BIT STRING
{Term2,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V2@V0:5/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_named_bit_string(V2@V0, [{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V2@Buf1},
{V2@V2,V2@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute yawRateCon(3) with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> 'degSec-100-00';
2 -> 'degSec-010-00';
3 -> 'degSec-005-00';
4 -> 'degSec-001-00';
5 -> 'degSec-000-10';
6 -> 'degSec-000-05';
7 -> 'degSec-000-01'
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute hozAccelCon(4) with type ENUMERATED
{Term4,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> 'accl-100-00';
2 -> 'accl-010-00';
3 -> 'accl-005-00';
4 -> 'accl-001-00';
5 -> 'accl-000-10';
6 -> 'accl-000-05';
7 -> 'accl-000-01'
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute confidenceSet(5) with type ConfidenceSet
{Term5,Bytes6} = case Opt band 1 of
1 ->
dec_ConfidenceSet(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,
Res1 = {'VehicleStatus_accelSets',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes6}.


dec_VehicleStatus_object(Bytes) ->

%% attribute obDist(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute obDirect(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:15,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute dateTime(3) with type DDateTime
{Term3,Bytes3} = 'Common':dec_DDateTime(Bytes2),
Res1 = {'VehicleStatus_object',Term1,Term2,Term3},
{Res1,Bytes3}.


dec_VehicleStatus_vehicleData(Bytes) ->

%% attribute height(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute bumpers(2) with type BumperHeights
{Term2,Bytes2} = 'Common':dec_BumperHeights(Bytes1),

%% attribute mass(3) with type INTEGER
{Term3,Bytes3} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end,

%% attribute trailerWeight(4) with type INTEGER
{Term4,Bytes4} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute type(5) with type ENUMERATED
{Term5,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:4,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,
Res1 = {'VehicleStatus_vehicleData',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes5}.


dec_VehicleStatus_weatherReport(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute isRaining(1) with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> precip;
1 -> noPrecip;
2 -> error;
_ -> exit({error,{asn1,{decode_enumerated,V2@V0}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute rainRate(2) with type INTEGER
{Term2,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute precipSituation(3) with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> other;
1 -> unknown;
2 -> noPrecipitation;
3 -> unidentifiedSlight;
4 -> unidentifiedModerate;
5 -> unidentifiedHeavy;
6 -> snowSlight;
7 -> snowModerate;
8 -> snowHeavy;
9 -> rainSlight;
10 -> rainModerate;
11 -> rainHeavy;
12 -> frozenPrecipitationSlight;
13 -> frozenPrecipitationModerate;
14 -> frozenPrecipitationHeavy;
_ -> exit({error,{asn1,{decode_enumerated,V4@V0}}})
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute solarRadiation(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute friction(5) with type INTEGER
{Term5,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,
Res1 = {'VehicleStatus_weatherReport',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes6}.

enc_AccelerationConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= 'accl-100-00' ->
<<1:3>>;
Val =:= 'accl-010-00' ->
<<2:3>>;
Val =:= 'accl-005-00' ->
<<3:3>>;
Val =:= 'accl-001-00' ->
<<4:3>>;
Val =:= 'accl-000-10' ->
<<5:3>>;
Val =:= 'accl-000-05' ->
<<6:3>>;
Val =:= 'accl-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AccelerationConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'accl-100-00';
2 -> 'accl-010-00';
3 -> 'accl-005-00';
4 -> 'accl-001-00';
5 -> 'accl-000-10';
6 -> 'accl-000-05';
7 -> 'accl-000-01'
end,
{V1@Int2,V1@Buf1}
end.

enc_BrakeAppliedPressure(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= minPressure ->
<<1:4>>;
Val =:= 'bkLvl-2' ->
<<2:4>>;
Val =:= 'bkLvl-3' ->
<<3:4>>;
Val =:= 'bkLvl-4' ->
<<4:4>>;
Val =:= 'bkLvl-5' ->
<<5:4>>;
Val =:= 'bkLvl-6' ->
<<6:4>>;
Val =:= 'bkLvl-7' ->
<<7:4>>;
Val =:= 'bkLvl-8' ->
<<8:4>>;
Val =:= 'bkLvl-9' ->
<<9:4>>;
Val =:= 'bkLvl-10' ->
<<10:4>>;
Val =:= 'bkLvl-11' ->
<<11:4>>;
Val =:= 'bkLvl-12' ->
<<12:4>>;
Val =:= 'bkLvl-13' ->
<<13:4>>;
Val =:= 'bkLvl-14' ->
<<14:4>>;
Val =:= maxPressure ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_BrakeAppliedPressure(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> minPressure;
2 -> 'bkLvl-2';
3 -> 'bkLvl-3';
4 -> 'bkLvl-4';
5 -> 'bkLvl-5';
6 -> 'bkLvl-6';
7 -> 'bkLvl-7';
8 -> 'bkLvl-8';
9 -> 'bkLvl-9';
10 -> 'bkLvl-10';
11 -> 'bkLvl-11';
12 -> 'bkLvl-12';
13 -> 'bkLvl-13';
14 -> 'bkLvl-14';
15 -> maxPressure
end,
{V1@Int2,V1@Buf1}
end.

enc_DrivingWheelAngle(Val) ->
Val@sub = Val - -128,
if Val@sub bsr 8 =:= 0 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DrivingWheelAngle(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -128,
{V1@Add2,V1@Buf1}
end.

enc_AxleLocation(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AxleLocation(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AxleWeight(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AxleWeight(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_CargoWeight(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_CargoWeight(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleLiftAirPressure(Val) ->
if 0 =< Val, Val < 1001 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleLiftAirPressure(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleLocation(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleLocation(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleLubePressure(Val) ->
if 0 =< Val, Val < 251 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleLubePressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DriveAxleTemperature(Val) ->
Val@sub = Val - -40,
if 0 =< Val@sub, Val@sub < 251 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DriveAxleTemperature(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -40,
{V1@Add2,V1@Buf1}
end.

enc_SteeringAxleLubePressure(Val) ->
if 0 =< Val, Val < 251 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringAxleLubePressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SteeringAxleTemperature(Val) ->
Val@sub = Val - -40,
if 0 =< Val@sub, Val@sub < 251 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringAxleTemperature(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -40,
{V1@Add2,V1@Buf1}
end.

enc_TireLeakageRate(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TireLeakageRate(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TireLocation(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TireLocation(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TirePressureThresholdDetection(Val) ->
if Val =:= noData ->
<<0:3>>;
Val =:= overPressure ->
<<1:3>>;
Val =:= noWarningPressure ->
<<2:3>>;
Val =:= underPressure ->
<<3:3>>;
Val =:= extremeUnderPressure ->
<<4:3>>;
Val =:= undefined ->
<<5:3>>;
Val =:= errorIndicator ->
<<6:3>>;
Val =:= notAvailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TirePressureThresholdDetection(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> noData;
1 -> overPressure;
2 -> noWarningPressure;
3 -> underPressure;
4 -> extremeUnderPressure;
5 -> undefined;
6 -> errorIndicator;
7 -> notAvailable
end,
{V1@Int2,V1@Buf1}
end.

enc_TirePressure(Val) ->
if 0 =< Val, Val < 251 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TirePressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TireTemp(Val) ->
Val@sub = Val - -8736,
if 0 =< Val@sub, Val@sub < 64256 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TireTemp(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8736,
{V1@Add2,V1@Buf1}
end.

enc_WheelEndElectFault(Val) ->
if Val =:= isOk ->
<<0:2>>;
Val =:= isNotDefined ->
<<1:2>>;
Val =:= isError ->
<<2:2>>;
Val =:= isNotSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_WheelEndElectFault(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> isOk;
1 -> isNotDefined;
2 -> isError;
3 -> isNotSupported
end,
{V1@Int2,V1@Buf1}
end.

enc_WheelSensorStatus(Val) ->
if Val =:= off ->
<<0:2>>;
Val =:= on ->
<<1:2>>;
Val =:= notDefined ->
<<2:2>>;
Val =:= notSupported ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_WheelSensorStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> off;
1 -> on;
2 -> notDefined;
3 -> notSupported
end,
{V1@Int2,V1@Buf1}
end.

enc_ProbeSegmentNumber(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ProbeSegmentNumber(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RainSensor(Val) ->
if Val =:= none ->
<<0:3>>;
Val =:= lightMist ->
<<1:3>>;
Val =:= heavyMist ->
<<2:3>>;
Val =:= lightRainOrDrizzle ->
<<3:3>>;
Val =:= rain ->
<<4:3>>;
Val =:= moderateRain ->
<<5:3>>;
Val =:= heavyRain ->
<<6:3>>;
Val =:= heavyDownpour ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RainSensor(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> none;
1 -> lightMist;
2 -> heavyMist;
3 -> lightRainOrDrizzle;
4 -> rain;
5 -> moderateRain;
6 -> heavyRain;
7 -> heavyDownpour
end,
{V1@Int2,V1@Buf1}
end.

enc_SteeringWheelAngleConfidence(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= prec2deg ->
<<1:2>>;
Val =:= prec1deg ->
<<2:2>>;
Val =:= 'prec0-02deg' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SteeringWheelAngleConfidence(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec2deg;
2 -> prec1deg;
3 -> 'prec0-02deg'
end,
{V1@Int2,V1@Buf1}
end.

enc_SteeringWheelAngleRateOfChange(Val) ->
Val@sub = Val - -127,
if 0 =< Val@sub, Val@sub < 255 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringWheelAngleRateOfChange(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -127,
{V1@Add2,V1@Buf1}
end.

enc_SunSensor(Val) ->
if 0 =< Val, Val < 1001 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SunSensor(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_ThrottlePosition(Val) ->
if 0 =< Val, Val < 201 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ThrottlePosition(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VINstring(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 17 ->
[<<Enc1@len@sub:5>>|Val]
end.


dec_VINstring(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_YawRateConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= 'degSec-100-00' ->
<<1:3>>;
Val =:= 'degSec-010-00' ->
<<2:3>>;
Val =:= 'degSec-005-00' ->
<<3:3>>;
Val =:= 'degSec-001-00' ->
<<4:3>>;
Val =:= 'degSec-000-10' ->
<<5:3>>;
Val =:= 'degSec-000-05' ->
<<6:3>>;
Val =:= 'degSec-000-01' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_YawRateConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'degSec-100-00';
2 -> 'degSec-010-00';
3 -> 'degSec-005-00';
4 -> 'degSec-001-00';
5 -> 'degSec-000-10';
6 -> 'degSec-000-05';
7 -> 'degSec-000-01'
end,
{V1@Int2,V1@Buf1}
end.

typeinfo('ProbeVehicleData') ->
  {sequence,'ProbeVehicleData',7,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,103,78,117,109>>,{'INTEGER',{0,32767}},'OPTIONAL'},{<<112,114,111,98,101,73,68>>,{typeinfo,{'ProbeVehicleData','VehicleIdent'}},'OPTIONAL'},{<<115,116,97,114,116,86,101,99,116,111,114>>,{typeinfo,{'Common','FullPositionVector'}},mandatory},{<<118,101,104,105,99,108,101,84,121,112,101>>,{typeinfo,{'Common','VehicleClassification'}},mandatory},{<<115,110,97,112,115,104,111,116,115>>,{sof,{typeinfo,{'ProbeVehicleData','Snapshot'}}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ProbeVehicleData_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,134,{'Externaltypereference',undefined,'ProbeVehicleData',internal_object_set_argument_1}},[{outermost,[{'Externalvaluereference',134,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('AccelSteerYawRateConfidence') ->
  {sequence,'AccelSteerYawRateConfidence',3,[{<<121,97,119,82,97,116,101>>,{'ENUMERATED',#{unavailable => 0,'degSec-100-00' => 1,'degSec-010-00' => 2,'degSec-005-00' => 3,'degSec-001-00' => 4,'degSec-000-10' => 5,'degSec-000-05' => 6,'degSec-000-01' => 7}},mandatory},{<<97,99,99,101,108,101,114,97,116,105,111,110>>,{'ENUMERATED',#{unavailable => 0,'accl-100-00' => 1,'accl-010-00' => 2,'accl-005-00' => 3,'accl-001-00' => 4,'accl-000-10' => 5,'accl-000-05' => 6,'accl-000-01' => 7}},mandatory},{<<115,116,101,101,114,105,110,103,87,104,101,101,108,65,110,103,108,101>>,{'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}},mandatory}]};
typeinfo('ConfidenceSet') ->
  {sequence,'ConfidenceSet',7,[{<<97,99,99,101,108,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'ProbeVehicleData','AccelSteerYawRateConfidence'}},'OPTIONAL'},{<<115,112,101,101,100,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'Common','SpeedandHeadingandThrottleConfidence'}},'OPTIONAL'},{<<116,105,109,101,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{'time-000-000-000-005' => 31,'time-000-100' => 9,'time-000-005' => 13,unavailable => 0,'time-000-001' => 15,'time-000-000-01' => 21,'time-001-000' => 6,'time-000-000-1' => 18,'time-000-000-000-000-02' => 38,'time-010-000' => 4,'time-000-000-05' => 19,'time-000-500' => 7,'time-000-000-000-000-2' => 35,'time-000-000-000-01' => 30,'time-000-000-02' => 20,'time-000-000-000-001' => 33,'time-000-000-000-002' => 32,'time-050-000' => 2,'time-000-000-002' => 23,'time-000-000-000-02' => 29,'time-020-000' => 3,'time-000-000-5' => 16,'time-100-000' => 1,'time-000-200' => 8,'time-000-000-2' => 17,'time-000-000-000-2' => 26,'time-000-000-000-000-05' => 37,'time-000-000-001' => 24,'time-000-000-000-000-5' => 34,'time-000-000-005' => 22,'time-000-000-000-1' => 27,'time-000-000-000-5' => 25,'time-000-000-000-000-1' => 36,'time-000-002' => 14,'time-000-020' => 11,'time-000-000-000-000-01' => 39,'time-000-050' => 10,'time-002-000' => 5,'time-000-010' => 12,'time-000-000-000-05' => 28}},'OPTIONAL'},{<<112,111,115,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'Common','PositionConfidenceSet'}},'OPTIONAL'},{<<115,116,101,101,114,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}},'OPTIONAL'},{<<104,101,97,100,105,110,103,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec10deg => 1,prec05deg => 2,prec01deg => 3,'prec0-1deg' => 4,'prec0-05deg' => 5,'prec0-01deg' => 6,'prec0-0125deg' => 7}},'OPTIONAL'},{<<116,104,114,111,116,116,108,101,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec10percent => 1,prec1percent => 2,'prec0-5percent' => 3}},'OPTIONAL'}]};
typeinfo('J1939data') ->
  {sequence,'J1939data',10,[{<<116,105,114,101,115>>,{typeinfo,{'ProbeVehicleData','TireDataList'}},'OPTIONAL'},{<<97,120,108,101,115>>,{typeinfo,{'ProbeVehicleData','AxleWeightList'}},'OPTIONAL'},{<<116,114,97,105,108,101,114,87,101,105,103,104,116>>,{'INTEGER',{0,64255}},'OPTIONAL'},{<<99,97,114,103,111,87,101,105,103,104,116>>,{'INTEGER',{0,64255}},'OPTIONAL'},{<<115,116,101,101,114,105,110,103,65,120,108,101,84,101,109,112,101,114,97,116,117,114,101>>,{'INTEGER',{-40,210}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,76,111,99,97,116,105,111,110>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,76,105,102,116,65,105,114,80,114,101,115,115,117,114,101>>,{'INTEGER',{0,1000}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,84,101,109,112,101,114,97,116,117,114,101>>,{'INTEGER',{-40,210}},'OPTIONAL'},{<<100,114,105,118,101,65,120,108,101,76,117,98,101,80,114,101,115,115,117,114,101>>,{'INTEGER',{0,250}},'OPTIONAL'},{<<115,116,101,101,114,105,110,103,65,120,108,101,76,117,98,101,80,114,101,115,115,117,114,101>>,{'INTEGER',{0,250}},'OPTIONAL'}]};
typeinfo('TireDataList') ->
  {sof,{typeinfo,{'ProbeVehicleData','TireData'}}};
typeinfo('TireData') ->
  {sequence,'TireData',7,[{<<108,111,99,97,116,105,111,110>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<112,114,101,115,115,117,114,101>>,{'INTEGER',{0,250}},'OPTIONAL'},{<<116,101,109,112>>,{'INTEGER',{-8736,55519}},'OPTIONAL'},{<<119,104,101,101,108,83,101,110,115,111,114,83,116,97,116,117,115>>,{'ENUMERATED',#{off => 0,on => 1,notDefined => 2,notSupported => 3}},'OPTIONAL'},{<<119,104,101,101,108,69,110,100,69,108,101,99,116,70,97,117,108,116>>,{'ENUMERATED',#{isOk => 0,isNotDefined => 1,isError => 2,isNotSupported => 3}},'OPTIONAL'},{<<108,101,97,107,97,103,101,82,97,116,101>>,{'INTEGER',{0,64255}},'OPTIONAL'},{<<100,101,116,101,99,116,105,111,110>>,{'ENUMERATED',#{undefined => 5,noData => 0,overPressure => 1,noWarningPressure => 2,underPressure => 3,extremeUnderPressure => 4,errorIndicator => 6,notAvailable => 7}},'OPTIONAL'}]};
typeinfo('AxleWeightList') ->
  {sof,{typeinfo,{'ProbeVehicleData','AxleWeightSet'}}};
typeinfo('AxleWeightSet') ->
  {sequence,'AxleWeightSet',2,[{<<108,111,99,97,116,105,111,110>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<119,101,105,103,104,116>>,{'INTEGER',{0,64255}},'OPTIONAL'}]};
typeinfo('Snapshot') ->
  {sequence,'Snapshot',3,[{<<116,104,101,80,111,115,105,116,105,111,110>>,{typeinfo,{'Common','FullPositionVector'}},mandatory},{<<115,97,102,101,116,121,69,120,116>>,{typeinfo,{'Common','VehicleSafetyExtensions'}},'OPTIONAL'},{<<100,97,116,97,83,101,116>>,{typeinfo,{'ProbeVehicleData','VehicleStatus'}},'OPTIONAL'}]};
typeinfo('VehicleIdent') ->
  {sequence,'VehicleIdent',6,[{<<110,97,109,101>>,string,'OPTIONAL'},{<<118,105,110>>,octet_string,'OPTIONAL'},{<<111,119,110,101,114,67,111,100,101>>,string,'OPTIONAL'},{<<105,100>>,{typeinfo,{'Common','VehicleID'}},'OPTIONAL'},{<<118,101,104,105,99,108,101,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},'OPTIONAL'},{<<118,101,104,105,99,108,101,67,108,97,115,115>>,{choice,#{<<114,69,113,117,105,112>> => {'ENUMERATED_EXT',#{snowplow => 10102,'swat-team-van' => 10104,'urban-search-rescue-unit' => 10056,helitanker => 10026,'rescue-unit' => 10055,'tanker-pumper-combination' => 9998,'marine-equipment-other' => 10034,'farm-tractor' => 10089,'marine-equipment' => 9989,'heavy-tow' => 10092,'aLS-unit' => 10060,'unknown-vehicle' => 10106,'boat-no-pump' => 10036,'breathing-apparatus-support' => 10045,'construction-vehicle' => 10088,'refuse-collection-vehicle' => 10096,'rotary-snow-blower' => 10111,'chief-officer-car' => 10076,'bomb-squad-van' => 10086,'resurfacing-vehicle' => 10097,'crash-fire-rescue' => 10058,'high-angle-rescue' => 10057,'combine-harvester' => 10087,engine => 9995,'roadside-litter-collection-crews' => 10099,'aircraft-fixed-wing-tanker' => 10025,'supervisor-vehicle' => 10109,'type-ii-hand-crew' => 10079,aircraft => 9988,quint => 9997,'tanker-or-tender' => 10008,'hAZMAT-unit' => 10077,'hedge-cutting-machines' => 10093,'bLS-unit' => 10059,'road-grader' => 10112,'dump-truck' => 10108,'privately-owned-vehicle' => 10083,helicopter => 10027,'heavy-ground-equipment' => 9986,'aircraft-other' => 10024,'heavy-ground-equipment-other' => 10004,'steam-truck' => 10113,'mobile-crane' => 10095,other => 9993,'truck-or-aerial' => 9996,'support-equipment' => 9990,'brush-truck' => 10000,'steam-roller' => 10103,'medical-rescue-unit-other' => 10054,'salvage-vehicle' => 10100,'type-i-hand-crew' => 10078,'grass-cutting-machines' => 10090,'medical-rescue-unit' => 9991,'light-and-air-unit' => 10046,'hAZMAT-containment-tow' => 10091,'light-tow' => 10094,'other-apparatus-resource' => 10084,'snow-blower' => 10110,'dozer-or-plow' => 10005,'sand-truck' => 10101,'ground-fire-suppression' => 9985,'mobile-command-post' => 10075,ambulance => 10085,'road-sweeper' => 10098,'track-laying-vehicle' => 10105,tractor => 10006,'flatbed-tow' => 10114,'fire-boat-with-pump' => 10035,'aircraft-rescue-firefighting' => 10001,'support-apparatus-other' => 10044,'ground-fire-suppression-other' => 9994,'white-lining-vehicle' => 10107}},<<114,71,114,111,117,112>> => {'ENUMERATED_EXT',#{'emergency-vehicle-units' => 9729,'federal-law-enforcement-units' => 9730,'state-police-units' => 9731,'county-police-units' => 9732,'local-police-units' => 9733,'ambulance-units' => 9734,'rescue-units' => 9735,'fire-units' => 9736,'hAZMAT-units' => 9737,'light-tow-unit' => 9738,'heavy-tow-unit' => 9739,'freeway-service-patrols' => 9740,'transportation-response-units' => 9741,'private-contractor-response-units' => 9742}},<<118,71,114,111,117,112>> => {'ENUMERATED_EXT',#{'diesel-powered-vehicles' => 9248,'maintenance-vehicles' => 9240,'heavy-vehicles' => 9226,'cars-with-recreational-trailers' => 9224,'lPG-vehicles' => 9249,'all-vehicles' => 9217,'articulated-buses' => 9229,'vehicles-with-trailers' => 9225,'cars-with-trailers' => 9223,'long-vehicles' => 9235,'vehicles-with-parking-permits' => 9244,'light-vehicles' => 9221,convoys => 9239,'vehicles-with-semi-trailers' => 9231,'delivery-vehicles' => 9241,motorcycles => 9219,'hazardous-loads' => 9236,'vehicles-with-odd-numbered-license-plates' => 9243,'military-vehicles' => 9251,bicycles => 9218,'gas-powered-vehicles' => 9247,'high-profile-vehicles' => 9233,trucks => 9227,cars => 9220,'military-convoys' => 9250,'cars-and-light-vehicles' => 9222,'exceptional-loads' => 9237,'abnormal-loads' => 9238,'vehicles-with-catalytic-converters' => 9245,'school-buses' => 9230,'wide-vehicles' => 9234,'vehicles-without-catalytic-converters' => 9246,'vehicles-with-double-trailers' => 9232,buses => 9228,'vehicles-with-even-numbered-license-plates' => 9242}}}},'OPTIONAL'}]};
typeinfo('VehicleStatus') ->
  {sequence,'VehicleStatus',22,[{<<108,105,103,104,116,115>>,{bit_string_nnl,[{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]},'OPTIONAL'},{<<108,105,103,104,116,66,97,114>>,{'ENUMERATED',#{unavailable => 0,notInUse => 1,inUse => 2,yellowCautionLights => 3,schooldBusLights => 4,arrowSignsActive => 5,slowMovingVehicle => 6,freqStops => 7}},'OPTIONAL'},{<<119,105,112,101,114,115>>,{typeinfo,{'Common','WiperSet'}},'OPTIONAL'},{<<98,114,97,107,101,83,116,97,116,117,115>>,{typeinfo,{'Common','BrakeSystemStatus'}},'OPTIONAL'},{<<98,114,97,107,101,80,114,101,115,115,117,114,101>>,{'ENUMERATED',#{unavailable => 0,minPressure => 1,'bkLvl-2' => 2,'bkLvl-3' => 3,'bkLvl-4' => 4,'bkLvl-5' => 5,'bkLvl-6' => 6,'bkLvl-7' => 7,'bkLvl-8' => 8,'bkLvl-9' => 9,'bkLvl-10' => 10,'bkLvl-11' => 11,'bkLvl-12' => 12,'bkLvl-13' => 13,'bkLvl-14' => 14,maxPressure => 15}},'OPTIONAL'},{<<114,111,97,100,70,114,105,99,116,105,111,110>>,{'INTEGER',{0,50}},'OPTIONAL'},{<<115,117,110,68,97,116,97>>,{'INTEGER',{0,1000}},'OPTIONAL'},{<<114,97,105,110,68,97,116,97>>,{'ENUMERATED',#{none => 0,rain => 4,lightMist => 1,heavyMist => 2,lightRainOrDrizzle => 3,moderateRain => 5,heavyRain => 6,heavyDownpour => 7}},'OPTIONAL'},{<<97,105,114,84,101,109,112>>,{'INTEGER',{0,191}},'OPTIONAL'},{<<97,105,114,80,114,101,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<115,116,101,101,114,105,110,103>>,{sequence,'VehicleStatus_steering',4,[{<<97,110,103,108,101>>,{'INTEGER',{-126,127}},mandatory},{<<99,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}},'OPTIONAL'},{<<114,97,116,101>>,{'INTEGER',{-127,127}},'OPTIONAL'},{<<119,104,101,101,108,115>>,{'INTEGER',{-128,127}},'OPTIONAL'}]},'OPTIONAL'},{<<97,99,99,101,108,83,101,116,115>>,{sequence,'VehicleStatus_accelSets',5,[{<<97,99,99,101,108,52,119,97,121>>,{typeinfo,{'Common','AccelerationSet4Way'}},'OPTIONAL'},{<<118,101,114,116,65,99,99,101,108,84,104,114,101,115>>,{{bit_string_nnl,[{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5},'OPTIONAL'},{<<121,97,119,82,97,116,101,67,111,110>>,{'ENUMERATED',#{unavailable => 0,'degSec-100-00' => 1,'degSec-010-00' => 2,'degSec-005-00' => 3,'degSec-001-00' => 4,'degSec-000-10' => 5,'degSec-000-05' => 6,'degSec-000-01' => 7}},'OPTIONAL'},{<<104,111,122,65,99,99,101,108,67,111,110>>,{'ENUMERATED',#{unavailable => 0,'accl-100-00' => 1,'accl-010-00' => 2,'accl-005-00' => 3,'accl-001-00' => 4,'accl-000-10' => 5,'accl-000-05' => 6,'accl-000-01' => 7}},'OPTIONAL'},{<<99,111,110,102,105,100,101,110,99,101,83,101,116>>,{typeinfo,{'ProbeVehicleData','ConfidenceSet'}},'OPTIONAL'}]},'OPTIONAL'},{<<111,98,106,101,99,116>>,{sequence,'VehicleStatus_object',3,[{<<111,98,68,105,115,116>>,{'INTEGER',{0,32767}},mandatory},{<<111,98,68,105,114,101,99,116>>,{'INTEGER',{0,28800}},mandatory},{<<100,97,116,101,84,105,109,101>>,{typeinfo,{'Common','DDateTime'}},mandatory}]},'OPTIONAL'},{<<102,117,108,108,80,111,115>>,{typeinfo,{'Common','FullPositionVector'}},'OPTIONAL'},{<<116,104,114,111,116,116,108,101,80,111,115>>,{'INTEGER',{0,200}},'OPTIONAL'},{<<115,112,101,101,100,72,101,97,100,67>>,{typeinfo,{'Common','SpeedandHeadingandThrottleConfidence'}},'OPTIONAL'},{<<115,112,101,101,100,67>>,{'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}},'OPTIONAL'},{<<118,101,104,105,99,108,101,68,97,116,97>>,{sequence,'VehicleStatus_vehicleData',5,[{<<104,101,105,103,104,116>>,{'INTEGER',{0,127}},mandatory},{<<98,117,109,112,101,114,115>>,{typeinfo,{'Common','BumperHeights'}},mandatory},{<<109,97,115,115>>,{'INTEGER',{0,255}},mandatory},{<<116,114,97,105,108,101,114,87,101,105,103,104,116>>,{'INTEGER',{0,64255}},mandatory},{<<116,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},mandatory}]},'OPTIONAL'},{<<118,101,104,105,99,108,101,73,100,101,110,116>>,{typeinfo,{'ProbeVehicleData','VehicleIdent'}},'OPTIONAL'},{<<106,49,57,51,57,100,97,116,97>>,{typeinfo,{'ProbeVehicleData','J1939data'}},'OPTIONAL'},{<<119,101,97,116,104,101,114,82,101,112,111,114,116>>,{sequence,'VehicleStatus_weatherReport',5,[{<<105,115,82,97,105,110,105,110,103>>,{'ENUMERATED',#{error => 3,precip => 1,noPrecip => 2}},mandatory},{<<114,97,105,110,82,97,116,101>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<112,114,101,99,105,112,83,105,116,117,97,116,105,111,110>>,{'ENUMERATED',#{other => 1,unknown => 2,noPrecipitation => 3,unidentifiedSlight => 4,unidentifiedModerate => 5,unidentifiedHeavy => 6,snowSlight => 7,snowModerate => 8,snowHeavy => 9,rainSlight => 10,rainModerate => 11,rainHeavy => 12,frozenPrecipitationSlight => 13,frozenPrecipitationModerate => 14,frozenPrecipitationHeavy => 15}},'OPTIONAL'},{<<115,111,108,97,114,82,97,100,105,97,116,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<102,114,105,99,116,105,111,110>>,{'INTEGER',{0,101}},'OPTIONAL'}]},'OPTIONAL'},{<<103,110,115,115,83,116,97,116,117,115>>,{{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8},'OPTIONAL'}]};
typeinfo('AccelerationConfidence') ->
  {'ENUMERATED',#{unavailable => 0,'accl-100-00' => 1,'accl-010-00' => 2,'accl-005-00' => 3,'accl-001-00' => 4,'accl-000-10' => 5,'accl-000-05' => 6,'accl-000-01' => 7}};
typeinfo('BrakeAppliedPressure') ->
  {'ENUMERATED',#{unavailable => 0,minPressure => 1,'bkLvl-2' => 2,'bkLvl-3' => 3,'bkLvl-4' => 4,'bkLvl-5' => 5,'bkLvl-6' => 6,'bkLvl-7' => 7,'bkLvl-8' => 8,'bkLvl-9' => 9,'bkLvl-10' => 10,'bkLvl-11' => 11,'bkLvl-12' => 12,'bkLvl-13' => 13,'bkLvl-14' => 14,maxPressure => 15}};
typeinfo('DrivingWheelAngle') ->
  {'INTEGER',{-128,127}};
typeinfo('AxleLocation') ->
  {'INTEGER',{0,255}};
typeinfo('AxleWeight') ->
  {'INTEGER',{0,64255}};
typeinfo('CargoWeight') ->
  {'INTEGER',{0,64255}};
typeinfo('DriveAxleLiftAirPressure') ->
  {'INTEGER',{0,1000}};
typeinfo('DriveAxleLocation') ->
  {'INTEGER',{0,255}};
typeinfo('DriveAxleLubePressure') ->
  {'INTEGER',{0,250}};
typeinfo('DriveAxleTemperature') ->
  {'INTEGER',{-40,210}};
typeinfo('SteeringAxleLubePressure') ->
  {'INTEGER',{0,250}};
typeinfo('SteeringAxleTemperature') ->
  {'INTEGER',{-40,210}};
typeinfo('TireLeakageRate') ->
  {'INTEGER',{0,64255}};
typeinfo('TireLocation') ->
  {'INTEGER',{0,255}};
typeinfo('TirePressureThresholdDetection') ->
  {'ENUMERATED',#{undefined => 5,noData => 0,overPressure => 1,noWarningPressure => 2,underPressure => 3,extremeUnderPressure => 4,errorIndicator => 6,notAvailable => 7}};
typeinfo('TirePressure') ->
  {'INTEGER',{0,250}};
typeinfo('TireTemp') ->
  {'INTEGER',{-8736,55519}};
typeinfo('WheelEndElectFault') ->
  {'ENUMERATED',#{isOk => 0,isNotDefined => 1,isError => 2,isNotSupported => 3}};
typeinfo('WheelSensorStatus') ->
  {'ENUMERATED',#{off => 0,on => 1,notDefined => 2,notSupported => 3}};
typeinfo('ProbeSegmentNumber') ->
  {'INTEGER',{0,32767}};
typeinfo('RainSensor') ->
  {'ENUMERATED',#{none => 0,rain => 4,lightMist => 1,heavyMist => 2,lightRainOrDrizzle => 3,moderateRain => 5,heavyRain => 6,heavyDownpour => 7}};
typeinfo('SteeringWheelAngleConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec2deg => 1,prec1deg => 2,'prec0-02deg' => 3}};
typeinfo('SteeringWheelAngleRateOfChange') ->
  {'INTEGER',{-127,127}};
typeinfo('SunSensor') ->
  {'INTEGER',{0,1000}};
typeinfo('ThrottlePosition') ->
  {'INTEGER',{0,200}};
typeinfo('VINstring') ->
  octet_string;
typeinfo('YawRateConfidence') ->
  {'ENUMERATED',#{unavailable => 0,'degSec-100-00' => 1,'degSec-010-00' => 2,'degSec-005-00' => 3,'degSec-001-00' => 4,'degSec-000-10' => 5,'degSec-000-05' => 6,'degSec-000-01' => 7}};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_7([lowBeamHeadlightsOn | T]) ->
    [0 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([highBeamHeadlightsOn | T]) ->
    [1 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([leftTurnSignalOn | T]) ->
    [2 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([rightTurnSignalOn | T]) ->
    [3 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([hazardSignalOn | T]) ->
    [4 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([automaticLightControlOn | T]) ->
    [5 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([daytimeRunningLightsOn | T]) ->
    [6 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([fogLightOn | T]) ->
    [7 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([parkingLightsOn | T]) ->
    [8 | bit_string_name2pos_7(T)];
bit_string_name2pos_7([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_7(T)];
bit_string_name2pos_7([]) ->
    [];
bit_string_name2pos_7(_) ->
    throw(invalid).

bit_string_name2pos_8([unavailable | T]) ->
    [0 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([isHealthy | T]) ->
    [1 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([isMonitored | T]) ->
    [2 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([baseStationType | T]) ->
    [3 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([aPDOPofUnder5 | T]) ->
    [4 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([inViewOfUnder5 | T]) ->
    [5 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([localCorrectionsPresent | T]) ->
    [6 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([networkCorrectionsPresent | T]) ->
    [7 | bit_string_name2pos_8(T)];
bit_string_name2pos_8([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_8(T)];
bit_string_name2pos_8([]) ->
    [];
bit_string_name2pos_8(_) ->
    throw(invalid).

bit_string_name2pos_9([notEquipped | T]) ->
    [0 | bit_string_name2pos_9(T)];
bit_string_name2pos_9([leftFront | T]) ->
    [1 | bit_string_name2pos_9(T)];
bit_string_name2pos_9([leftRear | T]) ->
    [2 | bit_string_name2pos_9(T)];
bit_string_name2pos_9([rightFront | T]) ->
    [3 | bit_string_name2pos_9(T)];
bit_string_name2pos_9([rightRear | T]) ->
    [4 | bit_string_name2pos_9(T)];
bit_string_name2pos_9([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_9(T)];
bit_string_name2pos_9([]) ->
    [];
bit_string_name2pos_9(_) ->
    throw(invalid).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = dec_Snapshot(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_ProbeVehicleData_regional_RegionalExtension(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = dec_TireData(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components6(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components6(Num, Bytes, Acc) ->
{Term,Remain} = dec_AxleWeightSet(Bytes),
dec_components6(Num-1, Remain, [Term|Acc]).

dec_os_Type4(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Type1(Val, Id) ->
open_type_to_binary(Val).

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_chars(Val, N) ->
    [ 
     C ||
         <<C:N>> <= Val
    ].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

encode_chars(Val, NumBits) ->
    << 
      <<C:NumBits>> ||
          C <- Val
    >>.

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

open_type_to_binary({asn1_OPENTYPE, Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
