%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in ManeuverSharingAndCoordinatingMessage.

-module('ManeuverSharingAndCoordinatingMessage').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("ManeuverSharingAndCoordinatingMessage.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'ManeuverSharingAndCoordinatingMessage'},
            {options,[{i,"./ebin"},uper,jer,verbose,{i,"./asn"},{outdir,"./ebin"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_ManeuverSharingAndCoordinatingMessage/1,
enc_MSCMType/1,
enc_TemporaryIDList/1,
enc_ManeuverID/1,
enc_Maneuver/1,
enc_SubManeuverList/1,
enc_SubManeuver/1,
enc_TemporaryIDPointer/1,
enc_CurrentStateData/1,
enc_PositionOffsetXYZ/1,
enc_ObjectDistance/1,
enc_TargetRoadResource/1,
enc_TRRType/1,
enc_TRRLocation/1,
enc_TRRLocationType1/1,
enc_TRRLocationType2/1,
enc_TRRLocationType3/1,
enc_TRRLength/1,
enc_LaneOffset/1,
enc_SurroundingVehicleInfo/1,
enc_ResponseFlag/1,
enc_ReasonCode/1,
enc_ManeuverExecutionStatus/1
]).

-export([
dec_ManeuverSharingAndCoordinatingMessage/1,
dec_MSCMType/1,
dec_TemporaryIDList/1,
dec_ManeuverID/1,
dec_Maneuver/1,
dec_SubManeuverList/1,
dec_SubManeuver/1,
dec_TemporaryIDPointer/1,
dec_CurrentStateData/1,
dec_PositionOffsetXYZ/1,
dec_ObjectDistance/1,
dec_TargetRoadResource/1,
dec_TRRType/1,
dec_TRRLocation/1,
dec_TRRLocationType1/1,
dec_TRRLocationType2/1,
dec_TRRLocationType3/1,
dec_TRRLength/1,
dec_LaneOffset/1,
dec_SurroundingVehicleInfo/1,
dec_ResponseFlag/1,
dec_ReasonCode/1,
dec_ManeuverExecutionStatus/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('ManeuverSharingAndCoordinatingMessage', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('ManeuverSharingAndCoordinatingMessage', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ManeuverSharingAndCoordinatingMessage', Data) -> enc_ManeuverSharingAndCoordinatingMessage(Data);
encode_disp('MSCMType', Data) -> enc_MSCMType(Data);
encode_disp('TemporaryIDList', Data) -> enc_TemporaryIDList(Data);
encode_disp('ManeuverID', Data) -> enc_ManeuverID(Data);
encode_disp('Maneuver', Data) -> enc_Maneuver(Data);
encode_disp('SubManeuverList', Data) -> enc_SubManeuverList(Data);
encode_disp('SubManeuver', Data) -> enc_SubManeuver(Data);
encode_disp('TemporaryIDPointer', Data) -> enc_TemporaryIDPointer(Data);
encode_disp('CurrentStateData', Data) -> enc_CurrentStateData(Data);
encode_disp('PositionOffsetXYZ', Data) -> enc_PositionOffsetXYZ(Data);
encode_disp('ObjectDistance', Data) -> enc_ObjectDistance(Data);
encode_disp('TargetRoadResource', Data) -> enc_TargetRoadResource(Data);
encode_disp('TRRType', Data) -> enc_TRRType(Data);
encode_disp('TRRLocation', Data) -> enc_TRRLocation(Data);
encode_disp('TRRLocationType1', Data) -> enc_TRRLocationType1(Data);
encode_disp('TRRLocationType2', Data) -> enc_TRRLocationType2(Data);
encode_disp('TRRLocationType3', Data) -> enc_TRRLocationType3(Data);
encode_disp('TRRLength', Data) -> enc_TRRLength(Data);
encode_disp('LaneOffset', Data) -> enc_LaneOffset(Data);
encode_disp('SurroundingVehicleInfo', Data) -> enc_SurroundingVehicleInfo(Data);
encode_disp('ResponseFlag', Data) -> enc_ResponseFlag(Data);
encode_disp('ReasonCode', Data) -> enc_ReasonCode(Data);
encode_disp('ManeuverExecutionStatus', Data) -> enc_ManeuverExecutionStatus(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ManeuverSharingAndCoordinatingMessage', Data) -> dec_ManeuverSharingAndCoordinatingMessage(Data);
decode_disp('MSCMType', Data) -> dec_MSCMType(Data);
decode_disp('TemporaryIDList', Data) -> dec_TemporaryIDList(Data);
decode_disp('ManeuverID', Data) -> dec_ManeuverID(Data);
decode_disp('Maneuver', Data) -> dec_Maneuver(Data);
decode_disp('SubManeuverList', Data) -> dec_SubManeuverList(Data);
decode_disp('SubManeuver', Data) -> dec_SubManeuver(Data);
decode_disp('TemporaryIDPointer', Data) -> dec_TemporaryIDPointer(Data);
decode_disp('CurrentStateData', Data) -> dec_CurrentStateData(Data);
decode_disp('PositionOffsetXYZ', Data) -> dec_PositionOffsetXYZ(Data);
decode_disp('ObjectDistance', Data) -> dec_ObjectDistance(Data);
decode_disp('TargetRoadResource', Data) -> dec_TargetRoadResource(Data);
decode_disp('TRRType', Data) -> dec_TRRType(Data);
decode_disp('TRRLocation', Data) -> dec_TRRLocation(Data);
decode_disp('TRRLocationType1', Data) -> dec_TRRLocationType1(Data);
decode_disp('TRRLocationType2', Data) -> dec_TRRLocationType2(Data);
decode_disp('TRRLocationType3', Data) -> dec_TRRLocationType3(Data);
decode_disp('TRRLength', Data) -> dec_TRRLength(Data);
decode_disp('LaneOffset', Data) -> dec_LaneOffset(Data);
decode_disp('SurroundingVehicleInfo', Data) -> dec_SurroundingVehicleInfo(Data);
decode_disp('ResponseFlag', Data) -> dec_ResponseFlag(Data);
decode_disp('ReasonCode', Data) -> dec_ReasonCode(Data);
decode_disp('ManeuverExecutionStatus', Data) -> dec_ManeuverExecutionStatus(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_ManeuverSharingAndCoordinatingMessage(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(9, Val),
Enc6@element = element(10, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(11, Val),
Enc8@element = element(12, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute mSCMTimestamp(1) with type DDateTime
Enc10@element = element(2, Val),
'Common':enc_DDateTime(Enc10@element)
end,
begin
%% attribute hVPos(2) with type Position3D
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_Position3D(Enc11@element)
end
end,
begin
%% attribute hVPosXYConf(3) with type PositionalAccuracy
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_PositionalAccuracy(Enc13@element)
end
end,
begin
%% attribute mSCMType(4) with type ENUMERATED
Enc15@element = element(5, Val),
if Enc15@element =:= maneuverIntent ->
<<0:1,0:3>>;
Enc15@element =:= maneuverRequest ->
<<0:1,1:3>>;
Enc15@element =:= maneuverResponse ->
<<0:1,2:3>>;
Enc15@element =:= maneuverReservation ->
<<0:1,3:3>>;
Enc15@element =:= hVManeuverCancellation ->
<<0:1,4:3>>;
Enc15@element =:= rVManeuverCancellationRequest ->
<<0:1,5:3>>;
Enc15@element =:= emergencyManeuverReservation ->
<<0:1,6:3>>;
Enc15@element =:= maneuverExecutionStatus ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc15@element}}})
end
end,
begin
%% attribute sourceID(5) with type OCTET STRING
Enc17@element = element(6, Val),
Enc18@len = byte_size(Enc17@element),
if Enc18@len =:= 4 ->
Enc17@element
end
end,
begin
%% attribute destinationIDs(6) with type TemporaryIDList
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_TemporaryIDList(Enc19@element)
end
end,
begin
%% attribute maneuverID(7) with type INTEGER
Enc21@element = element(8, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
Enc21@element bsr 8 =:= 0 ->
Enc21@element;
true ->
exit({error,{asn1,{illegal_integer,Enc21@element}}})
end
end,
begin
%% attribute maneuver(8) with type Maneuver
Enc24@element = element(9, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_Maneuver(Enc24@element)
end
end,
begin
%% attribute responseFlag(9) with type BOOLEAN
Enc26@element = element(10, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
Enc26@element =:= false ->
<<0:1>>;
Enc26@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc26@element}}})
end
end,
begin
%% attribute reasonCode(10) with type ENUMERATED
Enc29@element = element(11, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
Enc29@element =:= unknown ->
<<0:1,0:3>>;
Enc29@element =:= unableToConform ->
<<0:1,1:3>>;
Enc29@element =:= unwanted ->
<<0:1,2:3>>;
Enc29@element =:= unableToUnderstand ->
<<0:1,3:3>>;
Enc29@element =:= erroneousBehaviorDetected ->
<<0:1,4:3>>;
Enc29@element =:= misbehaviorAttackDetected ->
<<0:1,5:3>>;
Enc29@element =:= rVManeuverCancellationRequestIssued ->
<<0:1,6:3>>;
Enc29@element =:= sessionIDConflicted ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc29@element}}})
end
end|begin
%% attribute maneuverExecutionStatus(11) with type ENUMERATED
Enc32@element = element(12, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
Enc32@element =:= started ->
<<0:1,0:2>>;
Enc32@element =:= inProgress ->
<<0:1,1:2>>;
Enc32@element =:= completed ->
<<0:1,2:2>>;
Enc32@element =:= terminated ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc32@element}}})
end
end].


dec_ManeuverSharingAndCoordinatingMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute mSCMTimestamp(1) with type DDateTime
{Term1,Bytes3} = 'Common':dec_DDateTime(Bytes2),

%% attribute hVPos(2) with type Position3D
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
'Common':dec_Position3D(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute hVPosXYConf(3) with type PositionalAccuracy
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
'Common':dec_PositionalAccuracy(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute mSCMType(4) with type ENUMERATED
{Term4,Bytes6} = begin
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:3,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> maneuverIntent;
1 -> maneuverRequest;
2 -> maneuverResponse;
3 -> maneuverReservation;
4 -> hVManeuverCancellation;
5 -> rVManeuverCancellationRequest;
6 -> emergencyManeuverReservation;
7 -> maneuverExecutionStatus
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute sourceID(5) with type OCTET STRING
{Term5,Bytes7} = begin
<<V4@V0:4/binary-unit:8,V4@Buf1/bitstring>> = Bytes6,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute destinationIDs(6) with type TemporaryIDList
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
dec_TemporaryIDList(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute maneuverID(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes8,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute maneuver(8) with type Maneuver
{Term8,Bytes10} = case (Opt bsr 3) band 1 of
1 ->
dec_Maneuver(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute responseFlag(9) with type BOOLEAN
{Term9,Bytes11} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes10,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute reasonCode(10) with type ENUMERATED
{Term10,Bytes12} = case (Opt bsr 1) band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes11 of
<<0:1,V7@V3:3,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> unknown;
1 -> unableToConform;
2 -> unwanted;
3 -> unableToUnderstand;
4 -> erroneousBehaviorDetected;
5 -> misbehaviorAttackDetected;
6 -> rVManeuverCancellationRequestIssued;
7 -> sessionIDConflicted
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute maneuverExecutionStatus(11) with type ENUMERATED
{Term11,Bytes13} = case Opt band 1 of
1 ->
begin
{V8@V0,V8@Buf1} = case Bytes12 of
<<0:1,V8@V3:2,V8@Buf4/bitstring>> ->
V8@Int5 = case V8@V3 of
0 -> started;
1 -> inProgress;
2 -> completed;
3 -> terminated
end,
{V8@Int5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V6,V8@Buf7};
<<1:1,V8@Buf5/bitstring>> ->
{V8@V6,V8@Buf7} = case V8@Buf5 of
<<0:1,V8@V9:7,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10};
<<1:1,0:1,V8@V10:14,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
{V8@V10,V8@Buf11};
<<1:1,1:1,V8@V10:6,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
V8@Mul12 = V8@V10 * 16384,
{V8@Mul12,V8@Buf11}
end,
<<V8@V13:V8@V6/unit:8,V8@Buf14/bitstring>> = V8@Buf7,
{V8@V13,V8@Buf14}
end,
V8@Int15 = case V8@V3 of
_ -> {asn1_enum,V8@V3}
end,
{V8@Int15,V8@Buf4}
end,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% Extensions
{Extensions,Bytes14} = case Ext of
0 -> {<<>>,Bytes13};
1 ->
{V9@V0,V9@Buf1} = case Bytes13 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
V9@Mul9 = V9@V7 * 16384,
{V9@Mul9,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V10:V9@V0/bitstring-unit:1,V9@Buf11/bitstring>> = V9@Buf1,
{V9@V10,V9@Buf11}
end,
Bytes15= skipextensions(Bytes14, 1, Extensions),
Res1 = {'ManeuverSharingAndCoordinatingMessage',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},
{Res1,Bytes15}.

enc_MSCMType(Val) ->
if Val =:= maneuverIntent ->
<<0:1,0:3>>;
Val =:= maneuverRequest ->
<<0:1,1:3>>;
Val =:= maneuverResponse ->
<<0:1,2:3>>;
Val =:= maneuverReservation ->
<<0:1,3:3>>;
Val =:= hVManeuverCancellation ->
<<0:1,4:3>>;
Val =:= rVManeuverCancellationRequest ->
<<0:1,5:3>>;
Val =:= emergencyManeuverReservation ->
<<0:1,6:3>>;
Val =:= maneuverExecutionStatus ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MSCMType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> maneuverIntent;
1 -> maneuverRequest;
2 -> maneuverResponse;
3 -> maneuverReservation;
4 -> hVManeuverCancellation;
5 -> rVManeuverCancellationRequest;
6 -> emergencyManeuverReservation;
7 -> maneuverExecutionStatus
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_TemporaryIDList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 4 ->
Comp
end
end || Comp <- Val]]
end.



dec_TemporaryIDList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components1(V1@Add2, V1@Buf1, []).

enc_ManeuverID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ManeuverID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Maneuver(Val) ->
[<<0:1>>|begin
%% attribute subManeuverList(1) with type SubManeuverList
Enc2@element = element(2, Val),
enc_SubManeuverList(Enc2@element)
end].


dec_Maneuver(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute subManeuverList(1) with type SubManeuverList
{Term1,Bytes2} = dec_SubManeuverList(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8};
<<1:1,1:1,V2@V7:6,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
V2@Mul9 = V2@V7 * 16384,
{V2@Mul9,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V10:V2@V0/bitstring-unit:1,V2@Buf11/bitstring>> = V2@Buf1,
{V2@V10,V2@Buf11}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
Res1 = {'Maneuver',Term1},
{Res1,Bytes4}.

enc_SubManeuverList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_SubManeuver(Comp) || Comp <- Val]]
end.



dec_SubManeuverList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components2(V1@Add2, V1@Buf1, []).

enc_SubManeuver(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(8, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(9, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute executantVehID(1) with type OCTET STRING
Enc5@element = element(2, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len =:= 4 ->
Enc5@element
end
end,
begin
%% attribute affectedVehIDs(2) with type BIT STRING
Enc7@element = element(3, Val),
Enc8@bits = bit_size(Enc7@element),
Enc8@bits@sub = Enc8@bits - 1,
if Enc8@bits@sub bsr 5 =:= 0 ->
[<<Enc8@bits@sub:5>>|Enc7@element]
end
end,
begin
%% attribute currentStateData(3) with type CurrentStateData
Enc9@element = element(4, Val),
enc_CurrentStateData(Enc9@element)
end,
begin
%% attribute targetRoadResource(4) with type TargetRoadResource
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_TargetRoadResource(Enc10@element)
end
end,
begin
%% attribute startTime(5) with type DDateTime
Enc12@element = element(6, Val),
'Common':enc_DDateTime(Enc12@element)
end,
begin
%% attribute endTime(6) with type DDateTime
Enc13@element = element(7, Val),
'Common':enc_DDateTime(Enc13@element)
end,
begin
%% attribute minSpeed(7) with type INTEGER
Enc14@element = element(8, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element bsr 13 =:= 0 ->
<<Enc14@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end|begin
%% attribute maxSpeed(8) with type INTEGER
Enc17@element = element(9, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 13 =:= 0 ->
<<Enc17@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end].


dec_SubManeuver(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute executantVehID(1) with type OCTET STRING
{Term1,Bytes3} = begin
<<V3@V0:4/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute affectedVehIDs(2) with type BIT STRING
{Term2,Bytes4} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:1,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V5,V4@Buf6}  = {list_to_bitstring([V4@V3]),V4@Buf4},
{V4@V5,V4@Buf6}
end,

%% attribute currentStateData(3) with type CurrentStateData
{Term3,Bytes5} = dec_CurrentStateData(Bytes4),

%% attribute targetRoadResource(4) with type TargetRoadResource
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
dec_TargetRoadResource(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute startTime(5) with type DDateTime
{Term5,Bytes7} = 'Common':dec_DDateTime(Bytes6),

%% attribute endTime(6) with type DDateTime
{Term6,Bytes8} = 'Common':dec_DDateTime(Bytes7),

%% attribute minSpeed(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:13,V5@Buf1/bitstring>> = Bytes8,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute maxSpeed(8) with type INTEGER
{Term8,Bytes10} = case Opt band 1 of
1 ->
begin
<<V6@V0:13,V6@Buf1/bitstring>> = Bytes9,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V7@V0,V7@Buf1} = case Bytes10 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
Res1 = {'SubManeuver',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
{Res1,Bytes12}.

enc_TemporaryIDPointer(Val) ->
Enc1@bits = bit_size(Val),
Enc1@bits@sub = Enc1@bits - 1,
if Enc1@bits@sub bsr 5 =:= 0 ->
[<<Enc1@bits@sub:5>>|Val]
end.


dec_TemporaryIDPointer(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:1,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {list_to_bitstring([V1@V3]),V1@Buf4},
{V1@V5,V1@Buf6}
end.

enc_CurrentStateData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute executantVehPos(1) with type PositionOffsetXYZ
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionOffsetXYZ(Enc5@element)
end
end,
begin
%% attribute executantVehPosConfidence(2) with type PositionConfidenceSet
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_PositionConfidenceSet(Enc7@element)
end
end,
begin
%% attribute speed(3) with type INTEGER
Enc9@element = element(4, Val),
if Enc9@element bsr 13 =:= 0 ->
<<Enc9@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute heading(4) with type INTEGER
Enc11@element = element(5, Val),
if 0 =< Enc11@element, Enc11@element < 28801 ->
<<Enc11@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute accel4way(5) with type AccelerationSet4Way
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_AccelerationSet4Way(Enc13@element)
end
end|begin
%% attribute size(6) with type VehicleSize
Enc15@element = element(7, Val),
'Common':enc_VehicleSize(Enc15@element)
end].


dec_CurrentStateData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute executantVehPos(1) with type PositionOffsetXYZ
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_PositionOffsetXYZ(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute executantVehPosConfidence(2) with type PositionConfidenceSet
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'Common':dec_PositionConfidenceSet(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute speed(3) with type INTEGER
{Term3,Bytes5} = begin
<<V3@V0:13,V3@Buf1/bitstring>> = Bytes4,
{V3@V0,V3@Buf1}
end,

%% attribute heading(4) with type INTEGER
{Term4,Bytes6} = begin
<<V4@V0:15,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end,

%% attribute accel4way(5) with type AccelerationSet4Way
{Term5,Bytes7} = case Opt band 1 of
1 ->
'Common':dec_AccelerationSet4Way(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute size(6) with type VehicleSize
{Term6,Bytes8} = 'Common':dec_VehicleSize(Bytes7),

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'CurrentStateData',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.

enc_PositionOffsetXYZ(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute offsetX(1) with type INTEGER
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - -32767,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
<<Enc2@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end,
begin
%% attribute offsetY(2) with type INTEGER
Enc4@element = element(3, Val),
Enc4@element@sub = Enc4@element - -32767,
if 0 =< Enc4@element@sub, Enc4@element@sub < 65535 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end|begin
%% attribute offsetZ(3) with type INTEGER
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@element@sub = Enc6@element - -32767,
if 0 =< Enc6@element@sub, Enc6@element@sub < 65535 ->
<<Enc6@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end
end
end].


dec_PositionOffsetXYZ(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute offsetX(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -32767,
{V2@Add2,V2@Buf1}
end,

%% attribute offsetY(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -32767,
{V3@Add2,V3@Buf1}
end,

%% attribute offsetZ(3) with type INTEGER
{Term3,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -32767,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,
Res1 = {'PositionOffsetXYZ',Term1,Term2,Term3},
{Res1,Bytes4}.

enc_ObjectDistance(Val) ->
Val@sub = Val - -32767,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ObjectDistance(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32767,
{V1@Add2,V1@Buf1}
end.

enc_TargetRoadResource(Val) ->
[begin
%% attribute tRRType(1) with type ENUMERATED
Enc2@element = element(2, Val),
if Enc2@element =:= tRRType1 ->
<<0:1,0:1,0:2>>;
Enc2@element =:= tRRType2 ->
<<0:1,0:1,1:2>>;
Enc2@element =:= tRRType3 ->
<<0:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc2@element}}})
end
end|begin
%% attribute tRRLocation(2) with type TRRLocation
Enc4@element = element(3, Val),
enc_TRRLocation(Enc4@element)
end].


dec_TargetRoadResource(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute tRRType(1) with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:2,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> tRRType1;
1 -> tRRType2;
2 -> tRRType3;
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% attribute tRRLocation(2) with type TRRLocation
{Term2,Bytes3} = dec_TRRLocation(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
Res1 = {'TargetRoadResource',Term1,Term2},
{Res1,Bytes5}.

enc_TRRType(Val) ->
if Val =:= tRRType1 ->
<<0:1,0:2>>;
Val =:= tRRType2 ->
<<0:1,1:2>>;
Val =:= tRRType3 ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TRRType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> tRRType1;
1 -> tRRType2;
2 -> tRRType3;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_TRRLocation(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= tRRLocationType1 ->
[<<0:1,0:2>>|enc_TRRLocationType1(ChoiceVal)];
ChoiceTag =:= tRRLocationType2 ->
[<<0:1,1:2>>|enc_TRRLocationType2(ChoiceVal)];
ChoiceTag =:= tRRLocationType3 ->
[<<0:1,2:2>>|enc_TRRLocationType3(ChoiceVal)]
end.


dec_TRRLocation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_TRRLocationType1(Bytes2)
end,
{{tRRLocationType1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_TRRLocationType2(Bytes2)
end,
{{tRRLocationType2,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_TRRLocationType3(Bytes2)
end,
{{tRRLocationType3,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_TRRLocationType1(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute tRRLength(1) with type INTEGER
Enc3@element = element(2, Val),
if Enc3@element bsr 12 =:= 0 ->
<<Enc3@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute frontSidePosition(2) with type PositionOffsetXYZ
Enc5@element = element(3, Val),
enc_PositionOffsetXYZ(Enc5@element)
end,
begin
%% attribute laneOffset(3) with type ENUMERATED
Enc6@element = element(4, Val),
if Enc6@element =:= currentLane ->
<<0:1,0:3>>;
Enc6@element =:= firstLeftLane ->
<<0:1,1:3>>;
Enc6@element =:= firstRightLane ->
<<0:1,2:3>>;
Enc6@element =:= secondLeftLane ->
<<0:1,3:3>>;
Enc6@element =:= secondRightLane ->
<<0:1,4:3>>;
Enc6@element =:= thirdLeftLane ->
<<0:1,5:3>>;
Enc6@element =:= thirdRightLane ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end|begin
%% attribute tRRMovement(4) with type INTEGER
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 13 =:= 0 ->
<<Enc8@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end].


dec_TRRLocationType1(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute tRRLength(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:12,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute frontSidePosition(2) with type PositionOffsetXYZ
{Term2,Bytes4} = dec_PositionOffsetXYZ(Bytes3),

%% attribute laneOffset(3) with type ENUMERATED
{Term3,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:3,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> currentLane;
1 -> firstLeftLane;
2 -> firstRightLane;
3 -> secondLeftLane;
4 -> secondRightLane;
5 -> thirdLeftLane;
6 -> thirdRightLane;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute tRRMovement(4) with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V5@V0:13,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'TRRLocationType1',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_TRRLocationType2(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute safetyGap(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element bsr 12 =:= 0 ->
<<Enc5@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute frontSideVehicle(2) with type SurroundingVehicleInfo
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_SurroundingVehicleInfo(Enc7@element)
end
end,
begin
%% attribute rearSideVehicle(3) with type SurroundingVehicleInfo
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_SurroundingVehicleInfo(Enc9@element)
end
end,
begin
%% attribute tRRLength(4) with type INTEGER
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element bsr 12 =:= 0 ->
<<Enc11@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end|begin
%% attribute laneOffset(5) with type ENUMERATED
Enc14@element = element(6, Val),
if Enc14@element =:= currentLane ->
<<0:1,0:3>>;
Enc14@element =:= firstLeftLane ->
<<0:1,1:3>>;
Enc14@element =:= firstRightLane ->
<<0:1,2:3>>;
Enc14@element =:= secondLeftLane ->
<<0:1,3:3>>;
Enc14@element =:= secondRightLane ->
<<0:1,4:3>>;
Enc14@element =:= thirdLeftLane ->
<<0:1,5:3>>;
Enc14@element =:= thirdRightLane ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end].


dec_TRRLocationType2(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute safetyGap(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:12,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute frontSideVehicle(2) with type SurroundingVehicleInfo
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_SurroundingVehicleInfo(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute rearSideVehicle(3) with type SurroundingVehicleInfo
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_SurroundingVehicleInfo(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute tRRLength(4) with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V4@V0:12,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute laneOffset(5) with type ENUMERATED
{Term5,Bytes7} = begin
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:3,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> currentLane;
1 -> firstLeftLane;
2 -> firstRightLane;
3 -> secondLeftLane;
4 -> secondRightLane;
5 -> thirdLeftLane;
6 -> thirdRightLane;
_ -> exit({error,{asn1,{decode_enumerated,V5@V3}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<0:1,V5@V9:7,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10};
<<1:1,0:1,V5@V10:14,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<1:1,1:1,V5@V10:6,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
V5@Mul12 = V5@V10 * 16384,
{V5@Mul12,V5@Buf11}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'TRRLocationType2',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_TRRLocationType3(Val) ->
Enc1@len = length(Val),
if Enc1@len < 128 ->
[Enc1@len|[enc_PositionOffsetXYZ(Comp) || Comp <- Val]];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|[enc_PositionOffsetXYZ(Comp) || Comp <- Val]];
true ->
begin
Enc1@fn = fun(Comp) -> enc_PositionOffsetXYZ(Comp) end,
encode_fragmented_sof(Enc1@fn, Val, Enc1@len)
end
end.



dec_TRRLocationType3(Bytes) ->
dec_components3(Bytes, []).

enc_TRRLength(Val) ->
if Val bsr 12 =:= 0 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TRRLength(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LaneOffset(Val) ->
if Val =:= currentLane ->
<<0:1,0:3>>;
Val =:= firstLeftLane ->
<<0:1,1:3>>;
Val =:= firstRightLane ->
<<0:1,2:3>>;
Val =:= secondLeftLane ->
<<0:1,3:3>>;
Val =:= secondRightLane ->
<<0:1,4:3>>;
Val =:= thirdLeftLane ->
<<0:1,5:3>>;
Val =:= thirdRightLane ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_LaneOffset(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> currentLane;
1 -> firstLeftLane;
2 -> firstRightLane;
3 -> secondLeftLane;
4 -> secondRightLane;
5 -> thirdLeftLane;
6 -> thirdRightLane;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_SurroundingVehicleInfo(Val) ->
[begin
%% attribute surroundingVehicleID(1) with type OCTET STRING
Enc2@element = element(2, Val),
Enc3@len = byte_size(Enc2@element),
if Enc3@len =:= 4 ->
[<<0:1>>|Enc2@element]
end
end,
begin
%% attribute surroundingVehiclePosition(2) with type PositionOffsetXYZ
Enc4@element = element(3, Val),
enc_PositionOffsetXYZ(Enc4@element)
end|begin
%% attribute surroundingVehicleSize(3) with type VehicleSize
Enc5@element = element(4, Val),
'Common':enc_VehicleSize(Enc5@element)
end].


dec_SurroundingVehicleInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute surroundingVehicleID(1) with type OCTET STRING
{Term1,Bytes2} = begin
<<V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end,

%% attribute surroundingVehiclePosition(2) with type PositionOffsetXYZ
{Term2,Bytes3} = dec_PositionOffsetXYZ(Bytes2),

%% attribute surroundingVehicleSize(3) with type VehicleSize
{Term3,Bytes4} = 'Common':dec_VehicleSize(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'SurroundingVehicleInfo',Term1,Term2,Term3},
{Res1,Bytes6}.

enc_ResponseFlag(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_ResponseFlag(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_ReasonCode(Val) ->
if Val =:= unknown ->
<<0:1,0:3>>;
Val =:= unableToConform ->
<<0:1,1:3>>;
Val =:= unwanted ->
<<0:1,2:3>>;
Val =:= unableToUnderstand ->
<<0:1,3:3>>;
Val =:= erroneousBehaviorDetected ->
<<0:1,4:3>>;
Val =:= misbehaviorAttackDetected ->
<<0:1,5:3>>;
Val =:= rVManeuverCancellationRequestIssued ->
<<0:1,6:3>>;
Val =:= sessionIDConflicted ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ReasonCode(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> unableToConform;
2 -> unwanted;
3 -> unableToUnderstand;
4 -> erroneousBehaviorDetected;
5 -> misbehaviorAttackDetected;
6 -> rVManeuverCancellationRequestIssued;
7 -> sessionIDConflicted
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_ManeuverExecutionStatus(Val) ->
if Val =:= started ->
<<0:1,0:2>>;
Val =:= inProgress ->
<<0:1,1:2>>;
Val =:= completed ->
<<0:1,2:2>>;
Val =:= terminated ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ManeuverExecutionStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> started;
1 -> inProgress;
2 -> completed;
3 -> terminated
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

typeinfo('ManeuverSharingAndCoordinatingMessage') ->
  {sequence,'ManeuverSharingAndCoordinatingMessage',11,[{<<109,83,67,77,84,105,109,101,115,116,97,109,112>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<104,86,80,111,115>>,{typeinfo,{'Common','Position3D'}},'OPTIONAL'},{<<104,86,80,111,115,88,89,67,111,110,102>>,{typeinfo,{'Common','PositionalAccuracy'}},'OPTIONAL'},{<<109,83,67,77,84,121,112,101>>,{'ENUMERATED_EXT',#{maneuverExecutionStatus => 7,maneuverIntent => 0,maneuverRequest => 1,maneuverResponse => 2,maneuverReservation => 3,hVManeuverCancellation => 4,rVManeuverCancellationRequest => 5,emergencyManeuverReservation => 6}},mandatory},{<<115,111,117,114,99,101,73,68>>,octet_string,mandatory},{<<100,101,115,116,105,110,97,116,105,111,110,73,68,115>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','TemporaryIDList'}},'OPTIONAL'},{<<109,97,110,101,117,118,101,114,73,68>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<109,97,110,101,117,118,101,114>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','Maneuver'}},'OPTIONAL'},{<<114,101,115,112,111,110,115,101,70,108,97,103>>,'BOOLEAN','OPTIONAL'},{<<114,101,97,115,111,110,67,111,100,101>>,{'ENUMERATED_EXT',#{unknown => 0,unableToConform => 1,unwanted => 2,unableToUnderstand => 3,erroneousBehaviorDetected => 4,misbehaviorAttackDetected => 5,rVManeuverCancellationRequestIssued => 6,sessionIDConflicted => 7}},'OPTIONAL'},{<<109,97,110,101,117,118,101,114,69,120,101,99,117,116,105,111,110,83,116,97,116,117,115>>,{'ENUMERATED_EXT',#{started => 0,terminated => 3,inProgress => 1,completed => 2}},'OPTIONAL'}]};
typeinfo('MSCMType') ->
  {'ENUMERATED_EXT',#{maneuverExecutionStatus => 7,maneuverIntent => 0,maneuverRequest => 1,maneuverResponse => 2,maneuverReservation => 3,hVManeuverCancellation => 4,rVManeuverCancellationRequest => 5,emergencyManeuverReservation => 6}};
typeinfo('TemporaryIDList') ->
  {sof,octet_string};
typeinfo('ManeuverID') ->
  {'INTEGER',{0,255}};
typeinfo('Maneuver') ->
  {sequence,'Maneuver',1,[{<<115,117,98,77,97,110,101,117,118,101,114,76,105,115,116>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','SubManeuverList'}},mandatory}]};
typeinfo('SubManeuverList') ->
  {sof,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','SubManeuver'}}};
typeinfo('SubManeuver') ->
  {sequence,'SubManeuver',8,[{<<101,120,101,99,117,116,97,110,116,86,101,104,73,68>>,octet_string,mandatory},{<<97,102,102,101,99,116,101,100,86,101,104,73,68,115>>,bit_string,mandatory},{<<99,117,114,114,101,110,116,83,116,97,116,101,68,97,116,97>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','CurrentStateData'}},mandatory},{<<116,97,114,103,101,116,82,111,97,100,82,101,115,111,117,114,99,101>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','TargetRoadResource'}},'OPTIONAL'},{<<115,116,97,114,116,84,105,109,101>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<101,110,100,84,105,109,101>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<109,105,110,83,112,101,101,100>>,{'INTEGER',{0,8191}},'OPTIONAL'},{<<109,97,120,83,112,101,101,100>>,{'INTEGER',{0,8191}},'OPTIONAL'}]};
typeinfo('TemporaryIDPointer') ->
  bit_string;
typeinfo('CurrentStateData') ->
  {sequence,'CurrentStateData',6,[{<<101,120,101,99,117,116,97,110,116,86,101,104,80,111,115>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','PositionOffsetXYZ'}},'OPTIONAL'},{<<101,120,101,99,117,116,97,110,116,86,101,104,80,111,115,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'Common','PositionConfidenceSet'}},'OPTIONAL'},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},mandatory},{<<97,99,99,101,108,52,119,97,121>>,{typeinfo,{'Common','AccelerationSet4Way'}},'OPTIONAL'},{<<115,105,122,101>>,{typeinfo,{'Common','VehicleSize'}},mandatory}]};
typeinfo('PositionOffsetXYZ') ->
  {sequence,'PositionOffsetXYZ',3,[{<<111,102,102,115,101,116,88>>,{'INTEGER',{-32767,32767}},mandatory},{<<111,102,102,115,101,116,89>>,{'INTEGER',{-32767,32767}},mandatory},{<<111,102,102,115,101,116,90>>,{'INTEGER',{-32767,32767}},'OPTIONAL'}]};
typeinfo('ObjectDistance') ->
  {'INTEGER',{-32767,32767}};
typeinfo('TargetRoadResource') ->
  {sequence,'TargetRoadResource',2,[{<<116,82,82,84,121,112,101>>,{'ENUMERATED_EXT',#{tRRType1 => 0,tRRType2 => 1,tRRType3 => 2}},mandatory},{<<116,82,82,76,111,99,97,116,105,111,110>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','TRRLocation'}},mandatory}]};
typeinfo('TRRType') ->
  {'ENUMERATED_EXT',#{tRRType1 => 0,tRRType2 => 1,tRRType3 => 2}};
typeinfo('TRRLocation') ->
  {choice,#{<<116,82,82,76,111,99,97,116,105,111,110,84,121,112,101,49>> => {typeinfo,{'ManeuverSharingAndCoordinatingMessage','TRRLocationType1'}},<<116,82,82,76,111,99,97,116,105,111,110,84,121,112,101,50>> => {typeinfo,{'ManeuverSharingAndCoordinatingMessage','TRRLocationType2'}},<<116,82,82,76,111,99,97,116,105,111,110,84,121,112,101,51>> => {typeinfo,{'ManeuverSharingAndCoordinatingMessage','TRRLocationType3'}}}};
typeinfo('TRRLocationType1') ->
  {sequence,'TRRLocationType1',4,[{<<116,82,82,76,101,110,103,116,104>>,{'INTEGER',{0,4095}},mandatory},{<<102,114,111,110,116,83,105,100,101,80,111,115,105,116,105,111,110>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','PositionOffsetXYZ'}},mandatory},{<<108,97,110,101,79,102,102,115,101,116>>,{'ENUMERATED_EXT',#{currentLane => 0,firstLeftLane => 1,firstRightLane => 2,secondLeftLane => 3,secondRightLane => 4,thirdLeftLane => 5,thirdRightLane => 6}},mandatory},{<<116,82,82,77,111,118,101,109,101,110,116>>,{'INTEGER',{0,8191}},'OPTIONAL'}]};
typeinfo('TRRLocationType2') ->
  {sequence,'TRRLocationType2',5,[{<<115,97,102,101,116,121,71,97,112>>,{'INTEGER',{0,4095}},mandatory},{<<102,114,111,110,116,83,105,100,101,86,101,104,105,99,108,101>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','SurroundingVehicleInfo'}},'OPTIONAL'},{<<114,101,97,114,83,105,100,101,86,101,104,105,99,108,101>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','SurroundingVehicleInfo'}},'OPTIONAL'},{<<116,82,82,76,101,110,103,116,104>>,{'INTEGER',{0,4095}},'OPTIONAL'},{<<108,97,110,101,79,102,102,115,101,116>>,{'ENUMERATED_EXT',#{currentLane => 0,firstLeftLane => 1,firstRightLane => 2,secondLeftLane => 3,secondRightLane => 4,thirdLeftLane => 5,thirdRightLane => 6}},mandatory}]};
typeinfo('TRRLocationType3') ->
  {sof,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','PositionOffsetXYZ'}}};
typeinfo('TRRLength') ->
  {'INTEGER',{0,4095}};
typeinfo('LaneOffset') ->
  {'ENUMERATED_EXT',#{currentLane => 0,firstLeftLane => 1,firstRightLane => 2,secondLeftLane => 3,secondRightLane => 4,thirdLeftLane => 5,thirdRightLane => 6}};
typeinfo('SurroundingVehicleInfo') ->
  {sequence,'SurroundingVehicleInfo',3,[{<<115,117,114,114,111,117,110,100,105,110,103,86,101,104,105,99,108,101,73,68>>,octet_string,mandatory},{<<115,117,114,114,111,117,110,100,105,110,103,86,101,104,105,99,108,101,80,111,115,105,116,105,111,110>>,{typeinfo,{'ManeuverSharingAndCoordinatingMessage','PositionOffsetXYZ'}},mandatory},{<<115,117,114,114,111,117,110,100,105,110,103,86,101,104,105,99,108,101,83,105,122,101>>,{typeinfo,{'Common','VehicleSize'}},mandatory}]};
typeinfo('ResponseFlag') ->
  'BOOLEAN';
typeinfo('ReasonCode') ->
  {'ENUMERATED_EXT',#{unknown => 0,unableToConform => 1,unwanted => 2,unableToUnderstand => 3,erroneousBehaviorDetected => 4,misbehaviorAttackDetected => 5,rVManeuverCancellationRequestIssued => 6,sessionIDConflicted => 7}};
typeinfo('ManeuverExecutionStatus') ->
  {'ENUMERATED_EXT',#{started => 0,terminated => 3,inProgress => 1,completed => 2}};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V1@V0:4/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end,
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = dec_SubManeuver(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components3(Bytes, Acc) ->
%% Length with constraint no
{V2@V0,V2@Buf1} = case Bytes of
<<0:1,V2@V3:7,V2@Buf4/bitstring>> ->
{V2@V3,V2@Buf4};
<<1:1,0:1,V2@V4:14,V2@Buf5/bitstring>> ->
{V2@V4,V2@Buf5};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
V2@Mul6 = V2@V4 * 16384,
{V2@Mul6,V2@Buf5}
end,
{Acc1,Buf1} = dec_fragment4(V2@V0, V2@Buf1, Acc),
if V2@V0 >= 16384 ->
dec_components3(Buf1, Acc1);
true ->
{lists:reverse(Acc1),Buf1}
end.

dec_fragment4(0, Bytes, Acc) ->
{Acc,Bytes};
dec_fragment4(Num, Bytes, Acc) ->
{Term,Remain} = dec_PositionOffsetXYZ(Bytes),
dec_fragment4(Num-1, Remain, [Term|Acc]).

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

encode_components(Cs, _Encoder, 0, Acc) ->
    {Cs, lists:reverse(Acc)};
encode_components([C | Cs], Encoder, Size, Acc) ->
    B = Encoder(C),
    encode_components(Cs, Encoder, Size - 1, [B | Acc]).

encode_fragmented_sof(Fun, Comps, Len) ->
    encode_fragmented_sof_1(Fun, Comps, Len, 4).

encode_fragmented_sof_1(Encoder, Comps0, Len0, N) ->
    SegSz = N * 16384,
    if
        Len0 >= SegSz ->
            {Comps, B} = encode_components(Comps0, Encoder, SegSz, []),
            Len = Len0 - SegSz,
            [<<3:2,N:6>>,
             B |
             encode_fragmented_sof_1(Encoder, Comps, Len, N)];
        N > 1 ->
            encode_fragmented_sof_1(Encoder, Comps0, Len0, N - 1);
        Len0 < 128 ->
            {[], B} = encode_components(Comps0, Encoder, Len0, []),
            [Len0 | B];
        Len0 < 16384 ->
            {[], B} = encode_components(Comps0, Encoder, Len0, []),
            [<<2:2,Len0:14>> | B]
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
