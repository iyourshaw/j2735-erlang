%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in TrafficLightStatusMessage.

-module('TrafficLightStatusMessage').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("TrafficLightStatusMessage.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'TrafficLightStatusMessage'},
            {options,[{i,"./erl"},uper,jer,verbose,{i,"./asn"},{outdir,"./erl"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_TrafficLightStatusMessage/1,
enc_TrafficLightStatusList/1,
enc_TrafficLightStatus/1,
enc_ActuatedInterval/1,
enc_ConsecutiveTrafficLight/1,
enc_PedestrianCall/1,
enc_PermissiveNonProtected/1,
enc_ReservedBit/1,
'enc_TimeInSecond-B16'/1,
'enc_TimeInSecond-B8'/1,
enc_TrafficLightControllerStatus/1,
enc_TrafficLightDirectionCode/1,
enc_TrafficLightID/1,
enc_TrafficLightIntervalType/1,
enc_TrafficLightOperationStatus/1,
enc_TrafficLightingStatus/1,
enc_TrafficLightType/1
]).

-export([
dec_TrafficLightStatusMessage/1,
dec_TrafficLightStatusList/1,
dec_TrafficLightStatus/1,
dec_ActuatedInterval/1,
dec_ConsecutiveTrafficLight/1,
dec_PedestrianCall/1,
dec_PermissiveNonProtected/1,
dec_ReservedBit/1,
'dec_TimeInSecond-B16'/1,
'dec_TimeInSecond-B8'/1,
dec_TrafficLightControllerStatus/1,
dec_TrafficLightDirectionCode/1,
dec_TrafficLightID/1,
dec_TrafficLightIntervalType/1,
dec_TrafficLightOperationStatus/1,
dec_TrafficLightingStatus/1,
dec_TrafficLightType/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('TrafficLightStatusMessage', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('TrafficLightStatusMessage', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('TrafficLightStatusMessage', Data) -> enc_TrafficLightStatusMessage(Data);
encode_disp('TrafficLightStatusList', Data) -> enc_TrafficLightStatusList(Data);
encode_disp('TrafficLightStatus', Data) -> enc_TrafficLightStatus(Data);
encode_disp('ActuatedInterval', Data) -> enc_ActuatedInterval(Data);
encode_disp('ConsecutiveTrafficLight', Data) -> enc_ConsecutiveTrafficLight(Data);
encode_disp('PedestrianCall', Data) -> enc_PedestrianCall(Data);
encode_disp('PermissiveNonProtected', Data) -> enc_PermissiveNonProtected(Data);
encode_disp('ReservedBit', Data) -> enc_ReservedBit(Data);
encode_disp('TimeInSecond-B16', Data) -> 'enc_TimeInSecond-B16'(Data);
encode_disp('TimeInSecond-B8', Data) -> 'enc_TimeInSecond-B8'(Data);
encode_disp('TrafficLightControllerStatus', Data) -> enc_TrafficLightControllerStatus(Data);
encode_disp('TrafficLightDirectionCode', Data) -> enc_TrafficLightDirectionCode(Data);
encode_disp('TrafficLightID', Data) -> enc_TrafficLightID(Data);
encode_disp('TrafficLightIntervalType', Data) -> enc_TrafficLightIntervalType(Data);
encode_disp('TrafficLightOperationStatus', Data) -> enc_TrafficLightOperationStatus(Data);
encode_disp('TrafficLightingStatus', Data) -> enc_TrafficLightingStatus(Data);
encode_disp('TrafficLightType', Data) -> enc_TrafficLightType(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('TrafficLightStatusMessage', Data) -> dec_TrafficLightStatusMessage(Data);
decode_disp('TrafficLightStatusList', Data) -> dec_TrafficLightStatusList(Data);
decode_disp('TrafficLightStatus', Data) -> dec_TrafficLightStatus(Data);
decode_disp('ActuatedInterval', Data) -> dec_ActuatedInterval(Data);
decode_disp('ConsecutiveTrafficLight', Data) -> dec_ConsecutiveTrafficLight(Data);
decode_disp('PedestrianCall', Data) -> dec_PedestrianCall(Data);
decode_disp('PermissiveNonProtected', Data) -> dec_PermissiveNonProtected(Data);
decode_disp('ReservedBit', Data) -> dec_ReservedBit(Data);
decode_disp('TimeInSecond-B16', Data) -> 'dec_TimeInSecond-B16'(Data);
decode_disp('TimeInSecond-B8', Data) -> 'dec_TimeInSecond-B8'(Data);
decode_disp('TrafficLightControllerStatus', Data) -> dec_TrafficLightControllerStatus(Data);
decode_disp('TrafficLightDirectionCode', Data) -> dec_TrafficLightDirectionCode(Data);
decode_disp('TrafficLightID', Data) -> dec_TrafficLightID(Data);
decode_disp('TrafficLightIntervalType', Data) -> dec_TrafficLightIntervalType(Data);
decode_disp('TrafficLightOperationStatus', Data) -> dec_TrafficLightOperationStatus(Data);
decode_disp('TrafficLightingStatus', Data) -> dec_TrafficLightingStatus(Data);
decode_disp('TrafficLightType', Data) -> dec_TrafficLightType(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_TrafficLightStatusMessage(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute trafficLightID(1) with type TrafficLightID
Enc4@element = element(2, Val),
enc_TrafficLightID(Enc4@element)
end,
begin
%% attribute long(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@element@sub = Enc5@element - -1799999999,
if 0 =< Enc5@element@sub, Enc5@element@sub < 3600000001 ->
<<Enc5@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end
end
end,
begin
%% attribute lat(3) with type INTEGER
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - -900000000,
if 0 =< Enc8@element@sub, Enc8@element@sub < 1800000002 ->
<<Enc8@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end,
begin
%% attribute operationStatus(4) with type BIT STRING
Enc11@element = element(5, Val),
Enc12@bs = try bit_string_name2pos_1(Enc11@element) of
Enc12@positions ->
bitstring_from_positions(Enc12@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc11@element, 8)
end,
Enc12@bits = bit_size(Enc12@bs),
if Enc12@bits =:= 8 ->
[<<0:1>>|Enc12@bs];
Enc12@bits < 128 ->
[<<1:1,Enc12@bits:8>>|Enc12@bs];
Enc12@bits < 16384 ->
[<<1:1,2:2,Enc12@bits:14>>|Enc12@bs];
true ->
[<<1:1>>|encode_fragmented(Enc12@bs, 1)]
end
end,
begin
%% attribute controllerStatus(5) with type BIT STRING
Enc13@element = element(6, Val),
Enc14@bs = try bit_string_name2pos_2(Enc13@element) of
Enc14@positions ->
bitstring_from_positions(Enc14@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc13@element, 8)
end,
Enc14@bits = bit_size(Enc14@bs),
if Enc14@bits =:= 8 ->
[<<0:1>>|Enc14@bs];
Enc14@bits < 128 ->
[<<1:1,Enc14@bits:8>>|Enc14@bs];
Enc14@bits < 16384 ->
[<<1:1,2:2,Enc14@bits:14>>|Enc14@bs];
true ->
[<<1:1>>|encode_fragmented(Enc14@bs, 1)]
end
end,
begin
%% attribute cyclecounter(6) with type INTEGER
Enc15@element = element(7, Val),
if Enc15@element bsr 16 =:= 0 ->
<<Enc15@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end,
begin
%% attribute cycletime(7) with type INTEGER
Enc17@element = element(8, Val),
if Enc17@element bsr 16 =:= 0 ->
<<Enc17@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end,
begin
%% attribute currentTime(8) with type DDateTime
Enc19@element = element(9, Val),
'Common':enc_DDateTime(Enc19@element)
end|begin
%% attribute trafficLightStatus(9) with type TrafficLightStatusList
Enc20@element = element(10, Val),
enc_TrafficLightStatusList(Enc20@element)
end].


dec_TrafficLightStatusMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute trafficLightID(1) with type TrafficLightID
{Term1,Bytes3} = dec_TrafficLightID(Bytes2),

%% attribute long(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:32,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + -1799999999,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute lat(3) with type INTEGER
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V4@V0:31,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + -900000000,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute operationStatus(4) with type BIT STRING
{Term4,Bytes6} = begin
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:8/binary-unit:1,V5@Buf4/bitstring>> ->
{V5@V3,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@V8:V5@V6/binary-unit:1,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<1:1,0:1,V5@V7:14,V5@V9:V5@V7/binary-unit:1,V5@Buf10/bitstring>> ->
{V5@V9,V5@Buf10};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> ->
{V5@V9,V5@Buf10}  = decode_fragmented(V5@V7, V5@Buf8, 1),
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
{V5@V11,V5@Buf12}  = {decode_named_bit_string(V5@V0, [{manual,0},{flashing,1},{off,2},{actuated,3},{transition,4},{priority,5},{'holding-phase',6},{reserved,7}]),V5@Buf1},
{V5@V11,V5@Buf12}
end,

%% attribute controllerStatus(5) with type BIT STRING
{Term5,Bytes7} = begin
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:8/binary-unit:1,V6@Buf4/bitstring>> ->
{V6@V3,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@V8:V6@V6/binary-unit:1,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<1:1,0:1,V6@V7:14,V6@V9:V6@V7/binary-unit:1,V6@Buf10/bitstring>> ->
{V6@V9,V6@Buf10};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> ->
{V6@V9,V6@Buf10}  = decode_fragmented(V6@V7, V6@Buf8, 1),
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
{V6@V11,V6@Buf12}  = {decode_named_bit_string(V6@V0, [{conflict,0},{'center-comm-error',1},{'scu-comm-error',2},{reserved1,3},{reserved2,4},{reserved3,5},{reserved4,6},{reserved5,7}]),V6@Buf1},
{V6@V11,V6@Buf12}
end,

%% attribute cyclecounter(6) with type INTEGER
{Term6,Bytes8} = begin
<<V7@V0:16,V7@Buf1/bitstring>> = Bytes7,
{V7@V0,V7@Buf1}
end,

%% attribute cycletime(7) with type INTEGER
{Term7,Bytes9} = begin
<<V8@V0:16,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end,

%% attribute currentTime(8) with type DDateTime
{Term8,Bytes10} = 'Common':dec_DDateTime(Bytes9),

%% attribute trafficLightStatus(9) with type TrafficLightStatusList
{Term9,Bytes11} = dec_TrafficLightStatusList(Bytes10),

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V9@V0,V9@Buf1} = case Bytes11 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
V9@Mul9 = V9@V7 * 16384,
{V9@Mul9,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V10:V9@V0/bitstring-unit:1,V9@Buf11/bitstring>> = V9@Buf1,
{V9@V10,V9@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'TrafficLightStatusMessage',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.

enc_TrafficLightStatusList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|[enc_TrafficLightStatus(Comp) || Comp <- Val]]
end.



dec_TrafficLightStatusList(Bytes) ->
%% Length with constraint {1,255}
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components3(V1@Add2, V1@Buf1, []).

enc_TrafficLightStatus(Val) ->
[begin
%% attribute trafficLightType(1) with type ENUMERATED
Enc2@element = element(2, Val),
if Enc2@element =:= reserved ->
<<0:1,0:1,0:3>>;
Enc2@element =:= straight ->
<<0:1,0:1,1:3>>;
Enc2@element =:= 'left-turn' ->
<<0:1,0:1,2:3>>;
Enc2@element =:= pedestrian ->
<<0:1,0:1,3:3>>;
Enc2@element =:= bicycle ->
<<0:1,0:1,4:3>>;
Enc2@element =:= 'right-turn' ->
<<0:1,0:1,5:3>>;
Enc2@element =:= bus ->
<<0:1,0:1,6:3>>;
Enc2@element =:= 'u-turn' ->
<<0:1,0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc2@element}}})
end
end,
begin
%% attribute consecutiveTrafficLight(2) with type ENUMERATED
Enc4@element = element(3, Val),
%% attribute trafficLightIntervalType(3) with type ENUMERATED
Enc6@element = element(4, Val),
if Enc4@element =:= none ->
if Enc6@element =:= static ->
<<0:1,0:2,0:1,0:1>>;
Enc6@element =:= variable ->
<<0:1,0:2,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end;
Enc4@element =:= first ->
if Enc6@element =:= static ->
<<0:1,1:2,0:1,0:1>>;
Enc6@element =:= variable ->
<<0:1,1:2,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end;
Enc4@element =:= second ->
if Enc6@element =:= static ->
<<0:1,2:2,0:1,0:1>>;
Enc6@element =:= variable ->
<<0:1,2:2,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end;
true ->
exit({error,{asn1,{illegal_enumerated,Enc4@element}}})
end
end,
begin
%% attribute pedestrianCall(4) with type BOOLEAN
Enc8@element = element(5, Val),
%% attribute actuatedinterval(5) with type BOOLEAN
Enc10@element = element(6, Val),
if Enc8@element =:= false ->
if Enc10@element =:= false ->
<<0:1,0:1>>;
Enc10@element =:= true ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc10@element}}})
end;
Enc8@element =:= true ->
if Enc10@element =:= false ->
<<1:1,0:1>>;
Enc10@element =:= true ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc10@element}}})
end;
true ->
exit({error,{asn1,{illegal_boolean,Enc8@element}}})
end
end,
begin
%% attribute permissiveNonProtected(6) with type ENUMERATED
Enc12@element = element(7, Val),
if Enc12@element =:= none ->
<<0:1,0:1>>;
Enc12@element =:= permissive ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc12@element}}})
end
end,
begin
%% attribute lightingStatus(7) with type ENUMERATED
Enc14@element = element(8, Val),
if Enc14@element =:= off ->
<<0:1,0:3>>;
Enc14@element =:= 'red-on' ->
<<0:1,1:3>>;
Enc14@element =:= 'yellow-on' ->
<<0:1,2:3>>;
Enc14@element =:= 'green-on' ->
<<0:1,3:3>>;
Enc14@element =:= 'red-blinking' ->
<<0:1,4:3>>;
Enc14@element =:= 'yellow-blinking' ->
<<0:1,5:3>>;
Enc14@element =:= 'green-blinking' ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end,
begin
%% attribute maxIntervalLength(8) with type INTEGER
Enc16@element = element(9, Val),
if Enc16@element bsr 8 =:= 0 ->
Enc16@element;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute remainingTime(9) with type INTEGER
Enc18@element = element(10, Val),
if Enc18@element bsr 8 =:= 0 ->
Enc18@element;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end,
begin
%% attribute directionCode(10) with type INTEGER
Enc20@element = element(11, Val),
if 0 =< Enc20@element, Enc20@element < 360 ->
<<Enc20@element:9>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end|begin
%% attribute reserved(11) with type BOOLEAN
Enc22@element = element(12, Val),
if Enc22@element =:= false ->
<<0:1>>;
Enc22@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc22@element}}})
end
end].


dec_TrafficLightStatus(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute trafficLightType(1) with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> reserved;
1 -> straight;
2 -> 'left-turn';
3 -> pedestrian;
4 -> bicycle;
5 -> 'right-turn';
6 -> bus;
7 -> 'u-turn'
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% attribute consecutiveTrafficLight(2) with type ENUMERATED
{Term2,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> none;
1 -> first;
2 -> second;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute trafficLightIntervalType(3) with type ENUMERATED
{Term3,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> static;
1 -> variable
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute pedestrianCall(4) with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute actuatedinterval(5) with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute permissiveNonProtected(6) with type ENUMERATED
{Term6,Bytes7} = begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:1,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> none;
1 -> permissive
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end,

%% attribute lightingStatus(7) with type ENUMERATED
{Term7,Bytes8} = begin
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:3,V8@Buf4/bitstring>> ->
V8@Int5 = case V8@V3 of
0 -> off;
1 -> 'red-on';
2 -> 'yellow-on';
3 -> 'green-on';
4 -> 'red-blinking';
5 -> 'yellow-blinking';
6 -> 'green-blinking';
_ -> exit({error,{asn1,{decode_enumerated,V8@V3}}})
end,
{V8@Int5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V6,V8@Buf7};
<<1:1,V8@Buf5/bitstring>> ->
{V8@V6,V8@Buf7} = case V8@Buf5 of
<<0:1,V8@V9:7,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10};
<<1:1,0:1,V8@V10:14,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
{V8@V10,V8@Buf11};
<<1:1,1:1,V8@V10:6,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
V8@Mul12 = V8@V10 * 16384,
{V8@Mul12,V8@Buf11}
end,
<<V8@V13:V8@V6/unit:8,V8@Buf14/bitstring>> = V8@Buf7,
{V8@V13,V8@Buf14}
end,
V8@Int15 = case V8@V3 of
_ -> {asn1_enum,V8@V3}
end,
{V8@Int15,V8@Buf4}
end,
{V8@V0,V8@Buf1}
end,

%% attribute maxIntervalLength(8) with type INTEGER
{Term8,Bytes9} = begin
<<V9@V0:8,V9@Buf1/bitstring>> = Bytes8,
{V9@V0,V9@Buf1}
end,

%% attribute remainingTime(9) with type INTEGER
{Term9,Bytes10} = begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes9,
{V10@V0,V10@Buf1}
end,

%% attribute directionCode(10) with type INTEGER
{Term10,Bytes11} = begin
<<V11@V0:9,V11@Buf1/bitstring>> = Bytes10,
{V11@V0,V11@Buf1}
end,

%% attribute reserved(11) with type BOOLEAN
{Term11,Bytes12} = begin
<<V12@V0:1,V12@Buf1/bitstring>> = Bytes11,
V12@Int2 = case V12@V0 of
0 -> false;
1 -> true
end,
{V12@Int2,V12@Buf1}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V13@V0,V13@Buf1} = case Bytes12 of
<<0:1,V13@V3:6,V13@Buf4/bitstring>> ->
V13@Add5 = V13@V3 + 1,
{V13@Add5,V13@Buf4};
<<1:1,V13@Buf2/bitstring>> ->
{V13@V3,V13@Buf4} = case V13@Buf2 of
<<0:1,V13@V6:7,V13@Buf7/bitstring>> when V13@V6 =/= 0 ->
{V13@V6,V13@Buf7};
<<1:1,0:1,V13@V7:14,V13@Buf8/bitstring>> when V13@V7 =/= 0 ->
{V13@V7,V13@Buf8};
<<1:1,1:1,V13@V7:6,V13@Buf8/bitstring>> when V13@V7 =/= 0 ->
V13@Mul9 = V13@V7 * 16384,
{V13@Mul9,V13@Buf8}
end,
{V13@V3,V13@Buf4}
end,
<<V13@V10:V13@V0/bitstring-unit:1,V13@Buf11/bitstring>> = V13@Buf1,
{V13@V10,V13@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'TrafficLightStatus',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},
{Res1,Bytes14}.

enc_ActuatedInterval(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_ActuatedInterval(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_ConsecutiveTrafficLight(Val) ->
if Val =:= none ->
<<0:1,0:2>>;
Val =:= first ->
<<0:1,1:2>>;
Val =:= second ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ConsecutiveTrafficLight(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> first;
2 -> second;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_PedestrianCall(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PedestrianCall(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_PermissiveNonProtected(Val) ->
if Val =:= none ->
<<0:1,0:1>>;
Val =:= permissive ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PermissiveNonProtected(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> permissive
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_ReservedBit(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_ReservedBit(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

'enc_TimeInSecond-B16'(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_TimeInSecond-B16'(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_TimeInSecond-B8'(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_TimeInSecond-B8'(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TrafficLightControllerStatus(Val) ->
Enc1@bs = try bit_string_name2pos_2(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 8)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_TrafficLightControllerStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{conflict,0},{'center-comm-error',1},{'scu-comm-error',2},{reserved1,3},{reserved2,4},{reserved3,5},{reserved4,6},{reserved5,7}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_TrafficLightDirectionCode(Val) ->
if 0 =< Val, Val < 360 ->
<<Val:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TrafficLightDirectionCode(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TrafficLightID(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= id ->
[<<0:1>>|encode_unconstrained_number(ChoiceVal)];
ChoiceTag =:= oid ->
[<<1:1>>|begin
Enc4@bin = encode_oid(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
encode_fragmented(Enc4@bin, 8)
end
end]
end.


dec_TrafficLightID(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@Buf4/bitstring>> when V2@V3 =/= 0 ->
{V2@V3,V2@Buf4};
<<1:1,0:1,V2@V4:14,V2@Buf5/bitstring>> when V2@V4 =/= 0 ->
{V2@V4,V2@Buf5};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> when V2@V4 =/= 0 ->
V2@Mul6 = V2@V4 * 16384,
{V2@Mul6,V2@Buf5}
end,
<<V2@V7:V2@V0/signed-unit:8,V2@Buf8/bitstring>> = V2@Buf1,
{V2@V7,V2@Buf8}
end
end,
{{id,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes1 of
<<0:1,V3@V3:7,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,0:1,V3@V4:14,V3@Buf5/bitstring>> ->
{V3@V4,V3@Buf5};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
V3@Mul6 = V3@V4 * 16384,
{V3@Mul6,V3@Buf5}
end,
<<V3@V7:V3@V0/binary-unit:8,V3@Buf8/bitstring>> = V3@Buf1,
V3@Conv9 = binary_to_list(V3@V7),
{V3@V10,V3@Buf11}  = {decode_oid(V3@Conv9),V3@Buf8},
{V3@V10,V3@Buf11}
end
end,
{{oid,Val},NewBytes}
end.
enc_TrafficLightIntervalType(Val) ->
if Val =:= static ->
<<0:1,0:1>>;
Val =:= variable ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TrafficLightIntervalType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> static;
1 -> variable
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_TrafficLightOperationStatus(Val) ->
Enc1@bs = try bit_string_name2pos_1(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 8)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_TrafficLightOperationStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{manual,0},{flashing,1},{off,2},{actuated,3},{transition,4},{priority,5},{'holding-phase',6},{reserved,7}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_TrafficLightingStatus(Val) ->
if Val =:= off ->
<<0:1,0:3>>;
Val =:= 'red-on' ->
<<0:1,1:3>>;
Val =:= 'yellow-on' ->
<<0:1,2:3>>;
Val =:= 'green-on' ->
<<0:1,3:3>>;
Val =:= 'red-blinking' ->
<<0:1,4:3>>;
Val =:= 'yellow-blinking' ->
<<0:1,5:3>>;
Val =:= 'green-blinking' ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TrafficLightingStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> off;
1 -> 'red-on';
2 -> 'yellow-on';
3 -> 'green-on';
4 -> 'red-blinking';
5 -> 'yellow-blinking';
6 -> 'green-blinking';
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_TrafficLightType(Val) ->
if Val =:= reserved ->
<<0:1,0:3>>;
Val =:= straight ->
<<0:1,1:3>>;
Val =:= 'left-turn' ->
<<0:1,2:3>>;
Val =:= pedestrian ->
<<0:1,3:3>>;
Val =:= bicycle ->
<<0:1,4:3>>;
Val =:= 'right-turn' ->
<<0:1,5:3>>;
Val =:= bus ->
<<0:1,6:3>>;
Val =:= 'u-turn' ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TrafficLightType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> straight;
2 -> 'left-turn';
3 -> pedestrian;
4 -> bicycle;
5 -> 'right-turn';
6 -> bus;
7 -> 'u-turn'
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

typeinfo('TrafficLightStatusMessage') ->
  {sequence,'TrafficLightStatusMessage',9,[{<<116,114,97,102,102,105,99,76,105,103,104,116,73,68>>,{typeinfo,{'TrafficLightStatusMessage','TrafficLightID'}},mandatory},{<<108,111,110,103>>,{'INTEGER',{-1799999999,1800000001}},'OPTIONAL'},{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},'OPTIONAL'},{<<111,112,101,114,97,116,105,111,110,83,116,97,116,117,115>>,{bit_string_nnl,[{manual,0},{flashing,1},{off,2},{actuated,3},{transition,4},{priority,5},{'holding-phase',6},{reserved,7}]},mandatory},{<<99,111,110,116,114,111,108,108,101,114,83,116,97,116,117,115>>,{bit_string_nnl,[{conflict,0},{'center-comm-error',1},{'scu-comm-error',2},{reserved1,3},{reserved2,4},{reserved3,5},{reserved4,6},{reserved5,7}]},mandatory},{<<99,121,99,108,101,99,111,117,110,116,101,114>>,{'INTEGER',{0,65535}},mandatory},{<<99,121,99,108,101,116,105,109,101>>,{'INTEGER',{0,65535}},mandatory},{<<99,117,114,114,101,110,116,84,105,109,101>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<116,114,97,102,102,105,99,76,105,103,104,116,83,116,97,116,117,115>>,{typeinfo,{'TrafficLightStatusMessage','TrafficLightStatusList'}},mandatory}]};
typeinfo('TrafficLightStatusList') ->
  {sof,{typeinfo,{'TrafficLightStatusMessage','TrafficLightStatus'}}};
typeinfo('TrafficLightStatus') ->
  {sequence,'TrafficLightStatus',11,[{<<116,114,97,102,102,105,99,76,105,103,104,116,84,121,112,101>>,{'ENUMERATED_EXT',#{reserved => 0,pedestrian => 3,bus => 6,'u-turn' => 7,'left-turn' => 2,'right-turn' => 5,bicycle => 4,straight => 1}},mandatory},{<<99,111,110,115,101,99,117,116,105,118,101,84,114,97,102,102,105,99,76,105,103,104,116>>,{'ENUMERATED_EXT',#{none => 0,first => 1,second => 2}},mandatory},{<<116,114,97,102,102,105,99,76,105,103,104,116,73,110,116,101,114,118,97,108,84,121,112,101>>,{'ENUMERATED_EXT',#{static => 0,variable => 1}},mandatory},{<<112,101,100,101,115,116,114,105,97,110,67,97,108,108>>,'BOOLEAN',mandatory},{<<97,99,116,117,97,116,101,100,105,110,116,101,114,118,97,108>>,'BOOLEAN',mandatory},{<<112,101,114,109,105,115,115,105,118,101,78,111,110,80,114,111,116,101,99,116,101,100>>,{'ENUMERATED_EXT',#{none => 0,permissive => 1}},mandatory},{<<108,105,103,104,116,105,110,103,83,116,97,116,117,115>>,{'ENUMERATED_EXT',#{off => 0,'red-on' => 1,'yellow-on' => 2,'green-on' => 3,'red-blinking' => 4,'yellow-blinking' => 5,'green-blinking' => 6}},mandatory},{<<109,97,120,73,110,116,101,114,118,97,108,76,101,110,103,116,104>>,{'INTEGER',{0,255}},mandatory},{<<114,101,109,97,105,110,105,110,103,84,105,109,101>>,{'INTEGER',{0,255}},mandatory},{<<100,105,114,101,99,116,105,111,110,67,111,100,101>>,{'INTEGER',{0,359}},mandatory},{<<114,101,115,101,114,118,101,100>>,'BOOLEAN',mandatory}]};
typeinfo('ActuatedInterval') ->
  'BOOLEAN';
typeinfo('ConsecutiveTrafficLight') ->
  {'ENUMERATED_EXT',#{none => 0,first => 1,second => 2}};
typeinfo('PedestrianCall') ->
  'BOOLEAN';
typeinfo('PermissiveNonProtected') ->
  {'ENUMERATED_EXT',#{none => 0,permissive => 1}};
typeinfo('ReservedBit') ->
  'BOOLEAN';
typeinfo('TimeInSecond-B16') ->
  {'INTEGER',{0,65535}};
typeinfo('TimeInSecond-B8') ->
  {'INTEGER',{0,255}};
typeinfo('TrafficLightControllerStatus') ->
  {bit_string_nnl,[{conflict,0},{'center-comm-error',1},{'scu-comm-error',2},{reserved1,3},{reserved2,4},{reserved3,5},{reserved4,6},{reserved5,7}]};
typeinfo('TrafficLightDirectionCode') ->
  {'INTEGER',{0,359}};
typeinfo('TrafficLightID') ->
  {choice,#{<<105,100>> => 'INTEGER',<<111,105,100>> => 'OBJECT IDENTIFIER'}};
typeinfo('TrafficLightIntervalType') ->
  {'ENUMERATED_EXT',#{static => 0,variable => 1}};
typeinfo('TrafficLightOperationStatus') ->
  {bit_string_nnl,[{manual,0},{flashing,1},{off,2},{actuated,3},{transition,4},{priority,5},{'holding-phase',6},{reserved,7}]};
typeinfo('TrafficLightingStatus') ->
  {'ENUMERATED_EXT',#{off => 0,'red-on' => 1,'yellow-on' => 2,'green-on' => 3,'red-blinking' => 4,'yellow-blinking' => 5,'green-blinking' => 6}};
typeinfo('TrafficLightType') ->
  {'ENUMERATED_EXT',#{reserved => 0,pedestrian => 3,bus => 6,'u-turn' => 7,'left-turn' => 2,'right-turn' => 5,bicycle => 4,straight => 1}};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_1([manual | T]) ->
    [0 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([flashing | T]) ->
    [1 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([off | T]) ->
    [2 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([actuated | T]) ->
    [3 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([transition | T]) ->
    [4 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([priority | T]) ->
    [5 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['holding-phase' | T]) ->
    [6 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([reserved | T]) ->
    [7 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_1(T)];
bit_string_name2pos_1([]) ->
    [];
bit_string_name2pos_1(_) ->
    throw(invalid).

bit_string_name2pos_2([conflict | T]) ->
    [0 | bit_string_name2pos_2(T)];
bit_string_name2pos_2(['center-comm-error' | T]) ->
    [1 | bit_string_name2pos_2(T)];
bit_string_name2pos_2(['scu-comm-error' | T]) ->
    [2 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([reserved1 | T]) ->
    [3 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([reserved2 | T]) ->
    [4 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([reserved3 | T]) ->
    [5 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([reserved4 | T]) ->
    [6 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([reserved5 | T]) ->
    [7 | bit_string_name2pos_2(T)];
bit_string_name2pos_2([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_2(T)];
bit_string_name2pos_2([]) ->
    [];
bit_string_name2pos_2(_) ->
    throw(invalid).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_TrafficLightStatus(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

dec_subidentifiers([H | T], Av, Al) when H >= 128 ->
    dec_subidentifiers(T, Av bsl 7 bor H band 127, Al);
dec_subidentifiers([H | T], Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 bor H | Al]);
dec_subidentifiers([], _Av, Al) ->
    lists:reverse(Al).

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

decode_oid(Octets) ->
    [First | Rest] = dec_subidentifiers(Octets, 0, []),
    Idlist =
        if
            First < 40 ->
                [0, First | Rest];
            First < 80 ->
                [1, First - 40 | Rest];
            true ->
                [2, First - 80 | Rest]
        end,
    list_to_tuple(Idlist).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

e_o_e(Num) when Num < 128 ->
    Num bor 128;
e_o_e(Num) ->
    [e_o_e(Num bsr 7), Num band 127 bor 128].

e_object_element(Num) when Num < 128 ->
    [Num];
e_object_element(Num) ->
    [e_o_e(Num bsr 7), Num band 127].

e_object_elements([], Acc) ->
    lists:reverse(Acc);
e_object_elements([H | T], Acc) ->
    e_object_elements(T, [e_object_element(H) | Acc]).

e_object_identifier([E1, E2 | Tail])
    when E1 >= 0, E1 < 2, E2 < 40; E1 =:= 2 ->
    Head = 40 * E1 + E2,
    e_object_elements([Head | Tail], []);
e_object_identifier([_, _ | _Tail] = Oid) ->
    exit({error, {asn1, {illegal_value, Oid}}}).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

encode_oid(Val) when is_tuple(Val) ->
    encode_oid(tuple_to_list(Val));
encode_oid(Val) ->
    iolist_to_binary(e_object_identifier(Val)).

encode_unconstrained_number(Val) when not is_integer(Val) ->
    exit({error, {asn1, {illegal_integer, Val}}});
encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1, Val];
        Val < 256 ->
            [<<2,0>>, Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz, Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>, Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz, 0, Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>, Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len | Oct];
        Len < 16384 ->
            [<<2:2,Len:14>> | Oct]
    end.

enint(-1, [B1 | T]) when B1 > 127 ->
    [B1 | T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255 | Acc]).

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
