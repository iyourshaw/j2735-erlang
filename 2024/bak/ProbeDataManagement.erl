%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in ProbeDataManagement.

-module('ProbeDataManagement').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("ProbeDataManagement.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'ProbeDataManagement'},
            {options,[{i,"./erl"},uper,jer,verbose,{i,"./asn"},{outdir,"./erl"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_ProbeDataManagement/1,
enc_Sample/1,
enc_SnapshotDistance/1,
enc_SnapshotTime/1,
enc_VehicleStatusRequest/1,
enc_VehicleStatusRequestList/1,
enc_GrossDistance/1,
enc_SecondOfTime/1,
enc_TermDistance/1,
enc_TermTime/1,
enc_VehicleStatusDeviceTypeTag/1
]).

-export([
dec_ProbeDataManagement/1,
dec_Sample/1,
dec_SnapshotDistance/1,
dec_SnapshotTime/1,
dec_VehicleStatusRequest/1,
dec_VehicleStatusRequestList/1,
dec_GrossDistance/1,
dec_SecondOfTime/1,
dec_TermDistance/1,
dec_TermTime/1,
dec_VehicleStatusDeviceTypeTag/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('ProbeDataManagement', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('ProbeDataManagement', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ProbeDataManagement', Data) -> enc_ProbeDataManagement(Data);
encode_disp('Sample', Data) -> enc_Sample(Data);
encode_disp('SnapshotDistance', Data) -> enc_SnapshotDistance(Data);
encode_disp('SnapshotTime', Data) -> enc_SnapshotTime(Data);
encode_disp('VehicleStatusRequest', Data) -> enc_VehicleStatusRequest(Data);
encode_disp('VehicleStatusRequestList', Data) -> enc_VehicleStatusRequestList(Data);
encode_disp('GrossDistance', Data) -> enc_GrossDistance(Data);
encode_disp('SecondOfTime', Data) -> enc_SecondOfTime(Data);
encode_disp('TermDistance', Data) -> enc_TermDistance(Data);
encode_disp('TermTime', Data) -> enc_TermTime(Data);
encode_disp('VehicleStatusDeviceTypeTag', Data) -> enc_VehicleStatusDeviceTypeTag(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ProbeDataManagement', Data) -> dec_ProbeDataManagement(Data);
decode_disp('Sample', Data) -> dec_Sample(Data);
decode_disp('SnapshotDistance', Data) -> dec_SnapshotDistance(Data);
decode_disp('SnapshotTime', Data) -> dec_SnapshotTime(Data);
decode_disp('VehicleStatusRequest', Data) -> dec_VehicleStatusRequest(Data);
decode_disp('VehicleStatusRequestList', Data) -> dec_VehicleStatusRequestList(Data);
decode_disp('GrossDistance', Data) -> dec_GrossDistance(Data);
decode_disp('SecondOfTime', Data) -> dec_SecondOfTime(Data);
decode_disp('TermDistance', Data) -> dec_TermDistance(Data);
decode_disp('TermTime', Data) -> dec_TermTime(Data);
decode_disp('VehicleStatusDeviceTypeTag', Data) -> dec_VehicleStatusDeviceTypeTag(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_ProbeDataManagement(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(8, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(9, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 527041 ->
<<Enc5@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute sample(2) with type Sample
Enc8@element = element(3, Val),
enc_Sample(Enc8@element)
end,
begin
%% attribute directions(3) with type BIT STRING
Enc9@element = element(4, Val),
Enc10@bs = try bit_string_name2pos_1(Enc9@element) of
Enc10@positions ->
bitstring_from_positions(Enc10@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc9@element, 16)
end,
Enc10@bits = bit_size(Enc10@bs),
if Enc10@bits =:= 16 ->
Enc10@bs
end
end,
begin
%% attribute term(4) with type CHOICE
Enc11@element = element(5, Val),
enc_ProbeDataManagement_term(Enc11@element)
end,
begin
%% attribute snapshot(5) with type CHOICE
Enc12@element = element(6, Val),
enc_ProbeDataManagement_snapshot(Enc12@element)
end,
begin
%% attribute txInterval(6) with type INTEGER
Enc13@element = element(7, Val),
if 0 =< Enc13@element, Enc13@element < 62 ->
<<Enc13@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute dataElements(7) with type VehicleStatusRequestList
Enc15@element = element(8, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleStatusRequestList(Enc15@element)
end
end|begin
%% attribute regional(8) with type SEQUENCE OF
Enc17@element = element(9, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
enc_ProbeDataManagement_regional(Enc17@element)
end
end].
enc_ProbeDataManagement_term(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= termtime ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 1800 ->
<<0:1,ChoiceVal@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= termDistance ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 30000 ->
<<1:1,ChoiceVal@sub:15>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end
end.
enc_ProbeDataManagement_snapshot(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= snapshotTime ->
[<<0:1>>|enc_SnapshotTime(ChoiceVal)];
ChoiceTag =:= snapshotDistance ->
[<<1:1>>|enc_SnapshotDistance(ChoiceVal)]
end.
enc_ProbeDataManagement_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ProbeDataManagement_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ProbeDataManagement_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type2(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ProbeDataManagement(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute sample(2) with type Sample
{Term2,Bytes4} = dec_Sample(Bytes3),

%% attribute directions(3) with type BIT STRING
{Term3,Bytes5} = begin
<<V4@V0:16/binary-unit:1,V4@Buf1/bitstring>> = Bytes4,
{V4@V2,V4@Buf3}  = {decode_named_bit_string(V4@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute term(4) with type CHOICE
{Term4,Bytes6} = dec_ProbeDataManagement_term(Bytes5),

%% attribute snapshot(5) with type CHOICE
{Term5,Bytes7} = dec_ProbeDataManagement_snapshot(Bytes6),

%% attribute txInterval(6) with type INTEGER
{Term6,Bytes8} = begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes7,
{V5@V0,V5@Buf1}
end,

%% attribute dataElements(7) with type VehicleStatusRequestList
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
dec_VehicleStatusRequestList(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute regional(8) with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
dec_ProbeDataManagement_regional(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V6@V0,V6@Buf1} = case Bytes10 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
Res1 = {'ProbeDataManagement',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},
{Res1,Bytes12}.


dec_ProbeDataManagement_term(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end
end,
{{termtime,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end
end,
{{termDistance,Val},NewBytes}
end.

dec_ProbeDataManagement_snapshot(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_SnapshotTime(Bytes1)
end,
{{snapshotTime,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SnapshotDistance(Bytes1)
end,
{{snapshotDistance,Val},NewBytes}
end.

dec_ProbeDataManagement_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components3(V1@Add2, V1@Buf1, []).


dec_ProbeDataManagement_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type4(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_Sample(Val) ->
[begin
%% attribute sampleStart(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 8 =:= 0 ->
Enc1@element;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute sampleEnd(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 8 =:= 0 ->
[Enc3@element];
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_Sample(Bytes) ->

%% attribute sampleStart(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute sampleEnd(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'Sample',Term1,Term2},
{Res1,Bytes2}.

enc_SnapshotDistance(Val) ->
[begin
%% attribute distance1(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 10 =:= 0 ->
<<Enc1@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute speed1(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 5 =:= 0 ->
<<Enc3@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute distance2(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 10 =:= 0 ->
<<Enc5@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute speed2(4) with type INTEGER
Enc7@element = element(5, Val),
if Enc7@element bsr 5 =:= 0 ->
<<Enc7@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_SnapshotDistance(Bytes) ->

%% attribute distance1(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute speed1(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute distance2(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute speed2(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
Res1 = {'SnapshotDistance',Term1,Term2,Term3,Term4},
{Res1,Bytes4}.

enc_SnapshotTime(Val) ->
[begin
%% attribute speed1(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 5 =:= 0 ->
<<Enc1@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute time1(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 62 ->
<<Enc3@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute speed2(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 5 =:= 0 ->
<<Enc5@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute time2(4) with type INTEGER
Enc7@element = element(5, Val),
if 0 =< Enc7@element, Enc7@element < 62 ->
<<Enc7@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_SnapshotTime(Bytes) ->

%% attribute speed1(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute time1(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute speed2(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute time2(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
Res1 = {'SnapshotTime',Term1,Term2,Term3,Term4},
{Res1,Bytes4}.

enc_VehicleStatusRequest(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute dataType(1) with type ENUMERATED
Enc6@element = element(2, Val),
if Enc6@element =:= unknown ->
<<0:1,0:5>>;
Enc6@element =:= lights ->
<<0:1,1:5>>;
Enc6@element =:= wipers ->
<<0:1,2:5>>;
Enc6@element =:= brakes ->
<<0:1,3:5>>;
Enc6@element =:= stab ->
<<0:1,4:5>>;
Enc6@element =:= trac ->
<<0:1,5:5>>;
Enc6@element =:= abs ->
<<0:1,6:5>>;
Enc6@element =:= sunS ->
<<0:1,7:5>>;
Enc6@element =:= rainS ->
<<0:1,8:5>>;
Enc6@element =:= airTemp ->
<<0:1,9:5>>;
Enc6@element =:= steering ->
<<0:1,10:5>>;
Enc6@element =:= vertAccelThres ->
<<0:1,11:5>>;
Enc6@element =:= vertAccel ->
<<0:1,12:5>>;
Enc6@element =:= hozAccelLong ->
<<0:1,13:5>>;
Enc6@element =:= hozAccelLat ->
<<0:1,14:5>>;
Enc6@element =:= hozAccelCon ->
<<0:1,15:5>>;
Enc6@element =:= accel4way ->
<<0:1,16:5>>;
Enc6@element =:= confidenceSet ->
<<0:1,17:5>>;
Enc6@element =:= obDist ->
<<0:1,18:5>>;
Enc6@element =:= obDirect ->
<<0:1,19:5>>;
Enc6@element =:= yaw ->
<<0:1,20:5>>;
Enc6@element =:= yawRateCon ->
<<0:1,21:5>>;
Enc6@element =:= dateTime ->
<<0:1,22:5>>;
Enc6@element =:= fullPos ->
<<0:1,23:5>>;
Enc6@element =:= position2D ->
<<0:1,24:5>>;
Enc6@element =:= position3D ->
<<0:1,25:5>>;
Enc6@element =:= vehicle ->
<<0:1,26:5>>;
Enc6@element =:= speedHeadC ->
<<0:1,27:5>>;
Enc6@element =:= speedC ->
<<0:1,28:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end,
begin
%% attribute subType(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - 1,
if 0 =< Enc8@element@sub, Enc8@element@sub < 15 ->
<<Enc8@element@sub:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end,
begin
%% attribute sendOnLessThenValue(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - -32767,
if 0 =< Enc11@element@sub, Enc11@element@sub < 65535 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end
end
end,
begin
%% attribute sendOnMoreThenValue(4) with type INTEGER
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@element@sub = Enc14@element - -32767,
if 0 =< Enc14@element@sub, Enc14@element@sub < 65535 ->
<<Enc14@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end
end
end|begin
%% attribute sendAll(5) with type BOOLEAN
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element =:= false ->
<<0:1>>;
Enc17@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc17@element}}})
end
end].


dec_VehicleStatusRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute dataType(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:5,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unknown;
1 -> lights;
2 -> wipers;
3 -> brakes;
4 -> stab;
5 -> trac;
6 -> abs;
7 -> sunS;
8 -> rainS;
9 -> airTemp;
10 -> steering;
11 -> vertAccelThres;
12 -> vertAccel;
13 -> hozAccelLong;
14 -> hozAccelLat;
15 -> hozAccelCon;
16 -> accel4way;
17 -> confidenceSet;
18 -> obDist;
19 -> obDirect;
20 -> yaw;
21 -> yawRateCon;
22 -> dateTime;
23 -> fullPos;
24 -> position2D;
25 -> position3D;
26 -> vehicle;
27 -> speedHeadC;
28 -> speedC;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute subType(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute sendOnLessThenValue(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -32767,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute sendOnMoreThenValue(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:16,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + -32767,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute sendAll(5) with type BOOLEAN
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'VehicleStatusRequest',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_VehicleStatusRequestList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_VehicleStatusRequest(Comp) || Comp <- Val]]
end.



dec_VehicleStatusRequestList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components5(V1@Add2, V1@Buf1, []).

enc_GrossDistance(Val) ->
if Val bsr 10 =:= 0 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_GrossDistance(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SecondOfTime(Val) ->
if 0 =< Val, Val < 62 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SecondOfTime(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TermDistance(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 30000 ->
<<Val@sub:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TermDistance(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

enc_TermTime(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 1800 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TermTime(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

enc_VehicleStatusDeviceTypeTag(Val) ->
if Val =:= unknown ->
<<0:1,0:5>>;
Val =:= lights ->
<<0:1,1:5>>;
Val =:= wipers ->
<<0:1,2:5>>;
Val =:= brakes ->
<<0:1,3:5>>;
Val =:= stab ->
<<0:1,4:5>>;
Val =:= trac ->
<<0:1,5:5>>;
Val =:= abs ->
<<0:1,6:5>>;
Val =:= sunS ->
<<0:1,7:5>>;
Val =:= rainS ->
<<0:1,8:5>>;
Val =:= airTemp ->
<<0:1,9:5>>;
Val =:= steering ->
<<0:1,10:5>>;
Val =:= vertAccelThres ->
<<0:1,11:5>>;
Val =:= vertAccel ->
<<0:1,12:5>>;
Val =:= hozAccelLong ->
<<0:1,13:5>>;
Val =:= hozAccelLat ->
<<0:1,14:5>>;
Val =:= hozAccelCon ->
<<0:1,15:5>>;
Val =:= accel4way ->
<<0:1,16:5>>;
Val =:= confidenceSet ->
<<0:1,17:5>>;
Val =:= obDist ->
<<0:1,18:5>>;
Val =:= obDirect ->
<<0:1,19:5>>;
Val =:= yaw ->
<<0:1,20:5>>;
Val =:= yawRateCon ->
<<0:1,21:5>>;
Val =:= dateTime ->
<<0:1,22:5>>;
Val =:= fullPos ->
<<0:1,23:5>>;
Val =:= position2D ->
<<0:1,24:5>>;
Val =:= position3D ->
<<0:1,25:5>>;
Val =:= vehicle ->
<<0:1,26:5>>;
Val =:= speedHeadC ->
<<0:1,27:5>>;
Val =:= speedC ->
<<0:1,28:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_VehicleStatusDeviceTypeTag(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> lights;
2 -> wipers;
3 -> brakes;
4 -> stab;
5 -> trac;
6 -> abs;
7 -> sunS;
8 -> rainS;
9 -> airTemp;
10 -> steering;
11 -> vertAccelThres;
12 -> vertAccel;
13 -> hozAccelLong;
14 -> hozAccelLat;
15 -> hozAccelCon;
16 -> accel4way;
17 -> confidenceSet;
18 -> obDist;
19 -> obDirect;
20 -> yaw;
21 -> yawRateCon;
22 -> dateTime;
23 -> fullPos;
24 -> position2D;
25 -> position3D;
26 -> vehicle;
27 -> speedHeadC;
28 -> speedC;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

typeinfo('ProbeDataManagement') ->
  {sequence,'ProbeDataManagement',8,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,97,109,112,108,101>>,{typeinfo,{'ProbeDataManagement','Sample'}},mandatory},{<<100,105,114,101,99,116,105,111,110,115>>,{{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16},mandatory},{<<116,101,114,109>>,{choice,#{<<116,101,114,109,68,105,115,116,97,110,99,101>> => {'INTEGER',{1,30000}},<<116,101,114,109,116,105,109,101>> => {'INTEGER',{1,1800}}}},mandatory},{<<115,110,97,112,115,104,111,116>>,{choice,#{<<115,110,97,112,115,104,111,116,68,105,115,116,97,110,99,101>> => {typeinfo,{'ProbeDataManagement','SnapshotDistance'}},<<115,110,97,112,115,104,111,116,84,105,109,101>> => {typeinfo,{'ProbeDataManagement','SnapshotTime'}}}},mandatory},{<<116,120,73,110,116,101,114,118,97,108>>,{'INTEGER',{0,61}},mandatory},{<<100,97,116,97,69,108,101,109,101,110,116,115>>,{typeinfo,{'ProbeDataManagement','VehicleStatusRequestList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ProbeDataManagement_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,134,{'Externaltypereference',undefined,'ProbeDataManagement',internal_object_set_argument_1}},[{outermost,[{'Externalvaluereference',134,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('Sample') ->
  {sequence,'Sample',2,[{<<115,97,109,112,108,101,83,116,97,114,116>>,{'INTEGER',{0,255}},mandatory},{<<115,97,109,112,108,101,69,110,100>>,{'INTEGER',{0,255}},mandatory}]};
typeinfo('SnapshotDistance') ->
  {sequence,'SnapshotDistance',4,[{<<100,105,115,116,97,110,99,101,49>>,{'INTEGER',{0,1023}},mandatory},{<<115,112,101,101,100,49>>,{'INTEGER',{0,31}},mandatory},{<<100,105,115,116,97,110,99,101,50>>,{'INTEGER',{0,1023}},mandatory},{<<115,112,101,101,100,50>>,{'INTEGER',{0,31}},mandatory}]};
typeinfo('SnapshotTime') ->
  {sequence,'SnapshotTime',4,[{<<115,112,101,101,100,49>>,{'INTEGER',{0,31}},mandatory},{<<116,105,109,101,49>>,{'INTEGER',{0,61}},mandatory},{<<115,112,101,101,100,50>>,{'INTEGER',{0,31}},mandatory},{<<116,105,109,101,50>>,{'INTEGER',{0,61}},mandatory}]};
typeinfo('VehicleStatusRequest') ->
  {sequence,'VehicleStatusRequest',5,[{<<100,97,116,97,84,121,112,101>>,{'ENUMERATED_EXT',#{abs => 6,unknown => 0,yaw => 20,brakes => 3,lights => 1,obDist => 18,obDirect => 19,dateTime => 22,airTemp => 9,accel4way => 16,vehicle => 26,wipers => 2,stab => 4,trac => 5,sunS => 7,rainS => 8,steering => 10,vertAccelThres => 11,vertAccel => 12,hozAccelLong => 13,hozAccelLat => 14,hozAccelCon => 15,confidenceSet => 17,yawRateCon => 21,fullPos => 23,position2D => 24,position3D => 25,speedHeadC => 27,speedC => 28}},mandatory},{<<115,117,98,84,121,112,101>>,{'INTEGER',{1,15}},'OPTIONAL'},{<<115,101,110,100,79,110,76,101,115,115,84,104,101,110,86,97,108,117,101>>,{'INTEGER',{-32767,32767}},'OPTIONAL'},{<<115,101,110,100,79,110,77,111,114,101,84,104,101,110,86,97,108,117,101>>,{'INTEGER',{-32767,32767}},'OPTIONAL'},{<<115,101,110,100,65,108,108>>,'BOOLEAN','OPTIONAL'}]};
typeinfo('VehicleStatusRequestList') ->
  {sof,{typeinfo,{'ProbeDataManagement','VehicleStatusRequest'}}};
typeinfo('GrossDistance') ->
  {'INTEGER',{0,1023}};
typeinfo('SecondOfTime') ->
  {'INTEGER',{0,61}};
typeinfo('TermDistance') ->
  {'INTEGER',{1,30000}};
typeinfo('TermTime') ->
  {'INTEGER',{1,1800}};
typeinfo('VehicleStatusDeviceTypeTag') ->
  {'ENUMERATED_EXT',#{abs => 6,unknown => 0,yaw => 20,brakes => 3,lights => 1,obDist => 18,obDirect => 19,dateTime => 22,airTemp => 9,accel4way => 16,vehicle => 26,wipers => 2,stab => 4,trac => 5,sunS => 7,rainS => 8,steering => 10,vertAccelThres => 11,vertAccel => 12,hozAccelLong => 13,hozAccelLat => 14,hozAccelCon => 15,confidenceSet => 17,yawRateCon => 21,fullPos => 23,position2D => 24,position3D => 25,speedHeadC => 27,speedC => 28}};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_1(['from000-0to022-5degrees' | T]) ->
    [0 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from022-5to045-0degrees' | T]) ->
    [1 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from045-0to067-5degrees' | T]) ->
    [2 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from067-5to090-0degrees' | T]) ->
    [3 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from090-0to112-5degrees' | T]) ->
    [4 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from112-5to135-0degrees' | T]) ->
    [5 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from135-0to157-5degrees' | T]) ->
    [6 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from157-5to180-0degrees' | T]) ->
    [7 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from180-0to202-5degrees' | T]) ->
    [8 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from202-5to225-0degrees' | T]) ->
    [9 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from225-0to247-5degrees' | T]) ->
    [10 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from247-5to270-0degrees' | T]) ->
    [11 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from270-0to292-5degrees' | T]) ->
    [12 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from292-5to315-0degrees' | T]) ->
    [13 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from315-0to337-5degrees' | T]) ->
    [14 | bit_string_name2pos_1(T)];
bit_string_name2pos_1(['from337-5to360-0degrees' | T]) ->
    [15 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_1(T)];
bit_string_name2pos_1([]) ->
    [];
bit_string_name2pos_1(_) ->
    throw(invalid).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_ProbeDataManagement_regional_RegionalExtension(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = dec_VehicleStatusRequest(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_os_Type4(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Type2(Val, Id) ->
open_type_to_binary(Val).

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

open_type_to_binary({asn1_OPENTYPE, Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
