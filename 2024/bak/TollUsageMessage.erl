%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in TollUsageMessage.

-module('TollUsageMessage').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("TollUsageMessage.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'TollUsageMessage'},
            {options,[{i,"./erl"},uper,jer,verbose,{i,"./asn"},{outdir,"./erl"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_TollUsageMessage/1,
enc_TumHash/1,
enc_EncryptedTumData/1,
enc_TumData/1,
enc_TollServiceProviderData/1,
enc_TollUserData/1,
enc_VehicleAxlesAndWeightInfo/1,
enc_VehicleId/1,
enc_LocAndTimeStamps/1,
enc_LocAndTimeStamp/1,
enc_LastTollPointInfos/1,
enc_LastTollPointInfo/1
]).

-export([
dec_TollUsageMessage/1,
dec_TumHash/1,
dec_EncryptedTumData/1,
dec_TumData/1,
dec_TollServiceProviderData/1,
dec_TollUserData/1,
dec_VehicleAxlesAndWeightInfo/1,
dec_VehicleId/1,
dec_LocAndTimeStamps/1,
dec_LocAndTimeStamp/1,
dec_LastTollPointInfos/1,
dec_LastTollPointInfo/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('TollUsageMessage', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('TollUsageMessage', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('TollUsageMessage', Data) -> enc_TollUsageMessage(Data);
encode_disp('TumHash', Data) -> enc_TumHash(Data);
encode_disp('EncryptedTumData', Data) -> enc_EncryptedTumData(Data);
encode_disp('TumData', Data) -> enc_TumData(Data);
encode_disp('TollServiceProviderData', Data) -> enc_TollServiceProviderData(Data);
encode_disp('TollUserData', Data) -> enc_TollUserData(Data);
encode_disp('VehicleAxlesAndWeightInfo', Data) -> enc_VehicleAxlesAndWeightInfo(Data);
encode_disp('VehicleId', Data) -> enc_VehicleId(Data);
encode_disp('LocAndTimeStamps', Data) -> enc_LocAndTimeStamps(Data);
encode_disp('LocAndTimeStamp', Data) -> enc_LocAndTimeStamp(Data);
encode_disp('LastTollPointInfos', Data) -> enc_LastTollPointInfos(Data);
encode_disp('LastTollPointInfo', Data) -> enc_LastTollPointInfo(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('TollUsageMessage', Data) -> dec_TollUsageMessage(Data);
decode_disp('TumHash', Data) -> dec_TumHash(Data);
decode_disp('EncryptedTumData', Data) -> dec_EncryptedTumData(Data);
decode_disp('TumData', Data) -> dec_TumData(Data);
decode_disp('TollServiceProviderData', Data) -> dec_TollServiceProviderData(Data);
decode_disp('TollUserData', Data) -> dec_TollUserData(Data);
decode_disp('VehicleAxlesAndWeightInfo', Data) -> dec_VehicleAxlesAndWeightInfo(Data);
decode_disp('VehicleId', Data) -> dec_VehicleId(Data);
decode_disp('LocAndTimeStamps', Data) -> dec_LocAndTimeStamps(Data);
decode_disp('LocAndTimeStamp', Data) -> dec_LocAndTimeStamp(Data);
decode_disp('LastTollPointInfos', Data) -> dec_LastTollPointInfos(Data);
decode_disp('LastTollPointInfo', Data) -> dec_LastTollPointInfo(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_TollUsageMessage(Val) ->
[begin
Enc1@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute tollPointInfo(1) with type TollChargerInfo
Enc3@element = element(2, Val),
'TollAdvertisementMessage':enc_TollChargerInfo(Enc3@element)
end,
begin
%% attribute tempID(2) with type OCTET STRING
Enc4@element = element(3, Val),
Enc5@len = byte_size(Enc4@element),
if Enc5@len =:= 4 ->
Enc4@element
end
end,
begin
%% attribute tumSequenceNum(3) with type INTEGER
Enc6@element = element(4, Val),
if Enc6@element bsr 7 =:= 0 ->
<<Enc6@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute tamSequenceNum(4) with type INTEGER
Enc8@element = element(5, Val),
if Enc8@element bsr 7 =:= 0 ->
<<Enc8@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute tumHash(5) with type OCTET STRING
Enc10@element = element(6, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@len = byte_size(Enc10@element),
if Enc11@len =:= 32 ->
Enc10@element
end
end
end
end|begin
%% attribute encryptedTumData(6) with type OCTET STRING
Enc13@element = element(7, Val),
Enc14@len = byte_size(Enc13@element),
Enc14@len@sub = Enc14@len - 1,
if 0 =< Enc14@len@sub, Enc14@len@sub < 7000 ->
[<<Enc14@len@sub:13>>|Enc13@element]
end
end].


dec_TollUsageMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute tollPointInfo(1) with type TollChargerInfo
{Term1,Bytes3} = 'TollAdvertisementMessage':dec_TollChargerInfo(Bytes2),

%% attribute tempID(2) with type OCTET STRING
{Term2,Bytes4} = begin
<<V3@V0:4/binary-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute tumSequenceNum(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute tamSequenceNum(4) with type INTEGER
{Term4,Bytes6} = begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes5,
{V5@V0,V5@Buf1}
end,

%% attribute tumHash(5) with type OCTET STRING
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V6@V0:32/binary-unit:8,V6@Buf1/bitstring>> = Bytes6,
V6@Conv2 = binary:copy(V6@V0),
{V6@Conv2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute encryptedTumData(6) with type OCTET STRING
{Term6,Bytes8} = begin
<<V7@V0:13,V7@Buf1/bitstring>> = Bytes7,
V7@Add2 = V7@V0 + 1,
<<V7@V3:V7@Add2/binary-unit:8,V7@Buf4/bitstring>> = V7@Buf1,
V7@Conv5 = binary:copy(V7@V3),
{V7@Conv5,V7@Buf4}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'TollUsageMessage',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.

enc_TumHash(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 32 ->
Val
end.


dec_TumHash(Bytes) ->
begin
<<V1@V0:32/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_EncryptedTumData(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 7000 ->
[<<Enc1@len@sub:13>>|Val]
end.


dec_EncryptedTumData(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_TumData(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute tollUserData(1) with type TollUserData
Enc3@element = element(2, Val),
enc_TollUserData(Enc3@element)
end|begin
%% attribute tollServiceProviderData(2) with type OCTET STRING
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@len = byte_size(Enc4@element),
Enc5@len@sub = Enc5@len - 1,
if Enc5@len@sub bsr 10 =:= 0 ->
[<<0:1,Enc5@len@sub:10>>|Enc4@element];
Enc5@len < 16384 ->
[<<1:1,2:2,Enc5@len:14>>|Enc4@element];
true ->
[<<1:1>>|encode_fragmented(Enc4@element, 8)]
end
end
end
end].


dec_TumData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute tollUserData(1) with type TollUserData
{Term1,Bytes3} = dec_TollUserData(Bytes2),

%% attribute tollServiceProviderData(2) with type OCTET STRING
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:10,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
<<V3@V6:V3@Add5/binary-unit:8,V3@Buf7/bitstring>> = V3@Buf4,
{V3@V6,V3@Buf7};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<1:1,0:1,V3@V7:14,V3@V9:V3@V7/binary-unit:8,V3@Buf10/bitstring>> ->
{V3@V9,V3@Buf10};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> ->
{V3@V9,V3@Buf10}  = decode_fragmented(V3@V7, V3@Buf8, 8),
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
V3@Conv11 = binary:copy(V3@V0),
{V3@Conv11,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'TumData',Term1,Term2},
{Res1,Bytes6}.

enc_TollServiceProviderData(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 10 =:= 0 ->
[<<0:1,Enc1@len@sub:10>>|Val];
Enc1@len < 16384 ->
[<<1:1,2:2,Enc1@len:14>>|Val];
true ->
[<<1:1>>|encode_fragmented(Val, 8)]
end.


dec_TollServiceProviderData(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:10,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
<<V1@V6:V1@Add5/binary-unit:8,V1@Buf7/bitstring>> = V1@Buf4,
{V1@V6,V1@Buf7};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:8,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 8),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
V1@Conv11 = binary:copy(V1@V0),
{V1@Conv11,V1@Buf1}
end.

enc_TollUserData(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(9, Val),
Enc6@element = element(10, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(11, Val),
Enc8@element = element(12, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(13, Val),
if Enc9@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type DDateTime
Enc11@element = element(2, Val),
'Common':enc_DDateTime(Enc11@element)
end,
begin
%% attribute tspId(2) with type OBJECT IDENTIFIER
Enc12@element = element(3, Val),
Enc13@bin = encode_oid(Enc12@element),
Enc13@len = byte_size(Enc13@bin),
if Enc13@len < 128 ->
[Enc13@len|Enc13@bin];
Enc13@len < 16384 ->
[<<2:2,Enc13@len:14>>|Enc13@bin];
true ->
encode_fragmented(Enc13@bin, 8)
end
end,
begin
%% attribute vehicleId(3) with type VehicleId
Enc14@element = element(4, Val),
enc_VehicleId(Enc14@element)
end,
begin
%% attribute vehType(4) with type ENUMERATED
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element =:= motorcycles ->
<<0:1,0:4>>;
Enc15@element =:= passengerCars ->
<<0:1,1:4>>;
Enc15@element =:= fourTireSingleUnit ->
<<0:1,2:4>>;
Enc15@element =:= buses ->
<<0:1,3:4>>;
Enc15@element =:= twoAxleSixTireSingleUnit ->
<<0:1,4:4>>;
Enc15@element =:= threeAxleSingleUnit ->
<<0:1,5:4>>;
Enc15@element =:= fourOrMoreAxleSingleUnit ->
<<0:1,6:4>>;
Enc15@element =:= fourOrLessAxleSingleTrailer ->
<<0:1,7:4>>;
Enc15@element =:= fiveAxleTractorSemitrailer ->
<<0:1,8:4>>;
Enc15@element =:= sixOrMoreAxleSingleTrailer ->
<<0:1,9:4>>;
Enc15@element =:= fiveOrLessAxleMultiTrailer ->
<<0:1,10:4>>;
Enc15@element =:= sixAxleMultiTrailer ->
<<0:1,11:4>>;
Enc15@element =:= sevenOrMoreAxleMultiTrailer ->
<<0:1,12:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc15@element}}})
end
end,
begin
%% attribute vehicleDescription(5) with type VehicleDescription
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
'EfcDataDictionary':enc_VehicleDescription(Enc18@element)
end
end,
begin
%% attribute vehAxlesAndWeight(6) with type VehicleAxlesAndWeightInfo
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleAxlesAndWeightInfo(Enc20@element)
end
end,
begin
%% attribute numOccupants(7) with type INTEGER
Enc22@element = element(8, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@element@sub = Enc22@element - 2,
if Enc22@element@sub bsr 2 =:= 0 ->
<<0:1,Enc22@element@sub:2>>;
true ->
[<<1:1>>|encode_unconstrained_number(Enc22@element)]
end
end
end
end,
begin
%% attribute entryTollPointId(8) with type INTEGER
Enc25@element = element(9, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc25@element@sub = Enc25@element - 1,
if Enc25@element@sub bsr 11 =:= 0 ->
<<Enc25@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc25@element}}})
end
end
end
end,
begin
%% attribute entryTimeStamp(9) with type DDateTime
Enc28@element = element(10, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_DDateTime(Enc28@element)
end
end,
begin
%% attribute locAndTimeStamps(10) with type LocAndTimeStamps
Enc30@element = element(11, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
true ->
enc_LocAndTimeStamps(Enc30@element)
end
end,
begin
%% attribute lastTollPoints(11) with type LastTollPointInfos
Enc32@element = element(12, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
enc_LastTollPointInfos(Enc32@element)
end
end|begin
%% attribute charge(12) with type PaymentFee
Enc34@element = element(13, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
'EfcDataDictionary':enc_PaymentFee(Enc34@element)
end
end].


dec_TollUserData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type DDateTime
{Term1,Bytes3} = 'Common':dec_DDateTime(Bytes2),

%% attribute tspId(2) with type OBJECT IDENTIFIER
{Term2,Bytes4} = begin
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:7,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,0:1,V3@V4:14,V3@Buf5/bitstring>> ->
{V3@V4,V3@Buf5};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
V3@Mul6 = V3@V4 * 16384,
{V3@Mul6,V3@Buf5}
end,
<<V3@V7:V3@V0/binary-unit:8,V3@Buf8/bitstring>> = V3@Buf1,
V3@Conv9 = binary_to_list(V3@V7),
{V3@V10,V3@Buf11}  = {decode_oid(V3@Conv9),V3@Buf8},
{V3@V10,V3@Buf11}
end,

%% attribute vehicleId(3) with type VehicleId
{Term3,Bytes5} = dec_VehicleId(Bytes4),

%% attribute vehType(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 8) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:4,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> motorcycles;
1 -> passengerCars;
2 -> fourTireSingleUnit;
3 -> buses;
4 -> twoAxleSixTireSingleUnit;
5 -> threeAxleSingleUnit;
6 -> fourOrMoreAxleSingleUnit;
7 -> fourOrLessAxleSingleTrailer;
8 -> fiveAxleTractorSemitrailer;
9 -> sixOrMoreAxleSingleTrailer;
10 -> fiveOrLessAxleMultiTrailer;
11 -> sixAxleMultiTrailer;
12 -> sevenOrMoreAxleMultiTrailer;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute vehicleDescription(5) with type VehicleDescription
{Term5,Bytes7} = case (Opt bsr 7) band 1 of
1 ->
'EfcDataDictionary':dec_VehicleDescription(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute vehAxlesAndWeight(6) with type VehicleAxlesAndWeightInfo
{Term6,Bytes8} = case (Opt bsr 6) band 1 of
1 ->
dec_VehicleAxlesAndWeightInfo(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute numOccupants(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 5) band 1 of
1 ->
begin
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:2,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 2,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
<<V5@V10:V5@V3/signed-unit:8,V5@Buf11/bitstring>> = V5@Buf4,
{V5@V10,V5@Buf11}
end,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute entryTollPointId(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V6@V0:11,V6@Buf1/bitstring>> = Bytes9,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute entryTimeStamp(9) with type DDateTime
{Term9,Bytes11} = case (Opt bsr 3) band 1 of
1 ->
'Common':dec_DDateTime(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute locAndTimeStamps(10) with type LocAndTimeStamps
{Term10,Bytes12} = case (Opt bsr 2) band 1 of
1 ->
dec_LocAndTimeStamps(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute lastTollPoints(11) with type LastTollPointInfos
{Term11,Bytes13} = case (Opt bsr 1) band 1 of
1 ->
dec_LastTollPointInfos(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute charge(12) with type PaymentFee
{Term12,Bytes14} = case Opt band 1 of
1 ->
'EfcDataDictionary':dec_PaymentFee(Bytes13);
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% Extensions
{Extensions,Bytes15} = case Ext of
0 -> {<<>>,Bytes14};
1 ->
{V7@V0,V7@Buf1} = case Bytes14 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes16= skipextensions(Bytes15, 1, Extensions),
Res1 = {'TollUserData',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12},
{Res1,Bytes16}.

enc_VehicleAxlesAndWeightInfo(Val) ->
[begin
%% attribute vehNumAxles(1) with type INTEGER
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - 1,
if 0 =< Enc2@element@sub, Enc2@element@sub < 10 ->
<<0:1,0:1,Enc2@element@sub:4>>;
true ->
[<<0:1,1:1>>|encode_unconstrained_number(Enc2@element)]
end
end,
begin
%% attribute vehWeightPerAxle(2) with type SEQUENCE OF
Enc4@element = element(3, Val),
enc_VehicleAxlesAndWeightInfo_vehWeightPerAxle(Enc4@element)
end,
begin
%% attribute vehTotalWeight(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 24 =:= 0 ->
<<Enc5@element:24>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute vehWeightUnits(4) with type ENUMERATED
Enc7@element = element(5, Val),
if Enc7@element =:= pounds ->
<<0:1,0:1>>;
Enc7@element =:= kilograms ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end].
enc_VehicleAxlesAndWeightInfo_vehWeightPerAxle(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
[if 0 =< Enc2@len@sub, Enc2@len@sub < 10 ->
<<0:1,Enc2@len@sub:4>>;
Enc2@len < 128 ->
[<<1:1,Enc2@len:8>>];
Enc2@len < 16384 ->
<<1:1,2:2,Enc2@len:14>>
end|[if Comp bsr 16 =:= 0 ->
<<Comp:16>>;
true ->
exit({error,{asn1,{illegal_integer,Comp}}})
end || Comp <- Val]].



dec_VehicleAxlesAndWeightInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute vehNumAxles(1) with type INTEGER
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:4,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8};
<<1:1,1:1,V2@V7:6,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
V2@Mul9 = V2@V7 * 16384,
{V2@Mul9,V2@Buf8}
end,
<<V2@V10:V2@V3/signed-unit:8,V2@Buf11/bitstring>> = V2@Buf4,
{V2@V10,V2@Buf11}
end,
{V2@V0,V2@Buf1}
end,

%% attribute vehWeightPerAxle(2) with type SEQUENCE OF
{Term2,Bytes3} = dec_VehicleAxlesAndWeightInfo_vehWeightPerAxle(Bytes2),

%% attribute vehTotalWeight(3) with type INTEGER
{Term3,Bytes4} = begin
<<V3@V0:24,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,

%% attribute vehWeightUnits(4) with type ENUMERATED
{Term4,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> pounds;
1 -> kilograms
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'VehicleAxlesAndWeightInfo',Term1,Term2,Term3,Term4},
{Res1,Bytes7}.


dec_VehicleAxlesAndWeightInfo_vehWeightPerAxle(Bytes) ->
%% Length with constraint {{1,10},[]}
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
{V1@Add5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
{V1@V3,V1@Buf4}
end,
dec_components1(V1@V0, V1@Buf1, []).

enc_VehicleId(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute vehicleIdentity(1) with type OCTET STRING
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 16 ->
[<<0:1>>|Enc7@element];
Enc8@len < 128 ->
[<<1:1,Enc8@len:8>>|Enc7@element];
Enc8@len < 16384 ->
[<<1:1,2:2,Enc8@len:14>>|Enc7@element];
true ->
[<<1:1>>|encode_fragmented(Enc7@element, 8)]
end
end
end
end,
begin
%% attribute licPlateState(2) with type IA5String
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@len = length(Enc10@element),
Enc11@bin = encode_chars(Enc10@element, 7),
if Enc11@len =:= 2 ->
Enc11@bin
end
end
end
end,
begin
%% attribute licPlateNumVeh(3) with type IA5String
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@len = length(Enc13@element),
Enc14@bin = encode_chars(Enc13@element, 7),
Enc14@len@sub = Enc14@len - 1,
if 0 =< Enc14@len@sub, Enc14@len@sub < 12 ->
[<<0:1,Enc14@len@sub:4>>|Enc14@bin];
Enc14@len < 128 ->
[<<1:1,Enc14@len:8>>|Enc14@bin];
Enc14@len < 16384 ->
[<<1:1,2:2,Enc14@len:14>>|Enc14@bin];
true ->
[<<1:1>>|encode_fragmented(Enc14@bin, 7)]
end
end
end
end,
begin
%% attribute licPlateNumTrailer(4) with type IA5String
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@len = length(Enc16@element),
Enc17@bin = encode_chars(Enc16@element, 7),
Enc17@len@sub = Enc17@len - 1,
if 0 =< Enc17@len@sub, Enc17@len@sub < 12 ->
[<<0:1,Enc17@len@sub:4>>|Enc17@bin];
Enc17@len < 128 ->
[<<1:1,Enc17@len:8>>|Enc17@bin];
Enc17@len < 16384 ->
[<<1:1,2:2,Enc17@len:14>>|Enc17@bin];
true ->
[<<1:1>>|encode_fragmented(Enc17@bin, 7)]
end
end
end
end|begin
%% attribute userId(5) with type UserId
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
'EfcDataDictionary':enc_UserId(Enc19@element)
end
end].


dec_VehicleId(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute vehicleIdentity(1) with type OCTET STRING
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:16/binary-unit:8,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<1:1,0:1,V3@V7:14,V3@V9:V3@V7/binary-unit:8,V3@Buf10/bitstring>> ->
{V3@V9,V3@Buf10};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> ->
{V3@V9,V3@Buf10}  = decode_fragmented(V3@V7, V3@Buf8, 8),
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
V3@Conv11 = binary:copy(V3@V0),
{V3@Conv11,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute licPlateState(2) with type IA5String
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:2/binary-unit:7,V4@Buf1/bitstring>> = Bytes3,
{V4@V2,V4@Buf3}  = {decode_chars(V4@V0, 7),V4@Buf1},
{V4@V2,V4@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute licPlateNumVeh(3) with type IA5String
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:4,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
<<V5@V6:V5@Add5/binary-unit:7,V5@Buf7/bitstring>> = V5@Buf4,
{V5@V6,V5@Buf7};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@V8:V5@V6/binary-unit:7,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<1:1,0:1,V5@V7:14,V5@V9:V5@V7/binary-unit:7,V5@Buf10/bitstring>> ->
{V5@V9,V5@Buf10};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> ->
{V5@V9,V5@Buf10}  = decode_fragmented(V5@V7, V5@Buf8, 7),
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
{V5@V11,V5@Buf12}  = {decode_chars(V5@V0, 7),V5@Buf1},
{V5@V11,V5@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute licPlateNumTrailer(4) with type IA5String
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:4,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
<<V6@V6:V6@Add5/binary-unit:7,V6@Buf7/bitstring>> = V6@Buf4,
{V6@V6,V6@Buf7};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@V8:V6@V6/binary-unit:7,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<1:1,0:1,V6@V7:14,V6@V9:V6@V7/binary-unit:7,V6@Buf10/bitstring>> ->
{V6@V9,V6@Buf10};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> ->
{V6@V9,V6@Buf10}  = decode_fragmented(V6@V7, V6@Buf8, 7),
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
{V6@V11,V6@Buf12}  = {decode_chars(V6@V0, 7),V6@Buf1},
{V6@V11,V6@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute userId(5) with type UserId
{Term5,Bytes7} = case Opt band 1 of
1 ->
'EfcDataDictionary':dec_UserId(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'VehicleId',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_LocAndTimeStamps(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
[if 0 =< Enc1@len@sub, Enc1@len@sub < 5 ->
<<0:1,Enc1@len@sub:3>>;
Enc1@len < 128 ->
[<<1:1,Enc1@len:8>>];
Enc1@len < 16384 ->
<<1:1,2:2,Enc1@len:14>>
end|[enc_LocAndTimeStamp(Comp) || Comp <- Val]].



dec_LocAndTimeStamps(Bytes) ->
%% Length with constraint {{1,5},[]}
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
{V1@Add5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
{V1@V3,V1@Buf4}
end,
dec_components2(V1@V0, V1@Buf1, []).

enc_LocAndTimeStamp(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute latitude(1) with type INTEGER
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - -900000000,
if 0 =< Enc4@element@sub, Enc4@element@sub < 1800000002 ->
<<Enc4@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute longitude(2) with type INTEGER
Enc6@element = element(3, Val),
Enc6@element@sub = Enc6@element - -1799999999,
if 0 =< Enc6@element@sub, Enc6@element@sub < 3600000001 ->
<<Enc6@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute elevation(3) with type INTEGER
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - -4096,
if Enc8@element@sub bsr 16 =:= 0 ->
<<Enc8@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end,
begin
%% attribute timeStamp(4) with type DDateTime
Enc11@element = element(5, Val),
'Common':enc_DDateTime(Enc11@element)
end|begin
%% attribute currentLane(5) with type INTEGER
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element bsr 8 =:= 0 ->
[Enc12@element];
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end].


dec_LocAndTimeStamp(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute latitude(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:31,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -900000000,
{V3@Add2,V3@Buf1}
end,

%% attribute longitude(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:32,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -1799999999,
{V4@Add2,V4@Buf1}
end,

%% attribute elevation(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -4096,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute timeStamp(4) with type DDateTime
{Term4,Bytes6} = 'Common':dec_DDateTime(Bytes5),

%% attribute currentLane(5) with type INTEGER
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'LocAndTimeStamp',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_LastTollPointInfos(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
[if 0 =< Enc1@len@sub, Enc1@len@sub < 5 ->
<<0:1,Enc1@len@sub:3>>;
Enc1@len < 128 ->
[<<1:1,Enc1@len:8>>];
Enc1@len < 16384 ->
<<1:1,2:2,Enc1@len:14>>
end|[enc_LastTollPointInfo(Comp) || Comp <- Val]].



dec_LastTollPointInfos(Bytes) ->
%% Length with constraint {{1,5},[]}
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
{V1@Add5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
{V1@V3,V1@Buf4}
end,
dec_components3(V1@V0, V1@Buf1, []).

enc_LastTollPointInfo(Val) ->
[<<0:1>>,
begin
%% attribute tollChargerInfo(1) with type TollChargerInfo
Enc2@element = element(2, Val),
'TollAdvertisementMessage':enc_TollChargerInfo(Enc2@element)
end|begin
%% attribute timeStamp(2) with type DDateTime
Enc3@element = element(3, Val),
'Common':enc_DDateTime(Enc3@element)
end].


dec_LastTollPointInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute tollChargerInfo(1) with type TollChargerInfo
{Term1,Bytes2} = 'TollAdvertisementMessage':dec_TollChargerInfo(Bytes1),

%% attribute timeStamp(2) with type DDateTime
{Term2,Bytes3} = 'Common':dec_DDateTime(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8};
<<1:1,1:1,V2@V7:6,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
V2@Mul9 = V2@V7 * 16384,
{V2@Mul9,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V10:V2@V0/bitstring-unit:1,V2@Buf11/bitstring>> = V2@Buf1,
{V2@V10,V2@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
Res1 = {'LastTollPointInfo',Term1,Term2},
{Res1,Bytes5}.

typeinfo('TollUsageMessage') ->
  {sequence,'TollUsageMessage',6,[{<<116,111,108,108,80,111,105,110,116,73,110,102,111>>,{typeinfo,{'TollAdvertisementMessage','TollChargerInfo'}},mandatory},{<<116,101,109,112,73,68>>,octet_string,mandatory},{<<116,117,109,83,101,113,117,101,110,99,101,78,117,109>>,{'INTEGER',{0,127}},mandatory},{<<116,97,109,83,101,113,117,101,110,99,101,78,117,109>>,{'INTEGER',{0,127}},mandatory},{<<116,117,109,72,97,115,104>>,octet_string,'OPTIONAL'},{<<101,110,99,114,121,112,116,101,100,84,117,109,68,97,116,97>>,octet_string,mandatory}]};
typeinfo('TumHash') ->
  octet_string;
typeinfo('EncryptedTumData') ->
  octet_string;
typeinfo('TumData') ->
  {sequence,'TumData',2,[{<<116,111,108,108,85,115,101,114,68,97,116,97>>,{typeinfo,{'TollUsageMessage','TollUserData'}},mandatory},{<<116,111,108,108,83,101,114,118,105,99,101,80,114,111,118,105,100,101,114,68,97,116,97>>,octet_string,'OPTIONAL'}]};
typeinfo('TollServiceProviderData') ->
  octet_string;
typeinfo('TollUserData') ->
  {sequence,'TollUserData',12,[{<<116,105,109,101,83,116,97,109,112>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<116,115,112,73,100>>,'OBJECT IDENTIFIER',mandatory},{<<118,101,104,105,99,108,101,73,100>>,{typeinfo,{'TollUsageMessage','VehicleId'}},mandatory},{<<118,101,104,84,121,112,101>>,{'ENUMERATED_EXT',#{motorcycles => 1,buses => 4,passengerCars => 2,fourTireSingleUnit => 3,twoAxleSixTireSingleUnit => 5,threeAxleSingleUnit => 6,fourOrMoreAxleSingleUnit => 7,fourOrLessAxleSingleTrailer => 8,fiveAxleTractorSemitrailer => 9,sixOrMoreAxleSingleTrailer => 10,fiveOrLessAxleMultiTrailer => 11,sixAxleMultiTrailer => 12,sevenOrMoreAxleMultiTrailer => 13}},'OPTIONAL'},{<<118,101,104,105,99,108,101,68,101,115,99,114,105,112,116,105,111,110>>,{typeinfo,{'EfcDataDictionary','VehicleDescription'}},'OPTIONAL'},{<<118,101,104,65,120,108,101,115,65,110,100,87,101,105,103,104,116>>,{typeinfo,{'TollUsageMessage','VehicleAxlesAndWeightInfo'}},'OPTIONAL'},{<<110,117,109,79,99,99,117,112,97,110,116,115>>,'INTEGER','OPTIONAL'},{<<101,110,116,114,121,84,111,108,108,80,111,105,110,116,73,100>>,{'INTEGER',{1,2048}},'OPTIONAL'},{<<101,110,116,114,121,84,105,109,101,83,116,97,109,112>>,{typeinfo,{'Common','DDateTime'}},'OPTIONAL'},{<<108,111,99,65,110,100,84,105,109,101,83,116,97,109,112,115>>,{typeinfo,{'TollUsageMessage','LocAndTimeStamps'}},'OPTIONAL'},{<<108,97,115,116,84,111,108,108,80,111,105,110,116,115>>,{typeinfo,{'TollUsageMessage','LastTollPointInfos'}},'OPTIONAL'},{<<99,104,97,114,103,101>>,{typeinfo,{'EfcDataDictionary','PaymentFee'}},'OPTIONAL'}]};
typeinfo('VehicleAxlesAndWeightInfo') ->
  {sequence,'VehicleAxlesAndWeightInfo',4,[{<<118,101,104,78,117,109,65,120,108,101,115>>,'INTEGER',mandatory},{<<118,101,104,87,101,105,103,104,116,80,101,114,65,120,108,101>>,{sof,{'INTEGER',{0,65535}}},mandatory},{<<118,101,104,84,111,116,97,108,87,101,105,103,104,116>>,{'INTEGER',{0,16777215}},mandatory},{<<118,101,104,87,101,105,103,104,116,85,110,105,116,115>>,{'ENUMERATED_EXT',#{kilograms => 1,pounds => 0}},mandatory}]};
typeinfo('VehicleId') ->
  {sequence,'VehicleId',5,[{<<118,101,104,105,99,108,101,73,100,101,110,116,105,116,121>>,octet_string,'OPTIONAL'},{<<108,105,99,80,108,97,116,101,83,116,97,116,101>>,string,'OPTIONAL'},{<<108,105,99,80,108,97,116,101,78,117,109,86,101,104>>,string,'OPTIONAL'},{<<108,105,99,80,108,97,116,101,78,117,109,84,114,97,105,108,101,114>>,string,'OPTIONAL'},{<<117,115,101,114,73,100>>,{typeinfo,{'EfcDataDictionary','UserId'}},'OPTIONAL'}]};
typeinfo('LocAndTimeStamps') ->
  {sof,{typeinfo,{'TollUsageMessage','LocAndTimeStamp'}}};
typeinfo('LocAndTimeStamp') ->
  {sequence,'LocAndTimeStamp',5,[{<<108,97,116,105,116,117,100,101>>,{'INTEGER',{-900000000,900000001}},mandatory},{<<108,111,110,103,105,116,117,100,101>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<101,108,101,118,97,116,105,111,110>>,{'INTEGER',{-4096,61439}},'OPTIONAL'},{<<116,105,109,101,83,116,97,109,112>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<99,117,114,114,101,110,116,76,97,110,101>>,{'INTEGER',{0,255}},'OPTIONAL'}]};
typeinfo('LastTollPointInfos') ->
  {sof,{typeinfo,{'TollUsageMessage','LastTollPointInfo'}}};
typeinfo('LastTollPointInfo') ->
  {sequence,'LastTollPointInfo',2,[{<<116,111,108,108,67,104,97,114,103,101,114,73,110,102,111>>,{typeinfo,{'TollAdvertisementMessage','TollChargerInfo'}},mandatory},{<<116,105,109,101,83,116,97,109,112>>,{typeinfo,{'Common','DDateTime'}},mandatory}]};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = dec_LocAndTimeStamp(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_LastTollPointInfo(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

dec_subidentifiers([H | T], Av, Al) when H >= 128 ->
    dec_subidentifiers(T, Av bsl 7 bor H band 127, Al);
dec_subidentifiers([H | T], Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 bor H | Al]);
dec_subidentifiers([], _Av, Al) ->
    lists:reverse(Al).

decode_chars(Val, N) ->
    [ 
     C ||
         <<C:N>> <= Val
    ].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_oid(Octets) ->
    [First | Rest] = dec_subidentifiers(Octets, 0, []),
    Idlist =
        if
            First < 40 ->
                [0, First | Rest];
            First < 80 ->
                [1, First - 40 | Rest];
            true ->
                [2, First - 80 | Rest]
        end,
    list_to_tuple(Idlist).

e_o_e(Num) when Num < 128 ->
    Num bor 128;
e_o_e(Num) ->
    [e_o_e(Num bsr 7), Num band 127 bor 128].

e_object_element(Num) when Num < 128 ->
    [Num];
e_object_element(Num) ->
    [e_o_e(Num bsr 7), Num band 127].

e_object_elements([], Acc) ->
    lists:reverse(Acc);
e_object_elements([H | T], Acc) ->
    e_object_elements(T, [e_object_element(H) | Acc]).

e_object_identifier([E1, E2 | Tail])
    when E1 >= 0, E1 < 2, E2 < 40; E1 =:= 2 ->
    Head = 40 * E1 + E2,
    e_object_elements([Head | Tail], []);
e_object_identifier([_, _ | _Tail] = Oid) ->
    exit({error, {asn1, {illegal_value, Oid}}}).

encode_chars(Val, NumBits) ->
    << 
      <<C:NumBits>> ||
          C <- Val
    >>.

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

encode_oid(Val) when is_tuple(Val) ->
    encode_oid(tuple_to_list(Val));
encode_oid(Val) ->
    iolist_to_binary(e_object_identifier(Val)).

encode_unconstrained_number(Val) when not is_integer(Val) ->
    exit({error, {asn1, {illegal_integer, Val}}});
encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1, Val];
        Val < 256 ->
            [<<2,0>>, Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz, Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>, Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz, 0, Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>, Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len | Oct];
        Len < 16384 ->
            [<<2:2,Len:14>> | Oct]
    end.

enint(-1, [B1 | T]) when B1 > 127 ->
    [B1 | T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255 | Acc]).

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
