%% Generated by the Erlang ASN.1 compiler. Version: 5.3.1
%% Purpose: Erlang record definitions for each named and unnamed
%% SEQUENCE and SET, and macro definitions for each value
%% definition in module Common.

-ifndef(_COMMON_HRL_).
-define(_COMMON_HRL_, true).

-record('RegionalExtension', {
  regionId,
  regExtValue
}).

-record('AccelerationSet4Way', {
  long,
  lat,
  vert,
  yaw
}).

-record('AntennaOffsetSet', {
  antOffsetX,
  antOffsetY,
  antOffsetZ
}).

-record('BrakeSystemStatus', {
  wheelBrakes,
  traction,
  abs,
  scs,
  brakeBoost,
  auxBrakes
}).

-record('BSMcoreData', {
  msgCnt,
  id,
  secMark,
  lat,
  long,
  elev,
  accuracy,
  transmission,
  speed,
  heading,
  angle,
  accelSet,
  brakes,
  size
}).

-record('BumperHeights', {
  front,
  rear
}).

-record('ComputedLane', {
  referenceLaneId,
  offsetXaxis,
  offsetYaxis,
  rotateXY = asn1_NOVALUE,
  scaleXaxis = asn1_NOVALUE,
  scaleYaxis = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('ComputedLane_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('DDate', {
  year,
  month,
  day
}).

-record('DDateTime', {
  year = asn1_NOVALUE,
  month = asn1_NOVALUE,
  day = asn1_NOVALUE,
  hour = asn1_NOVALUE,
  minute = asn1_NOVALUE,
  second = asn1_NOVALUE,
  offset = asn1_NOVALUE
}).

-record('DFullTime', {
  year,
  month,
  day,
  hour,
  minute
}).

-record('DMonthDay', {
  month,
  day
}).

-record('DTime', {
  hour,
  minute,
  second,
  offset = asn1_NOVALUE
}).

-record('DYearMonth', {
  year,
  month
}).

-record('EmergencyDetails', {
  doNotUse,
  sirenUse,
  lightsUse,
  multi,
  events = asn1_NOVALUE,
  responseType = asn1_NOVALUE
  %% with extension mark
}).

-record('FullPositionVector', {
  utcTime = asn1_NOVALUE,
  long,
  lat,
  elevation = asn1_NOVALUE,
  heading = asn1_NOVALUE,
  speed = asn1_NOVALUE,
  posAccuracy = asn1_NOVALUE,
  timeConfidence = asn1_NOVALUE,
  posConfidence = asn1_NOVALUE,
  speedConfidence = asn1_NOVALUE
  %% with extension mark
}).

-record('Header', {
  year = asn1_NOVALUE,
  timeStamp = asn1_NOVALUE,
  secMark = asn1_NOVALUE,
  msgIssueRevision = asn1_NOVALUE
  %% with extension mark
}).

-record('IntersectionReferenceID', {
  region = asn1_NOVALUE,
  id
}).

-record('LaneDataAttribute_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('Node-LLmD-64b', {
  lon,
  lat
}).

-record('Node-XY-20b', {
  x,
  y
}).

-record('Node-XY-22b', {
  x,
  y
}).

-record('Node-XY-24b', {
  x,
  y
}).

-record('Node-XY-26b', {
  x,
  y
}).

-record('Node-XY-28b', {
  x,
  y
}).

-record('Node-XY-32b', {
  x,
  y
}).

-record('NodeAttributeSetXY', {
  localNode = asn1_NOVALUE,
  disabled = asn1_NOVALUE,
  enabled = asn1_NOVALUE,
  data = asn1_NOVALUE,
  dWidth = asn1_NOVALUE,
  dElevation = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('NodeAttributeSetXY_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('NodeOffsetPointXY_regional', {
  regionId,
  regExtValue
}).

-record('NodeXY', {
  delta,
  attributes = asn1_NOVALUE
  %% with extension mark
}).

-record('PathHistory', {
  initialPosition = asn1_NOVALUE,
  currGNSSstatus = asn1_NOVALUE,
  crumbData
  %% with extension mark
}).

-record('PathHistoryPoint', {
  latOffset,
  lonOffset,
  elevationOffset,
  timeOffset,
  speed = asn1_NOVALUE,
  posAccuracy = asn1_NOVALUE,
  heading = asn1_NOVALUE
  %% with extension mark
}).

-record('PathPrediction', {
  radiusOfCurve,
  confidence
  %% with extension mark
}).

-record('Position3D', {
  lat,
  long,
  elevation = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('Position3D_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('PositionalAccuracy', {
  semiMajor,
  semiMinor,
  orientation
}).

-record('PositionConfidenceSet', {
  pos,
  elevation
}).

-record('PrivilegedEvents', {
  doNotUse,
  event
  %% with extension mark
}).

-record('RegulatorySpeedLimit', {
  type,
  speed
}).

-record('RequestorType', {
  role,
  subrole = asn1_NOVALUE,
  request = asn1_NOVALUE,
  iso3883 = asn1_NOVALUE,
  hpmsType = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('RequestorType_regional', {
  regionId,
  regExtValue
}).

-record('RoadSegmentReferenceID', {
  region = asn1_NOVALUE,
  id
}).

-record('RTCMheader', {
  status,
  offsetSet
}).

-record('SpeedandHeadingandThrottleConfidence', {
  heading,
  speed,
  throttle
}).

-record('SchoolBusJ2945Slash1C', {
  flashingAmberLights,
  flashingRedLights,
  studentsCrossingFront = asn1_NOVALUE,
  studentsCrossingBehind = asn1_NOVALUE,
  studentsLoading = asn1_NOVALUE,
  studentsUnloading = asn1_NOVALUE,
  wheelchairLiftInUse = asn1_NOVALUE,
  emergencyExitOpen = asn1_NOVALUE,
  emergencyRequestMedical = asn1_NOVALUE,
  emergencyRequestFire = asn1_NOVALUE,
  emergencyRequestPolice = asn1_NOVALUE
  %% with extension mark
}).

-record('TrailerUnitDescJ2945Slash1B', {
  width,
  length,
  height = asn1_NOVALUE,
  weight = asn1_NOVALUE,
  frontPivot,
  rearPivot = asn1_NOVALUE,
  bumpers = asn1_NOVALUE,
  axles = asn1_NOVALUE
  %% with extension mark
}).

-record('Axles', {
  totalAxles,
  frontAxles = asn1_NOVALUE,
  rearAxles = asn1_NOVALUE
  %% with extension mark
}).

-record('TransmissionAndSpeed', {
  transmisson,
  speed
}).

-record('VehicleClassification', {
  keyType = asn1_NOVALUE,
  role = asn1_NOVALUE,
  iso3883 = asn1_NOVALUE,
  hpmsType = asn1_NOVALUE,
  vehicleType = asn1_NOVALUE,
  responseEquip = asn1_NOVALUE,
  responderType = asn1_NOVALUE,
  fuelType = asn1_NOVALUE,
  regional = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleClassification_regional_SEQOF', {
  regionId,
  regExtValue
}).

-record('VehicleSafetyExtensions', {
  events = asn1_NOVALUE,
  pathHistory = asn1_NOVALUE,
  pathPrediction = asn1_NOVALUE,
  lights = asn1_NOVALUE
  %% with extension mark
}).

-record('VehicleSize', {
  width,
  length
}).

-record('VerticalOffset_regional', {
  regionId,
  regExtValue
}).

-record('WiperSet', {
  statusFront,
  rateFront,
  statusRear = asn1_NOVALUE,
  rateRear = asn1_NOVALUE
}).

-record('FrictionInformation', {
  roadSurfaceDescription,
  dryOrWet = asn1_NOVALUE,
  roadRoughness = asn1_NOVALUE
  %% with extension mark
}).

-record('PortlandCement', {
  type
  %% with extension mark
}).

-record('AsphaltOrTar', {
  type
  %% with extension mark
}).

-record('Gravel', {
  type
  %% with extension mark
}).

-record('Grass', {
  type
  %% with extension mark
}).

-record('Cinders', {
  type
  %% with extension mark
}).

-record('Rock', {
  type
  %% with extension mark
}).

-record('Ice', {
  type
  %% with extension mark
}).

-record('Snow', {
  type
  %% with extension mark
}).

-record('RoadRoughness', {
  meanVerticalVariation,
  verticalVariationStdDev = asn1_NOVALUE,
  meanHorizontalVariation = asn1_NOVALUE,
  horizontalVariationStdDev = asn1_NOVALUE
  %% with extension mark
}).

-define('unknownVehicleClass', 0).
-define('specialVehicleClass', 1).
-define('passenger-Vehicle-TypeUnknown', 10).
-define('passenger-Vehicle-TypeOther', 11).
-define('lightTruck-Vehicle-TypeUnknown', 20).
-define('lightTruck-Vehicle-TypeOther', 21).
-define('truck-Vehicle-TypeUnknown', 25).
-define('truck-Vehicle-TypeOther', 26).
-define('truck-axleCnt2', 27).
-define('truck-axleCnt3', 28).
-define('truck-axleCnt4', 29).
-define('truck-axleCnt4Trailer', 30).
-define('truck-axleCnt5Trailer', 31).
-define('truck-axleCnt6Trailer', 32).
-define('truck-axleCnt5MultiTrailer', 33).
-define('truck-axleCnt6MultiTrailer', 34).
-define('truck-axleCnt7MultiTrailer', 35).
-define('motorcycle-TypeUnknown', 40).
-define('motorcycle-TypeOther', 41).
-define('motorcycle-Cruiser-Standard', 42).
-define('motorcycle-SportUnclad', 43).
-define('motorcycle-SportTouring', 44).
-define('motorcycle-SuperSport', 45).
-define('motorcycle-Touring', 46).
-define('motorcycle-Trike', 47).
-define('motorcycle-wPassengers', 48).
-define('transit-TypeUnknown', 50).
-define('transit-TypeOther', 51).
-define('transit-BRT', 52).
-define('transit-ExpressBus', 53).
-define('transit-LocalBus', 54).
-define('transit-SchoolBus', 55).
-define('transit-FixedGuideway', 56).
-define('transit-Paratransit', 57).
-define('transit-Paratransit-Ambulance', 58).
-define('emergency-TypeUnknown', 60).
-define('emergency-TypeOther', 61).
-define('emergency-Fire-Light-Vehicle', 62).
-define('emergency-Fire-Heavy-Vehicle', 63).
-define('emergency-Fire-Paramedic-Vehicle', 64).
-define('emergency-Fire-Ambulance-Vehicle', 65).
-define('emergency-Police-Light-Vehicle', 66).
-define('emergency-Police-Heavy-Vehicle', 67).
-define('emergency-Other-Responder', 68).
-define('emergency-Other-Ambulance', 69).
-define('otherTraveler-TypeUnknown', 80).
-define('otherTraveler-TypeOther', 81).
-define('otherTraveler-Pedestrian', 82).
-define('otherTraveler-Visually-Disabled', 83).
-define('otherTraveler-Physically-Disabled', 84).
-define('otherTraveler-Bicycle', 85).
-define('otherTraveler-Vulnerable-Roadworker', 86).
-define('infrastructure-TypeUnknown', 90).
-define('infrastructure-Fixed', 91).
-define('infrastructure-Movable', 92).
-define('equipped-CargoTrailer', 93).
-define('reservedMessageId-D', 0).
-define('alaCarteMessage-D', 1).
-define('basicSafetyMessage-D', 2).
-define('basicSafetyMessageVerbose-D', 3).
-define('commonSafetyRequest-D', 4).
-define('emergencyVehicleAlert-D', 5).
-define('intersectionCollision-D', 6).
-define('mapData-D', 7).
-define('nmeaCorrections-D', 8).
-define('probeDataManagement-D', 9).
-define('probeVehicleData-D', 10).
-define('roadSideAlert-D', 11).
-define('rtcmCorrections-D', 12).
-define('signalPhaseAndTimingMessage-D', 13).
-define('signalRequestMessage-D', 14).
-define('signalStatusMessage-D', 15).
-define('travelerInformation-D', 16).
-define('uperFrame-D', 17).
-define('unknownFuel', 0).
-define('gasoline', 1).
-define('ethanol', 2).
-define('diesel', 3).
-define('electric', 4).
-define('hybrid', 5).
-define('hydrogen', 6).
-define('natGasLiquid', 7).
-define('natGasComp', 8).
-define('propane', 9).
-define('noRegion', 0).
-define('addGrpA', 1).
-define('addGrpB', 2).
-define('addGrpC', 3).
-define('addGrpD', 4).
-endif. %% _COMMON_HRL_
