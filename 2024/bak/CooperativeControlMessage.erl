%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in CooperativeControlMessage.

-module('CooperativeControlMessage').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("CooperativeControlMessage.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'CooperativeControlMessage'},
            {options,[{i,"./erl"},uper,jer,verbose,{i,"./asn"},{outdir,"./erl"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_CooperativeControlMessage/1,
'enc_PartII-Id'/1,
enc_LightVehicleCCMExtensions/1,
enc_HeavyTruckCCMExtensions/1,
enc_LongitudinalControlState/1,
enc_AccelTimeConstant/1,
enc_TimeConstant/1,
enc_AxesMovement/1,
enc_RoadGrade/1,
enc_BrakePedalPosition/1,
enc_AcceleratorPedalPosition/1,
enc_Torque/1,
enc_Yaw/1,
enc_Pitch/1,
enc_Roll/1,
enc_PitchRate/1,
enc_RollRate/1,
enc_SeparationDistance/1,
enc_TotalMass/1,
enc_MaxAvailableAcceleration/1,
enc_MaxAvailableDeceleration/1,
enc_CCMFaultMode/1,
enc_ManeuverID/1,
enc_FrontCutIn/1
]).

-export([
dec_CooperativeControlMessage/1,
'dec_PartII-Id'/1,
dec_LightVehicleCCMExtensions/1,
dec_HeavyTruckCCMExtensions/1,
dec_LongitudinalControlState/1,
dec_AccelTimeConstant/1,
dec_TimeConstant/1,
dec_AxesMovement/1,
dec_RoadGrade/1,
dec_BrakePedalPosition/1,
dec_AcceleratorPedalPosition/1,
dec_Torque/1,
dec_Yaw/1,
dec_Pitch/1,
dec_Roll/1,
dec_PitchRate/1,
dec_RollRate/1,
dec_SeparationDistance/1,
dec_TotalMass/1,
dec_MaxAvailableAcceleration/1,
dec_MaxAvailableDeceleration/1,
dec_CCMFaultMode/1,
dec_ManeuverID/1,
dec_FrontCutIn/1
]).

-export([
vehicleSafetyExt/0,
lightVehicleCCMExt/0,
heavyTruckCCMExt/0
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('CooperativeControlMessage', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('CooperativeControlMessage', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('CooperativeControlMessage', Data) -> enc_CooperativeControlMessage(Data);
encode_disp('PartII-Id', Data) -> 'enc_PartII-Id'(Data);
encode_disp('LightVehicleCCMExtensions', Data) -> enc_LightVehicleCCMExtensions(Data);
encode_disp('HeavyTruckCCMExtensions', Data) -> enc_HeavyTruckCCMExtensions(Data);
encode_disp('LongitudinalControlState', Data) -> enc_LongitudinalControlState(Data);
encode_disp('AccelTimeConstant', Data) -> enc_AccelTimeConstant(Data);
encode_disp('TimeConstant', Data) -> enc_TimeConstant(Data);
encode_disp('AxesMovement', Data) -> enc_AxesMovement(Data);
encode_disp('RoadGrade', Data) -> enc_RoadGrade(Data);
encode_disp('BrakePedalPosition', Data) -> enc_BrakePedalPosition(Data);
encode_disp('AcceleratorPedalPosition', Data) -> enc_AcceleratorPedalPosition(Data);
encode_disp('Torque', Data) -> enc_Torque(Data);
encode_disp('Yaw', Data) -> enc_Yaw(Data);
encode_disp('Pitch', Data) -> enc_Pitch(Data);
encode_disp('Roll', Data) -> enc_Roll(Data);
encode_disp('PitchRate', Data) -> enc_PitchRate(Data);
encode_disp('RollRate', Data) -> enc_RollRate(Data);
encode_disp('SeparationDistance', Data) -> enc_SeparationDistance(Data);
encode_disp('TotalMass', Data) -> enc_TotalMass(Data);
encode_disp('MaxAvailableAcceleration', Data) -> enc_MaxAvailableAcceleration(Data);
encode_disp('MaxAvailableDeceleration', Data) -> enc_MaxAvailableDeceleration(Data);
encode_disp('CCMFaultMode', Data) -> enc_CCMFaultMode(Data);
encode_disp('ManeuverID', Data) -> enc_ManeuverID(Data);
encode_disp('FrontCutIn', Data) -> enc_FrontCutIn(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('CooperativeControlMessage', Data) -> dec_CooperativeControlMessage(Data);
decode_disp('PartII-Id', Data) -> 'dec_PartII-Id'(Data);
decode_disp('LightVehicleCCMExtensions', Data) -> dec_LightVehicleCCMExtensions(Data);
decode_disp('HeavyTruckCCMExtensions', Data) -> dec_HeavyTruckCCMExtensions(Data);
decode_disp('LongitudinalControlState', Data) -> dec_LongitudinalControlState(Data);
decode_disp('AccelTimeConstant', Data) -> dec_AccelTimeConstant(Data);
decode_disp('TimeConstant', Data) -> dec_TimeConstant(Data);
decode_disp('AxesMovement', Data) -> dec_AxesMovement(Data);
decode_disp('RoadGrade', Data) -> dec_RoadGrade(Data);
decode_disp('BrakePedalPosition', Data) -> dec_BrakePedalPosition(Data);
decode_disp('AcceleratorPedalPosition', Data) -> dec_AcceleratorPedalPosition(Data);
decode_disp('Torque', Data) -> dec_Torque(Data);
decode_disp('Yaw', Data) -> dec_Yaw(Data);
decode_disp('Pitch', Data) -> dec_Pitch(Data);
decode_disp('Roll', Data) -> dec_Roll(Data);
decode_disp('PitchRate', Data) -> dec_PitchRate(Data);
decode_disp('RollRate', Data) -> dec_RollRate(Data);
decode_disp('SeparationDistance', Data) -> dec_SeparationDistance(Data);
decode_disp('TotalMass', Data) -> dec_TotalMass(Data);
decode_disp('MaxAvailableAcceleration', Data) -> dec_MaxAvailableAcceleration(Data);
decode_disp('MaxAvailableDeceleration', Data) -> dec_MaxAvailableDeceleration(Data);
decode_disp('CCMFaultMode', Data) -> dec_CCMFaultMode(Data);
decode_disp('ManeuverID', Data) -> dec_ManeuverID(Data);
decode_disp('FrontCutIn', Data) -> dec_FrontCutIn(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_CooperativeControlMessage(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute coreData(1) with type BSMcoreData
Enc3@element = element(2, Val),
'Common':enc_BSMcoreData(Enc3@element)
end|begin
%% attribute partII(2) with type SEQUENCE OF
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_CooperativeControlMessage_partII(Enc4@element)
end
end].
enc_CooperativeControlMessage_partII(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_CooperativeControlMessage_partII_CCMPartIIcontent(Comp) || Comp <- Val]]
end.

enc_CooperativeControlMessage_partII_CCMPartIIcontent(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute partII-Id(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 6 =:= 0 ->
<<Enc2@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute partII-Value(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type1(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_CooperativeControlMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute coreData(1) with type BSMcoreData
{Term1,Bytes3} = 'Common':dec_BSMcoreData(Bytes2),

%% attribute partII(2) with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_CooperativeControlMessage_partII(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'CooperativeControlMessage',Term1,Term2},
{Res1,Bytes6}.


dec_CooperativeControlMessage_partII(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components2(V1@Add2, V1@Buf1, []).


dec_CooperativeControlMessage_partII_CCMPartIIcontent(Bytes) ->

%% attribute partII-Id(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute partII-Value(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type3(Tmpterm1, Term1),
Res1 = {'CCMPartIIcontent',Term1,Term2},
{Res1,Bytes2}.

'enc_PartII-Id'(Val) ->
if Val bsr 6 =:= 0 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_PartII-Id'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LightVehicleCCMExtensions(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute longCntrlState(1) with type ENUMERATED
Enc7@element = element(2, Val),
if Enc7@element =:= unavailable ->
<<0:1,0:4>>;
Enc7@element =:= manual ->
<<0:1,1:4>>;
Enc7@element =:= cc ->
<<0:1,2:4>>;
Enc7@element =:= acc ->
<<0:1,3:4>>;
Enc7@element =:= caccOne ->
<<0:1,4:4>>;
Enc7@element =:= caccMultiple ->
<<0:1,5:4>>;
Enc7@element =:= sensorAuto ->
<<0:1,6:4>>;
Enc7@element =:= fusedAuto ->
<<0:1,7:4>>;
Enc7@element =:= manualOver ->
<<0:1,8:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute targetId(2) with type OCTET STRING
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@len = byte_size(Enc9@element),
if Enc10@len =:= 4 ->
Enc9@element
end
end
end
end,
begin
%% attribute accelForecast(3) with type INTEGER
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@element@sub = Enc12@element - -2000,
if 0 =< Enc12@element@sub, Enc12@element@sub < 4002 ->
<<Enc12@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end
end
end,
begin
%% attribute accelTimeConst(4) with type AccelTimeConstant
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_AccelTimeConstant(Enc15@element)
end
end,
begin
%% attribute seperationDist(5) with type INTEGER
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
0 =< Enc17@element, Enc17@element < 2002 ->
<<Enc17@element:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end|begin
%% attribute frontCutIn(6) with type BOOLEAN
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
Enc20@element =:= false ->
<<0:1>>;
Enc20@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc20@element}}})
end
end].


dec_LightVehicleCCMExtensions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute longCntrlState(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unavailable;
1 -> manual;
2 -> cc;
3 -> acc;
4 -> caccOne;
5 -> caccMultiple;
6 -> sensorAuto;
7 -> fusedAuto;
8 -> manualOver;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute targetId(2) with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:4/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute accelForecast(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -2000,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute accelTimeConst(4) with type AccelTimeConstant
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
dec_AccelTimeConstant(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute seperationDist(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:11,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute frontCutIn(6) with type BOOLEAN
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes7,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'LightVehicleCCMExtensions',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.

enc_HeavyTruckCCMExtensions(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
Enc6@element = element(8, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(9, Val),
Enc8@element = element(10, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(11, Val),
Enc10@element = element(12, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(13, Val),
Enc12@element = element(14, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@element = element(15, Val),
Enc14@element = element(16, Val),
if Enc13@element =:= asn1_NOVALUE ->
if Enc14@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc14@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc15@element = element(17, Val),
Enc16@element = element(18, Val),
if Enc15@element =:= asn1_NOVALUE ->
if Enc16@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc16@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@element = element(19, Val),
if Enc17@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute longCntrlState(1) with type ENUMERATED
Enc19@element = element(2, Val),
if Enc19@element =:= unavailable ->
<<0:1,0:4>>;
Enc19@element =:= manual ->
<<0:1,1:4>>;
Enc19@element =:= cc ->
<<0:1,2:4>>;
Enc19@element =:= acc ->
<<0:1,3:4>>;
Enc19@element =:= caccOne ->
<<0:1,4:4>>;
Enc19@element =:= caccMultiple ->
<<0:1,5:4>>;
Enc19@element =:= sensorAuto ->
<<0:1,6:4>>;
Enc19@element =:= fusedAuto ->
<<0:1,7:4>>;
Enc19@element =:= manualOver ->
<<0:1,8:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc19@element}}})
end
end,
begin
%% attribute targetId(2) with type OCTET STRING
Enc21@element = element(3, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@len = byte_size(Enc21@element),
if Enc22@len =:= 4 ->
Enc21@element
end
end
end
end,
begin
%% attribute roadGrade(3) with type INTEGER
Enc24@element = element(4, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc24@element@sub = Enc24@element - -100,
if 0 =< Enc24@element@sub, Enc24@element@sub < 202 ->
Enc24@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc24@element}}})
end
end
end
end,
begin
%% attribute brakePedalPos(4) with type INTEGER
Enc27@element = element(5, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
0 =< Enc27@element, Enc27@element < 202 ->
Enc27@element;
true ->
exit({error,{asn1,{illegal_integer,Enc27@element}}})
end
end,
begin
%% attribute accelPedalPos(5) with type INTEGER
Enc30@element = element(6, Val),
if Enc30@element =:= asn1_NOVALUE ->
[];
0 =< Enc30@element, Enc30@element < 202 ->
Enc30@element;
true ->
exit({error,{asn1,{illegal_integer,Enc30@element}}})
end
end,
begin
%% attribute desiredSpeed(6) with type INTEGER
Enc33@element = element(7, Val),
if Enc33@element =:= asn1_NOVALUE ->
[];
Enc33@element bsr 13 =:= 0 ->
<<Enc33@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc33@element}}})
end
end,
begin
%% attribute desiredAccel(7) with type INTEGER
Enc36@element = element(8, Val),
if Enc36@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc36@element@sub = Enc36@element - -2000,
if 0 =< Enc36@element@sub, Enc36@element@sub < 4002 ->
<<Enc36@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc36@element}}})
end
end
end
end,
begin
%% attribute desiredTorque(8) with type INTEGER
Enc39@element = element(9, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
0 =< Enc39@element, Enc39@element < 602 ->
<<Enc39@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc39@element}}})
end
end,
begin
%% attribute desiredTmRetarderTorque(9) with type INTEGER
Enc42@element = element(10, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
0 =< Enc42@element, Enc42@element < 602 ->
<<Enc42@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc42@element}}})
end
end,
begin
%% attribute desiredEngRetarderTorque(10) with type INTEGER
Enc45@element = element(11, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
0 =< Enc45@element, Enc45@element < 602 ->
<<Enc45@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc45@element}}})
end
end,
begin
%% attribute axesMvmt(11) with type AxesMovement
Enc48@element = element(12, Val),
if Enc48@element =:= asn1_NOVALUE ->
[];
true ->
enc_AxesMovement(Enc48@element)
end
end,
begin
%% attribute separationDist(12) with type INTEGER
Enc50@element = element(13, Val),
if Enc50@element =:= asn1_NOVALUE ->
[];
0 =< Enc50@element, Enc50@element < 2002 ->
<<Enc50@element:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc50@element}}})
end
end,
begin
%% attribute totalMass(13) with type INTEGER
Enc53@element = element(14, Val),
if Enc53@element =:= asn1_NOVALUE ->
[];
0 =< Enc53@element, Enc53@element < 1289 ->
<<Enc53@element:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc53@element}}})
end
end,
begin
%% attribute maxAvailAccel(14) with type INTEGER
Enc56@element = element(15, Val),
if Enc56@element =:= asn1_NOVALUE ->
[];
0 =< Enc56@element, Enc56@element < 2002 ->
<<Enc56@element:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc56@element}}})
end
end,
begin
%% attribute maxAvailDecel(15) with type INTEGER
Enc59@element = element(16, Val),
if Enc59@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc59@element@sub = Enc59@element - -2001,
if 0 =< Enc59@element@sub, Enc59@element@sub < 2002 ->
<<Enc59@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc59@element}}})
end
end
end
end,
begin
%% attribute ccmFaultMode(16) with type BIT STRING
Enc62@element = element(17, Val),
if Enc62@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc63@bs = try bit_string_name2pos_4(Enc62@element) of
Enc63@positions ->
bitstring_from_positions(Enc63@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc62@element, 8)
end,
Enc63@bits = bit_size(Enc63@bs),
if Enc63@bits =:= 8 ->
[<<0:1>>|Enc63@bs];
Enc63@bits < 128 ->
[<<1:1,Enc63@bits:8>>|Enc63@bs];
Enc63@bits < 16384 ->
[<<1:1,2:2,Enc63@bits:14>>|Enc63@bs];
true ->
[<<1:1>>|encode_fragmented(Enc63@bs, 1)]
end
end
end
end,
begin
%% attribute maneuverID(17) with type INTEGER
Enc65@element = element(18, Val),
if Enc65@element =:= asn1_NOVALUE ->
[];
Enc65@element =:= unavailable ->
0;
Enc65@element =:= stayAtRestManCtl ->
1;
Enc65@element =:= stayAtRestAutoLonCtl ->
2;
Enc65@element =:= autoSpdCtlFollowRefTrafAccel ->
4;
Enc65@element =:= transManToAutoSpdCtl ->
5;
Enc65@element =:= stringForm ->
6;
Enc65@element =:= autoJoinString ->
7;
Enc65@element =:= autoCtl ->
8;
Enc65@element =:= increaseGapAutoCtl ->
9;
Enc65@element =:= leftLnChgEndString ->
10;
Enc65@element =:= rightLnChgEndString ->
11;
Enc65@element =:= virtualGapIncDiffLane ->
12;
Enc65@element =:= virtualGapRedDiffLane ->
13;
Enc65@element =:= emgcyIncInterVehDistToStop ->
14;
Enc65@element =:= vehMrgToStringFrmOnramp ->
15;
Enc65@element =:= leftLnChgJoinString ->
16;
Enc65@element =:= rightLnChgJoinString ->
17;
Enc65@element =:= collisionAvoidLnChgOnly ->
19;
Enc65@element =:= collisionAvoidLnChgWthSpdRed ->
20;
Enc65@element =:= collisionAvoidEmgcyStp ->
21;
Enc65@element =:= autoDecelFollowSpdProfile ->
28;
Enc65@element =:= stoppingClosedloopVehFollowCtl ->
31;
Enc65@element =:= stoppngOpenloopDecelCmd ->
32;
Enc65@element =:= brakeToStopManCtl ->
33;
Enc65@element =:= incGapContString ->
34;
Enc65@element =:= incGapRedSpdToStp ->
35;
Enc65@element =:= cruiseCtl ->
36;
Enc65@element =:= adapCruiseCtl ->
41;
Enc65@element =:= coopAdapCruiseCtl ->
42;
Enc65@element =:= manCtl ->
46;
Enc65@element =:= coordAutoBrkForStringWthSvcBrkEngBrk ->
47;
Enc65@element =:= emgcyBrkForStringOnePlusVehWthSvcBrk ->
48;
Enc65@element bsr 8 =:= 0 ->
Enc65@element;
true ->
exit({error,{asn1,{illegal_integer,Enc65@element}}})
end
end|begin
%% attribute frontCutIn(18) with type BOOLEAN
Enc68@element = element(19, Val),
if Enc68@element =:= asn1_NOVALUE ->
[];
Enc68@element =:= false ->
<<0:1>>;
Enc68@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc68@element}}})
end
end].


dec_HeavyTruckCCMExtensions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:17,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute longCntrlState(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> unavailable;
1 -> manual;
2 -> cc;
3 -> acc;
4 -> caccOne;
5 -> caccMultiple;
6 -> sensorAuto;
7 -> fusedAuto;
8 -> manualOver;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute targetId(2) with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 16) band 1 of
1 ->
begin
<<V4@V0:4/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute roadGrade(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 15) band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -100,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute brakePedalPos(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 14) band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute accelPedalPos(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 13) band 1 of
1 ->
begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute desiredSpeed(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 12) band 1 of
1 ->
begin
<<V8@V0:13,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute desiredAccel(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 11) band 1 of
1 ->
begin
<<V9@V0:12,V9@Buf1/bitstring>> = Bytes8,
V9@Add2 = V9@V0 + -2000,
{V9@Add2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute desiredTorque(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 10) band 1 of
1 ->
begin
<<V10@V0:10,V10@Buf1/bitstring>> = Bytes9,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute desiredTmRetarderTorque(9) with type INTEGER
{Term9,Bytes11} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V11@V0:10,V11@Buf1/bitstring>> = Bytes10,
{V11@V0,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute desiredEngRetarderTorque(10) with type INTEGER
{Term10,Bytes12} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V12@V0:10,V12@Buf1/bitstring>> = Bytes11,
{V12@V0,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute axesMvmt(11) with type AxesMovement
{Term11,Bytes13} = case (Opt bsr 7) band 1 of
1 ->
dec_AxesMovement(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute separationDist(12) with type INTEGER
{Term12,Bytes14} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V13@V0:11,V13@Buf1/bitstring>> = Bytes13,
{V13@V0,V13@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% attribute totalMass(13) with type INTEGER
{Term13,Bytes15} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V14@V0:11,V14@Buf1/bitstring>> = Bytes14,
{V14@V0,V14@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute maxAvailAccel(14) with type INTEGER
{Term14,Bytes16} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V15@V0:11,V15@Buf1/bitstring>> = Bytes15,
{V15@V0,V15@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% attribute maxAvailDecel(15) with type INTEGER
{Term15,Bytes17} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V16@V0:11,V16@Buf1/bitstring>> = Bytes16,
V16@Add2 = V16@V0 + -2001,
{V16@Add2,V16@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes16}
end,

%% attribute ccmFaultMode(16) with type BIT STRING
{Term16,Bytes18} = case (Opt bsr 2) band 1 of
1 ->
begin
{V17@V0,V17@Buf1} = case Bytes17 of
<<0:1,V17@V3:8/binary-unit:1,V17@Buf4/bitstring>> ->
{V17@V3,V17@Buf4};
<<1:1,V17@Buf2/bitstring>> ->
{V17@V3,V17@Buf4} = case V17@Buf2 of
<<0:1,V17@V6:7,V17@V8:V17@V6/binary-unit:1,V17@Buf9/bitstring>> ->
{V17@V8,V17@Buf9};
<<1:1,0:1,V17@V7:14,V17@V9:V17@V7/binary-unit:1,V17@Buf10/bitstring>> ->
{V17@V9,V17@Buf10};
<<1:1,1:1,V17@V7:6,V17@Buf8/bitstring>> ->
{V17@V9,V17@Buf10}  = decode_fragmented(V17@V7, V17@Buf8, 1),
{V17@V9,V17@Buf10}
end,
{V17@V3,V17@Buf4}
end,
{V17@V11,V17@Buf12}  = {decode_named_bit_string(V17@V0, [{unavailable,0},{commFault,1},{radarFault,2},{lidarFault,3},{engingBrkCtlFault,4},{serviceBrkCtlFault,5},{transRetarderFault,6},{engineCtlFault,7}]),V17@Buf1},
{V17@V11,V17@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes17}
end,

%% attribute maneuverID(17) with type INTEGER
{Term17,Bytes19} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V18@V0:8,V18@Buf1/bitstring>> = Bytes18,
V18@Int2 = case V18@V0 of
0 -> unavailable;
1 -> stayAtRestManCtl;
2 -> stayAtRestAutoLonCtl;
4 -> autoSpdCtlFollowRefTrafAccel;
5 -> transManToAutoSpdCtl;
6 -> stringForm;
7 -> autoJoinString;
8 -> autoCtl;
9 -> increaseGapAutoCtl;
10 -> leftLnChgEndString;
11 -> rightLnChgEndString;
12 -> virtualGapIncDiffLane;
13 -> virtualGapRedDiffLane;
14 -> emgcyIncInterVehDistToStop;
15 -> vehMrgToStringFrmOnramp;
16 -> leftLnChgJoinString;
17 -> rightLnChgJoinString;
19 -> collisionAvoidLnChgOnly;
20 -> collisionAvoidLnChgWthSpdRed;
21 -> collisionAvoidEmgcyStp;
28 -> autoDecelFollowSpdProfile;
31 -> stoppingClosedloopVehFollowCtl;
32 -> stoppngOpenloopDecelCmd;
33 -> brakeToStopManCtl;
34 -> incGapContString;
35 -> incGapRedSpdToStp;
36 -> cruiseCtl;
41 -> adapCruiseCtl;
42 -> coopAdapCruiseCtl;
46 -> manCtl;
47 -> coordAutoBrkForStringWthSvcBrkEngBrk;
48 -> emgcyBrkForStringOnePlusVehWthSvcBrk;
_ -> V18@V0
end,
{V18@Int2,V18@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes18}
end,

%% attribute frontCutIn(18) with type BOOLEAN
{Term18,Bytes20} = case Opt band 1 of
1 ->
begin
<<V19@V0:1,V19@Buf1/bitstring>> = Bytes19,
V19@Int2 = case V19@V0 of
0 -> false;
1 -> true
end,
{V19@Int2,V19@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes19}
end,

%% Extensions
{Extensions,Bytes21} = case Ext of
0 -> {<<>>,Bytes20};
1 ->
{V20@V0,V20@Buf1} = case Bytes20 of
<<0:1,V20@V3:6,V20@Buf4/bitstring>> ->
V20@Add5 = V20@V3 + 1,
{V20@Add5,V20@Buf4};
<<1:1,V20@Buf2/bitstring>> ->
{V20@V3,V20@Buf4} = case V20@Buf2 of
<<0:1,V20@V6:7,V20@Buf7/bitstring>> when V20@V6 =/= 0 ->
{V20@V6,V20@Buf7};
<<1:1,0:1,V20@V7:14,V20@Buf8/bitstring>> when V20@V7 =/= 0 ->
{V20@V7,V20@Buf8};
<<1:1,1:1,V20@V7:6,V20@Buf8/bitstring>> when V20@V7 =/= 0 ->
V20@Mul9 = V20@V7 * 16384,
{V20@Mul9,V20@Buf8}
end,
{V20@V3,V20@Buf4}
end,
<<V20@V10:V20@V0/bitstring-unit:1,V20@Buf11/bitstring>> = V20@Buf1,
{V20@V10,V20@Buf11}
end,
Bytes22= skipextensions(Bytes21, 1, Extensions),
Res1 = {'HeavyTruckCCMExtensions',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14,Term15,Term16,Term17,Term18},
{Res1,Bytes22}.

enc_LongitudinalControlState(Val) ->
if Val =:= unavailable ->
<<0:1,0:4>>;
Val =:= manual ->
<<0:1,1:4>>;
Val =:= cc ->
<<0:1,2:4>>;
Val =:= acc ->
<<0:1,3:4>>;
Val =:= caccOne ->
<<0:1,4:4>>;
Val =:= caccMultiple ->
<<0:1,5:4>>;
Val =:= sensorAuto ->
<<0:1,6:4>>;
Val =:= fusedAuto ->
<<0:1,7:4>>;
Val =:= manualOver ->
<<0:1,8:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_LongitudinalControlState(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> manual;
2 -> cc;
3 -> acc;
4 -> caccOne;
5 -> caccMultiple;
6 -> sensorAuto;
7 -> fusedAuto;
8 -> manualOver;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_AccelTimeConstant(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute accelTimeConst(1) with type INTEGER
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
Enc3@element bsr 8 =:= 0 ->
Enc3@element;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute decelTimeConst(2) with type INTEGER
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element bsr 8 =:= 0 ->
[Enc6@element];
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end].


dec_AccelTimeConstant(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute accelTimeConst(1) with type INTEGER
{Term1,Bytes2} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute decelTimeConst(2) with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
Res1 = {'AccelTimeConstant',Term1,Term2},
{Res1,Bytes3}.

enc_TimeConstant(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TimeConstant(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AxesMovement(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute yaw(1) with type INTEGER
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
0 =< Enc7@element, Enc7@element < 28801 ->
<<Enc7@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute pitch(2) with type INTEGER
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@element@sub = Enc10@element - -7200,
if 0 =< Enc10@element@sub, Enc10@element@sub < 14402 ->
<<Enc10@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end
end
end,
begin
%% attribute roll(3) with type INTEGER
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@element@sub = Enc13@element - -7200,
if 0 =< Enc13@element@sub, Enc13@element@sub < 14402 ->
<<Enc13@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end
end
end,
begin
%% attribute yawRate(4) with type INTEGER
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - -32767,
if 0 =< Enc16@element@sub, Enc16@element@sub < 65535 ->
<<Enc16@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end
end
end,
begin
%% attribute pitchRate(5) with type INTEGER
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@element@sub = Enc19@element - -3000,
if 0 =< Enc19@element@sub, Enc19@element@sub < 6002 ->
<<Enc19@element@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end
end
end|begin
%% attribute rollRate(6) with type INTEGER
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc22@element@sub = Enc22@element - -3000,
if 0 =< Enc22@element@sub, Enc22@element@sub < 6002 ->
<<Enc22@element@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc22@element}}})
end
end
end
end].


dec_AxesMovement(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute yaw(1) with type INTEGER
{Term1,Bytes2} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V2@V0:15,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute pitch(2) with type INTEGER
{Term2,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:14,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -7200,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute roll(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -7200,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute yawRate(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -32767,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute pitchRate(5) with type INTEGER
{Term5,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:13,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + -3000,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute rollRate(6) with type INTEGER
{Term6,Bytes7} = case Opt band 1 of
1 ->
begin
<<V7@V0:13,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + -3000,
{V7@Add2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,
Res1 = {'AxesMovement',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes7}.

enc_RoadGrade(Val) ->
Val@sub = Val - -100,
if 0 =< Val@sub, Val@sub < 202 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RoadGrade(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -100,
{V1@Add2,V1@Buf1}
end.

enc_BrakePedalPosition(Val) ->
if 0 =< Val, Val < 202 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_BrakePedalPosition(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AcceleratorPedalPosition(Val) ->
if 0 =< Val, Val < 202 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AcceleratorPedalPosition(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Torque(Val) ->
if 0 =< Val, Val < 602 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Torque(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Yaw(Val) ->
if 0 =< Val, Val < 28801 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Yaw(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Pitch(Val) ->
Val@sub = Val - -7200,
if 0 =< Val@sub, Val@sub < 14402 ->
<<Val@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Pitch(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -7200,
{V1@Add2,V1@Buf1}
end.

enc_Roll(Val) ->
Val@sub = Val - -7200,
if 0 =< Val@sub, Val@sub < 14402 ->
<<Val@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Roll(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -7200,
{V1@Add2,V1@Buf1}
end.

enc_PitchRate(Val) ->
Val@sub = Val - -3000,
if 0 =< Val@sub, Val@sub < 6002 ->
<<Val@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_PitchRate(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -3000,
{V1@Add2,V1@Buf1}
end.

enc_RollRate(Val) ->
Val@sub = Val - -3000,
if 0 =< Val@sub, Val@sub < 6002 ->
<<Val@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RollRate(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -3000,
{V1@Add2,V1@Buf1}
end.

enc_SeparationDistance(Val) ->
if 0 =< Val, Val < 2002 ->
<<Val:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SeparationDistance(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TotalMass(Val) ->
if 0 =< Val, Val < 1289 ->
<<Val:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TotalMass(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MaxAvailableAcceleration(Val) ->
if 0 =< Val, Val < 2002 ->
<<Val:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MaxAvailableAcceleration(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MaxAvailableDeceleration(Val) ->
Val@sub = Val - -2001,
if 0 =< Val@sub, Val@sub < 2002 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MaxAvailableDeceleration(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2001,
{V1@Add2,V1@Buf1}
end.

enc_CCMFaultMode(Val) ->
Enc1@bs = try bit_string_name2pos_4(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 8)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_CCMFaultMode(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{commFault,1},{radarFault,2},{lidarFault,3},{engingBrkCtlFault,4},{serviceBrkCtlFault,5},{transRetarderFault,6},{engineCtlFault,7}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_ManeuverID(Val) ->
if Val =:= unavailable ->
[0];
Val =:= stayAtRestManCtl ->
[1];
Val =:= stayAtRestAutoLonCtl ->
[2];
Val =:= autoSpdCtlFollowRefTrafAccel ->
[4];
Val =:= transManToAutoSpdCtl ->
[5];
Val =:= stringForm ->
[6];
Val =:= autoJoinString ->
[7];
Val =:= autoCtl ->
[8];
Val =:= increaseGapAutoCtl ->
[9];
Val =:= leftLnChgEndString ->
[10];
Val =:= rightLnChgEndString ->
[11];
Val =:= virtualGapIncDiffLane ->
[12];
Val =:= virtualGapRedDiffLane ->
[13];
Val =:= emgcyIncInterVehDistToStop ->
[14];
Val =:= vehMrgToStringFrmOnramp ->
[15];
Val =:= leftLnChgJoinString ->
[16];
Val =:= rightLnChgJoinString ->
[17];
Val =:= collisionAvoidLnChgOnly ->
[19];
Val =:= collisionAvoidLnChgWthSpdRed ->
[20];
Val =:= collisionAvoidEmgcyStp ->
[21];
Val =:= autoDecelFollowSpdProfile ->
[28];
Val =:= stoppingClosedloopVehFollowCtl ->
[31];
Val =:= stoppngOpenloopDecelCmd ->
[32];
Val =:= brakeToStopManCtl ->
[33];
Val =:= incGapContString ->
[34];
Val =:= incGapRedSpdToStp ->
[35];
Val =:= cruiseCtl ->
[36];
Val =:= adapCruiseCtl ->
[41];
Val =:= coopAdapCruiseCtl ->
[42];
Val =:= manCtl ->
[46];
Val =:= coordAutoBrkForStringWthSvcBrkEngBrk ->
[47];
Val =:= emgcyBrkForStringOnePlusVehWthSvcBrk ->
[48];
Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ManeuverID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> stayAtRestManCtl;
2 -> stayAtRestAutoLonCtl;
4 -> autoSpdCtlFollowRefTrafAccel;
5 -> transManToAutoSpdCtl;
6 -> stringForm;
7 -> autoJoinString;
8 -> autoCtl;
9 -> increaseGapAutoCtl;
10 -> leftLnChgEndString;
11 -> rightLnChgEndString;
12 -> virtualGapIncDiffLane;
13 -> virtualGapRedDiffLane;
14 -> emgcyIncInterVehDistToStop;
15 -> vehMrgToStringFrmOnramp;
16 -> leftLnChgJoinString;
17 -> rightLnChgJoinString;
19 -> collisionAvoidLnChgOnly;
20 -> collisionAvoidLnChgWthSpdRed;
21 -> collisionAvoidEmgcyStp;
28 -> autoDecelFollowSpdProfile;
31 -> stoppingClosedloopVehFollowCtl;
32 -> stoppngOpenloopDecelCmd;
33 -> brakeToStopManCtl;
34 -> incGapContString;
35 -> incGapRedSpdToStp;
36 -> cruiseCtl;
41 -> adapCruiseCtl;
42 -> coopAdapCruiseCtl;
46 -> manCtl;
47 -> coordAutoBrkForStringWthSvcBrkEngBrk;
48 -> emgcyBrkForStringOnePlusVehWthSvcBrk;
_ -> V1@V0
end,
{V1@Int2,V1@Buf1}
end.

enc_FrontCutIn(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_FrontCutIn(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

vehicleSafetyExt() ->
0.

lightVehicleCCMExt() ->
1.

heavyTruckCCMExt() ->
2.

typeinfo('CooperativeControlMessage') ->
  {sequence,'CooperativeControlMessage',2,[{<<99,111,114,101,68,97,116,97>>,{typeinfo,{'Common','BSMcoreData'}},mandatory},{<<112,97,114,116,73,73>>,{sof,{sequence,'CooperativeControlMessage_partII_SEQOF',2,[{<<112,97,114,116,73,73,45,73,100>>,{'INTEGER',{0,63}},mandatory},{<<112,97,114,116,73,73,45,86,97,108,117,101>>,{'ObjClassFieldType',{'partII-Id',1},{componentrelation,{objectset,126,{'Externaltypereference',undefined,'CooperativeControlMessage',internal_object_set_argument_1}},[{outermost,[{'Externalvaluereference',126,'CooperativeControlMessage','partII-Id'}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('PartII-Id') ->
  {'INTEGER',{0,63}};
typeinfo('LightVehicleCCMExtensions') ->
  {sequence,'LightVehicleCCMExtensions',6,[{<<108,111,110,103,67,110,116,114,108,83,116,97,116,101>>,{'ENUMERATED_EXT',#{manual => 1,unavailable => 0,cc => 2,acc => 3,caccOne => 4,caccMultiple => 5,sensorAuto => 6,fusedAuto => 7,manualOver => 8}},mandatory},{<<116,97,114,103,101,116,73,100>>,octet_string,'OPTIONAL'},{<<97,99,99,101,108,70,111,114,101,99,97,115,116>>,{'INTEGER',{-2000,2001}},'OPTIONAL'},{<<97,99,99,101,108,84,105,109,101,67,111,110,115,116>>,{typeinfo,{'CooperativeControlMessage','AccelTimeConstant'}},'OPTIONAL'},{<<115,101,112,101,114,97,116,105,111,110,68,105,115,116>>,{'INTEGER',{0,2001}},'OPTIONAL'},{<<102,114,111,110,116,67,117,116,73,110>>,'BOOLEAN','OPTIONAL'}]};
typeinfo('HeavyTruckCCMExtensions') ->
  {sequence,'HeavyTruckCCMExtensions',18,[{<<108,111,110,103,67,110,116,114,108,83,116,97,116,101>>,{'ENUMERATED_EXT',#{manual => 1,unavailable => 0,cc => 2,acc => 3,caccOne => 4,caccMultiple => 5,sensorAuto => 6,fusedAuto => 7,manualOver => 8}},mandatory},{<<116,97,114,103,101,116,73,100>>,octet_string,'OPTIONAL'},{<<114,111,97,100,71,114,97,100,101>>,{'INTEGER',{-100,101}},'OPTIONAL'},{<<98,114,97,107,101,80,101,100,97,108,80,111,115>>,{'INTEGER',{0,201}},'OPTIONAL'},{<<97,99,99,101,108,80,101,100,97,108,80,111,115>>,{'INTEGER',{0,201}},'OPTIONAL'},{<<100,101,115,105,114,101,100,83,112,101,101,100>>,{'INTEGER',{0,8191}},'OPTIONAL'},{<<100,101,115,105,114,101,100,65,99,99,101,108>>,{'INTEGER',{-2000,2001}},'OPTIONAL'},{<<100,101,115,105,114,101,100,84,111,114,113,117,101>>,{'INTEGER',{0,601}},'OPTIONAL'},{<<100,101,115,105,114,101,100,84,109,82,101,116,97,114,100,101,114,84,111,114,113,117,101>>,{'INTEGER',{0,601}},'OPTIONAL'},{<<100,101,115,105,114,101,100,69,110,103,82,101,116,97,114,100,101,114,84,111,114,113,117,101>>,{'INTEGER',{0,601}},'OPTIONAL'},{<<97,120,101,115,77,118,109,116>>,{typeinfo,{'CooperativeControlMessage','AxesMovement'}},'OPTIONAL'},{<<115,101,112,97,114,97,116,105,111,110,68,105,115,116>>,{'INTEGER',{0,2001}},'OPTIONAL'},{<<116,111,116,97,108,77,97,115,115>>,{'INTEGER',{0,1288}},'OPTIONAL'},{<<109,97,120,65,118,97,105,108,65,99,99,101,108>>,{'INTEGER',{0,2001}},'OPTIONAL'},{<<109,97,120,65,118,97,105,108,68,101,99,101,108>>,{'INTEGER',{-2001,0}},'OPTIONAL'},{<<99,99,109,70,97,117,108,116,77,111,100,101>>,{bit_string_nnl,[{unavailable,0},{commFault,1},{radarFault,2},{lidarFault,3},{engingBrkCtlFault,4},{serviceBrkCtlFault,5},{transRetarderFault,6},{engineCtlFault,7}]},'OPTIONAL'},{<<109,97,110,101,117,118,101,114,73,68>>,{{'INTEGER_NNL',[{unavailable,0},{stayAtRestManCtl,1},{stayAtRestAutoLonCtl,2},{autoSpdCtlFollowRefTrafAccel,4},{transManToAutoSpdCtl,5},{stringForm,6},{autoJoinString,7},{autoCtl,8},{increaseGapAutoCtl,9},{leftLnChgEndString,10},{rightLnChgEndString,11},{virtualGapIncDiffLane,12},{virtualGapRedDiffLane,13},{emgcyIncInterVehDistToStop,14},{vehMrgToStringFrmOnramp,15},{leftLnChgJoinString,16},{rightLnChgJoinString,17},{collisionAvoidLnChgOnly,19},{collisionAvoidLnChgWthSpdRed,20},{collisionAvoidEmgcyStp,21},{autoDecelFollowSpdProfile,28},{stoppingClosedloopVehFollowCtl,31},{stoppngOpenloopDecelCmd,32},{brakeToStopManCtl,33},{incGapContString,34},{incGapRedSpdToStp,35},{cruiseCtl,36},{adapCruiseCtl,41},{coopAdapCruiseCtl,42},{manCtl,46},{coordAutoBrkForStringWthSvcBrkEngBrk,47},{emgcyBrkForStringOnePlusVehWthSvcBrk,48}]},{0,255}},'OPTIONAL'},{<<102,114,111,110,116,67,117,116,73,110>>,'BOOLEAN','OPTIONAL'}]};
typeinfo('LongitudinalControlState') ->
  {'ENUMERATED_EXT',#{manual => 1,unavailable => 0,cc => 2,acc => 3,caccOne => 4,caccMultiple => 5,sensorAuto => 6,fusedAuto => 7,manualOver => 8}};
typeinfo('AccelTimeConstant') ->
  {sequence,'AccelTimeConstant',2,[{<<97,99,99,101,108,84,105,109,101,67,111,110,115,116>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<100,101,99,101,108,84,105,109,101,67,111,110,115,116>>,{'INTEGER',{0,255}},'OPTIONAL'}]};
typeinfo('TimeConstant') ->
  {'INTEGER',{0,255}};
typeinfo('AxesMovement') ->
  {sequence,'AxesMovement',6,[{<<121,97,119>>,{'INTEGER',{0,28800}},'OPTIONAL'},{<<112,105,116,99,104>>,{'INTEGER',{-7200,7201}},'OPTIONAL'},{<<114,111,108,108>>,{'INTEGER',{-7200,7201}},'OPTIONAL'},{<<121,97,119,82,97,116,101>>,{'INTEGER',{-32767,32767}},'OPTIONAL'},{<<112,105,116,99,104,82,97,116,101>>,{'INTEGER',{-3000,3001}},'OPTIONAL'},{<<114,111,108,108,82,97,116,101>>,{'INTEGER',{-3000,3001}},'OPTIONAL'}]};
typeinfo('RoadGrade') ->
  {'INTEGER',{-100,101}};
typeinfo('BrakePedalPosition') ->
  {'INTEGER',{0,201}};
typeinfo('AcceleratorPedalPosition') ->
  {'INTEGER',{0,201}};
typeinfo('Torque') ->
  {'INTEGER',{0,601}};
typeinfo('Yaw') ->
  {'INTEGER',{0,28800}};
typeinfo('Pitch') ->
  {'INTEGER',{-7200,7201}};
typeinfo('Roll') ->
  {'INTEGER',{-7200,7201}};
typeinfo('PitchRate') ->
  {'INTEGER',{-3000,3001}};
typeinfo('RollRate') ->
  {'INTEGER',{-3000,3001}};
typeinfo('SeparationDistance') ->
  {'INTEGER',{0,2001}};
typeinfo('TotalMass') ->
  {'INTEGER',{0,1288}};
typeinfo('MaxAvailableAcceleration') ->
  {'INTEGER',{0,2001}};
typeinfo('MaxAvailableDeceleration') ->
  {'INTEGER',{-2001,0}};
typeinfo('CCMFaultMode') ->
  {bit_string_nnl,[{unavailable,0},{commFault,1},{radarFault,2},{lidarFault,3},{engingBrkCtlFault,4},{serviceBrkCtlFault,5},{transRetarderFault,6},{engineCtlFault,7}]};
typeinfo('ManeuverID') ->
  {{'INTEGER_NNL',[{unavailable,0},{stayAtRestManCtl,1},{stayAtRestAutoLonCtl,2},{autoSpdCtlFollowRefTrafAccel,4},{transManToAutoSpdCtl,5},{stringForm,6},{autoJoinString,7},{autoCtl,8},{increaseGapAutoCtl,9},{leftLnChgEndString,10},{rightLnChgEndString,11},{virtualGapIncDiffLane,12},{virtualGapRedDiffLane,13},{emgcyIncInterVehDistToStop,14},{vehMrgToStringFrmOnramp,15},{leftLnChgJoinString,16},{rightLnChgJoinString,17},{collisionAvoidLnChgOnly,19},{collisionAvoidLnChgWthSpdRed,20},{collisionAvoidEmgcyStp,21},{autoDecelFollowSpdProfile,28},{stoppingClosedloopVehFollowCtl,31},{stoppngOpenloopDecelCmd,32},{brakeToStopManCtl,33},{incGapContString,34},{incGapRedSpdToStp,35},{cruiseCtl,36},{adapCruiseCtl,41},{coopAdapCruiseCtl,42},{manCtl,46},{coordAutoBrkForStringWthSvcBrkEngBrk,47},{emgcyBrkForStringOnePlusVehWthSvcBrk,48}]},{0,255}};
typeinfo('FrontCutIn') ->
  'BOOLEAN';
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_4([unavailable | T]) ->
    [0 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([commFault | T]) ->
    [1 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([radarFault | T]) ->
    [2 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([lidarFault | T]) ->
    [3 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([engingBrkCtlFault | T]) ->
    [4 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([serviceBrkCtlFault | T]) ->
    [5 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([transRetarderFault | T]) ->
    [6 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([engineCtlFault | T]) ->
    [7 | bit_string_name2pos_4(T)];
bit_string_name2pos_4([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_4(T)];
bit_string_name2pos_4([]) ->
    [];
bit_string_name2pos_4(_) ->
    throw(invalid).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = dec_CooperativeControlMessage_partII_CCMPartIIcontent(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_os_Type3(Bytes, Id) when Id =:= 0 ->
{Term,_} = 'Common':dec_VehicleSafetyExtensions(Bytes),
Term;
dec_os_Type3(Bytes, Id) when Id =:= 1 ->
{Term,_} = dec_LightVehicleCCMExtensions(Bytes),
Term;
dec_os_Type3(Bytes, Id) when Id =:= 2 ->
{Term,_} = dec_HeavyTruckCCMExtensions(Bytes),
Term;
dec_os_Type3(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Type1(Val, Id) ->
if Id =:= 0 ->
'Common':enc_VehicleSafetyExtensions(Val);
Id =:= 1 ->
enc_LightVehicleCCMExtensions(Val);
Id =:= 2 ->
enc_HeavyTruckCCMExtensions(Val);
true ->
open_type_to_binary(Val)
end.

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

open_type_to_binary({asn1_OPENTYPE, Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
