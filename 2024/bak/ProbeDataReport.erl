%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in ProbeDataReport.

-module('ProbeDataReport').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("ProbeDataReport.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'ProbeDataReport'},
            {options,[{i,"./erl"},uper,jer,verbose,{i,"./asn"},{outdir,"./erl"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_ProbeDataReportMessage/1,
enc_ReportCharacteristics/1,
enc_RptVehicleClass/1,
enc_RptDevType/1,
enc_RptInstantaneousRecords/1,
enc_RptInstantaneousRecord/1,
enc_RptVelocity/1,
enc_RptInstantaneousRecordData/1,
enc_RptAveragedAndSummaryRecord/1,
enc_RptAvgAndSummaryRecordData/1,
enc_RptIntervalEvents/1,
enc_RptVehicleReport/1,
enc_RptTransitVehData/1,
enc_RptVehicleEvents/1,
enc_RptDriverAlertsAndWarnings/1,
enc_RptKinematicEvents/1,
enc_RptEvents/1,
enc_RptHysteresisRecord/1,
enc_RptHysteresis/1,
enc_RptRoadwayEvents/1,
enc_RptRoadRoughness/1,
enc_MeanVariation/1,
enc_StdDev/1,
enc_RptTrafficSigEncounters/1,
enc_RptTrafficMetrics/1,
enc_RptCommSysPerfEvents/1,
enc_RptWiperStatus/1,
enc_RptAveragedRecord/1,
enc_RptSummaryRecord/1,
enc_RptEmissions/1,
enc_RptLocOfStops/1
]).

-export([
dec_ProbeDataReportMessage/1,
dec_ReportCharacteristics/1,
dec_RptVehicleClass/1,
dec_RptDevType/1,
dec_RptInstantaneousRecords/1,
dec_RptInstantaneousRecord/1,
dec_RptVelocity/1,
dec_RptInstantaneousRecordData/1,
dec_RptAveragedAndSummaryRecord/1,
dec_RptAvgAndSummaryRecordData/1,
dec_RptIntervalEvents/1,
dec_RptVehicleReport/1,
dec_RptTransitVehData/1,
dec_RptVehicleEvents/1,
dec_RptDriverAlertsAndWarnings/1,
dec_RptKinematicEvents/1,
dec_RptEvents/1,
dec_RptHysteresisRecord/1,
dec_RptHysteresis/1,
dec_RptRoadwayEvents/1,
dec_RptRoadRoughness/1,
dec_MeanVariation/1,
dec_StdDev/1,
dec_RptTrafficSigEncounters/1,
dec_RptTrafficMetrics/1,
dec_RptCommSysPerfEvents/1,
dec_RptWiperStatus/1,
dec_RptAveragedRecord/1,
dec_RptSummaryRecord/1,
dec_RptEmissions/1,
dec_RptLocOfStops/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('ProbeDataReport', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('ProbeDataReport', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('ProbeDataReportMessage', Data) -> enc_ProbeDataReportMessage(Data);
encode_disp('ReportCharacteristics', Data) -> enc_ReportCharacteristics(Data);
encode_disp('RptVehicleClass', Data) -> enc_RptVehicleClass(Data);
encode_disp('RptDevType', Data) -> enc_RptDevType(Data);
encode_disp('RptInstantaneousRecords', Data) -> enc_RptInstantaneousRecords(Data);
encode_disp('RptInstantaneousRecord', Data) -> enc_RptInstantaneousRecord(Data);
encode_disp('RptVelocity', Data) -> enc_RptVelocity(Data);
encode_disp('RptInstantaneousRecordData', Data) -> enc_RptInstantaneousRecordData(Data);
encode_disp('RptAveragedAndSummaryRecord', Data) -> enc_RptAveragedAndSummaryRecord(Data);
encode_disp('RptAvgAndSummaryRecordData', Data) -> enc_RptAvgAndSummaryRecordData(Data);
encode_disp('RptIntervalEvents', Data) -> enc_RptIntervalEvents(Data);
encode_disp('RptVehicleReport', Data) -> enc_RptVehicleReport(Data);
encode_disp('RptTransitVehData', Data) -> enc_RptTransitVehData(Data);
encode_disp('RptVehicleEvents', Data) -> enc_RptVehicleEvents(Data);
encode_disp('RptDriverAlertsAndWarnings', Data) -> enc_RptDriverAlertsAndWarnings(Data);
encode_disp('RptKinematicEvents', Data) -> enc_RptKinematicEvents(Data);
encode_disp('RptEvents', Data) -> enc_RptEvents(Data);
encode_disp('RptHysteresisRecord', Data) -> enc_RptHysteresisRecord(Data);
encode_disp('RptHysteresis', Data) -> enc_RptHysteresis(Data);
encode_disp('RptRoadwayEvents', Data) -> enc_RptRoadwayEvents(Data);
encode_disp('RptRoadRoughness', Data) -> enc_RptRoadRoughness(Data);
encode_disp('MeanVariation', Data) -> enc_MeanVariation(Data);
encode_disp('StdDev', Data) -> enc_StdDev(Data);
encode_disp('RptTrafficSigEncounters', Data) -> enc_RptTrafficSigEncounters(Data);
encode_disp('RptTrafficMetrics', Data) -> enc_RptTrafficMetrics(Data);
encode_disp('RptCommSysPerfEvents', Data) -> enc_RptCommSysPerfEvents(Data);
encode_disp('RptWiperStatus', Data) -> enc_RptWiperStatus(Data);
encode_disp('RptAveragedRecord', Data) -> enc_RptAveragedRecord(Data);
encode_disp('RptSummaryRecord', Data) -> enc_RptSummaryRecord(Data);
encode_disp('RptEmissions', Data) -> enc_RptEmissions(Data);
encode_disp('RptLocOfStops', Data) -> enc_RptLocOfStops(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('ProbeDataReportMessage', Data) -> dec_ProbeDataReportMessage(Data);
decode_disp('ReportCharacteristics', Data) -> dec_ReportCharacteristics(Data);
decode_disp('RptVehicleClass', Data) -> dec_RptVehicleClass(Data);
decode_disp('RptDevType', Data) -> dec_RptDevType(Data);
decode_disp('RptInstantaneousRecords', Data) -> dec_RptInstantaneousRecords(Data);
decode_disp('RptInstantaneousRecord', Data) -> dec_RptInstantaneousRecord(Data);
decode_disp('RptVelocity', Data) -> dec_RptVelocity(Data);
decode_disp('RptInstantaneousRecordData', Data) -> dec_RptInstantaneousRecordData(Data);
decode_disp('RptAveragedAndSummaryRecord', Data) -> dec_RptAveragedAndSummaryRecord(Data);
decode_disp('RptAvgAndSummaryRecordData', Data) -> dec_RptAvgAndSummaryRecordData(Data);
decode_disp('RptIntervalEvents', Data) -> dec_RptIntervalEvents(Data);
decode_disp('RptVehicleReport', Data) -> dec_RptVehicleReport(Data);
decode_disp('RptTransitVehData', Data) -> dec_RptTransitVehData(Data);
decode_disp('RptVehicleEvents', Data) -> dec_RptVehicleEvents(Data);
decode_disp('RptDriverAlertsAndWarnings', Data) -> dec_RptDriverAlertsAndWarnings(Data);
decode_disp('RptKinematicEvents', Data) -> dec_RptKinematicEvents(Data);
decode_disp('RptEvents', Data) -> dec_RptEvents(Data);
decode_disp('RptHysteresisRecord', Data) -> dec_RptHysteresisRecord(Data);
decode_disp('RptHysteresis', Data) -> dec_RptHysteresis(Data);
decode_disp('RptRoadwayEvents', Data) -> dec_RptRoadwayEvents(Data);
decode_disp('RptRoadRoughness', Data) -> dec_RptRoadRoughness(Data);
decode_disp('MeanVariation', Data) -> dec_MeanVariation(Data);
decode_disp('StdDev', Data) -> dec_StdDev(Data);
decode_disp('RptTrafficSigEncounters', Data) -> dec_RptTrafficSigEncounters(Data);
decode_disp('RptTrafficMetrics', Data) -> dec_RptTrafficMetrics(Data);
decode_disp('RptCommSysPerfEvents', Data) -> dec_RptCommSysPerfEvents(Data);
decode_disp('RptWiperStatus', Data) -> dec_RptWiperStatus(Data);
decode_disp('RptAveragedRecord', Data) -> dec_RptAveragedRecord(Data);
decode_disp('RptSummaryRecord', Data) -> dec_RptSummaryRecord(Data);
decode_disp('RptEmissions', Data) -> dec_RptEmissions(Data);
decode_disp('RptLocOfStops', Data) -> dec_RptLocOfStops(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_ProbeDataReportMessage(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute configId(1) with type INTEGER
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - 1,
if 0 =< Enc5@element@sub, Enc5@element@sub < 255 ->
Enc5@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute reportChar(2) with type ReportCharacteristics
Enc7@element = element(3, Val),
enc_ReportCharacteristics(Enc7@element)
end,
begin
%% attribute roadAuthorityID(3) with type RoadAuthorityID
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_RoadAuthorityID(Enc8@element)
end
end,
begin
%% attribute instantaneousRecs(4) with type RptInstantaneousRecords
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptInstantaneousRecords(Enc10@element)
end
end|begin
%% attribute avgAndSumRec(5) with type RptAveragedAndSummaryRecord
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptAveragedAndSummaryRecord(Enc12@element)
end
end].


dec_ProbeDataReportMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute configId(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute reportChar(2) with type ReportCharacteristics
{Term2,Bytes4} = dec_ReportCharacteristics(Bytes3),

%% attribute roadAuthorityID(3) with type RoadAuthorityID
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
'Common':dec_RoadAuthorityID(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute instantaneousRecs(4) with type RptInstantaneousRecords
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_RptInstantaneousRecords(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute avgAndSumRec(5) with type RptAveragedAndSummaryRecord
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_RptAveragedAndSummaryRecord(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V4@V0,V4@Buf1} = case Bytes7 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'ProbeDataReportMessage',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_ReportCharacteristics(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(8, Val),
Enc4@element = element(9, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(10, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type DDateTime
Enc7@element = element(2, Val),
'Common':enc_DDateTime(Enc7@element)
end,
begin
%% attribute position(2) with type Position3D
Enc8@element = element(3, Val),
'Common':enc_Position3D(Enc8@element)
end,
begin
%% attribute posAccuracy(3) with type PositionalAccuracy
Enc9@element = element(4, Val),
'Common':enc_PositionalAccuracy(Enc9@element)
end,
begin
%% attribute velocity(4) with type RptVelocity
Enc10@element = element(5, Val),
enc_RptVelocity(Enc10@element)
end,
begin
%% attribute vehicleClass(5) with type ENUMERATED
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element =:= motorcycles ->
<<0:1,0:4>>;
Enc11@element =:= passengerCars ->
<<0:1,1:4>>;
Enc11@element =:= other2axle4tireSingleUnitVehs ->
<<0:1,2:4>>;
Enc11@element =:= buses ->
<<0:1,3:4>>;
Enc11@element =:= twoAxle6TireSingleUnitTrucks ->
<<0:1,4:4>>;
Enc11@element =:= threeAxleSingleUnitTrucks ->
<<0:1,5:4>>;
Enc11@element =:= fourOrMoreAxleSingleUnitTrucks ->
<<0:1,6:4>>;
Enc11@element =:= fourOrFewerAxleSingleTrailerTrucks ->
<<0:1,7:4>>;
Enc11@element =:= fiveAxleSingleTrailerTrucks ->
<<0:1,8:4>>;
Enc11@element =:= sixOrMoreAxleSingleTrailerTrucks ->
<<0:1,9:4>>;
Enc11@element =:= fiveOrFewerAxleMultiTrailerTrucks ->
<<0:1,10:4>>;
Enc11@element =:= sixAxleMultiTrailerTrucks ->
<<0:1,11:4>>;
Enc11@element =:= sevenOrMoreAxleMultiTrailerTrucks ->
<<0:1,12:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc11@element}}})
end
end,
begin
%% attribute devType(6) with type RptDevType
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptDevType(Enc14@element)
end
end,
begin
%% attribute vehicleSize(7) with type VehicleSize
Enc16@element = element(8, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_VehicleSize(Enc16@element)
end
end,
begin
%% attribute vehicleMass(8) with type INTEGER
Enc18@element = element(9, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element bsr 8 =:= 0 ->
Enc18@element;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end|begin
%% attribute vehPassengerCount(9) with type INTEGER
Enc21@element = element(10, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@element@sub = Enc21@element - 1,
if 0 =< Enc21@element@sub, Enc21@element@sub < 255 ->
[Enc21@element@sub];
true ->
exit({error,{asn1,{illegal_integer,Enc21@element}}})
end
end
end
end].


dec_ReportCharacteristics(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type DDateTime
{Term1,Bytes3} = 'Common':dec_DDateTime(Bytes2),

%% attribute position(2) with type Position3D
{Term2,Bytes4} = 'Common':dec_Position3D(Bytes3),

%% attribute posAccuracy(3) with type PositionalAccuracy
{Term3,Bytes5} = 'Common':dec_PositionalAccuracy(Bytes4),

%% attribute velocity(4) with type RptVelocity
{Term4,Bytes6} = dec_RptVelocity(Bytes5),

%% attribute vehicleClass(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:4,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> motorcycles;
1 -> passengerCars;
2 -> other2axle4tireSingleUnitVehs;
3 -> buses;
4 -> twoAxle6TireSingleUnitTrucks;
5 -> threeAxleSingleUnitTrucks;
6 -> fourOrMoreAxleSingleUnitTrucks;
7 -> fourOrFewerAxleSingleTrailerTrucks;
8 -> fiveAxleSingleTrailerTrucks;
9 -> sixOrMoreAxleSingleTrailerTrucks;
10 -> fiveOrFewerAxleMultiTrailerTrucks;
11 -> sixAxleMultiTrailerTrucks;
12 -> sevenOrMoreAxleMultiTrailerTrucks;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute devType(6) with type RptDevType
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
dec_RptDevType(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute vehicleSize(7) with type VehicleSize
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
'Common':dec_VehicleSize(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute vehicleMass(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes9,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute vehPassengerCount(9) with type INTEGER
{Term9,Bytes11} = case Opt band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes10,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V6@V0,V6@Buf1} = case Bytes11 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'ReportCharacteristics',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.

enc_RptVehicleClass(Val) ->
if Val =:= motorcycles ->
<<0:1,0:4>>;
Val =:= passengerCars ->
<<0:1,1:4>>;
Val =:= other2axle4tireSingleUnitVehs ->
<<0:1,2:4>>;
Val =:= buses ->
<<0:1,3:4>>;
Val =:= twoAxle6TireSingleUnitTrucks ->
<<0:1,4:4>>;
Val =:= threeAxleSingleUnitTrucks ->
<<0:1,5:4>>;
Val =:= fourOrMoreAxleSingleUnitTrucks ->
<<0:1,6:4>>;
Val =:= fourOrFewerAxleSingleTrailerTrucks ->
<<0:1,7:4>>;
Val =:= fiveAxleSingleTrailerTrucks ->
<<0:1,8:4>>;
Val =:= sixOrMoreAxleSingleTrailerTrucks ->
<<0:1,9:4>>;
Val =:= fiveOrFewerAxleMultiTrailerTrucks ->
<<0:1,10:4>>;
Val =:= sixAxleMultiTrailerTrucks ->
<<0:1,11:4>>;
Val =:= sevenOrMoreAxleMultiTrailerTrucks ->
<<0:1,12:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RptVehicleClass(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> motorcycles;
1 -> passengerCars;
2 -> other2axle4tireSingleUnitVehs;
3 -> buses;
4 -> twoAxle6TireSingleUnitTrucks;
5 -> threeAxleSingleUnitTrucks;
6 -> fourOrMoreAxleSingleUnitTrucks;
7 -> fourOrFewerAxleSingleTrailerTrucks;
8 -> fiveAxleSingleTrailerTrucks;
9 -> sixOrMoreAxleSingleTrailerTrucks;
10 -> fiveOrFewerAxleMultiTrailerTrucks;
11 -> sixAxleMultiTrailerTrucks;
12 -> sevenOrMoreAxleMultiTrailerTrucks;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RptDevType(Val) ->
[begin
Enc1@element = element(4, Val),
%% attribute oemOrAftermarket(1) with type BOOLEAN
Enc3@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc3@element =:= false ->
<<0:1,0:1,0:1>>;
Enc3@element =:= true ->
<<0:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc3@element}}})
end;
true ->
if Enc3@element =:= false ->
<<0:1,1:1,0:1>>;
Enc3@element =:= true ->
<<0:1,1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc3@element}}})
end
end
end|begin
%% attribute canOrIvnConnected(2) with type BOOLEAN
Enc5@element = element(3, Val),
%% attribute mcoCapable(3) with type BOOLEAN
Enc7@element = element(4, Val),
if Enc5@element =:= false ->
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
Enc7@element =:= false ->
<<0:1,0:1>>;
Enc7@element =:= true ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc7@element}}})
end;
Enc5@element =:= true ->
if Enc7@element =:= asn1_NOVALUE ->
<<1:1>>;
Enc7@element =:= false ->
<<1:1,0:1>>;
Enc7@element =:= true ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc7@element}}})
end;
true ->
exit({error,{asn1,{illegal_boolean,Enc5@element}}})
end
end].


dec_RptDevType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute oemOrAftermarket(1) with type BOOLEAN
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute canOrIvnConnected(2) with type BOOLEAN
{Term2,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute mcoCapable(3) with type BOOLEAN
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'RptDevType',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_RptInstantaneousRecords(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
[if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[<<0:1,Enc1@len@sub:8>>];
Enc1@len < 16384 ->
<<1:1,2:2,Enc1@len:14>>
end|[enc_RptInstantaneousRecord(Comp) || Comp <- Val]].



dec_RptInstantaneousRecords(Bytes) ->
%% Length with constraint {{1,255},[]}
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
{V1@Add5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
{V1@V3,V1@Buf4}
end,
dec_components1(V1@V0, V1@Buf1, []).

enc_RptInstantaneousRecord(Val) ->
[begin
Enc1@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute timeOfInstantRec(1) with type DDateTime
Enc3@element = element(2, Val),
'Common':enc_DDateTime(Enc3@element)
end,
begin
%% attribute locOfInstantRec(2) with type Position3D
Enc4@element = element(3, Val),
'Common':enc_Position3D(Enc4@element)
end,
begin
%% attribute accOfPosition(3) with type PositionalAccuracy
Enc5@element = element(4, Val),
'Common':enc_PositionalAccuracy(Enc5@element)
end,
begin
%% attribute velOfInstantRec(4) with type RptVelocity
Enc6@element = element(5, Val),
enc_RptVelocity(Enc6@element)
end|begin
%% attribute record(5) with type RptInstantaneousRecordData
Enc7@element = element(6, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptInstantaneousRecordData(Enc7@element)
end
end].


dec_RptInstantaneousRecord(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeOfInstantRec(1) with type DDateTime
{Term1,Bytes3} = 'Common':dec_DDateTime(Bytes2),

%% attribute locOfInstantRec(2) with type Position3D
{Term2,Bytes4} = 'Common':dec_Position3D(Bytes3),

%% attribute accOfPosition(3) with type PositionalAccuracy
{Term3,Bytes5} = 'Common':dec_PositionalAccuracy(Bytes4),

%% attribute velOfInstantRec(4) with type RptVelocity
{Term4,Bytes6} = dec_RptVelocity(Bytes5),

%% attribute record(5) with type RptInstantaneousRecordData
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_RptInstantaneousRecordData(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V3@V0,V3@Buf1} = case Bytes7 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'RptInstantaneousRecord',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_RptVelocity(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute speed(1) with type INTEGER
Enc4@element = element(2, Val),
if Enc4@element bsr 13 =:= 0 ->
<<Enc4@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute speedStdDev(2) with type INTEGER
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
0 =< Enc6@element, Enc6@element < 10001 ->
<<Enc6@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end|begin
%% attribute heading(3) with type INTEGER
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
0 =< Enc9@element, Enc9@element < 28801 ->
<<Enc9@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end].


dec_RptVelocity(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute speed(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:13,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute speedStdDev(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute heading(3) with type INTEGER
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:15,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'RptVelocity',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_RptInstantaneousRecordData(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= intervalEvents ->
[<<0:1,0:2>>|enc_RptIntervalEvents(ChoiceVal)];
ChoiceTag =:= vehEvents ->
[<<0:1,1:2>>|enc_RptVehicleEvents(ChoiceVal)];
ChoiceTag =:= roadwayEvents ->
[<<0:1,2:2>>|enc_RptRoadwayEvents(ChoiceVal)];
ChoiceTag =:= commSysPerfEvents ->
[<<0:1,3:2>>|enc_RptCommSysPerfEvents(ChoiceVal)]
end.


dec_RptInstantaneousRecordData(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RptIntervalEvents(Bytes2)
end,
{{intervalEvents,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_RptVehicleEvents(Bytes2)
end,
{{vehEvents,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_RptRoadwayEvents(Bytes2)
end,
{{roadwayEvents,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_RptCommSysPerfEvents(Bytes2)
end,
{{commSysPerfEvents,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptAveragedAndSummaryRecord(Val) ->
[<<0:1>>,
begin
%% attribute startTime(1) with type DDateTime
Enc2@element = element(2, Val),
'Common':enc_DDateTime(Enc2@element)
end,
begin
%% attribute startLoc(2) with type Position3D
Enc3@element = element(3, Val),
'Common':enc_Position3D(Enc3@element)
end,
begin
%% attribute startAccOfPos(3) with type PositionalAccuracy
Enc4@element = element(4, Val),
'Common':enc_PositionalAccuracy(Enc4@element)
end,
begin
%% attribute endTime(4) with type DDateTime
Enc5@element = element(5, Val),
'Common':enc_DDateTime(Enc5@element)
end,
begin
%% attribute endLoc(5) with type Position3D
Enc6@element = element(6, Val),
'Common':enc_Position3D(Enc6@element)
end,
begin
%% attribute endAccOfPos(6) with type PositionalAccuracy
Enc7@element = element(7, Val),
'Common':enc_PositionalAccuracy(Enc7@element)
end|begin
%% attribute record(7) with type RptAvgAndSummaryRecordData
Enc8@element = element(8, Val),
enc_RptAvgAndSummaryRecordData(Enc8@element)
end].


dec_RptAveragedAndSummaryRecord(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute startTime(1) with type DDateTime
{Term1,Bytes2} = 'Common':dec_DDateTime(Bytes1),

%% attribute startLoc(2) with type Position3D
{Term2,Bytes3} = 'Common':dec_Position3D(Bytes2),

%% attribute startAccOfPos(3) with type PositionalAccuracy
{Term3,Bytes4} = 'Common':dec_PositionalAccuracy(Bytes3),

%% attribute endTime(4) with type DDateTime
{Term4,Bytes5} = 'Common':dec_DDateTime(Bytes4),

%% attribute endLoc(5) with type Position3D
{Term5,Bytes6} = 'Common':dec_Position3D(Bytes5),

%% attribute endAccOfPos(6) with type PositionalAccuracy
{Term6,Bytes7} = 'Common':dec_PositionalAccuracy(Bytes6),

%% attribute record(7) with type RptAvgAndSummaryRecordData
{Term7,Bytes8} = dec_RptAvgAndSummaryRecordData(Bytes7),

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V2@V0,V2@Buf1} = case Bytes8 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8};
<<1:1,1:1,V2@V7:6,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
V2@Mul9 = V2@V7 * 16384,
{V2@Mul9,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V10:V2@V0/bitstring-unit:1,V2@Buf11/bitstring>> = V2@Buf1,
{V2@V10,V2@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'RptAveragedAndSummaryRecord',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes10}.

enc_RptAvgAndSummaryRecordData(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= averagedRecord ->
[<<0:1,0:1>>|enc_RptAveragedRecord(ChoiceVal)];
ChoiceTag =:= summaryRecord ->
[<<0:1,1:1>>|enc_RptSummaryRecord(ChoiceVal)]
end.


dec_RptAvgAndSummaryRecordData(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RptAveragedRecord(Bytes2)
end,
{{averagedRecord,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_RptSummaryRecord(Bytes2)
end,
{{summaryRecord,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptIntervalEvents(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute wiperStatus(1) with type ENUMERATED
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element =:= off ->
<<0:1,0:2>>;
Enc7@element =:= low ->
<<0:1,1:2>>;
Enc7@element =:= medium ->
<<0:1,2:2>>;
Enc7@element =:= high ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute vehCount(2) with type INTEGER
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
0 =< Enc10@element, Enc10@element < 10001 ->
<<Enc10@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute weatherData(3) with type RptVehicleReport
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptVehicleReport(Enc13@element)
end
end,
begin
%% attribute transitVehData(4) with type RptTransitVehData
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptTransitVehData(Enc15@element)
end
end|begin
%% attribute numOfOccupants(5) with type INTEGER
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 8 =:= 0 ->
[Enc17@element];
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end].


dec_RptIntervalEvents(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute wiperStatus(1) with type ENUMERATED
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> off;
1 -> low;
2 -> medium;
3 -> high
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute vehCount(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute weatherData(3) with type RptVehicleReport
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_RptVehicleReport(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute transitVehData(4) with type RptTransitVehData
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_RptTransitVehData(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute numOfOccupants(5) with type INTEGER
{Term5,Bytes7} = case Opt band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes6,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'RptIntervalEvents',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.

enc_RptVehicleReport(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|['RoadWeatherMessage':enc_NtcipEssData(Comp) || Comp <- Val]]
end.



dec_RptVehicleReport(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components2(V1@Add2, V1@Buf1, []).

enc_RptTransitVehData(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute currNumPasngers(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
Enc5@element bsr 8 =:= 0 ->
Enc5@element;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute avgNumPasngers(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 8 =:= 0 ->
Enc8@element;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end|begin
%% attribute trnstVehSchAdh(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - -200,
if Enc11@element@sub bsr 8 =:= 0 ->
[Enc11@element@sub];
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end
end
end].


dec_RptTransitVehData(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute currNumPasngers(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute avgNumPasngers(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute trnstVehSchAdh(3) with type INTEGER
{Term3,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -200,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'RptTransitVehData',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_RptVehicleEvents(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= headLights ->
<<0:1,0:4>>;
ChoiceTag =:= fogLights ->
<<0:1,1:4>>;
ChoiceTag =:= hazardLights ->
<<0:1,2:4>>;
ChoiceTag =:= kinematicEvents ->
[<<0:1,3:4>>|enc_RptKinematicEvents(ChoiceVal)];
ChoiceTag =:= wiperStatusChange ->
<<0:1,4:4>>;
ChoiceTag =:= lowSpeed ->
<<0:1,5:4>>;
ChoiceTag =:= resumedSpeed ->
<<0:1,6:4>>;
ChoiceTag =:= vehEntrsExitsRegion ->
<<0:1,7:4>>;
ChoiceTag =:= emerVehDetect ->
<<0:1,8:4>>;
ChoiceTag =:= emerVehLightBar ->
<<0:1,9:4>>;
ChoiceTag =:= reqTspEvp ->
<<0:1,10:4>>;
ChoiceTag =:= transitVehPassCnt ->
<<0:1,11:4>>;
ChoiceTag =:= transitVehDoor ->
<<0:1,12:4>>;
ChoiceTag =:= v2xMsgRecption ->
<<0:1,13:4>>;
ChoiceTag =:= driverAlertsAndWarnings ->
[<<0:1,14:4>>|enc_RptDriverAlertsAndWarnings(ChoiceVal)]
end.


dec_RptVehicleEvents(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{headLights,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{fogLights,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{hazardLights,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_RptKinematicEvents(Bytes2)
end,
{{kinematicEvents,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{wiperStatusChange,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{lowSpeed,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{resumedSpeed,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{vehEntrsExitsRegion,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{emerVehDetect,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{emerVehLightBar,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{reqTspEvp,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transitVehPassCnt,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{transitVehDoor,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{v2xMsgRecption,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
dec_RptDriverAlertsAndWarnings(Bytes2)
end,
{{driverAlertsAndWarnings,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptDriverAlertsAndWarnings(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= j2945Slash1Eebl ->
<<0:1,0:4>>;
ChoiceTag =:= j2945Slash1Fcw ->
<<0:1,1:4>>;
ChoiceTag =:= j2945Slash1BswLcw ->
<<0:1,2:4>>;
ChoiceTag =:= j2945Slash1Ima ->
<<0:1,3:4>>;
ChoiceTag =:= j2945Slash1Lta ->
<<0:1,4:4>>;
ChoiceTag =:= j2945Slash1Clw ->
<<0:1,5:4>>;
ChoiceTag =:= redLightViolationWarn ->
<<0:1,6:4>>;
ChoiceTag =:= emerVehAlert ->
<<0:1,7:4>>;
ChoiceTag =:= otherAlert ->
<<0:1,8:4>>;
ChoiceTag =:= otherWarning ->
<<0:1,9:4>>
end.


dec_RptDriverAlertsAndWarnings(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{j2945Slash1Eebl,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{j2945Slash1Fcw,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{j2945Slash1BswLcw,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{j2945Slash1Ima,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{j2945Slash1Lta,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{j2945Slash1Clw,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{redLightViolationWarn,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{emerVehAlert,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{otherAlert,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{otherWarning,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptKinematicEvents(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute events(1) with type RptEvents
Enc3@element = element(2, Val),
enc_RptEvents(Enc3@element)
end|begin
%% attribute hysteresis(2) with type RptHysteresisRecord
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptHysteresisRecord(Enc4@element)
end
end].


dec_RptKinematicEvents(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute events(1) with type RptEvents
{Term1,Bytes3} = dec_RptEvents(Bytes2),

%% attribute hysteresis(2) with type RptHysteresisRecord
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_RptHysteresisRecord(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'RptKinematicEvents',Term1,Term2},
{Res1,Bytes6}.

enc_RptEvents(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= absActive ->
if ChoiceVal =:= false ->
<<0:1,0:3,0:1>>;
ChoiceVal =:= true ->
<<0:1,0:3,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,ChoiceVal}}})
end;
ChoiceTag =:= tractionCtlLoss ->
if ChoiceVal =:= false ->
<<0:1,1:3,0:1>>;
ChoiceVal =:= true ->
<<0:1,1:3,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,ChoiceVal}}})
end;
ChoiceTag =:= stabilityCtlActive ->
if ChoiceVal =:= false ->
<<0:1,2:3,0:1>>;
ChoiceVal =:= true ->
<<0:1,2:3,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,ChoiceVal}}})
end;
ChoiceTag =:= hardBraking ->
if ChoiceVal =:= false ->
<<0:1,3:3,0:1>>;
ChoiceVal =:= true ->
<<0:1,3:3,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,ChoiceVal}}})
end;
ChoiceTag =:= swerve ->
if ChoiceVal =:= false ->
<<0:1,4:3,0:1>>;
ChoiceVal =:= true ->
<<0:1,4:3,1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,ChoiceVal}}})
end
end.


dec_RptEvents(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end
end,
{{absActive,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end
end,
{{tractionCtlLoss,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes2,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end
end,
{{stabilityCtlActive,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes2,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end
end,
{{hardBraking,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes2,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end
end,
{{swerve,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptHysteresisRecord(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 20 ->
[<<Enc1@len@sub:5>>|[enc_RptHysteresis(Comp) || Comp <- Val]]
end.



dec_RptHysteresisRecord(Bytes) ->
%% Length with constraint {1,20}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components3(V1@Add2, V1@Buf1, []).

enc_RptHysteresis(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute time(1) with type DTime
Enc3@element = element(2, Val),
'Common':enc_DTime(Enc3@element)
end,
begin
%% attribute position(2) with type Position3D
Enc4@element = element(3, Val),
'Common':enc_Position3D(Enc4@element)
end,
begin
%% attribute positionalAccuracy(3) with type PositionalAccuracy
Enc5@element = element(4, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'Common':enc_PositionalAccuracy(Enc5@element)
end
end|begin
%% attribute velocity(4) with type RptVelocity
Enc7@element = element(5, Val),
enc_RptVelocity(Enc7@element)
end].


dec_RptHysteresis(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute time(1) with type DTime
{Term1,Bytes3} = 'Common':dec_DTime(Bytes2),

%% attribute position(2) with type Position3D
{Term2,Bytes4} = 'Common':dec_Position3D(Bytes3),

%% attribute positionalAccuracy(3) with type PositionalAccuracy
{Term3,Bytes5} = case Opt band 1 of
1 ->
'Common':dec_PositionalAccuracy(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute velocity(4) with type RptVelocity
{Term4,Bytes6} = dec_RptVelocity(Bytes5),

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'RptHysteresis',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_RptRoadwayEvents(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= obstacleDetected ->
<<0:1,0:4>>;
ChoiceTag =:= adverseRoadSurface ->
[<<0:1,1:4>>|enc_RptRoadRoughness(ChoiceVal)];
ChoiceTag =:= trfsigEncounters ->
[<<0:1,2:4>>|enc_RptTrafficSigEncounters(ChoiceVal)];
ChoiceTag =:= trfsigLightOut ->
<<0:1,3:4>>;
ChoiceTag =:= trfsigRoadGeoMismatch ->
<<0:1,4:4>>;
ChoiceTag =:= roadsignDetection ->
<<0:1,5:4>>;
ChoiceTag =:= lowRoadsignReflect ->
<<0:1,6:4>>;
ChoiceTag =:= lowLaneMarkReflect ->
<<0:1,7:4>>;
ChoiceTag =:= roadsignIncnstncy ->
<<0:1,8:4>>;
ChoiceTag =:= laneGeoIncnstncy ->
<<0:1,9:4>>;
ChoiceTag =:= incidentDetect ->
<<0:1,10:4>>;
ChoiceTag =:= workZoneCharDetect ->
<<0:1,11:4>>;
ChoiceTag =:= inclWeatherDetect ->
<<0:1,12:4>>;
ChoiceTag =:= railrdCrossActiv ->
<<0:1,13:4>>;
ChoiceTag =:= drawBridgeActiv ->
<<0:1,14:4>>
end.


dec_RptRoadwayEvents(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{obstacleDetected,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_RptRoadRoughness(Bytes2)
end,
{{adverseRoadSurface,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_RptTrafficSigEncounters(Bytes2)
end,
{{trfsigEncounters,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigLightOut,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigRoadGeoMismatch,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{roadsignDetection,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{lowRoadsignReflect,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{lowLaneMarkReflect,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{roadsignIncnstncy,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{laneGeoIncnstncy,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{incidentDetect,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{workZoneCharDetect,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{inclWeatherDetect,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{railrdCrossActiv,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{drawBridgeActiv,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptRoadRoughness(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute meanVerticalVariation(1) with type INTEGER
Enc5@element = element(2, Val),
if 0 =< Enc5@element, Enc5@element < 25001 ->
<<Enc5@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute verticalVariationStdDev(2) with type INTEGER
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
0 =< Enc7@element, Enc7@element < 10001 ->
<<Enc7@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute meanHorizontalVariation(3) with type INTEGER
Enc10@element = element(4, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
0 =< Enc10@element, Enc10@element < 25001 ->
<<Enc10@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end|begin
%% attribute horizontalVariationStdDev(4) with type INTEGER
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
0 =< Enc13@element, Enc13@element < 10001 ->
<<Enc13@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end].


dec_RptRoadRoughness(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute meanVerticalVariation(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute verticalVariationStdDev(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute meanHorizontalVariation(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:15,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute horizontalVariationStdDev(4) with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:14,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'RptRoadRoughness',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_MeanVariation(Val) ->
if 0 =< Val, Val < 25001 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MeanVariation(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_StdDev(Val) ->
if 0 =< Val, Val < 10001 ->
<<Val:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_StdDev(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RptTrafficSigEncounters(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute intersectionID(1) with type INTEGER
Enc3@element = element(2, Val),
if Enc3@element =:= asn1_NOVALUE ->
[];
Enc3@element bsr 16 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute trafficMetrics(2) with type RptTrafficMetrics
Enc6@element = element(3, Val),
enc_RptTrafficMetrics(Enc6@element)
end].


dec_RptTrafficSigEncounters(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute intersectionID(1) with type INTEGER
{Term1,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute trafficMetrics(2) with type RptTrafficMetrics
{Term2,Bytes4} = dec_RptTrafficMetrics(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'RptTrafficSigEncounters',Term1,Term2},
{Res1,Bytes6}.

enc_RptTrafficMetrics(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= trfsigApproachDelay ->
<<0:1,0:3>>;
ChoiceTag =:= trfsigApproachSpeed ->
<<0:1,1:3>>;
ChoiceTag =:= trfsigArrivalGreen ->
<<0:1,2:3>>;
ChoiceTag =:= trfsigArrivalRed ->
<<0:1,3:3>>;
ChoiceTag =:= trfsigPedDelay ->
<<0:1,4:3>>;
ChoiceTag =:= trfsigSpatMismatch ->
<<0:1,5:3>>;
ChoiceTag =:= trfsigSpatTimingError ->
<<0:1,6:3>>
end.


dec_RptTrafficMetrics(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigApproachDelay,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigApproachSpeed,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigArrivalGreen,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigArrivalRed,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigPedDelay,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigSpatMismatch,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{trfsigSpatTimingError,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptCommSysPerfEvents(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'j2945-1ChanBusy' ->
<<0:1,0:4>>;
ChoiceTag =:= rfDataRsuInfo ->
begin
Enc3@len = byte_size(ChoiceVal),
if Enc3@len =:= 6 ->
[<<0:1,1:4>>|ChoiceVal]
end
end;
ChoiceTag =:= numOfRsusObserved ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 255 ->
[<<0:1,2:4,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= rfV2xJamDetect ->
<<0:1,3:4>>;
ChoiceTag =:= 'j2945-1VehDens' ->
<<0:1,4:4>>;
ChoiceTag =:= 'j2945-1CqiBelow' ->
<<0:1,5:4>>;
ChoiceTag =:= 'j2945-1TrackingError' ->
<<0:1,6:4>>;
ChoiceTag =:= gnssHdopExceeds ->
<<0:1,7:4>>;
ChoiceTag =:= gnssErrElipse ->
<<0:1,8:4>>;
ChoiceTag =:= gnssSatsBelow ->
<<0:1,9:4>>;
ChoiceTag =:= jammingDetect ->
<<0:1,10:4>>
end.


dec_RptCommSysPerfEvents(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'j2945-1ChanBusy',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:6/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end
end,
{{rfDataRsuInfo,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes2,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end
end,
{{numOfRsusObserved,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{rfV2xJamDetect,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'j2945-1VehDens',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'j2945-1CqiBelow',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{'j2945-1TrackingError',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gnssHdopExceeds,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gnssErrElipse,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{gnssSatsBelow,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{jammingDetect,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_RptWiperStatus(Val) ->
if Val =:= off ->
<<0:1,0:2>>;
Val =:= low ->
<<0:1,1:2>>;
Val =:= medium ->
<<0:1,2:2>>;
Val =:= high ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RptWiperStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> off;
1 -> low;
2 -> medium;
3 -> high
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RptAveragedRecord(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute avgSpeed(1) with type INTEGER
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element bsr 13 =:= 0 ->
<<Enc9@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute speedStdDev(2) with type INTEGER
Enc12@element = element(3, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 10001 ->
<<Enc12@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute avgStopDuration(3) with type INTEGER
Enc15@element = element(4, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc15@element@sub = Enc15@element - 1,
if 0 =< Enc15@element@sub, Enc15@element@sub < 36000 ->
<<Enc15@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end
end
end,
begin
%% attribute avgStopStdDev(4) with type INTEGER
Enc18@element = element(5, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
0 =< Enc18@element, Enc18@element < 10001 ->
<<Enc18@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end,
begin
%% attribute avgFuelConsumption(5) with type INTEGER
Enc21@element = element(6, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc21@element@sub = Enc21@element - 1,
if 0 =< Enc21@element@sub, Enc21@element@sub < 255 ->
Enc21@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc21@element}}})
end
end
end
end,
begin
%% attribute avgEmissions(6) with type RptEmissions
Enc24@element = element(7, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptEmissions(Enc24@element)
end
end|begin
%% attribute avgNumOfOccupants(7) with type INTEGER
Enc26@element = element(8, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@element@sub = Enc26@element - 1,
if 0 =< Enc26@element@sub, Enc26@element@sub < 255 ->
[Enc26@element@sub];
true ->
exit({error,{asn1,{illegal_integer,Enc26@element}}})
end
end
end
end].


dec_RptAveragedRecord(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute avgSpeed(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V3@V0:13,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute speedStdDev(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute avgStopDuration(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute avgStopStdDev(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V6@V0:14,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute avgFuelConsumption(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 1,
{V7@Add2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute avgEmissions(6) with type RptEmissions
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
dec_RptEmissions(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute avgNumOfOccupants(7) with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V8@V0:8,V8@Buf1/bitstring>> = Bytes8,
V8@Add2 = V8@V0 + 1,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V9@V0,V9@Buf1} = case Bytes9 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
V9@Mul9 = V9@V7 * 16384,
{V9@Mul9,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V10:V9@V0/bitstring-unit:1,V9@Buf11/bitstring>> = V9@Buf1,
{V9@V10,V9@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'RptAveragedRecord',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.

enc_RptSummaryRecord(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
Enc10@element = element(11, Val),
if Enc9@element =:= asn1_NOVALUE ->
if Enc10@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@element = element(12, Val),
Enc12@element = element(13, Val),
if Enc11@element =:= asn1_NOVALUE ->
if Enc12@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc12@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute regTravelTime(1) with type INTEGER
Enc14@element = element(2, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@element@sub = Enc14@element - 1,
if 0 =< Enc14@element@sub, Enc14@element@sub < 3600 ->
<<Enc14@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end
end
end,
begin
%% attribute regVehDistTraveled(2) with type INTEGER
Enc17@element = element(3, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - 1,
if 0 =< Enc17@element@sub, Enc17@element@sub < 500 ->
<<Enc17@element@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end
end
end,
begin
%% attribute regVehTimeTraveled(3) with type INTEGER
Enc20@element = element(4, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@element@sub = Enc20@element - 1,
if 0 =< Enc20@element@sub, Enc20@element@sub < 3600 ->
<<Enc20@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end
end
end,
begin
%% attribute fuelConsumption(4) with type INTEGER
Enc23@element = element(5, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@element@sub = Enc23@element - 1,
if 0 =< Enc23@element@sub, Enc23@element@sub < 255 ->
Enc23@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc23@element}}})
end
end
end
end,
begin
%% attribute totalVehEmissions(5) with type RptEmissions
Enc26@element = element(6, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptEmissions(Enc26@element)
end
end,
begin
%% attribute numOfLowSpeedEvents(6) with type INTEGER
Enc28@element = element(7, Val),
if Enc28@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc28@element@sub = Enc28@element - 1,
if 0 =< Enc28@element@sub, Enc28@element@sub < 255 ->
Enc28@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc28@element}}})
end
end
end
end,
begin
%% attribute timeStopped(7) with type INTEGER
Enc31@element = element(8, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc31@element@sub = Enc31@element - 1,
if 0 =< Enc31@element@sub, Enc31@element@sub < 36000 ->
<<Enc31@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc31@element}}})
end
end
end
end,
begin
%% attribute numOfStopped(8) with type INTEGER
Enc34@element = element(9, Val),
if Enc34@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc34@element@sub = Enc34@element - 1,
if 0 =< Enc34@element@sub, Enc34@element@sub < 255 ->
Enc34@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc34@element}}})
end
end
end
end,
begin
%% attribute locOfStops(9) with type RptLocOfStops
Enc37@element = element(10, Val),
if Enc37@element =:= asn1_NOVALUE ->
[];
true ->
enc_RptLocOfStops(Enc37@element)
end
end,
begin
%% attribute regNumOfVehPassed(10) with type INTEGER
Enc39@element = element(11, Val),
if Enc39@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc39@element@sub = Enc39@element - 1,
if 0 =< Enc39@element@sub, Enc39@element@sub < 255 ->
Enc39@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc39@element}}})
end
end
end
end,
begin
%% attribute regNumOfSurpassedVeh(11) with type INTEGER
Enc42@element = element(12, Val),
if Enc42@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc42@element@sub = Enc42@element - 1,
if 0 =< Enc42@element@sub, Enc42@element@sub < 255 ->
Enc42@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc42@element}}})
end
end
end
end|begin
%% attribute totalMsgsReceived(12) with type INTEGER
Enc45@element = element(13, Val),
if Enc45@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc45@element@sub = Enc45@element - 1,
if 0 =< Enc45@element@sub, Enc45@element@sub < 255 ->
[Enc45@element@sub];
true ->
exit({error,{asn1,{illegal_integer,Enc45@element}}})
end
end
end
end].


dec_RptSummaryRecord(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute regTravelTime(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 11) band 1 of
1 ->
begin
<<V3@V0:12,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute regVehDistTraveled(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 10) band 1 of
1 ->
begin
<<V4@V0:9,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute regVehTimeTraveled(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 9) band 1 of
1 ->
begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute fuelConsumption(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute totalVehEmissions(5) with type RptEmissions
{Term5,Bytes7} = case (Opt bsr 7) band 1 of
1 ->
dec_RptEmissions(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute numOfLowSpeedEvents(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes7,
V7@Add2 = V7@V0 + 1,
{V7@Add2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute timeStopped(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V8@V0:16,V8@Buf1/bitstring>> = Bytes8,
V8@Add2 = V8@V0 + 1,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute numOfStopped(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V9@V0:8,V9@Buf1/bitstring>> = Bytes9,
V9@Add2 = V9@V0 + 1,
{V9@Add2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute locOfStops(9) with type RptLocOfStops
{Term9,Bytes11} = case (Opt bsr 3) band 1 of
1 ->
dec_RptLocOfStops(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute regNumOfVehPassed(10) with type INTEGER
{Term10,Bytes12} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes11,
V10@Add2 = V10@V0 + 1,
{V10@Add2,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute regNumOfSurpassedVeh(11) with type INTEGER
{Term11,Bytes13} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V11@V0:8,V11@Buf1/bitstring>> = Bytes12,
V11@Add2 = V11@V0 + 1,
{V11@Add2,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute totalMsgsReceived(12) with type INTEGER
{Term12,Bytes14} = case Opt band 1 of
1 ->
begin
<<V12@V0:8,V12@Buf1/bitstring>> = Bytes13,
V12@Add2 = V12@V0 + 1,
{V12@Add2,V12@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes13}
end,

%% Extensions
{Extensions,Bytes15} = case Ext of
0 -> {<<>>,Bytes14};
1 ->
{V13@V0,V13@Buf1} = case Bytes14 of
<<0:1,V13@V3:6,V13@Buf4/bitstring>> ->
V13@Add5 = V13@V3 + 1,
{V13@Add5,V13@Buf4};
<<1:1,V13@Buf2/bitstring>> ->
{V13@V3,V13@Buf4} = case V13@Buf2 of
<<0:1,V13@V6:7,V13@Buf7/bitstring>> when V13@V6 =/= 0 ->
{V13@V6,V13@Buf7};
<<1:1,0:1,V13@V7:14,V13@Buf8/bitstring>> when V13@V7 =/= 0 ->
{V13@V7,V13@Buf8};
<<1:1,1:1,V13@V7:6,V13@Buf8/bitstring>> when V13@V7 =/= 0 ->
V13@Mul9 = V13@V7 * 16384,
{V13@Mul9,V13@Buf8}
end,
{V13@V3,V13@Buf4}
end,
<<V13@V10:V13@V0/bitstring-unit:1,V13@Buf11/bitstring>> = V13@Buf1,
{V13@V10,V13@Buf11}
end,
Bytes16= skipextensions(Bytes15, 1, Extensions),
Res1 = {'RptSummaryRecord',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12},
{Res1,Bytes16}.

enc_RptEmissions(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
if Enc9@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute hydrocarbons(1) with type INTEGER
Enc11@element = element(2, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - 1,
if 0 =< Enc11@element@sub, Enc11@element@sub < 1000 ->
<<Enc11@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end
end
end,
begin
%% attribute co(2) with type INTEGER
Enc14@element = element(3, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@element@sub = Enc14@element - 1,
if 0 =< Enc14@element@sub, Enc14@element@sub < 1000 ->
<<Enc14@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end
end
end,
begin
%% attribute co2(3) with type INTEGER
Enc17@element = element(4, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - 1,
if 0 =< Enc17@element@sub, Enc17@element@sub < 1000 ->
<<Enc17@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end
end
end,
begin
%% attribute no(4) with type INTEGER
Enc20@element = element(5, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@element@sub = Enc20@element - 1,
if 0 =< Enc20@element@sub, Enc20@element@sub < 1000 ->
<<Enc20@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end
end
end,
begin
%% attribute no2(5) with type INTEGER
Enc23@element = element(6, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@element@sub = Enc23@element - 1,
if 0 =< Enc23@element@sub, Enc23@element@sub < 1000 ->
<<Enc23@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc23@element}}})
end
end
end
end,
begin
%% attribute so2(6) with type INTEGER
Enc26@element = element(7, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@element@sub = Enc26@element - 1,
if 0 =< Enc26@element@sub, Enc26@element@sub < 1000 ->
<<Enc26@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc26@element}}})
end
end
end
end,
begin
%% attribute o3(7) with type INTEGER
Enc29@element = element(8, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc29@element@sub = Enc29@element - 1,
if 0 =< Enc29@element@sub, Enc29@element@sub < 1000 ->
<<Enc29@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc29@element}}})
end
end
end
end,
begin
%% attribute pm10(8) with type INTEGER
Enc32@element = element(9, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc32@element@sub = Enc32@element - 1,
if 0 =< Enc32@element@sub, Enc32@element@sub < 1000 ->
<<Enc32@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc32@element}}})
end
end
end
end|begin
%% attribute pm25(9) with type INTEGER
Enc35@element = element(10, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc35@element@sub = Enc35@element - 1,
if 0 =< Enc35@element@sub, Enc35@element@sub < 1000 ->
<<Enc35@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc35@element}}})
end
end
end
end].


dec_RptEmissions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute hydrocarbons(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute co(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
begin
<<V4@V0:10,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute co2(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V5@V0:10,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute no(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V6@V0:10,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute no2(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V7@V0:10,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + 1,
{V7@Add2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute so2(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V8@V0:10,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + 1,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute o3(7) with type INTEGER
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V9@V0:10,V9@Buf1/bitstring>> = Bytes8,
V9@Add2 = V9@V0 + 1,
{V9@Add2,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute pm10(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V10@V0:10,V10@Buf1/bitstring>> = Bytes9,
V10@Add2 = V10@V0 + 1,
{V10@Add2,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute pm25(9) with type INTEGER
{Term9,Bytes11} = case Opt band 1 of
1 ->
begin
<<V11@V0:10,V11@Buf1/bitstring>> = Bytes10,
V11@Add2 = V11@V0 + 1,
{V11@Add2,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V12@V0,V12@Buf1} = case Bytes11 of
<<0:1,V12@V3:6,V12@Buf4/bitstring>> ->
V12@Add5 = V12@V3 + 1,
{V12@Add5,V12@Buf4};
<<1:1,V12@Buf2/bitstring>> ->
{V12@V3,V12@Buf4} = case V12@Buf2 of
<<0:1,V12@V6:7,V12@Buf7/bitstring>> when V12@V6 =/= 0 ->
{V12@V6,V12@Buf7};
<<1:1,0:1,V12@V7:14,V12@Buf8/bitstring>> when V12@V7 =/= 0 ->
{V12@V7,V12@Buf8};
<<1:1,1:1,V12@V7:6,V12@Buf8/bitstring>> when V12@V7 =/= 0 ->
V12@Mul9 = V12@V7 * 16384,
{V12@Mul9,V12@Buf8}
end,
{V12@V3,V12@Buf4}
end,
<<V12@V10:V12@V0/bitstring-unit:1,V12@Buf11/bitstring>> = V12@Buf1,
{V12@V10,V12@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'RptEmissions',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.

enc_RptLocOfStops(Val) ->
[<<0:1>>,
begin
%% attribute locationOfStop(1) with type Position3D
Enc2@element = element(2, Val),
'Common':enc_Position3D(Enc2@element)
end,
begin
%% attribute locAccOfStop(2) with type PositionalAccuracy
Enc3@element = element(3, Val),
'Common':enc_PositionalAccuracy(Enc3@element)
end|begin
%% attribute durationOfStop(3) with type INTEGER
Enc4@element = element(4, Val),
Enc4@element@sub = Enc4@element - 1,
if 0 =< Enc4@element@sub, Enc4@element@sub < 36000 ->
<<Enc4@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end].


dec_RptLocOfStops(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute locationOfStop(1) with type Position3D
{Term1,Bytes2} = 'Common':dec_Position3D(Bytes1),

%% attribute locAccOfStop(2) with type PositionalAccuracy
{Term2,Bytes3} = 'Common':dec_PositionalAccuracy(Bytes2),

%% attribute durationOfStop(3) with type INTEGER
{Term3,Bytes4} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes3,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'RptLocOfStops',Term1,Term2,Term3},
{Res1,Bytes6}.

typeinfo('ProbeDataReportMessage') ->
  {sequence,'ProbeDataReportMessage',5,[{<<99,111,110,102,105,103,73,100>>,{'INTEGER',{1,255}},mandatory},{<<114,101,112,111,114,116,67,104,97,114>>,{typeinfo,{'ProbeDataReport','ReportCharacteristics'}},mandatory},{<<114,111,97,100,65,117,116,104,111,114,105,116,121,73,68>>,{typeinfo,{'Common','RoadAuthorityID'}},'OPTIONAL'},{<<105,110,115,116,97,110,116,97,110,101,111,117,115,82,101,99,115>>,{typeinfo,{'ProbeDataReport','RptInstantaneousRecords'}},'OPTIONAL'},{<<97,118,103,65,110,100,83,117,109,82,101,99>>,{typeinfo,{'ProbeDataReport','RptAveragedAndSummaryRecord'}},'OPTIONAL'}]};
typeinfo('ReportCharacteristics') ->
  {sequence,'ReportCharacteristics',9,[{<<116,105,109,101,83,116,97,109,112>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'Common','Position3D'}},mandatory},{<<112,111,115,65,99,99,117,114,97,99,121>>,{typeinfo,{'Common','PositionalAccuracy'}},mandatory},{<<118,101,108,111,99,105,116,121>>,{typeinfo,{'ProbeDataReport','RptVelocity'}},mandatory},{<<118,101,104,105,99,108,101,67,108,97,115,115>>,{'ENUMERATED_EXT',#{motorcycles => 1,buses => 4,passengerCars => 2,other2axle4tireSingleUnitVehs => 3,twoAxle6TireSingleUnitTrucks => 5,threeAxleSingleUnitTrucks => 6,fourOrMoreAxleSingleUnitTrucks => 7,fourOrFewerAxleSingleTrailerTrucks => 8,fiveAxleSingleTrailerTrucks => 9,sixOrMoreAxleSingleTrailerTrucks => 10,fiveOrFewerAxleMultiTrailerTrucks => 11,sixAxleMultiTrailerTrucks => 12,sevenOrMoreAxleMultiTrailerTrucks => 13}},'OPTIONAL'},{<<100,101,118,84,121,112,101>>,{typeinfo,{'ProbeDataReport','RptDevType'}},'OPTIONAL'},{<<118,101,104,105,99,108,101,83,105,122,101>>,{typeinfo,{'Common','VehicleSize'}},'OPTIONAL'},{<<118,101,104,105,99,108,101,77,97,115,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<118,101,104,80,97,115,115,101,110,103,101,114,67,111,117,110,116>>,{'INTEGER',{1,255}},'OPTIONAL'}]};
typeinfo('RptVehicleClass') ->
  {'ENUMERATED_EXT',#{motorcycles => 1,buses => 4,passengerCars => 2,other2axle4tireSingleUnitVehs => 3,twoAxle6TireSingleUnitTrucks => 5,threeAxleSingleUnitTrucks => 6,fourOrMoreAxleSingleUnitTrucks => 7,fourOrFewerAxleSingleTrailerTrucks => 8,fiveAxleSingleTrailerTrucks => 9,sixOrMoreAxleSingleTrailerTrucks => 10,fiveOrFewerAxleMultiTrailerTrucks => 11,sixAxleMultiTrailerTrucks => 12,sevenOrMoreAxleMultiTrailerTrucks => 13}};
typeinfo('RptDevType') ->
  {sequence,'RptDevType',3,[{<<111,101,109,79,114,65,102,116,101,114,109,97,114,107,101,116>>,'BOOLEAN',mandatory},{<<99,97,110,79,114,73,118,110,67,111,110,110,101,99,116,101,100>>,'BOOLEAN',mandatory},{<<109,99,111,67,97,112,97,98,108,101>>,'BOOLEAN','OPTIONAL'}]};
typeinfo('RptInstantaneousRecords') ->
  {sof,{typeinfo,{'ProbeDataReport','RptInstantaneousRecord'}}};
typeinfo('RptInstantaneousRecord') ->
  {sequence,'RptInstantaneousRecord',5,[{<<116,105,109,101,79,102,73,110,115,116,97,110,116,82,101,99>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<108,111,99,79,102,73,110,115,116,97,110,116,82,101,99>>,{typeinfo,{'Common','Position3D'}},mandatory},{<<97,99,99,79,102,80,111,115,105,116,105,111,110>>,{typeinfo,{'Common','PositionalAccuracy'}},mandatory},{<<118,101,108,79,102,73,110,115,116,97,110,116,82,101,99>>,{typeinfo,{'ProbeDataReport','RptVelocity'}},mandatory},{<<114,101,99,111,114,100>>,{typeinfo,{'ProbeDataReport','RptInstantaneousRecordData'}},'OPTIONAL'}]};
typeinfo('RptVelocity') ->
  {sequence,'RptVelocity',3,[{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory},{<<115,112,101,101,100,83,116,100,68,101,118>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},'OPTIONAL'}]};
typeinfo('RptInstantaneousRecordData') ->
  {choice,#{<<99,111,109,109,83,121,115,80,101,114,102,69,118,101,110,116,115>> => {typeinfo,{'ProbeDataReport','RptCommSysPerfEvents'}},<<105,110,116,101,114,118,97,108,69,118,101,110,116,115>> => {typeinfo,{'ProbeDataReport','RptIntervalEvents'}},<<114,111,97,100,119,97,121,69,118,101,110,116,115>> => {typeinfo,{'ProbeDataReport','RptRoadwayEvents'}},<<118,101,104,69,118,101,110,116,115>> => {typeinfo,{'ProbeDataReport','RptVehicleEvents'}}}};
typeinfo('RptAveragedAndSummaryRecord') ->
  {sequence,'RptAveragedAndSummaryRecord',7,[{<<115,116,97,114,116,84,105,109,101>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<115,116,97,114,116,76,111,99>>,{typeinfo,{'Common','Position3D'}},mandatory},{<<115,116,97,114,116,65,99,99,79,102,80,111,115>>,{typeinfo,{'Common','PositionalAccuracy'}},mandatory},{<<101,110,100,84,105,109,101>>,{typeinfo,{'Common','DDateTime'}},mandatory},{<<101,110,100,76,111,99>>,{typeinfo,{'Common','Position3D'}},mandatory},{<<101,110,100,65,99,99,79,102,80,111,115>>,{typeinfo,{'Common','PositionalAccuracy'}},mandatory},{<<114,101,99,111,114,100>>,{typeinfo,{'ProbeDataReport','RptAvgAndSummaryRecordData'}},mandatory}]};
typeinfo('RptAvgAndSummaryRecordData') ->
  {choice,#{<<97,118,101,114,97,103,101,100,82,101,99,111,114,100>> => {typeinfo,{'ProbeDataReport','RptAveragedRecord'}},<<115,117,109,109,97,114,121,82,101,99,111,114,100>> => {typeinfo,{'ProbeDataReport','RptSummaryRecord'}}}};
typeinfo('RptIntervalEvents') ->
  {sequence,'RptIntervalEvents',5,[{<<119,105,112,101,114,83,116,97,116,117,115>>,{'ENUMERATED_EXT',#{high => 3,low => 1,off => 0,medium => 2}},'OPTIONAL'},{<<118,101,104,67,111,117,110,116>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<119,101,97,116,104,101,114,68,97,116,97>>,{typeinfo,{'ProbeDataReport','RptVehicleReport'}},'OPTIONAL'},{<<116,114,97,110,115,105,116,86,101,104,68,97,116,97>>,{typeinfo,{'ProbeDataReport','RptTransitVehData'}},'OPTIONAL'},{<<110,117,109,79,102,79,99,99,117,112,97,110,116,115>>,{'INTEGER',{0,255}},'OPTIONAL'}]};
typeinfo('RptVehicleReport') ->
  {sof,{typeinfo,{'RoadWeatherMessage','NtcipEssData'}}};
typeinfo('RptTransitVehData') ->
  {sequence,'RptTransitVehData',3,[{<<99,117,114,114,78,117,109,80,97,115,110,103,101,114,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<97,118,103,78,117,109,80,97,115,110,103,101,114,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<116,114,110,115,116,86,101,104,83,99,104,65,100,104>>,{'INTEGER',{-200,55}},'OPTIONAL'}]};
typeinfo('RptVehicleEvents') ->
  {choice,#{<<100,114,105,118,101,114,65,108,101,114,116,115,65,110,100,87,97,114,110,105,110,103,115>> => {typeinfo,{'ProbeDataReport','RptDriverAlertsAndWarnings'}},<<101,109,101,114,86,101,104,68,101,116,101,99,116>> => 'NULL',<<101,109,101,114,86,101,104,76,105,103,104,116,66,97,114>> => 'NULL',<<102,111,103,76,105,103,104,116,115>> => 'NULL',<<104,97,122,97,114,100,76,105,103,104,116,115>> => 'NULL',<<104,101,97,100,76,105,103,104,116,115>> => 'NULL',<<107,105,110,101,109,97,116,105,99,69,118,101,110,116,115>> => {typeinfo,{'ProbeDataReport','RptKinematicEvents'}},<<108,111,119,83,112,101,101,100>> => 'NULL',<<114,101,113,84,115,112,69,118,112>> => 'NULL',<<114,101,115,117,109,101,100,83,112,101,101,100>> => 'NULL',<<116,114,97,110,115,105,116,86,101,104,68,111,111,114>> => 'NULL',<<116,114,97,110,115,105,116,86,101,104,80,97,115,115,67,110,116>> => 'NULL',<<118,50,120,77,115,103,82,101,99,112,116,105,111,110>> => 'NULL',<<118,101,104,69,110,116,114,115,69,120,105,116,115,82,101,103,105,111,110>> => 'NULL',<<119,105,112,101,114,83,116,97,116,117,115,67,104,97,110,103,101>> => 'NULL'}};
typeinfo('RptDriverAlertsAndWarnings') ->
  {choice,#{<<101,109,101,114,86,101,104,65,108,101,114,116>> => 'NULL',<<106,50,57,52,53,83,108,97,115,104,49,66,115,119,76,99,119>> => 'NULL',<<106,50,57,52,53,83,108,97,115,104,49,67,108,119>> => 'NULL',<<106,50,57,52,53,83,108,97,115,104,49,69,101,98,108>> => 'NULL',<<106,50,57,52,53,83,108,97,115,104,49,70,99,119>> => 'NULL',<<106,50,57,52,53,83,108,97,115,104,49,73,109,97>> => 'NULL',<<106,50,57,52,53,83,108,97,115,104,49,76,116,97>> => 'NULL',<<111,116,104,101,114,65,108,101,114,116>> => 'NULL',<<111,116,104,101,114,87,97,114,110,105,110,103>> => 'NULL',<<114,101,100,76,105,103,104,116,86,105,111,108,97,116,105,111,110,87,97,114,110>> => 'NULL'}};
typeinfo('RptKinematicEvents') ->
  {sequence,'RptKinematicEvents',2,[{<<101,118,101,110,116,115>>,{typeinfo,{'ProbeDataReport','RptEvents'}},mandatory},{<<104,121,115,116,101,114,101,115,105,115>>,{typeinfo,{'ProbeDataReport','RptHysteresisRecord'}},'OPTIONAL'}]};
typeinfo('RptEvents') ->
  {choice,#{<<97,98,115,65,99,116,105,118,101>> => 'BOOLEAN',<<104,97,114,100,66,114,97,107,105,110,103>> => 'BOOLEAN',<<115,116,97,98,105,108,105,116,121,67,116,108,65,99,116,105,118,101>> => 'BOOLEAN',<<115,119,101,114,118,101>> => 'BOOLEAN',<<116,114,97,99,116,105,111,110,67,116,108,76,111,115,115>> => 'BOOLEAN'}};
typeinfo('RptHysteresisRecord') ->
  {sof,{typeinfo,{'ProbeDataReport','RptHysteresis'}}};
typeinfo('RptHysteresis') ->
  {sequence,'RptHysteresis',4,[{<<116,105,109,101>>,{typeinfo,{'Common','DTime'}},mandatory},{<<112,111,115,105,116,105,111,110>>,{typeinfo,{'Common','Position3D'}},mandatory},{<<112,111,115,105,116,105,111,110,97,108,65,99,99,117,114,97,99,121>>,{typeinfo,{'Common','PositionalAccuracy'}},'OPTIONAL'},{<<118,101,108,111,99,105,116,121>>,{typeinfo,{'ProbeDataReport','RptVelocity'}},mandatory}]};
typeinfo('RptRoadwayEvents') ->
  {choice,#{<<97,100,118,101,114,115,101,82,111,97,100,83,117,114,102,97,99,101>> => {typeinfo,{'ProbeDataReport','RptRoadRoughness'}},<<100,114,97,119,66,114,105,100,103,101,65,99,116,105,118>> => 'NULL',<<105,110,99,105,100,101,110,116,68,101,116,101,99,116>> => 'NULL',<<105,110,99,108,87,101,97,116,104,101,114,68,101,116,101,99,116>> => 'NULL',<<108,97,110,101,71,101,111,73,110,99,110,115,116,110,99,121>> => 'NULL',<<108,111,119,76,97,110,101,77,97,114,107,82,101,102,108,101,99,116>> => 'NULL',<<108,111,119,82,111,97,100,115,105,103,110,82,101,102,108,101,99,116>> => 'NULL',<<111,98,115,116,97,99,108,101,68,101,116,101,99,116,101,100>> => 'NULL',<<114,97,105,108,114,100,67,114,111,115,115,65,99,116,105,118>> => 'NULL',<<114,111,97,100,115,105,103,110,68,101,116,101,99,116,105,111,110>> => 'NULL',<<114,111,97,100,115,105,103,110,73,110,99,110,115,116,110,99,121>> => 'NULL',<<116,114,102,115,105,103,69,110,99,111,117,110,116,101,114,115>> => {typeinfo,{'ProbeDataReport','RptTrafficSigEncounters'}},<<116,114,102,115,105,103,76,105,103,104,116,79,117,116>> => 'NULL',<<116,114,102,115,105,103,82,111,97,100,71,101,111,77,105,115,109,97,116,99,104>> => 'NULL',<<119,111,114,107,90,111,110,101,67,104,97,114,68,101,116,101,99,116>> => 'NULL'}};
typeinfo('RptRoadRoughness') ->
  {sequence,'RptRoadRoughness',4,[{<<109,101,97,110,86,101,114,116,105,99,97,108,86,97,114,105,97,116,105,111,110>>,{'INTEGER',{0,25000}},mandatory},{<<118,101,114,116,105,99,97,108,86,97,114,105,97,116,105,111,110,83,116,100,68,101,118>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<109,101,97,110,72,111,114,105,122,111,110,116,97,108,86,97,114,105,97,116,105,111,110>>,{'INTEGER',{0,25000}},'OPTIONAL'},{<<104,111,114,105,122,111,110,116,97,108,86,97,114,105,97,116,105,111,110,83,116,100,68,101,118>>,{'INTEGER',{0,10000}},'OPTIONAL'}]};
typeinfo('MeanVariation') ->
  {'INTEGER',{0,25000}};
typeinfo('StdDev') ->
  {'INTEGER',{0,10000}};
typeinfo('RptTrafficSigEncounters') ->
  {sequence,'RptTrafficSigEncounters',2,[{<<105,110,116,101,114,115,101,99,116,105,111,110,73,68>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<116,114,97,102,102,105,99,77,101,116,114,105,99,115>>,{typeinfo,{'ProbeDataReport','RptTrafficMetrics'}},mandatory}]};
typeinfo('RptTrafficMetrics') ->
  {choice,#{<<116,114,102,115,105,103,65,112,112,114,111,97,99,104,68,101,108,97,121>> => 'NULL',<<116,114,102,115,105,103,65,112,112,114,111,97,99,104,83,112,101,101,100>> => 'NULL',<<116,114,102,115,105,103,65,114,114,105,118,97,108,71,114,101,101,110>> => 'NULL',<<116,114,102,115,105,103,65,114,114,105,118,97,108,82,101,100>> => 'NULL',<<116,114,102,115,105,103,80,101,100,68,101,108,97,121>> => 'NULL',<<116,114,102,115,105,103,83,112,97,116,77,105,115,109,97,116,99,104>> => 'NULL',<<116,114,102,115,105,103,83,112,97,116,84,105,109,105,110,103,69,114,114,111,114>> => 'NULL'}};
typeinfo('RptCommSysPerfEvents') ->
  {choice,#{<<103,110,115,115,69,114,114,69,108,105,112,115,101>> => 'NULL',<<103,110,115,115,72,100,111,112,69,120,99,101,101,100,115>> => 'NULL',<<103,110,115,115,83,97,116,115,66,101,108,111,119>> => 'NULL',<<106,50,57,52,53,45,49,67,104,97,110,66,117,115,121>> => 'NULL',<<106,50,57,52,53,45,49,67,113,105,66,101,108,111,119>> => 'NULL',<<106,50,57,52,53,45,49,84,114,97,99,107,105,110,103,69,114,114,111,114>> => 'NULL',<<106,50,57,52,53,45,49,86,101,104,68,101,110,115>> => 'NULL',<<106,97,109,109,105,110,103,68,101,116,101,99,116>> => 'NULL',<<110,117,109,79,102,82,115,117,115,79,98,115,101,114,118,101,100>> => {'INTEGER',{1,255}},<<114,102,68,97,116,97,82,115,117,73,110,102,111>> => octet_string,<<114,102,86,50,120,74,97,109,68,101,116,101,99,116>> => 'NULL'}};
typeinfo('RptWiperStatus') ->
  {'ENUMERATED_EXT',#{high => 3,low => 1,off => 0,medium => 2}};
typeinfo('RptAveragedRecord') ->
  {sequence,'RptAveragedRecord',7,[{<<97,118,103,83,112,101,101,100>>,{'INTEGER',{0,8191}},'OPTIONAL'},{<<115,112,101,101,100,83,116,100,68,101,118>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<97,118,103,83,116,111,112,68,117,114,97,116,105,111,110>>,{'INTEGER',{1,36000}},'OPTIONAL'},{<<97,118,103,83,116,111,112,83,116,100,68,101,118>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<97,118,103,70,117,101,108,67,111,110,115,117,109,112,116,105,111,110>>,{'INTEGER',{1,255}},'OPTIONAL'},{<<97,118,103,69,109,105,115,115,105,111,110,115>>,{typeinfo,{'ProbeDataReport','RptEmissions'}},'OPTIONAL'},{<<97,118,103,78,117,109,79,102,79,99,99,117,112,97,110,116,115>>,{'INTEGER',{1,255}},'OPTIONAL'}]};
typeinfo('RptSummaryRecord') ->
  {sequence,'RptSummaryRecord',12,[{<<114,101,103,84,114,97,118,101,108,84,105,109,101>>,{'INTEGER',{1,3600}},'OPTIONAL'},{<<114,101,103,86,101,104,68,105,115,116,84,114,97,118,101,108,101,100>>,{'INTEGER',{1,500}},'OPTIONAL'},{<<114,101,103,86,101,104,84,105,109,101,84,114,97,118,101,108,101,100>>,{'INTEGER',{1,3600}},'OPTIONAL'},{<<102,117,101,108,67,111,110,115,117,109,112,116,105,111,110>>,{'INTEGER',{1,255}},'OPTIONAL'},{<<116,111,116,97,108,86,101,104,69,109,105,115,115,105,111,110,115>>,{typeinfo,{'ProbeDataReport','RptEmissions'}},'OPTIONAL'},{<<110,117,109,79,102,76,111,119,83,112,101,101,100,69,118,101,110,116,115>>,{'INTEGER',{1,255}},'OPTIONAL'},{<<116,105,109,101,83,116,111,112,112,101,100>>,{'INTEGER',{1,36000}},'OPTIONAL'},{<<110,117,109,79,102,83,116,111,112,112,101,100>>,{'INTEGER',{1,255}},'OPTIONAL'},{<<108,111,99,79,102,83,116,111,112,115>>,{typeinfo,{'ProbeDataReport','RptLocOfStops'}},'OPTIONAL'},{<<114,101,103,78,117,109,79,102,86,101,104,80,97,115,115,101,100>>,{'INTEGER',{1,255}},'OPTIONAL'},{<<114,101,103,78,117,109,79,102,83,117,114,112,97,115,115,101,100,86,101,104>>,{'INTEGER',{1,255}},'OPTIONAL'},{<<116,111,116,97,108,77,115,103,115,82,101,99,101,105,118,101,100>>,{'INTEGER',{1,255}},'OPTIONAL'}]};
typeinfo('RptEmissions') ->
  {sequence,'RptEmissions',9,[{<<104,121,100,114,111,99,97,114,98,111,110,115>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<99,111>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<99,111,50>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<110,111>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<110,111,50>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<115,111,50>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<111,51>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<112,109,49,48>>,{'INTEGER',{1,1000}},'OPTIONAL'},{<<112,109,50,53>>,{'INTEGER',{1,1000}},'OPTIONAL'}]};
typeinfo('RptLocOfStops') ->
  {sequence,'RptLocOfStops',3,[{<<108,111,99,97,116,105,111,110,79,102,83,116,111,112>>,{typeinfo,{'Common','Position3D'}},mandatory},{<<108,111,99,65,99,99,79,102,83,116,111,112>>,{typeinfo,{'Common','PositionalAccuracy'}},mandatory},{<<100,117,114,97,116,105,111,110,79,102,83,116,111,112>>,{'INTEGER',{1,36000}},mandatory}]};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = dec_RptInstantaneousRecord(Bytes),
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = 'RoadWeatherMessage':dec_NtcipEssData(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_RptHysteresis(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
