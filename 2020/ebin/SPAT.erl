%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in SPAT.

-module('SPAT').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("SPAT.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'SPAT'},
            {options,[{i,"./ebin"},uper,jer,verbose,{i,"./asn"},{outdir,"./ebin"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_SPAT/1,
enc_AdvisorySpeed/1,
enc_AdvisorySpeedList/1,
enc_ConnectionManeuverAssist/1,
enc_EnabledLaneList/1,
enc_IntersectionState/1,
enc_IntersectionStateList/1,
enc_ManeuverAssistList/1,
enc_MovementEventList/1,
enc_MovementEvent/1,
enc_MovementList/1,
enc_MovementState/1,
enc_TimeChangeDetails/1,
enc_AdvisorySpeedType/1,
enc_IntersectionStatusObject/1,
enc_MovementPhaseState/1,
enc_PedestrianBicycleDetect/1,
enc_SpeedAdvice/1,
enc_TimeIntervalConfidence/1,
enc_TimeMark/1,
enc_WaitOnStopline/1,
enc_ZoneLength/1
]).

-export([
dec_SPAT/1,
dec_AdvisorySpeed/1,
dec_AdvisorySpeedList/1,
dec_ConnectionManeuverAssist/1,
dec_EnabledLaneList/1,
dec_IntersectionState/1,
dec_IntersectionStateList/1,
dec_ManeuverAssistList/1,
dec_MovementEventList/1,
dec_MovementEvent/1,
dec_MovementList/1,
dec_MovementState/1,
dec_TimeChangeDetails/1,
dec_AdvisorySpeedType/1,
dec_IntersectionStatusObject/1,
dec_MovementPhaseState/1,
dec_PedestrianBicycleDetect/1,
dec_SpeedAdvice/1,
dec_TimeIntervalConfidence/1,
dec_TimeMark/1,
dec_WaitOnStopline/1,
dec_ZoneLength/1
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('SPAT', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('SPAT', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('SPAT', Data) -> enc_SPAT(Data);
encode_disp('AdvisorySpeed', Data) -> enc_AdvisorySpeed(Data);
encode_disp('AdvisorySpeedList', Data) -> enc_AdvisorySpeedList(Data);
encode_disp('ConnectionManeuverAssist', Data) -> enc_ConnectionManeuverAssist(Data);
encode_disp('EnabledLaneList', Data) -> enc_EnabledLaneList(Data);
encode_disp('IntersectionState', Data) -> enc_IntersectionState(Data);
encode_disp('IntersectionStateList', Data) -> enc_IntersectionStateList(Data);
encode_disp('ManeuverAssistList', Data) -> enc_ManeuverAssistList(Data);
encode_disp('MovementEventList', Data) -> enc_MovementEventList(Data);
encode_disp('MovementEvent', Data) -> enc_MovementEvent(Data);
encode_disp('MovementList', Data) -> enc_MovementList(Data);
encode_disp('MovementState', Data) -> enc_MovementState(Data);
encode_disp('TimeChangeDetails', Data) -> enc_TimeChangeDetails(Data);
encode_disp('AdvisorySpeedType', Data) -> enc_AdvisorySpeedType(Data);
encode_disp('IntersectionStatusObject', Data) -> enc_IntersectionStatusObject(Data);
encode_disp('MovementPhaseState', Data) -> enc_MovementPhaseState(Data);
encode_disp('PedestrianBicycleDetect', Data) -> enc_PedestrianBicycleDetect(Data);
encode_disp('SpeedAdvice', Data) -> enc_SpeedAdvice(Data);
encode_disp('TimeIntervalConfidence', Data) -> enc_TimeIntervalConfidence(Data);
encode_disp('TimeMark', Data) -> enc_TimeMark(Data);
encode_disp('WaitOnStopline', Data) -> enc_WaitOnStopline(Data);
encode_disp('ZoneLength', Data) -> enc_ZoneLength(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('SPAT', Data) -> dec_SPAT(Data);
decode_disp('AdvisorySpeed', Data) -> dec_AdvisorySpeed(Data);
decode_disp('AdvisorySpeedList', Data) -> dec_AdvisorySpeedList(Data);
decode_disp('ConnectionManeuverAssist', Data) -> dec_ConnectionManeuverAssist(Data);
decode_disp('EnabledLaneList', Data) -> dec_EnabledLaneList(Data);
decode_disp('IntersectionState', Data) -> dec_IntersectionState(Data);
decode_disp('IntersectionStateList', Data) -> dec_IntersectionStateList(Data);
decode_disp('ManeuverAssistList', Data) -> dec_ManeuverAssistList(Data);
decode_disp('MovementEventList', Data) -> dec_MovementEventList(Data);
decode_disp('MovementEvent', Data) -> dec_MovementEvent(Data);
decode_disp('MovementList', Data) -> dec_MovementList(Data);
decode_disp('MovementState', Data) -> dec_MovementState(Data);
decode_disp('TimeChangeDetails', Data) -> dec_TimeChangeDetails(Data);
decode_disp('AdvisorySpeedType', Data) -> dec_AdvisorySpeedType(Data);
decode_disp('IntersectionStatusObject', Data) -> dec_IntersectionStatusObject(Data);
decode_disp('MovementPhaseState', Data) -> dec_MovementPhaseState(Data);
decode_disp('PedestrianBicycleDetect', Data) -> dec_PedestrianBicycleDetect(Data);
decode_disp('SpeedAdvice', Data) -> dec_SpeedAdvice(Data);
decode_disp('TimeIntervalConfidence', Data) -> dec_TimeIntervalConfidence(Data);
decode_disp('TimeMark', Data) -> dec_TimeMark(Data);
decode_disp('WaitOnStopline', Data) -> dec_WaitOnStopline(Data);
decode_disp('ZoneLength', Data) -> dec_ZoneLength(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_SPAT(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute timeStamp(1) with type INTEGER
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
0 =< Enc5@element, Enc5@element < 527041 ->
<<Enc5@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute name(2) with type IA5String
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@element),
Enc9@bin = encode_chars(Enc8@element, 7),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 63 ->
[<<Enc9@len@sub:6>>|Enc9@bin]
end
end
end
end,
begin
%% attribute intersections(3) with type IntersectionStateList
Enc11@element = element(4, Val),
enc_IntersectionStateList(Enc11@element)
end|begin
%% attribute regional(4) with type SEQUENCE OF
Enc12@element = element(5, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_SPAT_regional(Enc12@element)
end
end].
enc_SPAT_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_SPAT_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_SPAT_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type1(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_SPAT(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute timeStamp(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:20,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute name(2) with type IA5String
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<V4@V3:V4@Add2/binary-unit:7,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V5,V4@Buf6}  = {decode_chars(V4@V3, 7),V4@Buf4},
{V4@V5,V4@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute intersections(3) with type IntersectionStateList
{Term3,Bytes5} = dec_IntersectionStateList(Bytes4),

%% attribute regional(4) with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_SPAT_regional(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'SPAT',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.


dec_SPAT_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components2(V1@Add2, V1@Buf1, []).


dec_SPAT_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type3(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_AdvisorySpeed(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute type(1) with type ENUMERATED
Enc7@element = element(2, Val),
if Enc7@element =:= none ->
<<0:1,0:2>>;
Enc7@element =:= greenwave ->
<<0:1,1:2>>;
Enc7@element =:= ecoDrive ->
<<0:1,2:2>>;
Enc7@element =:= transit ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute speed(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
0 =< Enc9@element, Enc9@element < 501 ->
<<Enc9@element:9>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute confidence(3) with type ENUMERATED
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element =:= unavailable ->
<<0:3>>;
Enc12@element =:= prec100ms ->
<<1:3>>;
Enc12@element =:= prec10ms ->
<<2:3>>;
Enc12@element =:= prec5ms ->
<<3:3>>;
Enc12@element =:= prec1ms ->
<<4:3>>;
Enc12@element =:= 'prec0-1ms' ->
<<5:3>>;
Enc12@element =:= 'prec0-05ms' ->
<<6:3>>;
Enc12@element =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc12@element}}})
end
end,
begin
%% attribute distance(4) with type INTEGER
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
0 =< Enc15@element, Enc15@element < 10001 ->
<<Enc15@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end,
begin
%% attribute class(5) with type INTEGER
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element bsr 8 =:= 0 ->
Enc18@element;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_AdvisorySpeed_regional(Enc21@element)
end
end].
enc_AdvisorySpeed_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_AdvisorySpeed_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_AdvisorySpeed_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type1(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_AdvisorySpeed(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute type(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> none;
1 -> greenwave;
2 -> ecoDrive;
3 -> transit
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute speed(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:9,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute confidence(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute distance(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:14,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute class(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:8,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_AdvisorySpeed_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'AdvisorySpeed',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_AdvisorySpeed_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components4(V1@Add2, V1@Buf1, []).


dec_AdvisorySpeed_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type3(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_AdvisorySpeedList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_AdvisorySpeed(Comp) || Comp <- Val]]
end.



dec_AdvisorySpeedList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components5(V1@Add2, V1@Buf1, []).

enc_ConnectionManeuverAssist(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute connectionID(1) with type INTEGER
Enc7@element = element(2, Val),
if Enc7@element bsr 8 =:= 0 ->
Enc7@element;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute queueLength(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
0 =< Enc9@element, Enc9@element < 10001 ->
<<Enc9@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute availableStorageLength(3) with type INTEGER
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
0 =< Enc12@element, Enc12@element < 10001 ->
<<Enc12@element:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute waitOnStop(4) with type BOOLEAN
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element =:= false ->
<<0:1>>;
Enc15@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc15@element}}})
end
end,
begin
%% attribute pedBicycleDetect(5) with type BOOLEAN
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= false ->
<<0:1>>;
Enc18@element =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Enc18@element}}})
end
end|begin
%% attribute regional(6) with type SEQUENCE OF
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_ConnectionManeuverAssist_regional(Enc21@element)
end
end].
enc_ConnectionManeuverAssist_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ConnectionManeuverAssist_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ConnectionManeuverAssist_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type6(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ConnectionManeuverAssist(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute connectionID(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute queueLength(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute availableStorageLength(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:14,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute waitOnStop(4) with type BOOLEAN
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute pedBicycleDetect(5) with type BOOLEAN
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_ConnectionManeuverAssist_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'ConnectionManeuverAssist',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_ConnectionManeuverAssist_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components7(V1@Add2, V1@Buf1, []).


dec_ConnectionManeuverAssist_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type8(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_EnabledLaneList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 4 =:= 0 ->
[<<Enc2@len@sub:4>>|[if Comp bsr 8 =:= 0 ->
[Comp];
true ->
exit({error,{asn1,{illegal_integer,Comp}}})
end || Comp <- Val]]
end.



dec_EnabledLaneList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components9(V1@Add2, V1@Buf1, []).

enc_IntersectionState(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(10, Val),
Enc6@element = element(11, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute name(1) with type IA5String
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@len = length(Enc8@element),
Enc9@bin = encode_chars(Enc8@element, 7),
Enc9@len@sub = Enc9@len - 1,
if 0 =< Enc9@len@sub, Enc9@len@sub < 63 ->
[<<Enc9@len@sub:6>>|Enc9@bin]
end
end
end
end,
begin
%% attribute id(2) with type IntersectionReferenceID
Enc11@element = element(3, Val),
'Common':enc_IntersectionReferenceID(Enc11@element)
end,
begin
%% attribute revision(3) with type INTEGER
Enc12@element = element(4, Val),
if Enc12@element bsr 7 =:= 0 ->
<<Enc12@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute status(4) with type BIT STRING
Enc14@element = element(5, Val),
Enc15@bs = try bit_string_name2pos_10(Enc14@element) of
Enc15@positions ->
bitstring_from_positions(Enc15@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc14@element, 16)
end,
Enc15@bits = bit_size(Enc15@bs),
if Enc15@bits =:= 16 ->
Enc15@bs
end
end,
begin
%% attribute moy(5) with type INTEGER
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
0 =< Enc16@element, Enc16@element < 527041 ->
<<Enc16@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute timeStamp(6) with type INTEGER
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
Enc19@element bsr 16 =:= 0 ->
<<Enc19@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute enabledLanes(7) with type EnabledLaneList
Enc22@element = element(8, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_EnabledLaneList(Enc22@element)
end
end,
begin
%% attribute states(8) with type MovementList
Enc24@element = element(9, Val),
enc_MovementList(Enc24@element)
end,
begin
%% attribute maneuverAssistList(9) with type ManeuverAssistList
Enc25@element = element(10, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
enc_ManeuverAssistList(Enc25@element)
end
end|begin
%% attribute regional(10) with type SEQUENCE OF
Enc27@element = element(11, Val),
if Enc27@element =:= asn1_NOVALUE ->
[];
true ->
enc_IntersectionState_regional(Enc27@element)
end
end].
enc_IntersectionState_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_IntersectionState_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_IntersectionState_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type11(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_IntersectionState(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute name(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute id(2) with type IntersectionReferenceID
{Term2,Bytes4} = 'Common':dec_IntersectionReferenceID(Bytes3),

%% attribute revision(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute status(4) with type BIT STRING
{Term4,Bytes6} = begin
<<V5@V0:16/binary-unit:1,V5@Buf1/bitstring>> = Bytes5,
{V5@V2,V5@Buf3}  = {decode_named_bit_string(V5@V0, [{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]),V5@Buf1},
{V5@V2,V5@Buf3}
end,

%% attribute moy(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V6@V0:20,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute timeStamp(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V7@V0:16,V7@Buf1/bitstring>> = Bytes7,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute enabledLanes(7) with type EnabledLaneList
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
dec_EnabledLaneList(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute states(8) with type MovementList
{Term8,Bytes10} = dec_MovementList(Bytes9),

%% attribute maneuverAssistList(9) with type ManeuverAssistList
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_ManeuverAssistList(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute regional(10) with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_IntersectionState_regional(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V8@V0,V8@Buf1} = case Bytes12 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'IntersectionState',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.


dec_IntersectionState_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components12(V1@Add2, V1@Buf1, []).


dec_IntersectionState_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type13(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_IntersectionStateList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_IntersectionState(Comp) || Comp <- Val]]
end.



dec_IntersectionStateList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components14(V1@Add2, V1@Buf1, []).

enc_ManeuverAssistList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_ConnectionManeuverAssist(Comp) || Comp <- Val]]
end.



dec_ManeuverAssistList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components15(V1@Add2, V1@Buf1, []).

enc_MovementEventList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_MovementEvent(Comp) || Comp <- Val]]
end.



dec_MovementEventList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components16(V1@Add2, V1@Buf1, []).

enc_MovementEvent(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute eventState(1) with type ENUMERATED
Enc5@element = element(2, Val),
if Enc5@element =:= unavailable ->
<<0:4>>;
Enc5@element =:= dark ->
<<1:4>>;
Enc5@element =:= 'stop-Then-Proceed' ->
<<2:4>>;
Enc5@element =:= 'stop-And-Remain' ->
<<3:4>>;
Enc5@element =:= 'pre-Movement' ->
<<4:4>>;
Enc5@element =:= 'permissive-Movement-Allowed' ->
<<5:4>>;
Enc5@element =:= 'protected-Movement-Allowed' ->
<<6:4>>;
Enc5@element =:= 'permissive-clearance' ->
<<7:4>>;
Enc5@element =:= 'protected-clearance' ->
<<8:4>>;
Enc5@element =:= 'caution-Conflicting-Traffic' ->
<<9:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end,
begin
%% attribute timing(2) with type TimeChangeDetails
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
enc_TimeChangeDetails(Enc7@element)
end
end,
begin
%% attribute speeds(3) with type AdvisorySpeedList
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_AdvisorySpeedList(Enc9@element)
end
end|begin
%% attribute regional(4) with type SEQUENCE OF
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_MovementEvent_regional(Enc11@element)
end
end].
enc_MovementEvent_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_MovementEvent_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_MovementEvent_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type17(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_MovementEvent(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute eventState(1) with type ENUMERATED
{Term1,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> dark;
2 -> 'stop-Then-Proceed';
3 -> 'stop-And-Remain';
4 -> 'pre-Movement';
5 -> 'permissive-Movement-Allowed';
6 -> 'protected-Movement-Allowed';
7 -> 'permissive-clearance';
8 -> 'protected-clearance';
9 -> 'caution-Conflicting-Traffic';
_ -> exit({error,{asn1,{decode_enumerated,V3@V0}}})
end,
{V3@Int2,V3@Buf1}
end,

%% attribute timing(2) with type TimeChangeDetails
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_TimeChangeDetails(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute speeds(3) with type AdvisorySpeedList
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_AdvisorySpeedList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute regional(4) with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_MovementEvent_regional(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'MovementEvent',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.


dec_MovementEvent_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components18(V1@Add2, V1@Buf1, []).


dec_MovementEvent_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type19(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_MovementList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|[enc_MovementState(Comp) || Comp <- Val]]
end.



dec_MovementList(Bytes) ->
%% Length with constraint {1,255}
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components20(V1@Add2, V1@Buf1, []).

enc_MovementState(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute movementName(1) with type IA5String
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@len = length(Enc5@element),
Enc6@bin = encode_chars(Enc5@element, 7),
Enc6@len@sub = Enc6@len - 1,
if 0 =< Enc6@len@sub, Enc6@len@sub < 63 ->
[<<Enc6@len@sub:6>>|Enc6@bin]
end
end
end
end,
begin
%% attribute signalGroup(2) with type INTEGER
Enc8@element = element(3, Val),
if Enc8@element bsr 8 =:= 0 ->
Enc8@element;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute state-time-speed(3) with type MovementEventList
Enc10@element = element(4, Val),
enc_MovementEventList(Enc10@element)
end,
begin
%% attribute maneuverAssistList(4) with type ManeuverAssistList
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_ManeuverAssistList(Enc11@element)
end
end|begin
%% attribute regional(5) with type SEQUENCE OF
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_MovementState_regional(Enc13@element)
end
end].
enc_MovementState_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_MovementState_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_MovementState_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type1(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_MovementState(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute movementName(1) with type IA5String
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:7,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V5,V3@Buf6}  = {decode_chars(V3@V3, 7),V3@Buf4},
{V3@V5,V3@Buf6}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute signalGroup(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute state-time-speed(3) with type MovementEventList
{Term3,Bytes5} = dec_MovementEventList(Bytes4),

%% attribute maneuverAssistList(4) with type ManeuverAssistList
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_ManeuverAssistList(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute regional(5) with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
dec_MovementState_regional(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
Res1 = {'MovementState',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes9}.


dec_MovementState_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components21(V1@Add2, V1@Buf1, []).


dec_MovementState_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type3(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_TimeChangeDetails(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute startTime(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
0 =< Enc6@element, Enc6@element < 36112 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute minEndTime(2) with type INTEGER
Enc9@element = element(3, Val),
if 0 =< Enc9@element, Enc9@element < 36112 ->
<<Enc9@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute maxEndTime(3) with type INTEGER
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
0 =< Enc11@element, Enc11@element < 36112 ->
<<Enc11@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute likelyTime(4) with type INTEGER
Enc14@element = element(5, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
0 =< Enc14@element, Enc14@element < 36112 ->
<<Enc14@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute confidence(5) with type INTEGER
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 4 =:= 0 ->
<<Enc17@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end|begin
%% attribute nextTime(6) with type INTEGER
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
0 =< Enc20@element, Enc20@element < 36112 ->
<<Enc20@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end].


dec_TimeChangeDetails(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute startTime(1) with type INTEGER
{Term1,Bytes2} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute minEndTime(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute maxEndTime(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute likelyTime(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute confidence(5) with type INTEGER
{Term5,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:4,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute nextTime(6) with type INTEGER
{Term6,Bytes7} = case Opt band 1 of
1 ->
begin
<<V7@V0:16,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,
Res1 = {'TimeChangeDetails',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes7}.

enc_AdvisorySpeedType(Val) ->
if Val =:= none ->
<<0:1,0:2>>;
Val =:= greenwave ->
<<0:1,1:2>>;
Val =:= ecoDrive ->
<<0:1,2:2>>;
Val =:= transit ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AdvisorySpeedType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> greenwave;
2 -> ecoDrive;
3 -> transit
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_IntersectionStatusObject(Val) ->
Enc1@bs = try bit_string_name2pos_10(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


dec_IntersectionStatusObject(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_MovementPhaseState(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= dark ->
<<1:4>>;
Val =:= 'stop-Then-Proceed' ->
<<2:4>>;
Val =:= 'stop-And-Remain' ->
<<3:4>>;
Val =:= 'pre-Movement' ->
<<4:4>>;
Val =:= 'permissive-Movement-Allowed' ->
<<5:4>>;
Val =:= 'protected-Movement-Allowed' ->
<<6:4>>;
Val =:= 'permissive-clearance' ->
<<7:4>>;
Val =:= 'protected-clearance' ->
<<8:4>>;
Val =:= 'caution-Conflicting-Traffic' ->
<<9:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MovementPhaseState(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> dark;
2 -> 'stop-Then-Proceed';
3 -> 'stop-And-Remain';
4 -> 'pre-Movement';
5 -> 'permissive-Movement-Allowed';
6 -> 'protected-Movement-Allowed';
7 -> 'permissive-clearance';
8 -> 'protected-clearance';
9 -> 'caution-Conflicting-Traffic';
_ -> exit({error,{asn1,{decode_enumerated,V1@V0}}})
end,
{V1@Int2,V1@Buf1}
end.

enc_PedestrianBicycleDetect(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_PedestrianBicycleDetect(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_SpeedAdvice(Val) ->
if 0 =< Val, Val < 501 ->
<<Val:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SpeedAdvice(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TimeIntervalConfidence(Val) ->
if Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TimeIntervalConfidence(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TimeMark(Val) ->
if 0 =< Val, Val < 36112 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TimeMark(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_WaitOnStopline(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_boolean,Val}}})
end.


dec_WaitOnStopline(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

enc_ZoneLength(Val) ->
if 0 =< Val, Val < 10001 ->
<<Val:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ZoneLength(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

typeinfo('SPAT') ->
  {sequence,'SPAT',4,[{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,110,116,101,114,115,101,99,116,105,111,110,115>>,{typeinfo,{'SPAT','IntersectionStateList'}},mandatory},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'SPAT_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'SPAT',internal_object_set_argument_6}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('AdvisorySpeed') ->
  {sequence,'AdvisorySpeed',6,[{<<116,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,greenwave => 1,ecoDrive => 2,transit => 3}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,500}},'OPTIONAL'},{<<99,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}},'OPTIONAL'},{<<100,105,115,116,97,110,99,101>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<99,108,97,115,115>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'AdvisorySpeed_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'SPAT',internal_object_set_argument_1}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('AdvisorySpeedList') ->
  {sof,{typeinfo,{'SPAT','AdvisorySpeed'}}};
typeinfo('ConnectionManeuverAssist') ->
  {sequence,'ConnectionManeuverAssist',6,[{<<99,111,110,110,101,99,116,105,111,110,73,68>>,{'INTEGER',{0,255}},mandatory},{<<113,117,101,117,101,76,101,110,103,116,104>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<97,118,97,105,108,97,98,108,101,83,116,111,114,97,103,101,76,101,110,103,116,104>>,{'INTEGER',{0,10000}},'OPTIONAL'},{<<119,97,105,116,79,110,83,116,111,112>>,'BOOLEAN','OPTIONAL'},{<<112,101,100,66,105,99,121,99,108,101,68,101,116,101,99,116>>,'BOOLEAN','OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ConnectionManeuverAssist_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'SPAT',internal_object_set_argument_3}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('EnabledLaneList') ->
  {sof,{'INTEGER',{0,255}}};
typeinfo('IntersectionState') ->
  {sequence,'IntersectionState',10,[{<<110,97,109,101>>,string,'OPTIONAL'},{<<105,100>>,{typeinfo,{'Common','IntersectionReferenceID'}},mandatory},{<<114,101,118,105,115,105,111,110>>,{'INTEGER',{0,127}},mandatory},{<<115,116,97,116,117,115>>,{{bit_string_nnl,[{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]},16},mandatory},{<<109,111,121>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<101,110,97,98,108,101,100,76,97,110,101,115>>,{typeinfo,{'SPAT','EnabledLaneList'}},'OPTIONAL'},{<<115,116,97,116,101,115>>,{typeinfo,{'SPAT','MovementList'}},mandatory},{<<109,97,110,101,117,118,101,114,65,115,115,105,115,116,76,105,115,116>>,{typeinfo,{'SPAT','ManeuverAssistList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'IntersectionState_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'SPAT',internal_object_set_argument_5}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('IntersectionStateList') ->
  {sof,{typeinfo,{'SPAT','IntersectionState'}}};
typeinfo('ManeuverAssistList') ->
  {sof,{typeinfo,{'SPAT','ConnectionManeuverAssist'}}};
typeinfo('MovementEventList') ->
  {sof,{typeinfo,{'SPAT','MovementEvent'}}};
typeinfo('MovementEvent') ->
  {sequence,'MovementEvent',4,[{<<101,118,101,110,116,83,116,97,116,101>>,{'ENUMERATED',#{unavailable => 0,dark => 1,'stop-Then-Proceed' => 2,'stop-And-Remain' => 3,'pre-Movement' => 4,'permissive-Movement-Allowed' => 5,'protected-Movement-Allowed' => 6,'permissive-clearance' => 7,'protected-clearance' => 8,'caution-Conflicting-Traffic' => 9}},mandatory},{<<116,105,109,105,110,103>>,{typeinfo,{'SPAT','TimeChangeDetails'}},'OPTIONAL'},{<<115,112,101,101,100,115>>,{typeinfo,{'SPAT','AdvisorySpeedList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'MovementEvent_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'SPAT',internal_object_set_argument_2}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('MovementList') ->
  {sof,{typeinfo,{'SPAT','MovementState'}}};
typeinfo('MovementState') ->
  {sequence,'MovementState',5,[{<<109,111,118,101,109,101,110,116,78,97,109,101>>,string,'OPTIONAL'},{<<115,105,103,110,97,108,71,114,111,117,112>>,{'INTEGER',{0,255}},mandatory},{<<115,116,97,116,101,45,116,105,109,101,45,115,112,101,101,100>>,{typeinfo,{'SPAT','MovementEventList'}},mandatory},{<<109,97,110,101,117,118,101,114,65,115,115,105,115,116,76,105,115,116>>,{typeinfo,{'SPAT','ManeuverAssistList'}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'MovementState_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'SPAT',internal_object_set_argument_4}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('TimeChangeDetails') ->
  {sequence,'TimeChangeDetails',6,[{<<115,116,97,114,116,84,105,109,101>>,{'INTEGER',{0,36111}},'OPTIONAL'},{<<109,105,110,69,110,100,84,105,109,101>>,{'INTEGER',{0,36111}},mandatory},{<<109,97,120,69,110,100,84,105,109,101>>,{'INTEGER',{0,36111}},'OPTIONAL'},{<<108,105,107,101,108,121,84,105,109,101>>,{'INTEGER',{0,36111}},'OPTIONAL'},{<<99,111,110,102,105,100,101,110,99,101>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<110,101,120,116,84,105,109,101>>,{'INTEGER',{0,36111}},'OPTIONAL'}]};
typeinfo('AdvisorySpeedType') ->
  {'ENUMERATED_EXT',#{none => 0,greenwave => 1,ecoDrive => 2,transit => 3}};
typeinfo('IntersectionStatusObject') ->
  {{bit_string_nnl,[{manualControlIsEnabled,0},{stopTimeIsActivated,1},{failureFlash,2},{preemptIsActive,3},{signalPriorityIsActive,4},{fixedTimeOperation,5},{trafficDependentOperation,6},{standbyOperation,7},{failureMode,8},{off,9},{recentMAPmessageUpdate,10},{recentChangeInMAPassignedLanesIDsUsed,11},{noValidMAPisAvailableAtThisTime,12},{noValidSPATisAvailableAtThisTime,13}]},16};
typeinfo('MovementPhaseState') ->
  {'ENUMERATED',#{unavailable => 0,dark => 1,'stop-Then-Proceed' => 2,'stop-And-Remain' => 3,'pre-Movement' => 4,'permissive-Movement-Allowed' => 5,'protected-Movement-Allowed' => 6,'permissive-clearance' => 7,'protected-clearance' => 8,'caution-Conflicting-Traffic' => 9}};
typeinfo('PedestrianBicycleDetect') ->
  'BOOLEAN';
typeinfo('SpeedAdvice') ->
  {'INTEGER',{0,500}};
typeinfo('TimeIntervalConfidence') ->
  {'INTEGER',{0,15}};
typeinfo('TimeMark') ->
  {'INTEGER',{0,36111}};
typeinfo('WaitOnStopline') ->
  'BOOLEAN';
typeinfo('ZoneLength') ->
  {'INTEGER',{0,10000}};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_10([manualControlIsEnabled | T]) ->
    [0 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([stopTimeIsActivated | T]) ->
    [1 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([failureFlash | T]) ->
    [2 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([preemptIsActive | T]) ->
    [3 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([signalPriorityIsActive | T]) ->
    [4 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([fixedTimeOperation | T]) ->
    [5 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([trafficDependentOperation | T]) ->
    [6 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([standbyOperation | T]) ->
    [7 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([failureMode | T]) ->
    [8 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([off | T]) ->
    [9 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([recentMAPmessageUpdate | T]) ->
    [10 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([recentChangeInMAPassignedLanesIDsUsed | T]) ->
    [11 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([noValidMAPisAvailableAtThisTime | T]) ->
    [12 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([noValidSPATisAvailableAtThisTime | T]) ->
    [13 | bit_string_name2pos_10(T)];
bit_string_name2pos_10([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_10(T)];
bit_string_name2pos_10([]) ->
    [];
bit_string_name2pos_10(_) ->
    throw(invalid).

dec_components12(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components12(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntersectionState_regional_RegionalExtension(Bytes),
dec_components12(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntersectionState(Bytes),
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components15(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components15(Num, Bytes, Acc) ->
{Term,Remain} = dec_ConnectionManeuverAssist(Bytes),
dec_components15(Num-1, Remain, [Term|Acc]).

dec_components16(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components16(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementEvent(Bytes),
dec_components16(Num-1, Remain, [Term|Acc]).

dec_components18(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components18(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementEvent_regional_RegionalExtension(Bytes),
dec_components18(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = dec_SPAT_regional_RegionalExtension(Bytes),
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementState(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components21(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components21(Num, Bytes, Acc) ->
{Term,Remain} = dec_MovementState_regional_RegionalExtension(Bytes),
dec_components21(Num-1, Remain, [Term|Acc]).

dec_components4(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components4(Num, Bytes, Acc) ->
{Term,Remain} = dec_AdvisorySpeed_regional_RegionalExtension(Bytes),
dec_components4(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = dec_AdvisorySpeed(Bytes),
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = dec_ConnectionManeuverAssist_regional_RegionalExtension(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
dec_components9(Num-1, Remain, [Term|Acc]).

dec_os_Type13(Bytes, Id) when Id =:= 3 ->
{Term,_} = 'AddGrpC':'dec_IntersectionState-addGrpC'(Bytes),
Term;
dec_os_Type13(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type19(Bytes, Id) when Id =:= 2 ->
{Term,_} = 'AddGrpB':'dec_MovementEvent-addGrpB'(Bytes),
Term;
dec_os_Type19(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type3(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type8(Bytes, Id) when Id =:= 3 ->
{Term,_} = 'AddGrpC':'dec_ConnectionManeuverAssist-addGrpC'(Bytes),
Term;
dec_os_Type8(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Type1(Val, Id) ->
open_type_to_binary(Val).

enc_os_Type11(Val, Id) ->
if Id =:= 3 ->
'AddGrpC':'enc_IntersectionState-addGrpC'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Type17(Val, Id) ->
if Id =:= 2 ->
'AddGrpB':'enc_MovementEvent-addGrpB'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Type6(Val, Id) ->
if Id =:= 3 ->
'AddGrpC':'enc_ConnectionManeuverAssist-addGrpC'(Val);
true ->
open_type_to_binary(Val)
end.

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_chars(Val, N) ->
    [ 
     C ||
         <<C:N>> <= Val
    ].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

encode_chars(Val, NumBits) ->
    << 
      <<C:NumBits>> ||
          C <- Val
    >>.

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

open_type_to_binary({asn1_OPENTYPE, Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
