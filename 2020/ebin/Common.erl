%% Generated by the Erlang ASN.1 PER (unaligned) compiler. Version: 5.3.1
%% Purpose: Encoding and decoding of the types in Common.

-module('Common').
-moduledoc false.
-compile(nowarn_unused_vars).
-dialyzer(no_improper_lists).
-dialyzer(no_match).
-include("Common.hrl").
-asn1_info([{vsn,'5.3.1'},
            {module,'Common'},
            {options,[{i,"./ebin"},uper,jer,verbose,{i,"./asn"},{outdir,"./ebin"},{i,"."}]}]).

-export([encoding_rule/0,maps/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([typeinfo/1]).
-export([
enc_AccelerationSet4Way/1,
enc_AntennaOffsetSet/1,
enc_BrakeSystemStatus/1,
enc_BSMcoreData/1,
enc_BumperHeights/1,
enc_ComputedLane/1,
enc_DDate/1,
enc_DDateTime/1,
enc_DFullTime/1,
enc_DMonthDay/1,
enc_DTime/1,
enc_DYearMonth/1,
enc_EmergencyDetails/1,
enc_FullPositionVector/1,
enc_Header/1,
enc_IntersectionAccessPoint/1,
enc_IntersectionReferenceID/1,
enc_LaneDataAttribute/1,
enc_LaneDataAttributeList/1,
'enc_Node-LLmD-64b'/1,
'enc_Node-XY-20b'/1,
'enc_Node-XY-22b'/1,
'enc_Node-XY-24b'/1,
'enc_Node-XY-26b'/1,
'enc_Node-XY-28b'/1,
'enc_Node-XY-32b'/1,
enc_NodeAttributeSetXY/1,
enc_NodeAttributeXYList/1,
enc_NodeListXY/1,
enc_NodeOffsetPointXY/1,
enc_NodeSetXY/1,
enc_NodeXY/1,
enc_PathHistory/1,
enc_PathHistoryPointList/1,
enc_PathHistoryPoint/1,
enc_PathPrediction/1,
enc_Position3D/1,
enc_PositionalAccuracy/1,
enc_PositionConfidenceSet/1,
enc_PrivilegedEvents/1,
enc_RegulatorySpeedLimit/1,
enc_RequestorType/1,
enc_RoadSegmentReferenceID/1,
enc_RTCMheader/1,
enc_RTCMmessageList/1,
enc_SegmentAttributeXYList/1,
enc_SpeedandHeadingandThrottleConfidence/1,
enc_SpeedLimitList/1,
enc_TransmissionAndSpeed/1,
enc_VehicleClassification/1,
enc_VehicleID/1,
enc_VehicleSafetyExtensions/1,
enc_VehicleSize/1,
enc_VerticalOffset/1,
enc_WiperSet/1,
enc_Acceleration/1,
enc_AmbientAirPressure/1,
enc_AmbientAirTemperature/1,
enc_Angle/1,
enc_AntiLockBrakeStatus/1,
enc_ApproachID/1,
enc_AuxiliaryBrakeStatus/1,
enc_BasicVehicleClass/1,
enc_BasicVehicleRole/1,
enc_BrakeAppliedStatus/1,
enc_BrakeBoostApplied/1,
enc_BumperHeight/1,
enc_CoarseHeading/1,
enc_CodeWord/1,
enc_CoefficientOfFriction/1,
enc_Confidence/1,
enc_Count/1,
enc_DDay/1,
enc_DeltaAngle/1,
enc_DescriptiveName/1,
enc_DHour/1,
enc_DMinute/1,
enc_DMonth/1,
enc_DOffset/1,
enc_DrivenLineOffsetLg/1,
enc_DrivenLineOffsetSm/1,
enc_DSecond/1,
enc_Duration/1,
enc_DYear/1,
enc_ElevationConfidence/1,
enc_Elevation/1,
enc_Extent/1,
enc_ExteriorLights/1,
enc_FuelType/1,
enc_FurtherInfoID/1,
enc_GNSSstatus/1,
enc_GrossSpeed/1,
enc_HeadingConfidence/1,
enc_Heading/1,
enc_HeadingSlice/1,
enc_IntersectionID/1,
enc_Iso3833VehicleType/1,
enc_TrailerWeight/1,
enc_LaneConnectionID/1,
enc_LaneID/1,
enc_LaneWidth/1,
enc_Latitude/1,
enc_LightbarInUse/1,
enc_Longitude/1,
'enc_Location-quality'/1,
'enc_Location-tech'/1,
enc_MergeDivergeNodeAngle/1,
enc_MessageBLOB/1,
enc_MinuteOfTheYear/1,
enc_MsgCount/1,
enc_MultiVehicleResponse/1,
enc_NodeAttributeXY/1,
enc_ObstacleDistance/1,
'enc_Offset-B09'/1,
'enc_Offset-B10'/1,
'enc_Offset-B11'/1,
'enc_Offset-B12'/1,
'enc_Offset-B13'/1,
'enc_Offset-B14'/1,
'enc_Offset-B16'/1,
'enc_OffsetLL-B18'/1,
enc_PayloadData/1,
enc_PositionConfidence/1,
enc_PrioritizationResponseStatus/1,
enc_Priority/1,
enc_PrivilegedEventFlags/1,
enc_RadiusOfCurvature/1,
enc_RegionId/1,
enc_RequestID/1,
enc_RequestImportanceLevel/1,
enc_RequestSubRole/1,
enc_ResponseType/1,
enc_RestrictionClassID/1,
enc_RoadRegulatorID/1,
enc_RoadSegmentID/1,
enc_RoadwayCrownAngle/1,
enc_RTCMmessage/1,
'enc_Scale-B12'/1,
enc_SegmentAttributeXY/1,
enc_SemiMajorAxisAccuracy/1,
enc_SemiMajorAxisOrientation/1,
enc_SemiMinorAxisAccuracy/1,
enc_SignalGroupID/1,
enc_SignalReqScheme/1,
enc_SirenInUse/1,
enc_SpeedConfidence/1,
enc_SpeedLimitType/1,
enc_Speed/1,
enc_SSPindex/1,
enc_StabilityControlStatus/1,
enc_StationID/1,
enc_SteeringWheelAngle/1,
enc_TemporaryID/1,
enc_ThrottleConfidence/1,
enc_TimeConfidence/1,
enc_TimeOffset/1,
enc_TractionControlStatus/1,
enc_TransitStatus/1,
enc_TransmissionState/1,
'enc_URL-Link'/1,
enc_VehicleEventFlags/1,
enc_VehicleHeight/1,
enc_VehicleLength/1,
enc_VehicleMass/1,
enc_VehicleType/1,
enc_VehicleWidth/1,
enc_Velocity/1,
enc_VerticalAccelerationThreshold/1,
enc_VerticalAcceleration/1,
'enc_VertOffset-B08'/1,
'enc_VertOffset-B09'/1,
'enc_VertOffset-B10'/1,
'enc_VertOffset-B11'/1,
'enc_VertOffset-B12'/1,
enc_WiperRate/1,
enc_WiperStatus/1,
enc_YawRate/1
]).

-export([
dec_AccelerationSet4Way/1,
dec_AntennaOffsetSet/1,
dec_BrakeSystemStatus/1,
dec_BSMcoreData/1,
dec_BumperHeights/1,
dec_ComputedLane/1,
dec_DDate/1,
dec_DDateTime/1,
dec_DFullTime/1,
dec_DMonthDay/1,
dec_DTime/1,
dec_DYearMonth/1,
dec_EmergencyDetails/1,
dec_FullPositionVector/1,
dec_Header/1,
dec_IntersectionAccessPoint/1,
dec_IntersectionReferenceID/1,
dec_LaneDataAttribute/1,
dec_LaneDataAttributeList/1,
'dec_Node-LLmD-64b'/1,
'dec_Node-XY-20b'/1,
'dec_Node-XY-22b'/1,
'dec_Node-XY-24b'/1,
'dec_Node-XY-26b'/1,
'dec_Node-XY-28b'/1,
'dec_Node-XY-32b'/1,
dec_NodeAttributeSetXY/1,
dec_NodeAttributeXYList/1,
dec_NodeListXY/1,
dec_NodeOffsetPointXY/1,
dec_NodeSetXY/1,
dec_NodeXY/1,
dec_PathHistory/1,
dec_PathHistoryPointList/1,
dec_PathHistoryPoint/1,
dec_PathPrediction/1,
dec_Position3D/1,
dec_PositionalAccuracy/1,
dec_PositionConfidenceSet/1,
dec_PrivilegedEvents/1,
dec_RegulatorySpeedLimit/1,
dec_RequestorType/1,
dec_RoadSegmentReferenceID/1,
dec_RTCMheader/1,
dec_RTCMmessageList/1,
dec_SegmentAttributeXYList/1,
dec_SpeedandHeadingandThrottleConfidence/1,
dec_SpeedLimitList/1,
dec_TransmissionAndSpeed/1,
dec_VehicleClassification/1,
dec_VehicleID/1,
dec_VehicleSafetyExtensions/1,
dec_VehicleSize/1,
dec_VerticalOffset/1,
dec_WiperSet/1,
dec_Acceleration/1,
dec_AmbientAirPressure/1,
dec_AmbientAirTemperature/1,
dec_Angle/1,
dec_AntiLockBrakeStatus/1,
dec_ApproachID/1,
dec_AuxiliaryBrakeStatus/1,
dec_BasicVehicleClass/1,
dec_BasicVehicleRole/1,
dec_BrakeAppliedStatus/1,
dec_BrakeBoostApplied/1,
dec_BumperHeight/1,
dec_CoarseHeading/1,
dec_CodeWord/1,
dec_CoefficientOfFriction/1,
dec_Confidence/1,
dec_Count/1,
dec_DDay/1,
dec_DeltaAngle/1,
dec_DescriptiveName/1,
dec_DHour/1,
dec_DMinute/1,
dec_DMonth/1,
dec_DOffset/1,
dec_DrivenLineOffsetLg/1,
dec_DrivenLineOffsetSm/1,
dec_DSecond/1,
dec_Duration/1,
dec_DYear/1,
dec_ElevationConfidence/1,
dec_Elevation/1,
dec_Extent/1,
dec_ExteriorLights/1,
dec_FuelType/1,
dec_FurtherInfoID/1,
dec_GNSSstatus/1,
dec_GrossSpeed/1,
dec_HeadingConfidence/1,
dec_Heading/1,
dec_HeadingSlice/1,
dec_IntersectionID/1,
dec_Iso3833VehicleType/1,
dec_TrailerWeight/1,
dec_LaneConnectionID/1,
dec_LaneID/1,
dec_LaneWidth/1,
dec_Latitude/1,
dec_LightbarInUse/1,
dec_Longitude/1,
'dec_Location-quality'/1,
'dec_Location-tech'/1,
dec_MergeDivergeNodeAngle/1,
dec_MessageBLOB/1,
dec_MinuteOfTheYear/1,
dec_MsgCount/1,
dec_MultiVehicleResponse/1,
dec_NodeAttributeXY/1,
dec_ObstacleDistance/1,
'dec_Offset-B09'/1,
'dec_Offset-B10'/1,
'dec_Offset-B11'/1,
'dec_Offset-B12'/1,
'dec_Offset-B13'/1,
'dec_Offset-B14'/1,
'dec_Offset-B16'/1,
'dec_OffsetLL-B18'/1,
dec_PayloadData/1,
dec_PositionConfidence/1,
dec_PrioritizationResponseStatus/1,
dec_Priority/1,
dec_PrivilegedEventFlags/1,
dec_RadiusOfCurvature/1,
dec_RegionId/1,
dec_RequestID/1,
dec_RequestImportanceLevel/1,
dec_RequestSubRole/1,
dec_ResponseType/1,
dec_RestrictionClassID/1,
dec_RoadRegulatorID/1,
dec_RoadSegmentID/1,
dec_RoadwayCrownAngle/1,
dec_RTCMmessage/1,
'dec_Scale-B12'/1,
dec_SegmentAttributeXY/1,
dec_SemiMajorAxisAccuracy/1,
dec_SemiMajorAxisOrientation/1,
dec_SemiMinorAxisAccuracy/1,
dec_SignalGroupID/1,
dec_SignalReqScheme/1,
dec_SirenInUse/1,
dec_SpeedConfidence/1,
dec_SpeedLimitType/1,
dec_Speed/1,
dec_SSPindex/1,
dec_StabilityControlStatus/1,
dec_StationID/1,
dec_SteeringWheelAngle/1,
dec_TemporaryID/1,
dec_ThrottleConfidence/1,
dec_TimeConfidence/1,
dec_TimeOffset/1,
dec_TractionControlStatus/1,
dec_TransitStatus/1,
dec_TransmissionState/1,
'dec_URL-Link'/1,
dec_VehicleEventFlags/1,
dec_VehicleHeight/1,
dec_VehicleLength/1,
dec_VehicleMass/1,
dec_VehicleType/1,
dec_VehicleWidth/1,
dec_Velocity/1,
dec_VerticalAccelerationThreshold/1,
dec_VerticalAcceleration/1,
'dec_VertOffset-B08'/1,
'dec_VertOffset-B09'/1,
'dec_VertOffset-B10'/1,
'dec_VertOffset-B11'/1,
'dec_VertOffset-B12'/1,
dec_WiperRate/1,
dec_WiperStatus/1,
dec_YawRate/1
]).

-export([
unknownVehicleClass/0,
specialVehicleClass/0,
'passenger-Vehicle-TypeUnknown'/0,
'passenger-Vehicle-TypeOther'/0,
'lightTruck-Vehicle-TypeUnknown'/0,
'lightTruck-Vehicle-TypeOther'/0,
'truck-Vehicle-TypeUnknown'/0,
'truck-Vehicle-TypeOther'/0,
'truck-axleCnt2'/0,
'truck-axleCnt3'/0,
'truck-axleCnt4'/0,
'truck-axleCnt4Trailer'/0,
'truck-axleCnt5Trailer'/0,
'truck-axleCnt6Trailer'/0,
'truck-axleCnt5MultiTrailer'/0,
'truck-axleCnt6MultiTrailer'/0,
'truck-axleCnt7MultiTrailer'/0,
'motorcycle-TypeUnknown'/0,
'motorcycle-TypeOther'/0,
'motorcycle-Cruiser-Standard'/0,
'motorcycle-SportUnclad'/0,
'motorcycle-SportTouring'/0,
'motorcycle-SuperSport'/0,
'motorcycle-Touring'/0,
'motorcycle-Trike'/0,
'motorcycle-wPassengers'/0,
'transit-TypeUnknown'/0,
'transit-TypeOther'/0,
'transit-BRT'/0,
'transit-ExpressBus'/0,
'transit-LocalBus'/0,
'transit-SchoolBus'/0,
'transit-FixedGuideway'/0,
'transit-Paratransit'/0,
'transit-Paratransit-Ambulance'/0,
'emergency-TypeUnknown'/0,
'emergency-TypeOther'/0,
'emergency-Fire-Light-Vehicle'/0,
'emergency-Fire-Heavy-Vehicle'/0,
'emergency-Fire-Paramedic-Vehicle'/0,
'emergency-Fire-Ambulance-Vehicle'/0,
'emergency-Police-Light-Vehicle'/0,
'emergency-Police-Heavy-Vehicle'/0,
'emergency-Other-Responder'/0,
'emergency-Other-Ambulance'/0,
'otherTraveler-TypeUnknown'/0,
'otherTraveler-TypeOther'/0,
'otherTraveler-Pedestrian'/0,
'otherTraveler-Visually-Disabled'/0,
'otherTraveler-Physically-Disabled'/0,
'otherTraveler-Bicycle'/0,
'otherTraveler-Vulnerable-Roadworker'/0,
'infrastructure-TypeUnknown'/0,
'infrastructure-Fixed'/0,
'infrastructure-Movable'/0,
'equipped-CargoTrailer'/0,
'reservedMessageId-D'/0,
'alaCarteMessage-D'/0,
'basicSafetyMessage-D'/0,
'basicSafetyMessageVerbose-D'/0,
'commonSafetyRequest-D'/0,
'emergencyVehicleAlert-D'/0,
'intersectionCollision-D'/0,
'mapData-D'/0,
'nmeaCorrections-D'/0,
'probeDataManagement-D'/0,
'probeVehicleData-D'/0,
'roadSideAlert-D'/0,
'rtcmCorrections-D'/0,
'signalPhaseAndTimingMessage-D'/0,
'signalRequestMessage-D'/0,
'signalStatusMessage-D'/0,
'travelerInformation-D'/0,
'uperFrame-D'/0,
unknownFuel/0,
gasoline/0,
ethanol/0,
diesel/0,
electric/0,
hybrid/0,
hydrogen/0,
natGasLiquid/0,
natGasComp/0,
propane/0,
noRegion/0,
addGrpA/0,
addGrpB/0,
addGrpC/0
]).

-export([info/0]).

-export([encode/2,decode/2]).
-export([jer_encode/2,jer_decode/2]).

encoding_rule() -> uper.

maps() -> false.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


jer_encode(Type, Data) ->
try encode_jer('Common', Type, Data) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.


decode(Type, Data) ->
try
   {Result,_Rest} = decode_disp(Type, Data),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

jer_decode(Type, Data) ->
try
   Result = decode_jer('Common', Type, json:decode(Data)),
   {ok,Result}
  catch
    Class:Exception:Stk when Class =:= error; Class =:= exit ->
      case Exception of
        {error,{asn1,Reason}} ->
          {error,{asn1,{Reason,Stk}}};
        Reason ->
         {error,{asn1,{Reason,Stk}}}
      end
end.

encode_disp('AccelerationSet4Way', Data) -> enc_AccelerationSet4Way(Data);
encode_disp('AntennaOffsetSet', Data) -> enc_AntennaOffsetSet(Data);
encode_disp('BrakeSystemStatus', Data) -> enc_BrakeSystemStatus(Data);
encode_disp('BSMcoreData', Data) -> enc_BSMcoreData(Data);
encode_disp('BumperHeights', Data) -> enc_BumperHeights(Data);
encode_disp('ComputedLane', Data) -> enc_ComputedLane(Data);
encode_disp('DDate', Data) -> enc_DDate(Data);
encode_disp('DDateTime', Data) -> enc_DDateTime(Data);
encode_disp('DFullTime', Data) -> enc_DFullTime(Data);
encode_disp('DMonthDay', Data) -> enc_DMonthDay(Data);
encode_disp('DTime', Data) -> enc_DTime(Data);
encode_disp('DYearMonth', Data) -> enc_DYearMonth(Data);
encode_disp('EmergencyDetails', Data) -> enc_EmergencyDetails(Data);
encode_disp('FullPositionVector', Data) -> enc_FullPositionVector(Data);
encode_disp('Header', Data) -> enc_Header(Data);
encode_disp('IntersectionAccessPoint', Data) -> enc_IntersectionAccessPoint(Data);
encode_disp('IntersectionReferenceID', Data) -> enc_IntersectionReferenceID(Data);
encode_disp('LaneDataAttribute', Data) -> enc_LaneDataAttribute(Data);
encode_disp('LaneDataAttributeList', Data) -> enc_LaneDataAttributeList(Data);
encode_disp('Node-LLmD-64b', Data) -> 'enc_Node-LLmD-64b'(Data);
encode_disp('Node-XY-20b', Data) -> 'enc_Node-XY-20b'(Data);
encode_disp('Node-XY-22b', Data) -> 'enc_Node-XY-22b'(Data);
encode_disp('Node-XY-24b', Data) -> 'enc_Node-XY-24b'(Data);
encode_disp('Node-XY-26b', Data) -> 'enc_Node-XY-26b'(Data);
encode_disp('Node-XY-28b', Data) -> 'enc_Node-XY-28b'(Data);
encode_disp('Node-XY-32b', Data) -> 'enc_Node-XY-32b'(Data);
encode_disp('NodeAttributeSetXY', Data) -> enc_NodeAttributeSetXY(Data);
encode_disp('NodeAttributeXYList', Data) -> enc_NodeAttributeXYList(Data);
encode_disp('NodeListXY', Data) -> enc_NodeListXY(Data);
encode_disp('NodeOffsetPointXY', Data) -> enc_NodeOffsetPointXY(Data);
encode_disp('NodeSetXY', Data) -> enc_NodeSetXY(Data);
encode_disp('NodeXY', Data) -> enc_NodeXY(Data);
encode_disp('PathHistory', Data) -> enc_PathHistory(Data);
encode_disp('PathHistoryPointList', Data) -> enc_PathHistoryPointList(Data);
encode_disp('PathHistoryPoint', Data) -> enc_PathHistoryPoint(Data);
encode_disp('PathPrediction', Data) -> enc_PathPrediction(Data);
encode_disp('Position3D', Data) -> enc_Position3D(Data);
encode_disp('PositionalAccuracy', Data) -> enc_PositionalAccuracy(Data);
encode_disp('PositionConfidenceSet', Data) -> enc_PositionConfidenceSet(Data);
encode_disp('PrivilegedEvents', Data) -> enc_PrivilegedEvents(Data);
encode_disp('RegulatorySpeedLimit', Data) -> enc_RegulatorySpeedLimit(Data);
encode_disp('RequestorType', Data) -> enc_RequestorType(Data);
encode_disp('RoadSegmentReferenceID', Data) -> enc_RoadSegmentReferenceID(Data);
encode_disp('RTCMheader', Data) -> enc_RTCMheader(Data);
encode_disp('RTCMmessageList', Data) -> enc_RTCMmessageList(Data);
encode_disp('SegmentAttributeXYList', Data) -> enc_SegmentAttributeXYList(Data);
encode_disp('SpeedandHeadingandThrottleConfidence', Data) -> enc_SpeedandHeadingandThrottleConfidence(Data);
encode_disp('SpeedLimitList', Data) -> enc_SpeedLimitList(Data);
encode_disp('TransmissionAndSpeed', Data) -> enc_TransmissionAndSpeed(Data);
encode_disp('VehicleClassification', Data) -> enc_VehicleClassification(Data);
encode_disp('VehicleID', Data) -> enc_VehicleID(Data);
encode_disp('VehicleSafetyExtensions', Data) -> enc_VehicleSafetyExtensions(Data);
encode_disp('VehicleSize', Data) -> enc_VehicleSize(Data);
encode_disp('VerticalOffset', Data) -> enc_VerticalOffset(Data);
encode_disp('WiperSet', Data) -> enc_WiperSet(Data);
encode_disp('Acceleration', Data) -> enc_Acceleration(Data);
encode_disp('AmbientAirPressure', Data) -> enc_AmbientAirPressure(Data);
encode_disp('AmbientAirTemperature', Data) -> enc_AmbientAirTemperature(Data);
encode_disp('Angle', Data) -> enc_Angle(Data);
encode_disp('AntiLockBrakeStatus', Data) -> enc_AntiLockBrakeStatus(Data);
encode_disp('ApproachID', Data) -> enc_ApproachID(Data);
encode_disp('AuxiliaryBrakeStatus', Data) -> enc_AuxiliaryBrakeStatus(Data);
encode_disp('BasicVehicleClass', Data) -> enc_BasicVehicleClass(Data);
encode_disp('BasicVehicleRole', Data) -> enc_BasicVehicleRole(Data);
encode_disp('BrakeAppliedStatus', Data) -> enc_BrakeAppliedStatus(Data);
encode_disp('BrakeBoostApplied', Data) -> enc_BrakeBoostApplied(Data);
encode_disp('BumperHeight', Data) -> enc_BumperHeight(Data);
encode_disp('CoarseHeading', Data) -> enc_CoarseHeading(Data);
encode_disp('CodeWord', Data) -> enc_CodeWord(Data);
encode_disp('CoefficientOfFriction', Data) -> enc_CoefficientOfFriction(Data);
encode_disp('Confidence', Data) -> enc_Confidence(Data);
encode_disp('Count', Data) -> enc_Count(Data);
encode_disp('DDay', Data) -> enc_DDay(Data);
encode_disp('DeltaAngle', Data) -> enc_DeltaAngle(Data);
encode_disp('DescriptiveName', Data) -> enc_DescriptiveName(Data);
encode_disp('DHour', Data) -> enc_DHour(Data);
encode_disp('DMinute', Data) -> enc_DMinute(Data);
encode_disp('DMonth', Data) -> enc_DMonth(Data);
encode_disp('DOffset', Data) -> enc_DOffset(Data);
encode_disp('DrivenLineOffsetLg', Data) -> enc_DrivenLineOffsetLg(Data);
encode_disp('DrivenLineOffsetSm', Data) -> enc_DrivenLineOffsetSm(Data);
encode_disp('DSecond', Data) -> enc_DSecond(Data);
encode_disp('Duration', Data) -> enc_Duration(Data);
encode_disp('DYear', Data) -> enc_DYear(Data);
encode_disp('ElevationConfidence', Data) -> enc_ElevationConfidence(Data);
encode_disp('Elevation', Data) -> enc_Elevation(Data);
encode_disp('Extent', Data) -> enc_Extent(Data);
encode_disp('ExteriorLights', Data) -> enc_ExteriorLights(Data);
encode_disp('FuelType', Data) -> enc_FuelType(Data);
encode_disp('FurtherInfoID', Data) -> enc_FurtherInfoID(Data);
encode_disp('GNSSstatus', Data) -> enc_GNSSstatus(Data);
encode_disp('GrossSpeed', Data) -> enc_GrossSpeed(Data);
encode_disp('HeadingConfidence', Data) -> enc_HeadingConfidence(Data);
encode_disp('Heading', Data) -> enc_Heading(Data);
encode_disp('HeadingSlice', Data) -> enc_HeadingSlice(Data);
encode_disp('IntersectionID', Data) -> enc_IntersectionID(Data);
encode_disp('Iso3833VehicleType', Data) -> enc_Iso3833VehicleType(Data);
encode_disp('TrailerWeight', Data) -> enc_TrailerWeight(Data);
encode_disp('LaneConnectionID', Data) -> enc_LaneConnectionID(Data);
encode_disp('LaneID', Data) -> enc_LaneID(Data);
encode_disp('LaneWidth', Data) -> enc_LaneWidth(Data);
encode_disp('Latitude', Data) -> enc_Latitude(Data);
encode_disp('LightbarInUse', Data) -> enc_LightbarInUse(Data);
encode_disp('Longitude', Data) -> enc_Longitude(Data);
encode_disp('Location-quality', Data) -> 'enc_Location-quality'(Data);
encode_disp('Location-tech', Data) -> 'enc_Location-tech'(Data);
encode_disp('MergeDivergeNodeAngle', Data) -> enc_MergeDivergeNodeAngle(Data);
encode_disp('MessageBLOB', Data) -> enc_MessageBLOB(Data);
encode_disp('MinuteOfTheYear', Data) -> enc_MinuteOfTheYear(Data);
encode_disp('MsgCount', Data) -> enc_MsgCount(Data);
encode_disp('MultiVehicleResponse', Data) -> enc_MultiVehicleResponse(Data);
encode_disp('NodeAttributeXY', Data) -> enc_NodeAttributeXY(Data);
encode_disp('ObstacleDistance', Data) -> enc_ObstacleDistance(Data);
encode_disp('Offset-B09', Data) -> 'enc_Offset-B09'(Data);
encode_disp('Offset-B10', Data) -> 'enc_Offset-B10'(Data);
encode_disp('Offset-B11', Data) -> 'enc_Offset-B11'(Data);
encode_disp('Offset-B12', Data) -> 'enc_Offset-B12'(Data);
encode_disp('Offset-B13', Data) -> 'enc_Offset-B13'(Data);
encode_disp('Offset-B14', Data) -> 'enc_Offset-B14'(Data);
encode_disp('Offset-B16', Data) -> 'enc_Offset-B16'(Data);
encode_disp('OffsetLL-B18', Data) -> 'enc_OffsetLL-B18'(Data);
encode_disp('PayloadData', Data) -> enc_PayloadData(Data);
encode_disp('PositionConfidence', Data) -> enc_PositionConfidence(Data);
encode_disp('PrioritizationResponseStatus', Data) -> enc_PrioritizationResponseStatus(Data);
encode_disp('Priority', Data) -> enc_Priority(Data);
encode_disp('PrivilegedEventFlags', Data) -> enc_PrivilegedEventFlags(Data);
encode_disp('RadiusOfCurvature', Data) -> enc_RadiusOfCurvature(Data);
encode_disp('RegionId', Data) -> enc_RegionId(Data);
encode_disp('RequestID', Data) -> enc_RequestID(Data);
encode_disp('RequestImportanceLevel', Data) -> enc_RequestImportanceLevel(Data);
encode_disp('RequestSubRole', Data) -> enc_RequestSubRole(Data);
encode_disp('ResponseType', Data) -> enc_ResponseType(Data);
encode_disp('RestrictionClassID', Data) -> enc_RestrictionClassID(Data);
encode_disp('RoadRegulatorID', Data) -> enc_RoadRegulatorID(Data);
encode_disp('RoadSegmentID', Data) -> enc_RoadSegmentID(Data);
encode_disp('RoadwayCrownAngle', Data) -> enc_RoadwayCrownAngle(Data);
encode_disp('RTCMmessage', Data) -> enc_RTCMmessage(Data);
encode_disp('Scale-B12', Data) -> 'enc_Scale-B12'(Data);
encode_disp('SegmentAttributeXY', Data) -> enc_SegmentAttributeXY(Data);
encode_disp('SemiMajorAxisAccuracy', Data) -> enc_SemiMajorAxisAccuracy(Data);
encode_disp('SemiMajorAxisOrientation', Data) -> enc_SemiMajorAxisOrientation(Data);
encode_disp('SemiMinorAxisAccuracy', Data) -> enc_SemiMinorAxisAccuracy(Data);
encode_disp('SignalGroupID', Data) -> enc_SignalGroupID(Data);
encode_disp('SignalReqScheme', Data) -> enc_SignalReqScheme(Data);
encode_disp('SirenInUse', Data) -> enc_SirenInUse(Data);
encode_disp('SpeedConfidence', Data) -> enc_SpeedConfidence(Data);
encode_disp('SpeedLimitType', Data) -> enc_SpeedLimitType(Data);
encode_disp('Speed', Data) -> enc_Speed(Data);
encode_disp('SSPindex', Data) -> enc_SSPindex(Data);
encode_disp('StabilityControlStatus', Data) -> enc_StabilityControlStatus(Data);
encode_disp('StationID', Data) -> enc_StationID(Data);
encode_disp('SteeringWheelAngle', Data) -> enc_SteeringWheelAngle(Data);
encode_disp('TemporaryID', Data) -> enc_TemporaryID(Data);
encode_disp('ThrottleConfidence', Data) -> enc_ThrottleConfidence(Data);
encode_disp('TimeConfidence', Data) -> enc_TimeConfidence(Data);
encode_disp('TimeOffset', Data) -> enc_TimeOffset(Data);
encode_disp('TractionControlStatus', Data) -> enc_TractionControlStatus(Data);
encode_disp('TransitStatus', Data) -> enc_TransitStatus(Data);
encode_disp('TransmissionState', Data) -> enc_TransmissionState(Data);
encode_disp('URL-Link', Data) -> 'enc_URL-Link'(Data);
encode_disp('VehicleEventFlags', Data) -> enc_VehicleEventFlags(Data);
encode_disp('VehicleHeight', Data) -> enc_VehicleHeight(Data);
encode_disp('VehicleLength', Data) -> enc_VehicleLength(Data);
encode_disp('VehicleMass', Data) -> enc_VehicleMass(Data);
encode_disp('VehicleType', Data) -> enc_VehicleType(Data);
encode_disp('VehicleWidth', Data) -> enc_VehicleWidth(Data);
encode_disp('Velocity', Data) -> enc_Velocity(Data);
encode_disp('VerticalAccelerationThreshold', Data) -> enc_VerticalAccelerationThreshold(Data);
encode_disp('VerticalAcceleration', Data) -> enc_VerticalAcceleration(Data);
encode_disp('VertOffset-B08', Data) -> 'enc_VertOffset-B08'(Data);
encode_disp('VertOffset-B09', Data) -> 'enc_VertOffset-B09'(Data);
encode_disp('VertOffset-B10', Data) -> 'enc_VertOffset-B10'(Data);
encode_disp('VertOffset-B11', Data) -> 'enc_VertOffset-B11'(Data);
encode_disp('VertOffset-B12', Data) -> 'enc_VertOffset-B12'(Data);
encode_disp('WiperRate', Data) -> enc_WiperRate(Data);
encode_disp('WiperStatus', Data) -> enc_WiperStatus(Data);
encode_disp('YawRate', Data) -> enc_YawRate(Data);
encode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

decode_disp('AccelerationSet4Way', Data) -> dec_AccelerationSet4Way(Data);
decode_disp('AntennaOffsetSet', Data) -> dec_AntennaOffsetSet(Data);
decode_disp('BrakeSystemStatus', Data) -> dec_BrakeSystemStatus(Data);
decode_disp('BSMcoreData', Data) -> dec_BSMcoreData(Data);
decode_disp('BumperHeights', Data) -> dec_BumperHeights(Data);
decode_disp('ComputedLane', Data) -> dec_ComputedLane(Data);
decode_disp('DDate', Data) -> dec_DDate(Data);
decode_disp('DDateTime', Data) -> dec_DDateTime(Data);
decode_disp('DFullTime', Data) -> dec_DFullTime(Data);
decode_disp('DMonthDay', Data) -> dec_DMonthDay(Data);
decode_disp('DTime', Data) -> dec_DTime(Data);
decode_disp('DYearMonth', Data) -> dec_DYearMonth(Data);
decode_disp('EmergencyDetails', Data) -> dec_EmergencyDetails(Data);
decode_disp('FullPositionVector', Data) -> dec_FullPositionVector(Data);
decode_disp('Header', Data) -> dec_Header(Data);
decode_disp('IntersectionAccessPoint', Data) -> dec_IntersectionAccessPoint(Data);
decode_disp('IntersectionReferenceID', Data) -> dec_IntersectionReferenceID(Data);
decode_disp('LaneDataAttribute', Data) -> dec_LaneDataAttribute(Data);
decode_disp('LaneDataAttributeList', Data) -> dec_LaneDataAttributeList(Data);
decode_disp('Node-LLmD-64b', Data) -> 'dec_Node-LLmD-64b'(Data);
decode_disp('Node-XY-20b', Data) -> 'dec_Node-XY-20b'(Data);
decode_disp('Node-XY-22b', Data) -> 'dec_Node-XY-22b'(Data);
decode_disp('Node-XY-24b', Data) -> 'dec_Node-XY-24b'(Data);
decode_disp('Node-XY-26b', Data) -> 'dec_Node-XY-26b'(Data);
decode_disp('Node-XY-28b', Data) -> 'dec_Node-XY-28b'(Data);
decode_disp('Node-XY-32b', Data) -> 'dec_Node-XY-32b'(Data);
decode_disp('NodeAttributeSetXY', Data) -> dec_NodeAttributeSetXY(Data);
decode_disp('NodeAttributeXYList', Data) -> dec_NodeAttributeXYList(Data);
decode_disp('NodeListXY', Data) -> dec_NodeListXY(Data);
decode_disp('NodeOffsetPointXY', Data) -> dec_NodeOffsetPointXY(Data);
decode_disp('NodeSetXY', Data) -> dec_NodeSetXY(Data);
decode_disp('NodeXY', Data) -> dec_NodeXY(Data);
decode_disp('PathHistory', Data) -> dec_PathHistory(Data);
decode_disp('PathHistoryPointList', Data) -> dec_PathHistoryPointList(Data);
decode_disp('PathHistoryPoint', Data) -> dec_PathHistoryPoint(Data);
decode_disp('PathPrediction', Data) -> dec_PathPrediction(Data);
decode_disp('Position3D', Data) -> dec_Position3D(Data);
decode_disp('PositionalAccuracy', Data) -> dec_PositionalAccuracy(Data);
decode_disp('PositionConfidenceSet', Data) -> dec_PositionConfidenceSet(Data);
decode_disp('PrivilegedEvents', Data) -> dec_PrivilegedEvents(Data);
decode_disp('RegulatorySpeedLimit', Data) -> dec_RegulatorySpeedLimit(Data);
decode_disp('RequestorType', Data) -> dec_RequestorType(Data);
decode_disp('RoadSegmentReferenceID', Data) -> dec_RoadSegmentReferenceID(Data);
decode_disp('RTCMheader', Data) -> dec_RTCMheader(Data);
decode_disp('RTCMmessageList', Data) -> dec_RTCMmessageList(Data);
decode_disp('SegmentAttributeXYList', Data) -> dec_SegmentAttributeXYList(Data);
decode_disp('SpeedandHeadingandThrottleConfidence', Data) -> dec_SpeedandHeadingandThrottleConfidence(Data);
decode_disp('SpeedLimitList', Data) -> dec_SpeedLimitList(Data);
decode_disp('TransmissionAndSpeed', Data) -> dec_TransmissionAndSpeed(Data);
decode_disp('VehicleClassification', Data) -> dec_VehicleClassification(Data);
decode_disp('VehicleID', Data) -> dec_VehicleID(Data);
decode_disp('VehicleSafetyExtensions', Data) -> dec_VehicleSafetyExtensions(Data);
decode_disp('VehicleSize', Data) -> dec_VehicleSize(Data);
decode_disp('VerticalOffset', Data) -> dec_VerticalOffset(Data);
decode_disp('WiperSet', Data) -> dec_WiperSet(Data);
decode_disp('Acceleration', Data) -> dec_Acceleration(Data);
decode_disp('AmbientAirPressure', Data) -> dec_AmbientAirPressure(Data);
decode_disp('AmbientAirTemperature', Data) -> dec_AmbientAirTemperature(Data);
decode_disp('Angle', Data) -> dec_Angle(Data);
decode_disp('AntiLockBrakeStatus', Data) -> dec_AntiLockBrakeStatus(Data);
decode_disp('ApproachID', Data) -> dec_ApproachID(Data);
decode_disp('AuxiliaryBrakeStatus', Data) -> dec_AuxiliaryBrakeStatus(Data);
decode_disp('BasicVehicleClass', Data) -> dec_BasicVehicleClass(Data);
decode_disp('BasicVehicleRole', Data) -> dec_BasicVehicleRole(Data);
decode_disp('BrakeAppliedStatus', Data) -> dec_BrakeAppliedStatus(Data);
decode_disp('BrakeBoostApplied', Data) -> dec_BrakeBoostApplied(Data);
decode_disp('BumperHeight', Data) -> dec_BumperHeight(Data);
decode_disp('CoarseHeading', Data) -> dec_CoarseHeading(Data);
decode_disp('CodeWord', Data) -> dec_CodeWord(Data);
decode_disp('CoefficientOfFriction', Data) -> dec_CoefficientOfFriction(Data);
decode_disp('Confidence', Data) -> dec_Confidence(Data);
decode_disp('Count', Data) -> dec_Count(Data);
decode_disp('DDay', Data) -> dec_DDay(Data);
decode_disp('DeltaAngle', Data) -> dec_DeltaAngle(Data);
decode_disp('DescriptiveName', Data) -> dec_DescriptiveName(Data);
decode_disp('DHour', Data) -> dec_DHour(Data);
decode_disp('DMinute', Data) -> dec_DMinute(Data);
decode_disp('DMonth', Data) -> dec_DMonth(Data);
decode_disp('DOffset', Data) -> dec_DOffset(Data);
decode_disp('DrivenLineOffsetLg', Data) -> dec_DrivenLineOffsetLg(Data);
decode_disp('DrivenLineOffsetSm', Data) -> dec_DrivenLineOffsetSm(Data);
decode_disp('DSecond', Data) -> dec_DSecond(Data);
decode_disp('Duration', Data) -> dec_Duration(Data);
decode_disp('DYear', Data) -> dec_DYear(Data);
decode_disp('ElevationConfidence', Data) -> dec_ElevationConfidence(Data);
decode_disp('Elevation', Data) -> dec_Elevation(Data);
decode_disp('Extent', Data) -> dec_Extent(Data);
decode_disp('ExteriorLights', Data) -> dec_ExteriorLights(Data);
decode_disp('FuelType', Data) -> dec_FuelType(Data);
decode_disp('FurtherInfoID', Data) -> dec_FurtherInfoID(Data);
decode_disp('GNSSstatus', Data) -> dec_GNSSstatus(Data);
decode_disp('GrossSpeed', Data) -> dec_GrossSpeed(Data);
decode_disp('HeadingConfidence', Data) -> dec_HeadingConfidence(Data);
decode_disp('Heading', Data) -> dec_Heading(Data);
decode_disp('HeadingSlice', Data) -> dec_HeadingSlice(Data);
decode_disp('IntersectionID', Data) -> dec_IntersectionID(Data);
decode_disp('Iso3833VehicleType', Data) -> dec_Iso3833VehicleType(Data);
decode_disp('TrailerWeight', Data) -> dec_TrailerWeight(Data);
decode_disp('LaneConnectionID', Data) -> dec_LaneConnectionID(Data);
decode_disp('LaneID', Data) -> dec_LaneID(Data);
decode_disp('LaneWidth', Data) -> dec_LaneWidth(Data);
decode_disp('Latitude', Data) -> dec_Latitude(Data);
decode_disp('LightbarInUse', Data) -> dec_LightbarInUse(Data);
decode_disp('Longitude', Data) -> dec_Longitude(Data);
decode_disp('Location-quality', Data) -> 'dec_Location-quality'(Data);
decode_disp('Location-tech', Data) -> 'dec_Location-tech'(Data);
decode_disp('MergeDivergeNodeAngle', Data) -> dec_MergeDivergeNodeAngle(Data);
decode_disp('MessageBLOB', Data) -> dec_MessageBLOB(Data);
decode_disp('MinuteOfTheYear', Data) -> dec_MinuteOfTheYear(Data);
decode_disp('MsgCount', Data) -> dec_MsgCount(Data);
decode_disp('MultiVehicleResponse', Data) -> dec_MultiVehicleResponse(Data);
decode_disp('NodeAttributeXY', Data) -> dec_NodeAttributeXY(Data);
decode_disp('ObstacleDistance', Data) -> dec_ObstacleDistance(Data);
decode_disp('Offset-B09', Data) -> 'dec_Offset-B09'(Data);
decode_disp('Offset-B10', Data) -> 'dec_Offset-B10'(Data);
decode_disp('Offset-B11', Data) -> 'dec_Offset-B11'(Data);
decode_disp('Offset-B12', Data) -> 'dec_Offset-B12'(Data);
decode_disp('Offset-B13', Data) -> 'dec_Offset-B13'(Data);
decode_disp('Offset-B14', Data) -> 'dec_Offset-B14'(Data);
decode_disp('Offset-B16', Data) -> 'dec_Offset-B16'(Data);
decode_disp('OffsetLL-B18', Data) -> 'dec_OffsetLL-B18'(Data);
decode_disp('PayloadData', Data) -> dec_PayloadData(Data);
decode_disp('PositionConfidence', Data) -> dec_PositionConfidence(Data);
decode_disp('PrioritizationResponseStatus', Data) -> dec_PrioritizationResponseStatus(Data);
decode_disp('Priority', Data) -> dec_Priority(Data);
decode_disp('PrivilegedEventFlags', Data) -> dec_PrivilegedEventFlags(Data);
decode_disp('RadiusOfCurvature', Data) -> dec_RadiusOfCurvature(Data);
decode_disp('RegionId', Data) -> dec_RegionId(Data);
decode_disp('RequestID', Data) -> dec_RequestID(Data);
decode_disp('RequestImportanceLevel', Data) -> dec_RequestImportanceLevel(Data);
decode_disp('RequestSubRole', Data) -> dec_RequestSubRole(Data);
decode_disp('ResponseType', Data) -> dec_ResponseType(Data);
decode_disp('RestrictionClassID', Data) -> dec_RestrictionClassID(Data);
decode_disp('RoadRegulatorID', Data) -> dec_RoadRegulatorID(Data);
decode_disp('RoadSegmentID', Data) -> dec_RoadSegmentID(Data);
decode_disp('RoadwayCrownAngle', Data) -> dec_RoadwayCrownAngle(Data);
decode_disp('RTCMmessage', Data) -> dec_RTCMmessage(Data);
decode_disp('Scale-B12', Data) -> 'dec_Scale-B12'(Data);
decode_disp('SegmentAttributeXY', Data) -> dec_SegmentAttributeXY(Data);
decode_disp('SemiMajorAxisAccuracy', Data) -> dec_SemiMajorAxisAccuracy(Data);
decode_disp('SemiMajorAxisOrientation', Data) -> dec_SemiMajorAxisOrientation(Data);
decode_disp('SemiMinorAxisAccuracy', Data) -> dec_SemiMinorAxisAccuracy(Data);
decode_disp('SignalGroupID', Data) -> dec_SignalGroupID(Data);
decode_disp('SignalReqScheme', Data) -> dec_SignalReqScheme(Data);
decode_disp('SirenInUse', Data) -> dec_SirenInUse(Data);
decode_disp('SpeedConfidence', Data) -> dec_SpeedConfidence(Data);
decode_disp('SpeedLimitType', Data) -> dec_SpeedLimitType(Data);
decode_disp('Speed', Data) -> dec_Speed(Data);
decode_disp('SSPindex', Data) -> dec_SSPindex(Data);
decode_disp('StabilityControlStatus', Data) -> dec_StabilityControlStatus(Data);
decode_disp('StationID', Data) -> dec_StationID(Data);
decode_disp('SteeringWheelAngle', Data) -> dec_SteeringWheelAngle(Data);
decode_disp('TemporaryID', Data) -> dec_TemporaryID(Data);
decode_disp('ThrottleConfidence', Data) -> dec_ThrottleConfidence(Data);
decode_disp('TimeConfidence', Data) -> dec_TimeConfidence(Data);
decode_disp('TimeOffset', Data) -> dec_TimeOffset(Data);
decode_disp('TractionControlStatus', Data) -> dec_TractionControlStatus(Data);
decode_disp('TransitStatus', Data) -> dec_TransitStatus(Data);
decode_disp('TransmissionState', Data) -> dec_TransmissionState(Data);
decode_disp('URL-Link', Data) -> 'dec_URL-Link'(Data);
decode_disp('VehicleEventFlags', Data) -> dec_VehicleEventFlags(Data);
decode_disp('VehicleHeight', Data) -> dec_VehicleHeight(Data);
decode_disp('VehicleLength', Data) -> dec_VehicleLength(Data);
decode_disp('VehicleMass', Data) -> dec_VehicleMass(Data);
decode_disp('VehicleType', Data) -> dec_VehicleType(Data);
decode_disp('VehicleWidth', Data) -> dec_VehicleWidth(Data);
decode_disp('Velocity', Data) -> dec_Velocity(Data);
decode_disp('VerticalAccelerationThreshold', Data) -> dec_VerticalAccelerationThreshold(Data);
decode_disp('VerticalAcceleration', Data) -> dec_VerticalAcceleration(Data);
decode_disp('VertOffset-B08', Data) -> 'dec_VertOffset-B08'(Data);
decode_disp('VertOffset-B09', Data) -> 'dec_VertOffset-B09'(Data);
decode_disp('VertOffset-B10', Data) -> 'dec_VertOffset-B10'(Data);
decode_disp('VertOffset-B11', Data) -> 'dec_VertOffset-B11'(Data);
decode_disp('VertOffset-B12', Data) -> 'dec_VertOffset-B12'(Data);
decode_disp('WiperRate', Data) -> dec_WiperRate(Data);
decode_disp('WiperStatus', Data) -> dec_WiperStatus(Data);
decode_disp('YawRate', Data) -> dec_YawRate(Data);
decode_disp(Type, _Data) -> exit({error,{asn1,{undefined_type,Type}}}).

info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
enc_AccelerationSet4Way(Val) ->
[begin
%% attribute long(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2000,
if 0 =< Enc1@element@sub, Enc1@element@sub < 4002 ->
<<Enc1@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -2000,
if 0 =< Enc3@element@sub, Enc3@element@sub < 4002 ->
<<Enc3@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute vert(3) with type INTEGER
Enc5@element = element(4, Val),
Enc5@element@sub = Enc5@element - -127,
if 0 =< Enc5@element@sub, Enc5@element@sub < 255 ->
Enc5@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end|begin
%% attribute yaw(4) with type INTEGER
Enc7@element = element(5, Val),
Enc7@element@sub = Enc7@element - -32767,
if 0 =< Enc7@element@sub, Enc7@element@sub < 65535 ->
<<Enc7@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end].


dec_AccelerationSet4Way(Bytes) ->

%% attribute long(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2000,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2000,
{V2@Add2,V2@Buf1}
end,

%% attribute vert(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -127,
{V3@Add2,V3@Buf1}
end,

%% attribute yaw(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -32767,
{V4@Add2,V4@Buf1}
end,
Res1 = {'AccelerationSet4Way',Term1,Term2,Term3,Term4},
{Res1,Bytes4}.

enc_AntennaOffsetSet(Val) ->
[begin
%% attribute antOffsetX(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2048,
if Enc1@element@sub bsr 12 =:= 0 ->
<<Enc1@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute antOffsetY(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -256,
if Enc3@element@sub bsr 9 =:= 0 ->
<<Enc3@element@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute antOffsetZ(3) with type INTEGER
Enc5@element = element(4, Val),
Enc5@element@sub = Enc5@element - -512,
if Enc5@element@sub bsr 10 =:= 0 ->
<<Enc5@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_AntennaOffsetSet(Bytes) ->

%% attribute antOffsetX(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end,

%% attribute antOffsetY(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -256,
{V2@Add2,V2@Buf1}
end,

%% attribute antOffsetZ(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -512,
{V3@Add2,V3@Buf1}
end,
Res1 = {'AntennaOffsetSet',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_BrakeSystemStatus(Val) ->
[begin
%% attribute wheelBrakes(1) with type BIT STRING
Enc1@element = element(2, Val),
Enc2@bs = try bit_string_name2pos_1(Enc1@element) of
Enc2@positions ->
bitstring_from_positions(Enc2@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Enc1@element, 5)
end,
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 5 ->
Enc2@bs
end
end,
begin
%% attribute traction(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:2>>;
Enc3@element =:= off ->
<<1:2>>;
Enc3@element =:= on ->
<<2:2>>;
Enc3@element =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end,
begin
%% attribute abs(3) with type ENUMERATED
Enc5@element = element(4, Val),
if Enc5@element =:= unavailable ->
<<0:2>>;
Enc5@element =:= off ->
<<1:2>>;
Enc5@element =:= on ->
<<2:2>>;
Enc5@element =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end,
begin
%% attribute scs(4) with type ENUMERATED
Enc7@element = element(5, Val),
if Enc7@element =:= unavailable ->
<<0:2>>;
Enc7@element =:= off ->
<<1:2>>;
Enc7@element =:= on ->
<<2:2>>;
Enc7@element =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute brakeBoost(5) with type ENUMERATED
Enc9@element = element(6, Val),
if Enc9@element =:= unavailable ->
<<0:2>>;
Enc9@element =:= off ->
<<1:2>>;
Enc9@element =:= on ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc9@element}}})
end
end|begin
%% attribute auxBrakes(6) with type ENUMERATED
Enc11@element = element(7, Val),
if Enc11@element =:= unavailable ->
<<0:2>>;
Enc11@element =:= off ->
<<1:2>>;
Enc11@element =:= on ->
<<2:2>>;
Enc11@element =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc11@element}}})
end
end].


dec_BrakeSystemStatus(Bytes) ->

%% attribute wheelBrakes(1) with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:5/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute traction(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V2@Int2,V2@Buf1}
end,

%% attribute abs(3) with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V3@Int2,V3@Buf1}
end,

%% attribute scs(4) with type ENUMERATED
{Term4,Bytes4} = begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V4@Int2,V4@Buf1}
end,

%% attribute brakeBoost(5) with type ENUMERATED
{Term5,Bytes5} = begin
<<V5@V0:2,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
_ -> exit({error,{asn1,{decode_enumerated,V5@V0}}})
end,
{V5@Int2,V5@Buf1}
end,

%% attribute auxBrakes(6) with type ENUMERATED
{Term6,Bytes6} = begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> reserved
end,
{V6@Int2,V6@Buf1}
end,
Res1 = {'BrakeSystemStatus',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes6}.

enc_BSMcoreData(Val) ->
[begin
%% attribute msgCnt(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 7 =:= 0 ->
<<Enc1@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute id(2) with type OCTET STRING
Enc3@element = element(3, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 4 ->
Enc3@element
end
end,
begin
%% attribute secMark(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute lat(4) with type INTEGER
Enc7@element = element(5, Val),
Enc7@element@sub = Enc7@element - -900000000,
if 0 =< Enc7@element@sub, Enc7@element@sub < 1800000002 ->
<<Enc7@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute long(5) with type INTEGER
Enc9@element = element(6, Val),
Enc9@element@sub = Enc9@element - -1799999999,
if 0 =< Enc9@element@sub, Enc9@element@sub < 3600000001 ->
<<Enc9@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute elev(6) with type INTEGER
Enc11@element = element(7, Val),
Enc11@element@sub = Enc11@element - -4096,
if Enc11@element@sub bsr 16 =:= 0 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute accuracy(7) with type PositionalAccuracy
Enc13@element = element(8, Val),
enc_PositionalAccuracy(Enc13@element)
end,
begin
%% attribute transmission(8) with type ENUMERATED
Enc14@element = element(9, Val),
if Enc14@element =:= neutral ->
<<0:3>>;
Enc14@element =:= park ->
<<1:3>>;
Enc14@element =:= forwardGears ->
<<2:3>>;
Enc14@element =:= reverseGears ->
<<3:3>>;
Enc14@element =:= reserved1 ->
<<4:3>>;
Enc14@element =:= reserved2 ->
<<5:3>>;
Enc14@element =:= reserved3 ->
<<6:3>>;
Enc14@element =:= unavailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end,
begin
%% attribute speed(9) with type INTEGER
Enc16@element = element(10, Val),
if Enc16@element bsr 13 =:= 0 ->
<<Enc16@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end,
begin
%% attribute heading(10) with type INTEGER
Enc18@element = element(11, Val),
if 0 =< Enc18@element, Enc18@element < 28801 ->
<<Enc18@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end,
begin
%% attribute angle(11) with type INTEGER
Enc20@element = element(12, Val),
Enc20@element@sub = Enc20@element - -126,
if 0 =< Enc20@element@sub, Enc20@element@sub < 254 ->
Enc20@element@sub;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end,
begin
%% attribute accelSet(12) with type AccelerationSet4Way
Enc22@element = element(13, Val),
enc_AccelerationSet4Way(Enc22@element)
end,
begin
%% attribute brakes(13) with type BrakeSystemStatus
Enc23@element = element(14, Val),
enc_BrakeSystemStatus(Enc23@element)
end|begin
%% attribute size(14) with type VehicleSize
Enc24@element = element(15, Val),
enc_VehicleSize(Enc24@element)
end].


dec_BSMcoreData(Bytes) ->

%% attribute msgCnt(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute id(2) with type OCTET STRING
{Term2,Bytes2} = begin
<<V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end,

%% attribute secMark(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute lat(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:31,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -900000000,
{V4@Add2,V4@Buf1}
end,

%% attribute long(5) with type INTEGER
{Term5,Bytes5} = begin
<<V5@V0:32,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -1799999999,
{V5@Add2,V5@Buf1}
end,

%% attribute elev(6) with type INTEGER
{Term6,Bytes6} = begin
<<V6@V0:16,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + -4096,
{V6@Add2,V6@Buf1}
end,

%% attribute accuracy(7) with type PositionalAccuracy
{Term7,Bytes7} = dec_PositionalAccuracy(Bytes6),

%% attribute transmission(8) with type ENUMERATED
{Term8,Bytes8} = begin
<<V7@V0:3,V7@Buf1/bitstring>> = Bytes7,
V7@Int2 = case V7@V0 of
0 -> neutral;
1 -> park;
2 -> forwardGears;
3 -> reverseGears;
4 -> reserved1;
5 -> reserved2;
6 -> reserved3;
7 -> unavailable
end,
{V7@Int2,V7@Buf1}
end,

%% attribute speed(9) with type INTEGER
{Term9,Bytes9} = begin
<<V8@V0:13,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end,

%% attribute heading(10) with type INTEGER
{Term10,Bytes10} = begin
<<V9@V0:15,V9@Buf1/bitstring>> = Bytes9,
{V9@V0,V9@Buf1}
end,

%% attribute angle(11) with type INTEGER
{Term11,Bytes11} = begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes10,
V10@Add2 = V10@V0 + -126,
{V10@Add2,V10@Buf1}
end,

%% attribute accelSet(12) with type AccelerationSet4Way
{Term12,Bytes12} = dec_AccelerationSet4Way(Bytes11),

%% attribute brakes(13) with type BrakeSystemStatus
{Term13,Bytes13} = dec_BrakeSystemStatus(Bytes12),

%% attribute size(14) with type VehicleSize
{Term14,Bytes14} = dec_VehicleSize(Bytes13),
Res1 = {'BSMcoreData',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14},
{Res1,Bytes14}.

enc_BumperHeights(Val) ->
[begin
%% attribute front(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 7 =:= 0 ->
<<Enc1@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute rear(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 7 =:= 0 ->
<<Enc3@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_BumperHeights(Bytes) ->

%% attribute front(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute rear(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'BumperHeights',Term1,Term2},
{Res1,Bytes2}.

enc_ComputedLane(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute referenceLaneId(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element bsr 8 =:= 0 ->
Enc6@element;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute offsetXaxis(2) with type CHOICE
Enc8@element = element(3, Val),
enc_ComputedLane_offsetXaxis(Enc8@element)
end,
begin
%% attribute offsetYaxis(3) with type CHOICE
Enc9@element = element(4, Val),
enc_ComputedLane_offsetYaxis(Enc9@element)
end,
begin
%% attribute rotateXY(4) with type INTEGER
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
0 =< Enc10@element, Enc10@element < 28801 ->
<<Enc10@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end,
begin
%% attribute scaleXaxis(5) with type INTEGER
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@element@sub = Enc13@element - -2048,
if Enc13@element@sub bsr 12 =:= 0 ->
<<Enc13@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end
end
end,
begin
%% attribute scaleYaxis(6) with type INTEGER
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - -2048,
if Enc16@element@sub bsr 12 =:= 0 ->
<<Enc16@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end
end
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc19@element = element(8, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
enc_ComputedLane_regional(Enc19@element)
end
end].
enc_ComputedLane_offsetXaxis(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= small ->
begin
ChoiceVal@sub = ChoiceVal - -2047,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 4095 ->
<<0:1,ChoiceVal@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= large ->
begin
ChoiceVal@sub = ChoiceVal - -32767,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
<<1:1,ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end
end.
enc_ComputedLane_offsetYaxis(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= small ->
begin
ChoiceVal@sub = ChoiceVal - -2047,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 4095 ->
<<0:1,ChoiceVal@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= large ->
begin
ChoiceVal@sub = ChoiceVal - -32767,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 65535 ->
<<1:1,ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end
end.
enc_ComputedLane_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_ComputedLane_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_ComputedLane_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type2(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_ComputedLane(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute referenceLaneId(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute offsetXaxis(2) with type CHOICE
{Term2,Bytes4} = dec_ComputedLane_offsetXaxis(Bytes3),

%% attribute offsetYaxis(3) with type CHOICE
{Term3,Bytes5} = dec_ComputedLane_offsetYaxis(Bytes4),

%% attribute rotateXY(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:15,V4@Buf1/bitstring>> = Bytes5,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute scaleXaxis(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes6,
V5@Add2 = V5@V0 + -2048,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute scaleYaxis(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:12,V6@Buf1/bitstring>> = Bytes7,
V6@Add2 = V6@V0 + -2048,
{V6@Add2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_ComputedLane_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V7@V0,V7@Buf1} = case Bytes9 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'ComputedLane',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_ComputedLane_offsetXaxis(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2047,
{V2@Add2,V2@Buf1}
end
end,
{{small,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + -32767,
{V3@Add2,V3@Buf1}
end
end,
{{large,Val},NewBytes}
end.

dec_ComputedLane_offsetYaxis(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2047,
{V2@Add2,V2@Buf1}
end
end,
{{small,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + -32767,
{V3@Add2,V3@Buf1}
end
end,
{{large,Val},NewBytes}
end.

dec_ComputedLane_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components3(V1@Add2, V1@Buf1, []).


dec_ComputedLane_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type4(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_DDate(Val) ->
[begin
%% attribute year(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 12 =:= 0 ->
<<Enc1@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute month(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 13 ->
<<Enc3@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute day(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 5 =:= 0 ->
<<Enc5@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_DDate(Bytes) ->

%% attribute year(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute day(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'DDate',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_DDateTime(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute year(1) with type INTEGER
Enc8@element = element(2, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 12 =:= 0 ->
<<Enc8@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end,
begin
%% attribute month(2) with type INTEGER
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
0 =< Enc11@element, Enc11@element < 13 ->
<<Enc11@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute day(3) with type INTEGER
Enc14@element = element(4, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element bsr 5 =:= 0 ->
<<Enc14@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute hour(4) with type INTEGER
Enc17@element = element(5, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
Enc17@element bsr 5 =:= 0 ->
<<Enc17@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end,
begin
%% attribute minute(5) with type INTEGER
Enc20@element = element(6, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
0 =< Enc20@element, Enc20@element < 61 ->
<<Enc20@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end,
begin
%% attribute second(6) with type INTEGER
Enc23@element = element(7, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
Enc23@element bsr 16 =:= 0 ->
<<Enc23@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc23@element}}})
end
end|begin
%% attribute offset(7) with type INTEGER
Enc26@element = element(8, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc26@element@sub = Enc26@element - -840,
if 0 =< Enc26@element@sub, Enc26@element@sub < 1681 ->
<<Enc26@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc26@element}}})
end
end
end
end].


dec_DDateTime(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute year(1) with type INTEGER
{Term1,Bytes2} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute day(3) with type INTEGER
{Term3,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute hour(4) with type INTEGER
{Term4,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute minute(5) with type INTEGER
{Term5,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute second(6) with type INTEGER
{Term6,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V7@V0:16,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute offset(7) with type INTEGER
{Term7,Bytes8} = case Opt band 1 of
1 ->
begin
<<V8@V0:11,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + -840,
{V8@Add2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,
Res1 = {'DDateTime',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes8}.

enc_DFullTime(Val) ->
[begin
%% attribute year(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 12 =:= 0 ->
<<Enc1@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute month(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 13 ->
<<Enc3@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end,
begin
%% attribute day(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 5 =:= 0 ->
<<Enc5@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute hour(4) with type INTEGER
Enc7@element = element(5, Val),
if Enc7@element bsr 5 =:= 0 ->
<<Enc7@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end|begin
%% attribute minute(5) with type INTEGER
Enc9@element = element(6, Val),
if 0 =< Enc9@element, Enc9@element < 61 ->
<<Enc9@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end].


dec_DFullTime(Bytes) ->

%% attribute year(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute day(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute hour(4) with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute minute(5) with type INTEGER
{Term5,Bytes5} = begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,
Res1 = {'DFullTime',Term1,Term2,Term3,Term4,Term5},
{Res1,Bytes5}.

enc_DMonthDay(Val) ->
[begin
%% attribute month(1) with type INTEGER
Enc1@element = element(2, Val),
if 0 =< Enc1@element, Enc1@element < 13 ->
<<Enc1@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute day(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 5 =:= 0 ->
<<Enc3@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_DMonthDay(Bytes) ->

%% attribute month(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute day(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'DMonthDay',Term1,Term2},
{Res1,Bytes2}.

enc_DTime(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute hour(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element bsr 5 =:= 0 ->
<<Enc2@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end,
begin
%% attribute minute(2) with type INTEGER
Enc4@element = element(3, Val),
if 0 =< Enc4@element, Enc4@element < 61 ->
<<Enc4@element:6>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute second(3) with type INTEGER
Enc6@element = element(4, Val),
if Enc6@element bsr 16 =:= 0 ->
<<Enc6@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end|begin
%% attribute offset(4) with type INTEGER
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - -840,
if 0 =< Enc8@element@sub, Enc8@element@sub < 1681 ->
<<Enc8@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end].


dec_DTime(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute hour(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute minute(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute second(3) with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:16,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute offset(4) with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:11,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -840,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'DTime',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.

enc_DYearMonth(Val) ->
[begin
%% attribute year(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 12 =:= 0 ->
<<Enc1@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute month(2) with type INTEGER
Enc3@element = element(3, Val),
if 0 =< Enc3@element, Enc3@element < 13 ->
<<Enc3@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_DYearMonth(Bytes) ->

%% attribute year(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute month(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'DYearMonth',Term1,Term2},
{Res1,Bytes2}.

enc_EmergencyDetails(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute notUsed(1) with type INTEGER
Enc4@element = element(2, Val),
if Enc4@element bsr 5 =:= 0 ->
<<Enc4@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute sirenUse(2) with type ENUMERATED
Enc6@element = element(3, Val),
if Enc6@element =:= unavailable ->
<<0:2>>;
Enc6@element =:= notInUse ->
<<1:2>>;
Enc6@element =:= inUse ->
<<2:2>>;
Enc6@element =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc6@element}}})
end
end,
begin
%% attribute lightsUse(3) with type ENUMERATED
Enc8@element = element(4, Val),
if Enc8@element =:= unavailable ->
<<0:3>>;
Enc8@element =:= notInUse ->
<<1:3>>;
Enc8@element =:= inUse ->
<<2:3>>;
Enc8@element =:= yellowCautionLights ->
<<3:3>>;
Enc8@element =:= schooldBusLights ->
<<4:3>>;
Enc8@element =:= arrowSignsActive ->
<<5:3>>;
Enc8@element =:= slowMovingVehicle ->
<<6:3>>;
Enc8@element =:= freqStops ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc8@element}}})
end
end,
begin
%% attribute multi(4) with type ENUMERATED
Enc10@element = element(5, Val),
if Enc10@element =:= unavailable ->
<<0:2>>;
Enc10@element =:= singleVehicle ->
<<1:2>>;
Enc10@element =:= multiVehicle ->
<<2:2>>;
Enc10@element =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc10@element}}})
end
end,
begin
%% attribute events(5) with type PrivilegedEvents
Enc12@element = element(6, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
enc_PrivilegedEvents(Enc12@element)
end
end|begin
%% attribute responseType(6) with type ENUMERATED
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element =:= notInUseOrNotEquipped ->
<<0:1,0:3>>;
Enc14@element =:= emergency ->
<<0:1,1:3>>;
Enc14@element =:= nonEmergency ->
<<0:1,2:3>>;
Enc14@element =:= pursuit ->
<<0:1,3:3>>;
Enc14@element =:= stationary ->
<<0:1,4:3>>;
Enc14@element =:= slowMoving ->
<<0:1,5:3>>;
Enc14@element =:= stopAndGoMovement ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end].


dec_EmergencyDetails(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute notUsed(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute sirenUse(2) with type ENUMERATED
{Term2,Bytes4} = begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> reserved
end,
{V4@Int2,V4@Buf1}
end,

%% attribute lightsUse(3) with type ENUMERATED
{Term3,Bytes5} = begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> yellowCautionLights;
4 -> schooldBusLights;
5 -> arrowSignsActive;
6 -> slowMovingVehicle;
7 -> freqStops
end,
{V5@Int2,V5@Buf1}
end,

%% attribute multi(4) with type ENUMERATED
{Term4,Bytes6} = begin
<<V6@V0:2,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> unavailable;
1 -> singleVehicle;
2 -> multiVehicle;
3 -> reserved
end,
{V6@Int2,V6@Buf1}
end,

%% attribute events(5) with type PrivilegedEvents
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
dec_PrivilegedEvents(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute responseType(6) with type ENUMERATED
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:3,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> notInUseOrNotEquipped;
1 -> emergency;
2 -> nonEmergency;
3 -> pursuit;
4 -> stationary;
5 -> slowMoving;
6 -> stopAndGoMovement;
_ -> exit({error,{asn1,{decode_enumerated,V7@V3}}})
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'EmergencyDetails',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.

enc_FullPositionVector(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
Enc4@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(8, Val),
Enc6@element = element(9, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(10, Val),
Enc8@element = element(11, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute utcTime(1) with type DDateTime
Enc10@element = element(2, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
enc_DDateTime(Enc10@element)
end
end,
begin
%% attribute long(2) with type INTEGER
Enc12@element = element(3, Val),
Enc12@element@sub = Enc12@element - -1799999999,
if 0 =< Enc12@element@sub, Enc12@element@sub < 3600000001 ->
<<Enc12@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end,
begin
%% attribute lat(3) with type INTEGER
Enc14@element = element(4, Val),
Enc14@element@sub = Enc14@element - -900000000,
if 0 =< Enc14@element@sub, Enc14@element@sub < 1800000002 ->
<<Enc14@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc14@element}}})
end
end,
begin
%% attribute elevation(4) with type INTEGER
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@element@sub = Enc16@element - -4096,
if Enc16@element@sub bsr 16 =:= 0 ->
<<Enc16@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc16@element}}})
end
end
end
end,
begin
%% attribute heading(5) with type INTEGER
Enc19@element = element(6, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
0 =< Enc19@element, Enc19@element < 28801 ->
<<Enc19@element:15>>;
true ->
exit({error,{asn1,{illegal_integer,Enc19@element}}})
end
end,
begin
%% attribute speed(6) with type TransmissionAndSpeed
Enc22@element = element(7, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
enc_TransmissionAndSpeed(Enc22@element)
end
end,
begin
%% attribute posAccuracy(7) with type PositionalAccuracy
Enc24@element = element(8, Val),
if Enc24@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionalAccuracy(Enc24@element)
end
end,
begin
%% attribute timeConfidence(8) with type ENUMERATED
Enc26@element = element(9, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
Enc26@element =:= unavailable ->
<<0:6>>;
Enc26@element =:= 'time-100-000' ->
<<1:6>>;
Enc26@element =:= 'time-050-000' ->
<<2:6>>;
Enc26@element =:= 'time-020-000' ->
<<3:6>>;
Enc26@element =:= 'time-010-000' ->
<<4:6>>;
Enc26@element =:= 'time-002-000' ->
<<5:6>>;
Enc26@element =:= 'time-001-000' ->
<<6:6>>;
Enc26@element =:= 'time-000-500' ->
<<7:6>>;
Enc26@element =:= 'time-000-200' ->
<<8:6>>;
Enc26@element =:= 'time-000-100' ->
<<9:6>>;
Enc26@element =:= 'time-000-050' ->
<<10:6>>;
Enc26@element =:= 'time-000-020' ->
<<11:6>>;
Enc26@element =:= 'time-000-010' ->
<<12:6>>;
Enc26@element =:= 'time-000-005' ->
<<13:6>>;
Enc26@element =:= 'time-000-002' ->
<<14:6>>;
Enc26@element =:= 'time-000-001' ->
<<15:6>>;
Enc26@element =:= 'time-000-000-5' ->
<<16:6>>;
Enc26@element =:= 'time-000-000-2' ->
<<17:6>>;
Enc26@element =:= 'time-000-000-1' ->
<<18:6>>;
Enc26@element =:= 'time-000-000-05' ->
<<19:6>>;
Enc26@element =:= 'time-000-000-02' ->
<<20:6>>;
Enc26@element =:= 'time-000-000-01' ->
<<21:6>>;
Enc26@element =:= 'time-000-000-005' ->
<<22:6>>;
Enc26@element =:= 'time-000-000-002' ->
<<23:6>>;
Enc26@element =:= 'time-000-000-001' ->
<<24:6>>;
Enc26@element =:= 'time-000-000-000-5' ->
<<25:6>>;
Enc26@element =:= 'time-000-000-000-2' ->
<<26:6>>;
Enc26@element =:= 'time-000-000-000-1' ->
<<27:6>>;
Enc26@element =:= 'time-000-000-000-05' ->
<<28:6>>;
Enc26@element =:= 'time-000-000-000-02' ->
<<29:6>>;
Enc26@element =:= 'time-000-000-000-01' ->
<<30:6>>;
Enc26@element =:= 'time-000-000-000-005' ->
<<31:6>>;
Enc26@element =:= 'time-000-000-000-002' ->
<<32:6>>;
Enc26@element =:= 'time-000-000-000-001' ->
<<33:6>>;
Enc26@element =:= 'time-000-000-000-000-5' ->
<<34:6>>;
Enc26@element =:= 'time-000-000-000-000-2' ->
<<35:6>>;
Enc26@element =:= 'time-000-000-000-000-1' ->
<<36:6>>;
Enc26@element =:= 'time-000-000-000-000-05' ->
<<37:6>>;
Enc26@element =:= 'time-000-000-000-000-02' ->
<<38:6>>;
Enc26@element =:= 'time-000-000-000-000-01' ->
<<39:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc26@element}}})
end
end,
begin
%% attribute posConfidence(9) with type PositionConfidenceSet
Enc29@element = element(10, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionConfidenceSet(Enc29@element)
end
end|begin
%% attribute speedConfidence(10) with type SpeedandHeadingandThrottleConfidence
Enc31@element = element(11, Val),
if Enc31@element =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedandHeadingandThrottleConfidence(Enc31@element)
end
end].


dec_FullPositionVector(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute utcTime(1) with type DDateTime
{Term1,Bytes3} = case (Opt bsr 7) band 1 of
1 ->
dec_DDateTime(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute long(2) with type INTEGER
{Term2,Bytes4} = begin
<<V3@V0:32,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + -1799999999,
{V3@Add2,V3@Buf1}
end,

%% attribute lat(3) with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:31,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + -900000000,
{V4@Add2,V4@Buf1}
end,

%% attribute elevation(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + -4096,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute heading(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V6@V0:15,V6@Buf1/bitstring>> = Bytes6,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute speed(6) with type TransmissionAndSpeed
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
dec_TransmissionAndSpeed(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute posAccuracy(7) with type PositionalAccuracy
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
dec_PositionalAccuracy(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute timeConfidence(8) with type ENUMERATED
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:6,V7@Buf1/bitstring>> = Bytes9,
V7@Int2 = case V7@V0 of
0 -> unavailable;
1 -> 'time-100-000';
2 -> 'time-050-000';
3 -> 'time-020-000';
4 -> 'time-010-000';
5 -> 'time-002-000';
6 -> 'time-001-000';
7 -> 'time-000-500';
8 -> 'time-000-200';
9 -> 'time-000-100';
10 -> 'time-000-050';
11 -> 'time-000-020';
12 -> 'time-000-010';
13 -> 'time-000-005';
14 -> 'time-000-002';
15 -> 'time-000-001';
16 -> 'time-000-000-5';
17 -> 'time-000-000-2';
18 -> 'time-000-000-1';
19 -> 'time-000-000-05';
20 -> 'time-000-000-02';
21 -> 'time-000-000-01';
22 -> 'time-000-000-005';
23 -> 'time-000-000-002';
24 -> 'time-000-000-001';
25 -> 'time-000-000-000-5';
26 -> 'time-000-000-000-2';
27 -> 'time-000-000-000-1';
28 -> 'time-000-000-000-05';
29 -> 'time-000-000-000-02';
30 -> 'time-000-000-000-01';
31 -> 'time-000-000-000-005';
32 -> 'time-000-000-000-002';
33 -> 'time-000-000-000-001';
34 -> 'time-000-000-000-000-5';
35 -> 'time-000-000-000-000-2';
36 -> 'time-000-000-000-000-1';
37 -> 'time-000-000-000-000-05';
38 -> 'time-000-000-000-000-02';
39 -> 'time-000-000-000-000-01';
_ -> exit({error,{asn1,{decode_enumerated,V7@V0}}})
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute posConfidence(9) with type PositionConfidenceSet
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_PositionConfidenceSet(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute speedConfidence(10) with type SpeedandHeadingandThrottleConfidence
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_SpeedandHeadingandThrottleConfidence(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V8@V0,V8@Buf1} = case Bytes12 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
Res1 = {'FullPositionVector',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},
{Res1,Bytes14}.

enc_Header(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute year(1) with type INTEGER
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element bsr 12 =:= 0 ->
<<Enc6@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute timeStamp(2) with type INTEGER
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
0 =< Enc9@element, Enc9@element < 527041 ->
<<Enc9@element:20>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute secMark(3) with type INTEGER
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element bsr 16 =:= 0 ->
<<Enc12@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc12@element}}})
end
end|begin
%% attribute msgIssueRevision(4) with type INTEGER
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element bsr 7 =:= 0 ->
<<Enc15@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end].


dec_Header(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute year(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:12,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute timeStamp(2) with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:20,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute secMark(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute msgIssueRevision(4) with type INTEGER
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8};
<<1:1,1:1,V7@V7:6,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
V7@Mul9 = V7@V7 * 16384,
{V7@Mul9,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V10:V7@V0/bitstring-unit:1,V7@Buf11/bitstring>> = V7@Buf1,
{V7@V10,V7@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'Header',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_IntersectionAccessPoint(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= lane ->
if ChoiceVal bsr 8 =:= 0 ->
[<<0:1,0:2,ChoiceVal:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= approach ->
if ChoiceVal bsr 4 =:= 0 ->
<<0:1,1:2,ChoiceVal:4>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end;
ChoiceTag =:= connection ->
if ChoiceVal bsr 8 =:= 0 ->
[<<0:1,2:2,ChoiceVal:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end.


dec_IntersectionAccessPoint(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{lane,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end
end,
{{approach,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes2,
{V4@V0,V4@Buf1}
end
end,
{{connection,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_IntersectionReferenceID(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute region(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element =:= asn1_NOVALUE ->
[];
Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute id(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_IntersectionReferenceID(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute region(1) with type INTEGER
{Term1,Bytes2} = case Opt band 1 of
1 ->
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute id(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'IntersectionReferenceID',Term1,Term2},
{Res1,Bytes3}.

enc_LaneDataAttribute(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= pathEndPointAngle ->
begin
ChoiceVal@sub = ChoiceVal - -150,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 301 ->
<<0:1,0:3,ChoiceVal@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneCrownPointCenter ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,1:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneCrownPointLeft ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,2:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneCrownPointRight ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<0:1,3:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= laneAngle ->
begin
ChoiceVal@sub = ChoiceVal - -180,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 361 ->
<<0:1,4:3,ChoiceVal@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= speedLimits ->
[<<0:1,5:3>>|enc_SpeedLimitList(ChoiceVal)];
ChoiceTag =:= regional ->
[<<0:1,6:3>>|enc_LaneDataAttribute_regional(ChoiceVal)]
end.
enc_LaneDataAttribute_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_LaneDataAttribute_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_LaneDataAttribute_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type5(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_LaneDataAttribute(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + -150,
{V2@Add2,V2@Buf1}
end
end,
{{pathEndPointAngle,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -128,
{V3@Add2,V3@Buf1}
end
end,
{{laneCrownPointCenter,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:8,V4@Buf1/bitstring>> = Bytes2,
V4@Add2 = V4@V0 + -128,
{V4@Add2,V4@Buf1}
end
end,
{{laneCrownPointLeft,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:8,V5@Buf1/bitstring>> = Bytes2,
V5@Add2 = V5@V0 + -128,
{V5@Add2,V5@Buf1}
end
end,
{{laneCrownPointRight,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:9,V6@Buf1/bitstring>> = Bytes2,
V6@Add2 = V6@V0 + -180,
{V6@Add2,V6@Buf1}
end
end,
{{laneAngle,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_SpeedLimitList(Bytes2)
end,
{{speedLimits,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_LaneDataAttribute_regional(Bytes2)
end,
{{regional,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_LaneDataAttribute_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components6(V1@Add2, V1@Buf1, []).


dec_LaneDataAttribute_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type7(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_LaneDataAttributeList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_LaneDataAttribute(Comp) || Comp <- Val]]
end.



dec_LaneDataAttributeList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components8(V1@Add2, V1@Buf1, []).

'enc_Node-LLmD-64b'(Val) ->
[begin
%% attribute lon(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -1799999999,
if 0 =< Enc1@element@sub, Enc1@element@sub < 3600000001 ->
<<Enc1@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute lat(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -900000000,
if 0 =< Enc3@element@sub, Enc3@element@sub < 1800000002 ->
<<Enc3@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-LLmD-64b'(Bytes) ->

%% attribute lon(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:32,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1799999999,
{V1@Add2,V1@Buf1}
end,

%% attribute lat(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:31,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -900000000,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-LLmD-64b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-20b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -512,
if Enc1@element@sub bsr 10 =:= 0 ->
<<Enc1@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -512,
if Enc3@element@sub bsr 10 =:= 0 ->
<<Enc3@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-20b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -512,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -512,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-20b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-22b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -1024,
if Enc1@element@sub bsr 11 =:= 0 ->
<<Enc1@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -1024,
if Enc3@element@sub bsr 11 =:= 0 ->
<<Enc3@element@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-22b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1024,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -1024,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-22b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-24b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -2048,
if Enc1@element@sub bsr 12 =:= 0 ->
<<Enc1@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -2048,
if Enc3@element@sub bsr 12 =:= 0 ->
<<Enc3@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-24b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -2048,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-24b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-26b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -4096,
if Enc1@element@sub bsr 13 =:= 0 ->
<<Enc1@element@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -4096,
if Enc3@element@sub bsr 13 =:= 0 ->
<<Enc3@element@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-26b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -4096,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:13,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -4096,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-26b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-28b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -8192,
if Enc1@element@sub bsr 14 =:= 0 ->
<<Enc1@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -8192,
if Enc3@element@sub bsr 14 =:= 0 ->
<<Enc3@element@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-28b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8192,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:14,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -8192,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-28b',Term1,Term2},
{Res1,Bytes2}.

'enc_Node-XY-32b'(Val) ->
[begin
%% attribute x(1) with type INTEGER
Enc1@element = element(2, Val),
Enc1@element@sub = Enc1@element - -32768,
if Enc1@element@sub bsr 16 =:= 0 ->
<<Enc1@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute y(2) with type INTEGER
Enc3@element = element(3, Val),
Enc3@element@sub = Enc3@element - -32768,
if Enc3@element@sub bsr 16 =:= 0 ->
<<Enc3@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


'dec_Node-XY-32b'(Bytes) ->

%% attribute x(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32768,
{V1@Add2,V1@Buf1}
end,

%% attribute y(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -32768,
{V2@Add2,V2@Buf1}
end,
Res1 = {'Node-XY-32b',Term1,Term2},
{Res1,Bytes2}.

enc_NodeAttributeSetXY(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
if Enc7@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute localNode(1) with type NodeAttributeXYList
Enc9@element = element(2, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeXYList(Enc9@element)
end
end,
begin
%% attribute disabled(2) with type SegmentAttributeXYList
Enc11@element = element(3, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_SegmentAttributeXYList(Enc11@element)
end
end,
begin
%% attribute enabled(3) with type SegmentAttributeXYList
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_SegmentAttributeXYList(Enc13@element)
end
end,
begin
%% attribute data(4) with type LaneDataAttributeList
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
enc_LaneDataAttributeList(Enc15@element)
end
end,
begin
%% attribute dWidth(5) with type INTEGER
Enc17@element = element(6, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@element@sub = Enc17@element - -512,
if Enc17@element@sub bsr 10 =:= 0 ->
<<Enc17@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end
end
end,
begin
%% attribute dElevation(6) with type INTEGER
Enc20@element = element(7, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@element@sub = Enc20@element - -512,
if Enc20@element@sub bsr 10 =:= 0 ->
<<Enc20@element@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc20@element}}})
end
end
end
end|begin
%% attribute regional(7) with type SEQUENCE OF
Enc23@element = element(8, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeSetXY_regional(Enc23@element)
end
end].
enc_NodeAttributeSetXY_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_NodeAttributeSetXY_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_NodeAttributeSetXY_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type2(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_NodeAttributeSetXY(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute localNode(1) with type NodeAttributeXYList
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
dec_NodeAttributeXYList(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute disabled(2) with type SegmentAttributeXYList
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
dec_SegmentAttributeXYList(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute enabled(3) with type SegmentAttributeXYList
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
dec_SegmentAttributeXYList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute data(4) with type LaneDataAttributeList
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
dec_LaneDataAttributeList(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute dWidth(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes6,
V3@Add2 = V3@V0 + -512,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute dElevation(6) with type INTEGER
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:10,V4@Buf1/bitstring>> = Bytes7,
V4@Add2 = V4@V0 + -512,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute regional(7) with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
dec_NodeAttributeSetXY_regional(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V5@V0,V5@Buf1} = case Bytes9 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'NodeAttributeSetXY',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.


dec_NodeAttributeSetXY_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components9(V1@Add2, V1@Buf1, []).


dec_NodeAttributeSetXY_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type4(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_NodeAttributeXYList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp =:= reserved ->
<<0:1,0:4>>;
Comp =:= stopLine ->
<<0:1,1:4>>;
Comp =:= roundedCapStyleA ->
<<0:1,2:4>>;
Comp =:= roundedCapStyleB ->
<<0:1,3:4>>;
Comp =:= mergePoint ->
<<0:1,4:4>>;
Comp =:= divergePoint ->
<<0:1,5:4>>;
Comp =:= downstreamStopLine ->
<<0:1,6:4>>;
Comp =:= downstreamStartNode ->
<<0:1,7:4>>;
Comp =:= closedToTraffic ->
<<0:1,8:4>>;
Comp =:= safeIsland ->
<<0:1,9:4>>;
Comp =:= curbPresentAtStepOff ->
<<0:1,10:4>>;
Comp =:= hydrantPresent ->
<<0:1,11:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Comp}}})
end || Comp <- Val]]
end.



dec_NodeAttributeXYList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components10(V1@Add2, V1@Buf1, []).

enc_NodeListXY(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= nodes ->
[<<0:1,0:1>>|enc_NodeSetXY(ChoiceVal)];
ChoiceTag =:= computed ->
[<<0:1,1:1>>|enc_ComputedLane(ChoiceVal)]
end.


dec_NodeListXY(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_NodeSetXY(Bytes2)
end,
{{nodes,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ComputedLane(Bytes2)
end,
{{computed,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
V1@Mul9 = V1@V7 * 16384,
{V1@Mul9,V1@Buf8}
end,
<<V1@V10:V1@V3/unit:8,V1@Buf11/bitstring>> = V1@Buf4,
{V1@V10,V1@Buf11}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
enc_NodeOffsetPointXY(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'node-XY1' ->
[<<0:3>>|'enc_Node-XY-20b'(ChoiceVal)];
ChoiceTag =:= 'node-XY2' ->
[<<1:3>>|'enc_Node-XY-22b'(ChoiceVal)];
ChoiceTag =:= 'node-XY3' ->
[<<2:3>>|'enc_Node-XY-24b'(ChoiceVal)];
ChoiceTag =:= 'node-XY4' ->
[<<3:3>>|'enc_Node-XY-26b'(ChoiceVal)];
ChoiceTag =:= 'node-XY5' ->
[<<4:3>>|'enc_Node-XY-28b'(ChoiceVal)];
ChoiceTag =:= 'node-XY6' ->
[<<5:3>>|'enc_Node-XY-32b'(ChoiceVal)];
ChoiceTag =:= 'node-LatLon' ->
[<<6:3>>|'enc_Node-LLmD-64b'(ChoiceVal)];
ChoiceTag =:= regional ->
[<<7:3>>|enc_NodeOffsetPointXY_regional(ChoiceVal)]
end.
enc_NodeOffsetPointXY_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type11(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_NodeOffsetPointXY(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_Node-XY-20b'(Bytes1)
end,
{{'node-XY1',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_Node-XY-22b'(Bytes1)
end,
{{'node-XY2',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_Node-XY-24b'(Bytes1)
end,
{{'node-XY3',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_Node-XY-26b'(Bytes1)
end,
{{'node-XY4',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_Node-XY-28b'(Bytes1)
end,
{{'node-XY5',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
'dec_Node-XY-32b'(Bytes1)
end,
{{'node-XY6',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
'dec_Node-LLmD-64b'(Bytes1)
end,
{{'node-LatLon',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_NodeOffsetPointXY_regional(Bytes1)
end,
{{regional,Val},NewBytes}
end.

dec_NodeOffsetPointXY_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type12(Tmpterm1, Term1),
Res1 = {'NodeOffsetPointXY_regional',Term1,Term2},
{Res1,Bytes2}.

enc_NodeSetXY(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 2,
if 0 =< Enc1@len@sub, Enc1@len@sub < 62 ->
[<<Enc1@len@sub:6>>|[enc_NodeXY(Comp) || Comp <- Val]]
end.



dec_NodeSetXY(Bytes) ->
%% Length with constraint {2,63}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 2,
dec_components13(V1@Add2, V1@Buf1, []).

enc_NodeXY(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
%% attribute delta(1) with type NodeOffsetPointXY
Enc3@element = element(2, Val),
enc_NodeOffsetPointXY(Enc3@element)
end|begin
%% attribute attributes(2) with type NodeAttributeSetXY
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_NodeAttributeSetXY(Enc4@element)
end
end].


dec_NodeXY(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute delta(1) with type NodeOffsetPointXY
{Term1,Bytes3} = dec_NodeOffsetPointXY(Bytes2),

%% attribute attributes(2) with type NodeAttributeSetXY
{Term2,Bytes4} = case Opt band 1 of
1 ->
dec_NodeAttributeSetXY(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
V3@Mul9 = V3@V7 * 16384,
{V3@Mul9,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V10:V3@V0/bitstring-unit:1,V3@Buf11/bitstring>> = V3@Buf1,
{V3@V10,V3@Buf11}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
Res1 = {'NodeXY',Term1,Term2},
{Res1,Bytes6}.

enc_PathHistory(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute initialPosition(1) with type FullPositionVector
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_FullPositionVector(Enc4@element)
end
end,
begin
%% attribute currGNSSstatus(2) with type BIT STRING
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bs = try bit_string_name2pos_14(Enc6@element) of
Enc7@positions ->
bitstring_from_positions(Enc7@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc6@element, 8)
end,
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 8 ->
Enc7@bs
end
end
end
end|begin
%% attribute crumbData(3) with type PathHistoryPointList
Enc9@element = element(4, Val),
enc_PathHistoryPointList(Enc9@element)
end].


dec_PathHistory(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute initialPosition(1) with type FullPositionVector
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_FullPositionVector(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute currGNSSstatus(2) with type BIT STRING
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:8/binary-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V3@Buf1},
{V3@V2,V3@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute crumbData(3) with type PathHistoryPointList
{Term3,Bytes5} = dec_PathHistoryPointList(Bytes4),

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
Res1 = {'PathHistory',Term1,Term2,Term3},
{Res1,Bytes7}.

enc_PathHistoryPointList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 23 ->
[<<Enc1@len@sub:5>>|[enc_PathHistoryPoint(Comp) || Comp <- Val]]
end.



dec_PathHistoryPointList(Bytes) ->
%% Length with constraint {1,23}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components15(V1@Add2, V1@Buf1, []).

enc_PathHistoryPoint(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute latOffset(1) with type INTEGER
Enc5@element = element(2, Val),
Enc5@element@sub = Enc5@element - -131072,
if Enc5@element@sub bsr 18 =:= 0 ->
<<Enc5@element@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute lonOffset(2) with type INTEGER
Enc7@element = element(3, Val),
Enc7@element@sub = Enc7@element - -131072,
if Enc7@element@sub bsr 18 =:= 0 ->
<<Enc7@element@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Enc7@element}}})
end
end,
begin
%% attribute elevationOffset(3) with type INTEGER
Enc9@element = element(4, Val),
Enc9@element@sub = Enc9@element - -2048,
if Enc9@element@sub bsr 12 =:= 0 ->
<<Enc9@element@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc9@element}}})
end
end,
begin
%% attribute timeOffset(4) with type INTEGER
Enc11@element = element(5, Val),
Enc11@element@sub = Enc11@element - 1,
if 0 =< Enc11@element@sub, Enc11@element@sub < 65535 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute speed(5) with type INTEGER
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element bsr 13 =:= 0 ->
<<Enc13@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc13@element}}})
end
end,
begin
%% attribute posAccuracy(6) with type PositionalAccuracy
Enc16@element = element(7, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
enc_PositionalAccuracy(Enc16@element)
end
end|begin
%% attribute heading(7) with type INTEGER
Enc18@element = element(8, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
0 =< Enc18@element, Enc18@element < 241 ->
[Enc18@element];
true ->
exit({error,{asn1,{illegal_integer,Enc18@element}}})
end
end].


dec_PathHistoryPoint(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute latOffset(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:18,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -131072,
{V3@Add2,V3@Buf1}
end,

%% attribute lonOffset(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:18,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -131072,
{V4@Add2,V4@Buf1}
end,

%% attribute elevationOffset(3) with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:12,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -2048,
{V5@Add2,V5@Buf1}
end,

%% attribute timeOffset(4) with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:16,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
{V6@Add2,V6@Buf1}
end,

%% attribute speed(5) with type INTEGER
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V7@V0:13,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute posAccuracy(6) with type PositionalAccuracy
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
dec_PositionalAccuracy(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute heading(7) with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V8@V0:8,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V9@V0,V9@Buf1} = case Bytes9 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8};
<<1:1,1:1,V9@V7:6,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
V9@Mul9 = V9@V7 * 16384,
{V9@Mul9,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V10:V9@V0/bitstring-unit:1,V9@Buf11/bitstring>> = V9@Buf1,
{V9@V10,V9@Buf11}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
Res1 = {'PathHistoryPoint',Term1,Term2,Term3,Term4,Term5,Term6,Term7},
{Res1,Bytes11}.

enc_PathPrediction(Val) ->
[begin
%% attribute radiusOfCurve(1) with type INTEGER
Enc2@element = element(2, Val),
Enc2@element@sub = Enc2@element - -32767,
if 0 =< Enc2@element@sub, Enc2@element@sub < 65535 ->
<<0:1,Enc2@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute confidence(2) with type INTEGER
Enc4@element = element(3, Val),
if 0 =< Enc4@element, Enc4@element < 201 ->
[Enc4@element];
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end].


dec_PathPrediction(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute radiusOfCurve(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -32767,
{V2@Add2,V2@Buf1}
end,

%% attribute confidence(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
Res1 = {'PathPrediction',Term1,Term2},
{Res1,Bytes5}.

enc_Position3D(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
%% attribute lat(1) with type INTEGER
Enc4@element = element(2, Val),
Enc4@element@sub = Enc4@element - -900000000,
if 0 =< Enc4@element@sub, Enc4@element@sub < 1800000002 ->
<<Enc4@element@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Enc4@element}}})
end
end,
begin
%% attribute long(2) with type INTEGER
Enc6@element = element(3, Val),
Enc6@element@sub = Enc6@element - -1799999999,
if 0 =< Enc6@element@sub, Enc6@element@sub < 3600000001 ->
<<Enc6@element@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Enc6@element}}})
end
end,
begin
%% attribute elevation(3) with type INTEGER
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@element@sub = Enc8@element - -4096,
if Enc8@element@sub bsr 16 =:= 0 ->
<<Enc8@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc8@element}}})
end
end
end
end|begin
%% attribute regional(4) with type SEQUENCE OF
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_Position3D_regional(Enc11@element)
end
end].
enc_Position3D_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_Position3D_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_Position3D_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type16(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_Position3D(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute lat(1) with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:31,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -900000000,
{V3@Add2,V3@Buf1}
end,

%% attribute long(2) with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:32,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -1799999999,
{V4@Add2,V4@Buf1}
end,

%% attribute elevation(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:16,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -4096,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute regional(4) with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_Position3D_regional(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8};
<<1:1,1:1,V6@V7:6,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
V6@Mul9 = V6@V7 * 16384,
{V6@Mul9,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V10:V6@V0/bitstring-unit:1,V6@Buf11/bitstring>> = V6@Buf1,
{V6@V10,V6@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'Position3D',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.


dec_Position3D_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components17(V1@Add2, V1@Buf1, []).


dec_Position3D_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type18(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_PositionalAccuracy(Val) ->
[begin
%% attribute semiMajor(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 8 =:= 0 ->
Enc1@element;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end,
begin
%% attribute semiMinor(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 8 =:= 0 ->
Enc3@element;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end|begin
%% attribute orientation(3) with type INTEGER
Enc5@element = element(4, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_PositionalAccuracy(Bytes) ->

%% attribute semiMajor(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute semiMinor(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute orientation(3) with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'PositionalAccuracy',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_PositionConfidenceSet(Val) ->
[begin
%% attribute pos(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unavailable ->
<<0:4>>;
Enc1@element =:= a500m ->
<<1:4>>;
Enc1@element =:= a200m ->
<<2:4>>;
Enc1@element =:= a100m ->
<<3:4>>;
Enc1@element =:= a50m ->
<<4:4>>;
Enc1@element =:= a20m ->
<<5:4>>;
Enc1@element =:= a10m ->
<<6:4>>;
Enc1@element =:= a5m ->
<<7:4>>;
Enc1@element =:= a2m ->
<<8:4>>;
Enc1@element =:= a1m ->
<<9:4>>;
Enc1@element =:= a50cm ->
<<10:4>>;
Enc1@element =:= a20cm ->
<<11:4>>;
Enc1@element =:= a10cm ->
<<12:4>>;
Enc1@element =:= a5cm ->
<<13:4>>;
Enc1@element =:= a2cm ->
<<14:4>>;
Enc1@element =:= a1cm ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end|begin
%% attribute elevation(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:4>>;
Enc3@element =:= 'elev-500-00' ->
<<1:4>>;
Enc3@element =:= 'elev-200-00' ->
<<2:4>>;
Enc3@element =:= 'elev-100-00' ->
<<3:4>>;
Enc3@element =:= 'elev-050-00' ->
<<4:4>>;
Enc3@element =:= 'elev-020-00' ->
<<5:4>>;
Enc3@element =:= 'elev-010-00' ->
<<6:4>>;
Enc3@element =:= 'elev-005-00' ->
<<7:4>>;
Enc3@element =:= 'elev-002-00' ->
<<8:4>>;
Enc3@element =:= 'elev-001-00' ->
<<9:4>>;
Enc3@element =:= 'elev-000-50' ->
<<10:4>>;
Enc3@element =:= 'elev-000-20' ->
<<11:4>>;
Enc3@element =:= 'elev-000-10' ->
<<12:4>>;
Enc3@element =:= 'elev-000-05' ->
<<13:4>>;
Enc3@element =:= 'elev-000-02' ->
<<14:4>>;
Enc3@element =:= 'elev-000-01' ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end].


dec_PositionConfidenceSet(Bytes) ->

%% attribute pos(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> a500m;
2 -> a200m;
3 -> a100m;
4 -> a50m;
5 -> a20m;
6 -> a10m;
7 -> a5m;
8 -> a2m;
9 -> a1m;
10 -> a50cm;
11 -> a20cm;
12 -> a10cm;
13 -> a5cm;
14 -> a2cm;
15 -> a1cm
end,
{V1@Int2,V1@Buf1}
end,

%% attribute elevation(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> 'elev-500-00';
2 -> 'elev-200-00';
3 -> 'elev-100-00';
4 -> 'elev-050-00';
5 -> 'elev-020-00';
6 -> 'elev-010-00';
7 -> 'elev-005-00';
8 -> 'elev-002-00';
9 -> 'elev-001-00';
10 -> 'elev-000-50';
11 -> 'elev-000-20';
12 -> 'elev-000-10';
13 -> 'elev-000-05';
14 -> 'elev-000-02';
15 -> 'elev-000-01'
end,
{V2@Int2,V2@Buf1}
end,
Res1 = {'PositionConfidenceSet',Term1,Term2},
{Res1,Bytes2}.

enc_PrivilegedEvents(Val) ->
[begin
%% attribute notUsed(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element bsr 5 =:= 0 ->
<<0:1,Enc2@element:5>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute event(2) with type BIT STRING
Enc4@element = element(3, Val),
Enc5@bs = try bit_string_name2pos_19(Enc4@element) of
Enc5@positions ->
bitstring_from_positions(Enc5@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Enc4@element, 16)
end,
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 16 ->
Enc5@bs
end
end].


dec_PrivilegedEvents(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute notUsed(1) with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute event(2) with type BIT STRING
{Term2,Bytes3} = begin
<<V3@V0:16/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_named_bit_string(V3@V0, [{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
V4@Mul9 = V4@V7 * 16384,
{V4@Mul9,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V10:V4@V0/bitstring-unit:1,V4@Buf11/bitstring>> = V4@Buf1,
{V4@V10,V4@Buf11}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
Res1 = {'PrivilegedEvents',Term1,Term2},
{Res1,Bytes5}.

enc_RegulatorySpeedLimit(Val) ->
[begin
%% attribute type(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unknown ->
<<0:1,0:4>>;
Enc1@element =:= maxSpeedInSchoolZone ->
<<0:1,1:4>>;
Enc1@element =:= maxSpeedInSchoolZoneWhenChildrenArePresent ->
<<0:1,2:4>>;
Enc1@element =:= maxSpeedInConstructionZone ->
<<0:1,3:4>>;
Enc1@element =:= vehicleMinSpeed ->
<<0:1,4:4>>;
Enc1@element =:= vehicleMaxSpeed ->
<<0:1,5:4>>;
Enc1@element =:= vehicleNightMaxSpeed ->
<<0:1,6:4>>;
Enc1@element =:= truckMinSpeed ->
<<0:1,7:4>>;
Enc1@element =:= truckMaxSpeed ->
<<0:1,8:4>>;
Enc1@element =:= truckNightMaxSpeed ->
<<0:1,9:4>>;
Enc1@element =:= vehiclesWithTrailersMinSpeed ->
<<0:1,10:4>>;
Enc1@element =:= vehiclesWithTrailersMaxSpeed ->
<<0:1,11:4>>;
Enc1@element =:= vehiclesWithTrailersNightMaxSpeed ->
<<0:1,12:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end|begin
%% attribute speed(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 13 =:= 0 ->
<<Enc3@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_RegulatorySpeedLimit(Bytes) ->

%% attribute type(1) with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> maxSpeedInSchoolZone;
2 -> maxSpeedInSchoolZoneWhenChildrenArePresent;
3 -> maxSpeedInConstructionZone;
4 -> vehicleMinSpeed;
5 -> vehicleMaxSpeed;
6 -> vehicleNightMaxSpeed;
7 -> truckMinSpeed;
8 -> truckMaxSpeed;
9 -> truckNightMaxSpeed;
10 -> vehiclesWithTrailersMinSpeed;
11 -> vehiclesWithTrailersMaxSpeed;
12 -> vehiclesWithTrailersNightMaxSpeed;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute speed(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:13,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'RegulatorySpeedLimit',Term1,Term2},
{Res1,Bytes2}.

enc_RequestorType(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute role(1) with type ENUMERATED
Enc7@element = element(2, Val),
if Enc7@element =:= basicVehicle ->
<<0:1,0:5>>;
Enc7@element =:= publicTransport ->
<<0:1,1:5>>;
Enc7@element =:= specialTransport ->
<<0:1,2:5>>;
Enc7@element =:= dangerousGoods ->
<<0:1,3:5>>;
Enc7@element =:= roadWork ->
<<0:1,4:5>>;
Enc7@element =:= roadRescue ->
<<0:1,5:5>>;
Enc7@element =:= emergency ->
<<0:1,6:5>>;
Enc7@element =:= safetyCar ->
<<0:1,7:5>>;
Enc7@element =:= 'none-unknown' ->
<<0:1,8:5>>;
Enc7@element =:= truck ->
<<0:1,9:5>>;
Enc7@element =:= motorcycle ->
<<0:1,10:5>>;
Enc7@element =:= roadSideSource ->
<<0:1,11:5>>;
Enc7@element =:= police ->
<<0:1,12:5>>;
Enc7@element =:= fire ->
<<0:1,13:5>>;
Enc7@element =:= ambulance ->
<<0:1,14:5>>;
Enc7@element =:= dot ->
<<0:1,15:5>>;
Enc7@element =:= transit ->
<<0:1,16:5>>;
Enc7@element =:= slowMoving ->
<<0:1,17:5>>;
Enc7@element =:= stopNgo ->
<<0:1,18:5>>;
Enc7@element =:= cyclist ->
<<0:1,19:5>>;
Enc7@element =:= pedestrian ->
<<0:1,20:5>>;
Enc7@element =:= nonMotorized ->
<<0:1,21:5>>;
Enc7@element =:= military ->
<<0:1,22:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end,
begin
%% attribute subrole(2) with type ENUMERATED
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
Enc9@element =:= requestSubRoleUnKnown ->
<<0:4>>;
Enc9@element =:= requestSubRole1 ->
<<1:4>>;
Enc9@element =:= requestSubRole2 ->
<<2:4>>;
Enc9@element =:= requestSubRole3 ->
<<3:4>>;
Enc9@element =:= requestSubRole4 ->
<<4:4>>;
Enc9@element =:= requestSubRole5 ->
<<5:4>>;
Enc9@element =:= requestSubRole6 ->
<<6:4>>;
Enc9@element =:= requestSubRole7 ->
<<7:4>>;
Enc9@element =:= requestSubRole8 ->
<<8:4>>;
Enc9@element =:= requestSubRole9 ->
<<9:4>>;
Enc9@element =:= requestSubRole10 ->
<<10:4>>;
Enc9@element =:= requestSubRole11 ->
<<11:4>>;
Enc9@element =:= requestSubRole12 ->
<<12:4>>;
Enc9@element =:= requestSubRole13 ->
<<13:4>>;
Enc9@element =:= requestSubRole14 ->
<<14:4>>;
Enc9@element =:= requestSubRoleReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc9@element}}})
end
end,
begin
%% attribute request(3) with type ENUMERATED
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
Enc12@element =:= requestImportanceLevelUnKnown ->
<<0:4>>;
Enc12@element =:= requestImportanceLevel1 ->
<<1:4>>;
Enc12@element =:= requestImportanceLevel2 ->
<<2:4>>;
Enc12@element =:= requestImportanceLevel3 ->
<<3:4>>;
Enc12@element =:= requestImportanceLevel4 ->
<<4:4>>;
Enc12@element =:= requestImportanceLevel5 ->
<<5:4>>;
Enc12@element =:= requestImportanceLevel6 ->
<<6:4>>;
Enc12@element =:= requestImportanceLevel7 ->
<<7:4>>;
Enc12@element =:= requestImportanceLevel8 ->
<<8:4>>;
Enc12@element =:= requestImportanceLevel9 ->
<<9:4>>;
Enc12@element =:= requestImportanceLevel10 ->
<<10:4>>;
Enc12@element =:= requestImportanceLevel11 ->
<<11:4>>;
Enc12@element =:= requestImportanceLevel12 ->
<<12:4>>;
Enc12@element =:= requestImportanceLevel13 ->
<<13:4>>;
Enc12@element =:= requestImportanceLevel14 ->
<<14:4>>;
Enc12@element =:= requestImportanceReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc12@element}}})
end
end,
begin
%% attribute iso3883(4) with type INTEGER
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
0 =< Enc15@element, Enc15@element < 101 ->
<<Enc15@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc15@element}}})
end
end,
begin
%% attribute hpmsType(5) with type ENUMERATED
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
Enc18@element =:= none ->
<<0:1,0:4>>;
Enc18@element =:= unknown ->
<<0:1,1:4>>;
Enc18@element =:= special ->
<<0:1,2:4>>;
Enc18@element =:= moto ->
<<0:1,3:4>>;
Enc18@element =:= car ->
<<0:1,4:4>>;
Enc18@element =:= carOther ->
<<0:1,5:4>>;
Enc18@element =:= bus ->
<<0:1,6:4>>;
Enc18@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc18@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc18@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc18@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc18@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc18@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc18@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc18@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc18@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc18@element}}})
end
end|begin
%% attribute regional(6) with type SEQUENCE
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
enc_RequestorType_regional(Enc21@element)
end
end].
enc_RequestorType_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type2(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_RequestorType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute role(1) with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:5,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> basicVehicle;
1 -> publicTransport;
2 -> specialTransport;
3 -> dangerousGoods;
4 -> roadWork;
5 -> roadRescue;
6 -> emergency;
7 -> safetyCar;
8 -> 'none-unknown';
9 -> truck;
10 -> motorcycle;
11 -> roadSideSource;
12 -> police;
13 -> fire;
14 -> ambulance;
15 -> dot;
16 -> transit;
17 -> slowMoving;
18 -> stopNgo;
19 -> cyclist;
20 -> pedestrian;
21 -> nonMotorized;
22 -> military;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute subrole(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> requestSubRoleUnKnown;
1 -> requestSubRole1;
2 -> requestSubRole2;
3 -> requestSubRole3;
4 -> requestSubRole4;
5 -> requestSubRole5;
6 -> requestSubRole6;
7 -> requestSubRole7;
8 -> requestSubRole8;
9 -> requestSubRole9;
10 -> requestSubRole10;
11 -> requestSubRole11;
12 -> requestSubRole12;
13 -> requestSubRole13;
14 -> requestSubRole14;
15 -> requestSubRoleReserved
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute request(3) with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> requestImportanceLevelUnKnown;
1 -> requestImportanceLevel1;
2 -> requestImportanceLevel2;
3 -> requestImportanceLevel3;
4 -> requestImportanceLevel4;
5 -> requestImportanceLevel5;
6 -> requestImportanceLevel6;
7 -> requestImportanceLevel7;
8 -> requestImportanceLevel8;
9 -> requestImportanceLevel9;
10 -> requestImportanceLevel10;
11 -> requestImportanceLevel11;
12 -> requestImportanceLevel12;
13 -> requestImportanceLevel13;
14 -> requestImportanceLevel14;
15 -> requestImportanceReserved
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute iso3883(4) with type INTEGER
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V6@V0:7,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute hpmsType(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:4,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute regional(6) with type SEQUENCE
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_RequestorType_regional(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8};
<<1:1,1:1,V8@V7:6,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
V8@Mul9 = V8@V7 * 16384,
{V8@Mul9,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V10:V8@V0/bitstring-unit:1,V8@Buf11/bitstring>> = V8@Buf1,
{V8@V10,V8@Buf11}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
Res1 = {'RequestorType',Term1,Term2,Term3,Term4,Term5,Term6},
{Res1,Bytes10}.


dec_RequestorType_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type4(Tmpterm1, Term1),
Res1 = {'RequestorType_regional',Term1,Term2},
{Res1,Bytes2}.

enc_RoadSegmentReferenceID(Val) ->
[begin
Enc1@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute region(1) with type INTEGER
Enc2@element = element(2, Val),
if Enc2@element =:= asn1_NOVALUE ->
[];
Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute id(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end].


dec_RoadSegmentReferenceID(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute region(1) with type INTEGER
{Term1,Bytes2} = case Opt band 1 of
1 ->
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute id(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
Res1 = {'RoadSegmentReferenceID',Term1,Term2},
{Res1,Bytes3}.

enc_RTCMheader(Val) ->
[begin
%% attribute status(1) with type BIT STRING
Enc1@element = element(2, Val),
Enc2@bs = try bit_string_name2pos_14(Enc1@element) of
Enc2@positions ->
bitstring_from_positions(Enc2@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Enc1@element, 8)
end,
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 8 ->
Enc2@bs
end
end|begin
%% attribute offsetSet(2) with type AntennaOffsetSet
Enc3@element = element(3, Val),
enc_AntennaOffsetSet(Enc3@element)
end].


dec_RTCMheader(Bytes) ->

%% attribute status(1) with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute offsetSet(2) with type AntennaOffsetSet
{Term2,Bytes2} = dec_AntennaOffsetSet(Bytes1),
Res1 = {'RTCMheader',Term1,Term2},
{Res1,Bytes2}.

enc_RTCMmessageList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 5 ->
[<<Enc2@len@sub:3>>|[begin
Enc1@len = byte_size(Comp),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 1023 ->
[<<Enc1@len@sub:10>>|Comp]
end
end || Comp <- Val]]
end.



dec_RTCMmessageList(Bytes) ->
%% Length with constraint {1,5}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components20(V1@Add2, V1@Buf1, []).

enc_SegmentAttributeXYList(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp =:= reserved ->
<<0:1,0:6>>;
Comp =:= doNotBlock ->
<<0:1,1:6>>;
Comp =:= whiteLine ->
<<0:1,2:6>>;
Comp =:= mergingLaneLeft ->
<<0:1,3:6>>;
Comp =:= mergingLaneRight ->
<<0:1,4:6>>;
Comp =:= curbOnLeft ->
<<0:1,5:6>>;
Comp =:= curbOnRight ->
<<0:1,6:6>>;
Comp =:= loadingzoneOnLeft ->
<<0:1,7:6>>;
Comp =:= loadingzoneOnRight ->
<<0:1,8:6>>;
Comp =:= turnOutPointOnLeft ->
<<0:1,9:6>>;
Comp =:= turnOutPointOnRight ->
<<0:1,10:6>>;
Comp =:= adjacentParkingOnLeft ->
<<0:1,11:6>>;
Comp =:= adjacentParkingOnRight ->
<<0:1,12:6>>;
Comp =:= adjacentBikeLaneOnLeft ->
<<0:1,13:6>>;
Comp =:= adjacentBikeLaneOnRight ->
<<0:1,14:6>>;
Comp =:= sharedBikeLane ->
<<0:1,15:6>>;
Comp =:= bikeBoxInFront ->
<<0:1,16:6>>;
Comp =:= transitStopOnLeft ->
<<0:1,17:6>>;
Comp =:= transitStopOnRight ->
<<0:1,18:6>>;
Comp =:= transitStopInLane ->
<<0:1,19:6>>;
Comp =:= sharedWithTrackedVehicle ->
<<0:1,20:6>>;
Comp =:= safeIsland ->
<<0:1,21:6>>;
Comp =:= lowCurbsPresent ->
<<0:1,22:6>>;
Comp =:= rumbleStripPresent ->
<<0:1,23:6>>;
Comp =:= audibleSignalingPresent ->
<<0:1,24:6>>;
Comp =:= adaptiveTimingPresent ->
<<0:1,25:6>>;
Comp =:= rfSignalRequestPresent ->
<<0:1,26:6>>;
Comp =:= partialCurbIntrusion ->
<<0:1,27:6>>;
Comp =:= taperToLeft ->
<<0:1,28:6>>;
Comp =:= taperToRight ->
<<0:1,29:6>>;
Comp =:= taperToCenterLine ->
<<0:1,30:6>>;
Comp =:= parallelParking ->
<<0:1,31:6>>;
Comp =:= headInParking ->
<<0:1,32:6>>;
Comp =:= freeParking ->
<<0:1,33:6>>;
Comp =:= timeRestrictionsOnParking ->
<<0:1,34:6>>;
Comp =:= costToPark ->
<<0:1,35:6>>;
Comp =:= midBlockCurbPresent ->
<<0:1,36:6>>;
Comp =:= unEvenPavementPresent ->
<<0:1,37:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Comp}}})
end || Comp <- Val]]
end.



dec_SegmentAttributeXYList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components21(V1@Add2, V1@Buf1, []).

enc_SpeedandHeadingandThrottleConfidence(Val) ->
[begin
%% attribute heading(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= unavailable ->
<<0:3>>;
Enc1@element =:= prec10deg ->
<<1:3>>;
Enc1@element =:= prec05deg ->
<<2:3>>;
Enc1@element =:= prec01deg ->
<<3:3>>;
Enc1@element =:= 'prec0-1deg' ->
<<4:3>>;
Enc1@element =:= 'prec0-05deg' ->
<<5:3>>;
Enc1@element =:= 'prec0-01deg' ->
<<6:3>>;
Enc1@element =:= 'prec0-0125deg' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end,
begin
%% attribute speed(2) with type ENUMERATED
Enc3@element = element(3, Val),
if Enc3@element =:= unavailable ->
<<0:3>>;
Enc3@element =:= prec100ms ->
<<1:3>>;
Enc3@element =:= prec10ms ->
<<2:3>>;
Enc3@element =:= prec5ms ->
<<3:3>>;
Enc3@element =:= prec1ms ->
<<4:3>>;
Enc3@element =:= 'prec0-1ms' ->
<<5:3>>;
Enc3@element =:= 'prec0-05ms' ->
<<6:3>>;
Enc3@element =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end|begin
%% attribute throttle(3) with type ENUMERATED
Enc5@element = element(4, Val),
if Enc5@element =:= unavailable ->
<<0:2>>;
Enc5@element =:= prec10percent ->
<<1:2>>;
Enc5@element =:= prec1percent ->
<<2:2>>;
Enc5@element =:= 'prec0-5percent' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc5@element}}})
end
end].


dec_SpeedandHeadingandThrottleConfidence(Bytes) ->

%% attribute heading(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec10deg;
2 -> prec05deg;
3 -> prec01deg;
4 -> 'prec0-1deg';
5 -> 'prec0-05deg';
6 -> 'prec0-01deg';
7 -> 'prec0-0125deg'
end,
{V1@Int2,V1@Buf1}
end,

%% attribute speed(2) with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V2@Int2,V2@Buf1}
end,

%% attribute throttle(3) with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> unavailable;
1 -> prec10percent;
2 -> prec1percent;
3 -> 'prec0-5percent'
end,
{V3@Int2,V3@Buf1}
end,
Res1 = {'SpeedandHeadingandThrottleConfidence',Term1,Term2,Term3},
{Res1,Bytes3}.

enc_SpeedLimitList(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 9 ->
[<<Enc1@len@sub:4>>|[enc_RegulatorySpeedLimit(Comp) || Comp <- Val]]
end.



dec_SpeedLimitList(Bytes) ->
%% Length with constraint {1,9}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components22(V1@Add2, V1@Buf1, []).

enc_TransmissionAndSpeed(Val) ->
[begin
%% attribute transmisson(1) with type ENUMERATED
Enc1@element = element(2, Val),
if Enc1@element =:= neutral ->
<<0:3>>;
Enc1@element =:= park ->
<<1:3>>;
Enc1@element =:= forwardGears ->
<<2:3>>;
Enc1@element =:= reverseGears ->
<<3:3>>;
Enc1@element =:= reserved1 ->
<<4:3>>;
Enc1@element =:= reserved2 ->
<<5:3>>;
Enc1@element =:= reserved3 ->
<<6:3>>;
Enc1@element =:= unavailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc1@element}}})
end
end|begin
%% attribute speed(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 13 =:= 0 ->
<<Enc3@element:13>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_TransmissionAndSpeed(Bytes) ->

%% attribute transmisson(1) with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> neutral;
1 -> park;
2 -> forwardGears;
3 -> reverseGears;
4 -> reserved1;
5 -> reserved2;
6 -> reserved3;
7 -> unavailable
end,
{V1@Int2,V1@Buf1}
end,

%% attribute speed(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:13,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'TransmissionAndSpeed',Term1,Term2},
{Res1,Bytes2}.

enc_VehicleClassification(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
Enc6@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
if Enc6@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@element = element(8, Val),
Enc8@element = element(9, Val),
if Enc7@element =:= asn1_NOVALUE ->
if Enc8@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@element = element(10, Val),
if Enc9@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
%% attribute keyType(1) with type INTEGER
Enc11@element = element(2, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
Enc11@element bsr 8 =:= 0 ->
Enc11@element;
true ->
exit({error,{asn1,{illegal_integer,Enc11@element}}})
end
end,
begin
%% attribute role(2) with type ENUMERATED
Enc14@element = element(3, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
Enc14@element =:= basicVehicle ->
<<0:1,0:5>>;
Enc14@element =:= publicTransport ->
<<0:1,1:5>>;
Enc14@element =:= specialTransport ->
<<0:1,2:5>>;
Enc14@element =:= dangerousGoods ->
<<0:1,3:5>>;
Enc14@element =:= roadWork ->
<<0:1,4:5>>;
Enc14@element =:= roadRescue ->
<<0:1,5:5>>;
Enc14@element =:= emergency ->
<<0:1,6:5>>;
Enc14@element =:= safetyCar ->
<<0:1,7:5>>;
Enc14@element =:= 'none-unknown' ->
<<0:1,8:5>>;
Enc14@element =:= truck ->
<<0:1,9:5>>;
Enc14@element =:= motorcycle ->
<<0:1,10:5>>;
Enc14@element =:= roadSideSource ->
<<0:1,11:5>>;
Enc14@element =:= police ->
<<0:1,12:5>>;
Enc14@element =:= fire ->
<<0:1,13:5>>;
Enc14@element =:= ambulance ->
<<0:1,14:5>>;
Enc14@element =:= dot ->
<<0:1,15:5>>;
Enc14@element =:= transit ->
<<0:1,16:5>>;
Enc14@element =:= slowMoving ->
<<0:1,17:5>>;
Enc14@element =:= stopNgo ->
<<0:1,18:5>>;
Enc14@element =:= cyclist ->
<<0:1,19:5>>;
Enc14@element =:= pedestrian ->
<<0:1,20:5>>;
Enc14@element =:= nonMotorized ->
<<0:1,21:5>>;
Enc14@element =:= military ->
<<0:1,22:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc14@element}}})
end
end,
begin
%% attribute iso3883(3) with type INTEGER
Enc17@element = element(4, Val),
if Enc17@element =:= asn1_NOVALUE ->
[];
0 =< Enc17@element, Enc17@element < 101 ->
<<Enc17@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc17@element}}})
end
end,
begin
%% attribute hpmsType(4) with type ENUMERATED
Enc20@element = element(5, Val),
if Enc20@element =:= asn1_NOVALUE ->
[];
Enc20@element =:= none ->
<<0:1,0:4>>;
Enc20@element =:= unknown ->
<<0:1,1:4>>;
Enc20@element =:= special ->
<<0:1,2:4>>;
Enc20@element =:= moto ->
<<0:1,3:4>>;
Enc20@element =:= car ->
<<0:1,4:4>>;
Enc20@element =:= carOther ->
<<0:1,5:4>>;
Enc20@element =:= bus ->
<<0:1,6:4>>;
Enc20@element =:= axleCnt2 ->
<<0:1,7:4>>;
Enc20@element =:= axleCnt3 ->
<<0:1,8:4>>;
Enc20@element =:= axleCnt4 ->
<<0:1,9:4>>;
Enc20@element =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Enc20@element =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Enc20@element =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Enc20@element =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Enc20@element =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Enc20@element =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc20@element}}})
end
end,
begin
%% attribute vehicleType(5) with type ENUMERATED
Enc23@element = element(6, Val),
if Enc23@element =:= asn1_NOVALUE ->
[];
Enc23@element =:= 'all-vehicles' ->
<<0:1,0:6>>;
Enc23@element =:= bicycles ->
<<0:1,1:6>>;
Enc23@element =:= motorcycles ->
<<0:1,2:6>>;
Enc23@element =:= cars ->
<<0:1,3:6>>;
Enc23@element =:= 'light-vehicles' ->
<<0:1,4:6>>;
Enc23@element =:= 'cars-and-light-vehicles' ->
<<0:1,5:6>>;
Enc23@element =:= 'cars-with-trailers' ->
<<0:1,6:6>>;
Enc23@element =:= 'cars-with-recreational-trailers' ->
<<0:1,7:6>>;
Enc23@element =:= 'vehicles-with-trailers' ->
<<0:1,8:6>>;
Enc23@element =:= 'heavy-vehicles' ->
<<0:1,9:6>>;
Enc23@element =:= trucks ->
<<0:1,10:6>>;
Enc23@element =:= buses ->
<<0:1,11:6>>;
Enc23@element =:= 'articulated-buses' ->
<<0:1,12:6>>;
Enc23@element =:= 'school-buses' ->
<<0:1,13:6>>;
Enc23@element =:= 'vehicles-with-semi-trailers' ->
<<0:1,14:6>>;
Enc23@element =:= 'vehicles-with-double-trailers' ->
<<0:1,15:6>>;
Enc23@element =:= 'high-profile-vehicles' ->
<<0:1,16:6>>;
Enc23@element =:= 'wide-vehicles' ->
<<0:1,17:6>>;
Enc23@element =:= 'long-vehicles' ->
<<0:1,18:6>>;
Enc23@element =:= 'hazardous-loads' ->
<<0:1,19:6>>;
Enc23@element =:= 'exceptional-loads' ->
<<0:1,20:6>>;
Enc23@element =:= 'abnormal-loads' ->
<<0:1,21:6>>;
Enc23@element =:= convoys ->
<<0:1,22:6>>;
Enc23@element =:= 'maintenance-vehicles' ->
<<0:1,23:6>>;
Enc23@element =:= 'delivery-vehicles' ->
<<0:1,24:6>>;
Enc23@element =:= 'vehicles-with-even-numbered-license-plates' ->
<<0:1,25:6>>;
Enc23@element =:= 'vehicles-with-odd-numbered-license-plates' ->
<<0:1,26:6>>;
Enc23@element =:= 'vehicles-with-parking-permits' ->
<<0:1,27:6>>;
Enc23@element =:= 'vehicles-with-catalytic-converters' ->
<<0:1,28:6>>;
Enc23@element =:= 'vehicles-without-catalytic-converters' ->
<<0:1,29:6>>;
Enc23@element =:= 'gas-powered-vehicles' ->
<<0:1,30:6>>;
Enc23@element =:= 'diesel-powered-vehicles' ->
<<0:1,31:6>>;
Enc23@element =:= 'lPG-vehicles' ->
<<0:1,32:6>>;
Enc23@element =:= 'military-convoys' ->
<<0:1,33:6>>;
Enc23@element =:= 'military-vehicles' ->
<<0:1,34:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc23@element}}})
end
end,
begin
%% attribute responseEquip(6) with type ENUMERATED
Enc26@element = element(7, Val),
if Enc26@element =:= asn1_NOVALUE ->
[];
Enc26@element =:= 'ground-fire-suppression' ->
<<0:1,0:7>>;
Enc26@element =:= 'heavy-ground-equipment' ->
<<0:1,1:7>>;
Enc26@element =:= aircraft ->
<<0:1,2:7>>;
Enc26@element =:= 'marine-equipment' ->
<<0:1,3:7>>;
Enc26@element =:= 'support-equipment' ->
<<0:1,4:7>>;
Enc26@element =:= 'medical-rescue-unit' ->
<<0:1,5:7>>;
Enc26@element =:= other ->
<<0:1,6:7>>;
Enc26@element =:= 'ground-fire-suppression-other' ->
<<0:1,7:7>>;
Enc26@element =:= engine ->
<<0:1,8:7>>;
Enc26@element =:= 'truck-or-aerial' ->
<<0:1,9:7>>;
Enc26@element =:= quint ->
<<0:1,10:7>>;
Enc26@element =:= 'tanker-pumper-combination' ->
<<0:1,11:7>>;
Enc26@element =:= 'brush-truck' ->
<<0:1,12:7>>;
Enc26@element =:= 'aircraft-rescue-firefighting' ->
<<0:1,13:7>>;
Enc26@element =:= 'heavy-ground-equipment-other' ->
<<0:1,14:7>>;
Enc26@element =:= 'dozer-or-plow' ->
<<0:1,15:7>>;
Enc26@element =:= tractor ->
<<0:1,16:7>>;
Enc26@element =:= 'tanker-or-tender' ->
<<0:1,17:7>>;
Enc26@element =:= 'aircraft-other' ->
<<0:1,18:7>>;
Enc26@element =:= 'aircraft-fixed-wing-tanker' ->
<<0:1,19:7>>;
Enc26@element =:= helitanker ->
<<0:1,20:7>>;
Enc26@element =:= helicopter ->
<<0:1,21:7>>;
Enc26@element =:= 'marine-equipment-other' ->
<<0:1,22:7>>;
Enc26@element =:= 'fire-boat-with-pump' ->
<<0:1,23:7>>;
Enc26@element =:= 'boat-no-pump' ->
<<0:1,24:7>>;
Enc26@element =:= 'support-apparatus-other' ->
<<0:1,25:7>>;
Enc26@element =:= 'breathing-apparatus-support' ->
<<0:1,26:7>>;
Enc26@element =:= 'light-and-air-unit' ->
<<0:1,27:7>>;
Enc26@element =:= 'medical-rescue-unit-other' ->
<<0:1,28:7>>;
Enc26@element =:= 'rescue-unit' ->
<<0:1,29:7>>;
Enc26@element =:= 'urban-search-rescue-unit' ->
<<0:1,30:7>>;
Enc26@element =:= 'high-angle-rescue' ->
<<0:1,31:7>>;
Enc26@element =:= 'crash-fire-rescue' ->
<<0:1,32:7>>;
Enc26@element =:= 'bLS-unit' ->
<<0:1,33:7>>;
Enc26@element =:= 'aLS-unit' ->
<<0:1,34:7>>;
Enc26@element =:= 'mobile-command-post' ->
<<0:1,35:7>>;
Enc26@element =:= 'chief-officer-car' ->
<<0:1,36:7>>;
Enc26@element =:= 'hAZMAT-unit' ->
<<0:1,37:7>>;
Enc26@element =:= 'type-i-hand-crew' ->
<<0:1,38:7>>;
Enc26@element =:= 'type-ii-hand-crew' ->
<<0:1,39:7>>;
Enc26@element =:= 'privately-owned-vehicle' ->
<<0:1,40:7>>;
Enc26@element =:= 'other-apparatus-resource' ->
<<0:1,41:7>>;
Enc26@element =:= ambulance ->
<<0:1,42:7>>;
Enc26@element =:= 'bomb-squad-van' ->
<<0:1,43:7>>;
Enc26@element =:= 'combine-harvester' ->
<<0:1,44:7>>;
Enc26@element =:= 'construction-vehicle' ->
<<0:1,45:7>>;
Enc26@element =:= 'farm-tractor' ->
<<0:1,46:7>>;
Enc26@element =:= 'grass-cutting-machines' ->
<<0:1,47:7>>;
Enc26@element =:= 'hAZMAT-containment-tow' ->
<<0:1,48:7>>;
Enc26@element =:= 'heavy-tow' ->
<<0:1,49:7>>;
Enc26@element =:= 'hedge-cutting-machines' ->
<<0:1,50:7>>;
Enc26@element =:= 'light-tow' ->
<<0:1,51:7>>;
Enc26@element =:= 'mobile-crane' ->
<<0:1,52:7>>;
Enc26@element =:= 'refuse-collection-vehicle' ->
<<0:1,53:7>>;
Enc26@element =:= 'resurfacing-vehicle' ->
<<0:1,54:7>>;
Enc26@element =:= 'road-sweeper' ->
<<0:1,55:7>>;
Enc26@element =:= 'roadside-litter-collection-crews' ->
<<0:1,56:7>>;
Enc26@element =:= 'salvage-vehicle' ->
<<0:1,57:7>>;
Enc26@element =:= 'sand-truck' ->
<<0:1,58:7>>;
Enc26@element =:= snowplow ->
<<0:1,59:7>>;
Enc26@element =:= 'steam-roller' ->
<<0:1,60:7>>;
Enc26@element =:= 'swat-team-van' ->
<<0:1,61:7>>;
Enc26@element =:= 'track-laying-vehicle' ->
<<0:1,62:7>>;
Enc26@element =:= 'unknown-vehicle' ->
<<0:1,63:7>>;
Enc26@element =:= 'white-lining-vehicle' ->
<<0:1,64:7>>;
Enc26@element =:= 'dump-truck' ->
<<0:1,65:7>>;
Enc26@element =:= 'supervisor-vehicle' ->
<<0:1,66:7>>;
Enc26@element =:= 'snow-blower' ->
<<0:1,67:7>>;
Enc26@element =:= 'rotary-snow-blower' ->
<<0:1,68:7>>;
Enc26@element =:= 'road-grader' ->
<<0:1,69:7>>;
Enc26@element =:= 'steam-truck' ->
<<0:1,70:7>>;
Enc26@element =:= 'flatbed-tow' ->
<<0:1,71:7>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc26@element}}})
end
end,
begin
%% attribute responderType(7) with type ENUMERATED
Enc29@element = element(8, Val),
if Enc29@element =:= asn1_NOVALUE ->
[];
Enc29@element =:= 'emergency-vehicle-units' ->
<<0:1,0:4>>;
Enc29@element =:= 'federal-law-enforcement-units' ->
<<0:1,1:4>>;
Enc29@element =:= 'state-police-units' ->
<<0:1,2:4>>;
Enc29@element =:= 'county-police-units' ->
<<0:1,3:4>>;
Enc29@element =:= 'local-police-units' ->
<<0:1,4:4>>;
Enc29@element =:= 'ambulance-units' ->
<<0:1,5:4>>;
Enc29@element =:= 'rescue-units' ->
<<0:1,6:4>>;
Enc29@element =:= 'fire-units' ->
<<0:1,7:4>>;
Enc29@element =:= 'hAZMAT-units' ->
<<0:1,8:4>>;
Enc29@element =:= 'light-tow-unit' ->
<<0:1,9:4>>;
Enc29@element =:= 'heavy-tow-unit' ->
<<0:1,10:4>>;
Enc29@element =:= 'freeway-service-patrols' ->
<<0:1,11:4>>;
Enc29@element =:= 'transportation-response-units' ->
<<0:1,12:4>>;
Enc29@element =:= 'private-contractor-response-units' ->
<<0:1,13:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc29@element}}})
end
end,
begin
%% attribute fuelType(8) with type INTEGER
Enc32@element = element(9, Val),
if Enc32@element =:= asn1_NOVALUE ->
[];
Enc32@element bsr 4 =:= 0 ->
<<Enc32@element:4>>;
true ->
exit({error,{asn1,{illegal_integer,Enc32@element}}})
end
end|begin
%% attribute regional(9) with type SEQUENCE OF
Enc35@element = element(10, Val),
if Enc35@element =:= asn1_NOVALUE ->
[];
true ->
enc_VehicleClassification_regional(Enc35@element)
end
end].
enc_VehicleClassification_regional(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 2 =:= 0 ->
[<<Enc1@len@sub:2>>|[enc_VehicleClassification_regional_RegionalExtension(Comp) || Comp <- Val]]
end.

enc_VehicleClassification_regional_RegionalExtension(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type2(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_VehicleClassification(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute keyType(1) with type INTEGER
{Term1,Bytes3} = case (Opt bsr 8) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute role(2) with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 7) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:5,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> basicVehicle;
1 -> publicTransport;
2 -> specialTransport;
3 -> dangerousGoods;
4 -> roadWork;
5 -> roadRescue;
6 -> emergency;
7 -> safetyCar;
8 -> 'none-unknown';
9 -> truck;
10 -> motorcycle;
11 -> roadSideSource;
12 -> police;
13 -> fire;
14 -> ambulance;
15 -> dot;
16 -> transit;
17 -> slowMoving;
18 -> stopNgo;
19 -> cyclist;
20 -> pedestrian;
21 -> nonMotorized;
22 -> military;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute iso3883(3) with type INTEGER
{Term3,Bytes5} = case (Opt bsr 6) band 1 of
1 ->
begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute hpmsType(4) with type ENUMERATED
{Term4,Bytes6} = case (Opt bsr 5) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:4,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<0:1,V6@V9:7,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10};
<<1:1,0:1,V6@V10:14,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
{V6@V10,V6@Buf11};
<<1:1,1:1,V6@V10:6,V6@Buf11/bitstring>> when V6@V10 =/= 0 ->
V6@Mul12 = V6@V10 * 16384,
{V6@Mul12,V6@Buf11}
end,
<<V6@V13:V6@V6/unit:8,V6@Buf14/bitstring>> = V6@Buf7,
{V6@V13,V6@Buf14}
end,
V6@Int15 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int15,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute vehicleType(5) with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> 'all-vehicles';
1 -> bicycles;
2 -> motorcycles;
3 -> cars;
4 -> 'light-vehicles';
5 -> 'cars-and-light-vehicles';
6 -> 'cars-with-trailers';
7 -> 'cars-with-recreational-trailers';
8 -> 'vehicles-with-trailers';
9 -> 'heavy-vehicles';
10 -> trucks;
11 -> buses;
12 -> 'articulated-buses';
13 -> 'school-buses';
14 -> 'vehicles-with-semi-trailers';
15 -> 'vehicles-with-double-trailers';
16 -> 'high-profile-vehicles';
17 -> 'wide-vehicles';
18 -> 'long-vehicles';
19 -> 'hazardous-loads';
20 -> 'exceptional-loads';
21 -> 'abnormal-loads';
22 -> convoys;
23 -> 'maintenance-vehicles';
24 -> 'delivery-vehicles';
25 -> 'vehicles-with-even-numbered-license-plates';
26 -> 'vehicles-with-odd-numbered-license-plates';
27 -> 'vehicles-with-parking-permits';
28 -> 'vehicles-with-catalytic-converters';
29 -> 'vehicles-without-catalytic-converters';
30 -> 'gas-powered-vehicles';
31 -> 'diesel-powered-vehicles';
32 -> 'lPG-vehicles';
33 -> 'military-convoys';
34 -> 'military-vehicles';
_ -> exit({error,{asn1,{decode_enumerated,V7@V3}}})
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11};
<<1:1,1:1,V7@V10:6,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
V7@Mul12 = V7@V10 * 16384,
{V7@Mul12,V7@Buf11}
end,
<<V7@V13:V7@V6/unit:8,V7@Buf14/bitstring>> = V7@Buf7,
{V7@V13,V7@Buf14}
end,
V7@Int15 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int15,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute responseEquip(6) with type ENUMERATED
{Term6,Bytes8} = case (Opt bsr 3) band 1 of
1 ->
begin
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:7,V8@Buf4/bitstring>> ->
V8@Int5 = case V8@V3 of
0 -> 'ground-fire-suppression';
1 -> 'heavy-ground-equipment';
2 -> aircraft;
3 -> 'marine-equipment';
4 -> 'support-equipment';
5 -> 'medical-rescue-unit';
6 -> other;
7 -> 'ground-fire-suppression-other';
8 -> engine;
9 -> 'truck-or-aerial';
10 -> quint;
11 -> 'tanker-pumper-combination';
12 -> 'brush-truck';
13 -> 'aircraft-rescue-firefighting';
14 -> 'heavy-ground-equipment-other';
15 -> 'dozer-or-plow';
16 -> tractor;
17 -> 'tanker-or-tender';
18 -> 'aircraft-other';
19 -> 'aircraft-fixed-wing-tanker';
20 -> helitanker;
21 -> helicopter;
22 -> 'marine-equipment-other';
23 -> 'fire-boat-with-pump';
24 -> 'boat-no-pump';
25 -> 'support-apparatus-other';
26 -> 'breathing-apparatus-support';
27 -> 'light-and-air-unit';
28 -> 'medical-rescue-unit-other';
29 -> 'rescue-unit';
30 -> 'urban-search-rescue-unit';
31 -> 'high-angle-rescue';
32 -> 'crash-fire-rescue';
33 -> 'bLS-unit';
34 -> 'aLS-unit';
35 -> 'mobile-command-post';
36 -> 'chief-officer-car';
37 -> 'hAZMAT-unit';
38 -> 'type-i-hand-crew';
39 -> 'type-ii-hand-crew';
40 -> 'privately-owned-vehicle';
41 -> 'other-apparatus-resource';
42 -> ambulance;
43 -> 'bomb-squad-van';
44 -> 'combine-harvester';
45 -> 'construction-vehicle';
46 -> 'farm-tractor';
47 -> 'grass-cutting-machines';
48 -> 'hAZMAT-containment-tow';
49 -> 'heavy-tow';
50 -> 'hedge-cutting-machines';
51 -> 'light-tow';
52 -> 'mobile-crane';
53 -> 'refuse-collection-vehicle';
54 -> 'resurfacing-vehicle';
55 -> 'road-sweeper';
56 -> 'roadside-litter-collection-crews';
57 -> 'salvage-vehicle';
58 -> 'sand-truck';
59 -> snowplow;
60 -> 'steam-roller';
61 -> 'swat-team-van';
62 -> 'track-laying-vehicle';
63 -> 'unknown-vehicle';
64 -> 'white-lining-vehicle';
65 -> 'dump-truck';
66 -> 'supervisor-vehicle';
67 -> 'snow-blower';
68 -> 'rotary-snow-blower';
69 -> 'road-grader';
70 -> 'steam-truck';
71 -> 'flatbed-tow';
_ -> exit({error,{asn1,{decode_enumerated,V8@V3}}})
end,
{V8@Int5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:6,V8@Buf7/bitstring>> ->
{V8@V6,V8@Buf7};
<<1:1,V8@Buf5/bitstring>> ->
{V8@V6,V8@Buf7} = case V8@Buf5 of
<<0:1,V8@V9:7,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10};
<<1:1,0:1,V8@V10:14,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
{V8@V10,V8@Buf11};
<<1:1,1:1,V8@V10:6,V8@Buf11/bitstring>> when V8@V10 =/= 0 ->
V8@Mul12 = V8@V10 * 16384,
{V8@Mul12,V8@Buf11}
end,
<<V8@V13:V8@V6/unit:8,V8@Buf14/bitstring>> = V8@Buf7,
{V8@V13,V8@Buf14}
end,
V8@Int15 = case V8@V3 of
_ -> {asn1_enum,V8@V3}
end,
{V8@Int15,V8@Buf4}
end,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute responderType(7) with type ENUMERATED
{Term7,Bytes9} = case (Opt bsr 2) band 1 of
1 ->
begin
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:4,V9@Buf4/bitstring>> ->
V9@Int5 = case V9@V3 of
0 -> 'emergency-vehicle-units';
1 -> 'federal-law-enforcement-units';
2 -> 'state-police-units';
3 -> 'county-police-units';
4 -> 'local-police-units';
5 -> 'ambulance-units';
6 -> 'rescue-units';
7 -> 'fire-units';
8 -> 'hAZMAT-units';
9 -> 'light-tow-unit';
10 -> 'heavy-tow-unit';
11 -> 'freeway-service-patrols';
12 -> 'transportation-response-units';
13 -> 'private-contractor-response-units';
_ -> exit({error,{asn1,{decode_enumerated,V9@V3}}})
end,
{V9@Int5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:6,V9@Buf7/bitstring>> ->
{V9@V6,V9@Buf7};
<<1:1,V9@Buf5/bitstring>> ->
{V9@V6,V9@Buf7} = case V9@Buf5 of
<<0:1,V9@V9:7,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10};
<<1:1,0:1,V9@V10:14,V9@Buf11/bitstring>> when V9@V10 =/= 0 ->
{V9@V10,V9@Buf11};
<<1:1,1:1,V9@V10:6,V9@Buf11/bitstring>> when V9@V10 =/= 0 ->
V9@Mul12 = V9@V10 * 16384,
{V9@Mul12,V9@Buf11}
end,
<<V9@V13:V9@V6/unit:8,V9@Buf14/bitstring>> = V9@Buf7,
{V9@V13,V9@Buf14}
end,
V9@Int15 = case V9@V3 of
_ -> {asn1_enum,V9@V3}
end,
{V9@Int15,V9@Buf4}
end,
{V9@V0,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute fuelType(8) with type INTEGER
{Term8,Bytes10} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V10@V0:4,V10@Buf1/bitstring>> = Bytes9,
{V10@V0,V10@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute regional(9) with type SEQUENCE OF
{Term9,Bytes11} = case Opt band 1 of
1 ->
dec_VehicleClassification_regional(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V11@V0,V11@Buf1} = case Bytes11 of
<<0:1,V11@V3:6,V11@Buf4/bitstring>> ->
V11@Add5 = V11@V3 + 1,
{V11@Add5,V11@Buf4};
<<1:1,V11@Buf2/bitstring>> ->
{V11@V3,V11@Buf4} = case V11@Buf2 of
<<0:1,V11@V6:7,V11@Buf7/bitstring>> when V11@V6 =/= 0 ->
{V11@V6,V11@Buf7};
<<1:1,0:1,V11@V7:14,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
{V11@V7,V11@Buf8};
<<1:1,1:1,V11@V7:6,V11@Buf8/bitstring>> when V11@V7 =/= 0 ->
V11@Mul9 = V11@V7 * 16384,
{V11@Mul9,V11@Buf8}
end,
{V11@V3,V11@Buf4}
end,
<<V11@V10:V11@V0/bitstring-unit:1,V11@Buf11/bitstring>> = V11@Buf1,
{V11@V10,V11@Buf11}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
Res1 = {'VehicleClassification',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},
{Res1,Bytes13}.


dec_VehicleClassification_regional(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components23(V1@Add2, V1@Buf1, []).


dec_VehicleClassification_regional_RegionalExtension(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type4(Tmpterm1, Term1),
Res1 = {'RegionalExtension',Term1,Term2},
{Res1,Bytes2}.

enc_VehicleID(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= entityID ->
begin
Enc2@len = byte_size(ChoiceVal),
if Enc2@len =:= 4 ->
[<<0:1>>|ChoiceVal]
end
end;
ChoiceTag =:= stationID ->
if ChoiceVal bsr 32 =:= 0 ->
<<1:1,ChoiceVal:32>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end.


dec_VehicleID(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4/binary-unit:8,V2@Buf1/bitstring>> = Bytes1,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end
end,
{{entityID,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:32,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{stationID,Val},NewBytes}
end.
enc_VehicleSafetyExtensions(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute events(1) with type BIT STRING
Enc6@element = element(2, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bs = try bit_string_name2pos_24(Enc6@element) of
Enc7@positions ->
bitstring_from_positions(Enc7@positions, 13)
catch throw:invalid ->
adjust_trailing_zeroes(Enc6@element, 13)
end,
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 13 ->
[<<0:1>>|Enc7@bs];
Enc7@bits < 128 ->
[<<1:1,Enc7@bits:8>>|Enc7@bs];
Enc7@bits < 16384 ->
[<<1:1,2:2,Enc7@bits:14>>|Enc7@bs];
true ->
[<<1:1>>|encode_fragmented(Enc7@bs, 1)]
end
end
end
end,
begin
%% attribute pathHistory(2) with type PathHistory
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathHistory(Enc9@element)
end
end,
begin
%% attribute pathPrediction(3) with type PathPrediction
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_PathPrediction(Enc11@element)
end
end|begin
%% attribute lights(4) with type BIT STRING
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@bs = try bit_string_name2pos_25(Enc13@element) of
Enc14@positions ->
bitstring_from_positions(Enc14@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Enc13@element, 9)
end,
Enc14@bits = bit_size(Enc14@bs),
if Enc14@bits =:= 9 ->
[<<0:1>>|Enc14@bs];
Enc14@bits < 128 ->
[<<1:1,Enc14@bits:8>>|Enc14@bs];
Enc14@bits < 16384 ->
[<<1:1,2:2,Enc14@bits:14>>|Enc14@bs];
true ->
[<<1:1>>|encode_fragmented(Enc14@bs, 1)]
end
end
end
end].


dec_VehicleSafetyExtensions(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute events(1) with type BIT STRING
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:13/binary-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@V8:V3@V6/binary-unit:1,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<1:1,0:1,V3@V7:14,V3@V9:V3@V7/binary-unit:1,V3@Buf10/bitstring>> ->
{V3@V9,V3@Buf10};
<<1:1,1:1,V3@V7:6,V3@Buf8/bitstring>> ->
{V3@V9,V3@Buf10}  = decode_fragmented(V3@V7, V3@Buf8, 1),
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
{V3@V11,V3@Buf12}  = {decode_named_bit_string(V3@V0, [{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]),V3@Buf1},
{V3@V11,V3@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute pathHistory(2) with type PathHistory
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_PathHistory(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute pathPrediction(3) with type PathPrediction
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_PathPrediction(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute lights(4) with type BIT STRING
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:9/binary-unit:1,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@V8:V4@V6/binary-unit:1,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<1:1,0:1,V4@V7:14,V4@V9:V4@V7/binary-unit:1,V4@Buf10/bitstring>> ->
{V4@V9,V4@Buf10};
<<1:1,1:1,V4@V7:6,V4@Buf8/bitstring>> ->
{V4@V9,V4@Buf10}  = decode_fragmented(V4@V7, V4@Buf8, 1),
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
{V4@V11,V4@Buf12}  = {decode_named_bit_string(V4@V0, [{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]),V4@Buf1},
{V4@V11,V4@Buf12}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8};
<<1:1,1:1,V5@V7:6,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
V5@Mul9 = V5@V7 * 16384,
{V5@Mul9,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V10:V5@V0/bitstring-unit:1,V5@Buf11/bitstring>> = V5@Buf1,
{V5@V10,V5@Buf11}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
Res1 = {'VehicleSafetyExtensions',Term1,Term2,Term3,Term4},
{Res1,Bytes8}.

enc_VehicleSize(Val) ->
[begin
%% attribute width(1) with type INTEGER
Enc1@element = element(2, Val),
if Enc1@element bsr 10 =:= 0 ->
<<Enc1@element:10>>;
true ->
exit({error,{asn1,{illegal_integer,Enc1@element}}})
end
end|begin
%% attribute length(2) with type INTEGER
Enc3@element = element(3, Val),
if Enc3@element bsr 12 =:= 0 ->
<<Enc3@element:12>>;
true ->
exit({error,{asn1,{illegal_integer,Enc3@element}}})
end
end].


dec_VehicleSize(Bytes) ->

%% attribute width(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute length(2) with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:12,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
Res1 = {'VehicleSize',Term1,Term2},
{Res1,Bytes2}.

enc_VerticalOffset(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= offset1 ->
begin
ChoiceVal@sub = ChoiceVal - -64,
if ChoiceVal@sub bsr 7 =:= 0 ->
<<0:3,ChoiceVal@sub:7>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset2 ->
begin
ChoiceVal@sub = ChoiceVal - -128,
if ChoiceVal@sub bsr 8 =:= 0 ->
[<<1:3,ChoiceVal@sub:8>>];
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset3 ->
begin
ChoiceVal@sub = ChoiceVal - -256,
if ChoiceVal@sub bsr 9 =:= 0 ->
<<2:3,ChoiceVal@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset4 ->
begin
ChoiceVal@sub = ChoiceVal - -512,
if ChoiceVal@sub bsr 10 =:= 0 ->
<<3:3,ChoiceVal@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset5 ->
begin
ChoiceVal@sub = ChoiceVal - -1024,
if ChoiceVal@sub bsr 11 =:= 0 ->
<<4:3,ChoiceVal@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= offset6 ->
begin
ChoiceVal@sub = ChoiceVal - -2048,
if ChoiceVal@sub bsr 12 =:= 0 ->
<<5:3,ChoiceVal@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= elevation ->
begin
ChoiceVal@sub = ChoiceVal - -4096,
if ChoiceVal@sub bsr 16 =:= 0 ->
<<6:3,ChoiceVal@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,ChoiceVal}}})
end
end;
ChoiceTag =:= regional ->
[<<7:3>>|enc_VerticalOffset_regional(ChoiceVal)]
end.
enc_VerticalOffset_regional(Val) ->
Enc1@element = element(2, Val),
[begin
%% attribute regionId(1) with type INTEGER
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_integer,Enc2@element}}})
end
end|begin
%% attribute regExtValue(2) with type Type
Enc4@element = element(3, Val),
Enc5@output = enc_os_Type2(Enc4@element, Enc1@element),
Enc5@bin = complete(Enc5@output),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].


dec_VerticalOffset(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -64,
{V2@Add2,V2@Buf1}
end
end,
{{offset1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + -128,
{V3@Add2,V3@Buf1}
end
end,
{{offset2,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:9,V4@Buf1/bitstring>> = Bytes1,
V4@Add2 = V4@V0 + -256,
{V4@Add2,V4@Buf1}
end
end,
{{offset3,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:10,V5@Buf1/bitstring>> = Bytes1,
V5@Add2 = V5@V0 + -512,
{V5@Add2,V5@Buf1}
end
end,
{{offset4,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:11,V6@Buf1/bitstring>> = Bytes1,
V6@Add2 = V6@V0 + -1024,
{V6@Add2,V6@Buf1}
end
end,
{{offset5,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V7@V0:12,V7@Buf1/bitstring>> = Bytes1,
V7@Add2 = V7@V0 + -2048,
{V7@Add2,V7@Buf1}
end
end,
{{offset6,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
<<V8@V0:16,V8@Buf1/bitstring>> = Bytes1,
V8@Add2 = V8@V0 + -4096,
{V8@Add2,V8@Buf1}
end
end,
{{elevation,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_VerticalOffset_regional(Bytes1)
end,
{{regional,Val},NewBytes}
end.

dec_VerticalOffset_regional(Bytes) ->

%% attribute regionId(1) with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute regExtValue(2) with type Type
{Tmpterm1, Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
{V2@V0,V2@Buf1}
end,
Term2 = dec_os_Type4(Tmpterm1, Term1),
Res1 = {'VerticalOffset_regional',Term1,Term2},
{Res1,Bytes2}.

enc_WiperSet(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
%% attribute statusFront(1) with type ENUMERATED
Enc3@element = element(2, Val),
if Enc3@element =:= unavailable ->
<<0:1,0:3>>;
Enc3@element =:= off ->
<<0:1,1:3>>;
Enc3@element =:= intermittent ->
<<0:1,2:3>>;
Enc3@element =:= low ->
<<0:1,3:3>>;
Enc3@element =:= high ->
<<0:1,4:3>>;
Enc3@element =:= washerInUse ->
<<0:1,5:3>>;
Enc3@element =:= automaticPresent ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc3@element}}})
end
end,
begin
%% attribute rateFront(2) with type INTEGER
Enc5@element = element(3, Val),
if Enc5@element bsr 7 =:= 0 ->
<<Enc5@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc5@element}}})
end
end,
begin
%% attribute statusRear(3) with type ENUMERATED
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element =:= unavailable ->
<<0:1,0:3>>;
Enc7@element =:= off ->
<<0:1,1:3>>;
Enc7@element =:= intermittent ->
<<0:1,2:3>>;
Enc7@element =:= low ->
<<0:1,3:3>>;
Enc7@element =:= high ->
<<0:1,4:3>>;
Enc7@element =:= washerInUse ->
<<0:1,5:3>>;
Enc7@element =:= automaticPresent ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Enc7@element}}})
end
end|begin
%% attribute rateRear(4) with type INTEGER
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element bsr 7 =:= 0 ->
<<Enc10@element:7>>;
true ->
exit({error,{asn1,{illegal_integer,Enc10@element}}})
end
end].


dec_WiperSet(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute statusFront(1) with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> unavailable;
1 -> off;
2 -> intermittent;
3 -> low;
4 -> high;
5 -> washerInUse;
6 -> automaticPresent;
_ -> exit({error,{asn1,{decode_enumerated,V2@V3}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11};
<<1:1,1:1,V2@V10:6,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
V2@Mul12 = V2@V10 * 16384,
{V2@Mul12,V2@Buf11}
end,
<<V2@V13:V2@V6/unit:8,V2@Buf14/bitstring>> = V2@Buf7,
{V2@V13,V2@Buf14}
end,
V2@Int15 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int15,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% attribute rateFront(2) with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute statusRear(3) with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:3,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> unavailable;
1 -> off;
2 -> intermittent;
3 -> low;
4 -> high;
5 -> washerInUse;
6 -> automaticPresent;
_ -> exit({error,{asn1,{decode_enumerated,V4@V3}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<1:1,1:1,V4@V10:6,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
V4@Mul12 = V4@V10 * 16384,
{V4@Mul12,V4@Buf11}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute rateRear(4) with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:7,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
Res1 = {'WiperSet',Term1,Term2,Term3,Term4},
{Res1,Bytes5}.

enc_Acceleration(Val) ->
Val@sub = Val - -2000,
if 0 =< Val@sub, Val@sub < 4002 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Acceleration(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2000,
{V1@Add2,V1@Buf1}
end.

enc_AmbientAirPressure(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AmbientAirPressure(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AmbientAirTemperature(Val) ->
if 0 =< Val, Val < 192 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_AmbientAirTemperature(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Angle(Val) ->
if 0 =< Val, Val < 28801 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Angle(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AntiLockBrakeStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AntiLockBrakeStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V1@Int2,V1@Buf1}
end.

enc_ApproachID(Val) ->
if Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ApproachID(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_AuxiliaryBrakeStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_AuxiliaryBrakeStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> reserved
end,
{V1@Int2,V1@Buf1}
end.

enc_BasicVehicleClass(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_BasicVehicleClass(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_BasicVehicleRole(Val) ->
if Val =:= basicVehicle ->
<<0:1,0:5>>;
Val =:= publicTransport ->
<<0:1,1:5>>;
Val =:= specialTransport ->
<<0:1,2:5>>;
Val =:= dangerousGoods ->
<<0:1,3:5>>;
Val =:= roadWork ->
<<0:1,4:5>>;
Val =:= roadRescue ->
<<0:1,5:5>>;
Val =:= emergency ->
<<0:1,6:5>>;
Val =:= safetyCar ->
<<0:1,7:5>>;
Val =:= 'none-unknown' ->
<<0:1,8:5>>;
Val =:= truck ->
<<0:1,9:5>>;
Val =:= motorcycle ->
<<0:1,10:5>>;
Val =:= roadSideSource ->
<<0:1,11:5>>;
Val =:= police ->
<<0:1,12:5>>;
Val =:= fire ->
<<0:1,13:5>>;
Val =:= ambulance ->
<<0:1,14:5>>;
Val =:= dot ->
<<0:1,15:5>>;
Val =:= transit ->
<<0:1,16:5>>;
Val =:= slowMoving ->
<<0:1,17:5>>;
Val =:= stopNgo ->
<<0:1,18:5>>;
Val =:= cyclist ->
<<0:1,19:5>>;
Val =:= pedestrian ->
<<0:1,20:5>>;
Val =:= nonMotorized ->
<<0:1,21:5>>;
Val =:= military ->
<<0:1,22:5>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_BasicVehicleRole(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> basicVehicle;
1 -> publicTransport;
2 -> specialTransport;
3 -> dangerousGoods;
4 -> roadWork;
5 -> roadRescue;
6 -> emergency;
7 -> safetyCar;
8 -> 'none-unknown';
9 -> truck;
10 -> motorcycle;
11 -> roadSideSource;
12 -> police;
13 -> fire;
14 -> ambulance;
15 -> dot;
16 -> transit;
17 -> slowMoving;
18 -> stopNgo;
19 -> cyclist;
20 -> pedestrian;
21 -> nonMotorized;
22 -> military;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_BrakeAppliedStatus(Val) ->
Enc1@bs = try bit_string_name2pos_1(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 5)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 5 ->
Enc1@bs
end.


dec_BrakeAppliedStatus(Bytes) ->
begin
<<V1@V0:5/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_BrakeBoostApplied(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_BrakeBoostApplied(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
_ -> exit({error,{asn1,{decode_enumerated,V1@V0}}})
end,
{V1@Int2,V1@Buf1}
end.

enc_BumperHeight(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_BumperHeight(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_CoarseHeading(Val) ->
if 0 =< Val, Val < 241 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_CoarseHeading(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_CodeWord(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|Val]
end.


dec_CodeWord(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_CoefficientOfFriction(Val) ->
if 0 =< Val, Val < 51 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_CoefficientOfFriction(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Confidence(Val) ->
if 0 =< Val, Val < 201 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Confidence(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Count(Val) ->
if 0 =< Val, Val < 33 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Count(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DDay(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DDay(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DeltaAngle(Val) ->
Val@sub = Val - -150,
if 0 =< Val@sub, Val@sub < 301 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DeltaAngle(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -150,
{V1@Add2,V1@Buf1}
end.

enc_DescriptiveName(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 7),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 63 ->
[<<Enc1@len@sub:6>>|Enc1@bin]
end.


dec_DescriptiveName(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:7,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {decode_chars(V1@V3, 7),V1@Buf4},
{V1@V5,V1@Buf6}
end.

enc_DHour(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DHour(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DMinute(Val) ->
if 0 =< Val, Val < 61 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DMinute(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DMonth(Val) ->
if 0 =< Val, Val < 13 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DMonth(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DOffset(Val) ->
Val@sub = Val - -840,
if 0 =< Val@sub, Val@sub < 1681 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DOffset(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -840,
{V1@Add2,V1@Buf1}
end.

enc_DrivenLineOffsetLg(Val) ->
Val@sub = Val - -32767,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DrivenLineOffsetLg(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32767,
{V1@Add2,V1@Buf1}
end.

enc_DrivenLineOffsetSm(Val) ->
Val@sub = Val - -2047,
if 0 =< Val@sub, Val@sub < 4095 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DrivenLineOffsetSm(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2047,
{V1@Add2,V1@Buf1}
end.

enc_DSecond(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DSecond(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Duration(Val) ->
if 0 =< Val, Val < 3601 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Duration(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_DYear(Val) ->
if Val bsr 12 =:= 0 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_DYear(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_ElevationConfidence(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= 'elev-500-00' ->
<<1:4>>;
Val =:= 'elev-200-00' ->
<<2:4>>;
Val =:= 'elev-100-00' ->
<<3:4>>;
Val =:= 'elev-050-00' ->
<<4:4>>;
Val =:= 'elev-020-00' ->
<<5:4>>;
Val =:= 'elev-010-00' ->
<<6:4>>;
Val =:= 'elev-005-00' ->
<<7:4>>;
Val =:= 'elev-002-00' ->
<<8:4>>;
Val =:= 'elev-001-00' ->
<<9:4>>;
Val =:= 'elev-000-50' ->
<<10:4>>;
Val =:= 'elev-000-20' ->
<<11:4>>;
Val =:= 'elev-000-10' ->
<<12:4>>;
Val =:= 'elev-000-05' ->
<<13:4>>;
Val =:= 'elev-000-02' ->
<<14:4>>;
Val =:= 'elev-000-01' ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ElevationConfidence(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'elev-500-00';
2 -> 'elev-200-00';
3 -> 'elev-100-00';
4 -> 'elev-050-00';
5 -> 'elev-020-00';
6 -> 'elev-010-00';
7 -> 'elev-005-00';
8 -> 'elev-002-00';
9 -> 'elev-001-00';
10 -> 'elev-000-50';
11 -> 'elev-000-20';
12 -> 'elev-000-10';
13 -> 'elev-000-05';
14 -> 'elev-000-02';
15 -> 'elev-000-01'
end,
{V1@Int2,V1@Buf1}
end.

enc_Elevation(Val) ->
Val@sub = Val - -4096,
if Val@sub bsr 16 =:= 0 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Elevation(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -4096,
{V1@Add2,V1@Buf1}
end.

enc_Extent(Val) ->
if Val =:= useInstantlyOnly ->
<<0:4>>;
Val =:= useFor3meters ->
<<1:4>>;
Val =:= useFor10meters ->
<<2:4>>;
Val =:= useFor50meters ->
<<3:4>>;
Val =:= useFor100meters ->
<<4:4>>;
Val =:= useFor500meters ->
<<5:4>>;
Val =:= useFor1000meters ->
<<6:4>>;
Val =:= useFor5000meters ->
<<7:4>>;
Val =:= useFor10000meters ->
<<8:4>>;
Val =:= useFor50000meters ->
<<9:4>>;
Val =:= useFor100000meters ->
<<10:4>>;
Val =:= useFor500000meters ->
<<11:4>>;
Val =:= useFor1000000meters ->
<<12:4>>;
Val =:= useFor5000000meters ->
<<13:4>>;
Val =:= useFor10000000meters ->
<<14:4>>;
Val =:= forever ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_Extent(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> useInstantlyOnly;
1 -> useFor3meters;
2 -> useFor10meters;
3 -> useFor50meters;
4 -> useFor100meters;
5 -> useFor500meters;
6 -> useFor1000meters;
7 -> useFor5000meters;
8 -> useFor10000meters;
9 -> useFor50000meters;
10 -> useFor100000meters;
11 -> useFor500000meters;
12 -> useFor1000000meters;
13 -> useFor5000000meters;
14 -> useFor10000000meters;
15 -> forever
end,
{V1@Int2,V1@Buf1}
end.

enc_ExteriorLights(Val) ->
Enc1@bs = try bit_string_name2pos_25(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 9)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 9)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 9 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_ExteriorLights(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:9/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_FuelType(Val) ->
if Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_FuelType(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_FurtherInfoID(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


dec_FurtherInfoID(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_GNSSstatus(Val) ->
Enc1@bs = try bit_string_name2pos_14(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 8)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 8)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
Enc1@bs
end.


dec_GNSSstatus(Bytes) ->
begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_GrossSpeed(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_GrossSpeed(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_HeadingConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= prec10deg ->
<<1:3>>;
Val =:= prec05deg ->
<<2:3>>;
Val =:= prec01deg ->
<<3:3>>;
Val =:= 'prec0-1deg' ->
<<4:3>>;
Val =:= 'prec0-05deg' ->
<<5:3>>;
Val =:= 'prec0-01deg' ->
<<6:3>>;
Val =:= 'prec0-0125deg' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_HeadingConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec10deg;
2 -> prec05deg;
3 -> prec01deg;
4 -> 'prec0-1deg';
5 -> 'prec0-05deg';
6 -> 'prec0-01deg';
7 -> 'prec0-0125deg'
end,
{V1@Int2,V1@Buf1}
end.

enc_Heading(Val) ->
if 0 =< Val, Val < 28801 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Heading(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_HeadingSlice(Val) ->
Enc1@bs = try bit_string_name2pos_26(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


dec_HeadingSlice(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_IntersectionID(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_IntersectionID(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Iso3833VehicleType(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Iso3833VehicleType(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_TrailerWeight(Val) ->
if 0 =< Val, Val < 64256 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TrailerWeight(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LaneConnectionID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_LaneConnectionID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LaneID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_LaneID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_LaneWidth(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_LaneWidth(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Latitude(Val) ->
Val@sub = Val - -900000000,
if 0 =< Val@sub, Val@sub < 1800000002 ->
<<Val@sub:31>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Latitude(Bytes) ->
begin
<<V1@V0:31,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -900000000,
{V1@Add2,V1@Buf1}
end.

enc_LightbarInUse(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= notInUse ->
<<1:3>>;
Val =:= inUse ->
<<2:3>>;
Val =:= yellowCautionLights ->
<<3:3>>;
Val =:= schooldBusLights ->
<<4:3>>;
Val =:= arrowSignsActive ->
<<5:3>>;
Val =:= slowMovingVehicle ->
<<6:3>>;
Val =:= freqStops ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_LightbarInUse(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> yellowCautionLights;
4 -> schooldBusLights;
5 -> arrowSignsActive;
6 -> slowMovingVehicle;
7 -> freqStops
end,
{V1@Int2,V1@Buf1}
end.

enc_Longitude(Val) ->
Val@sub = Val - -1799999999,
if 0 =< Val@sub, Val@sub < 3600000001 ->
<<Val@sub:32>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Longitude(Bytes) ->
begin
<<V1@V0:32,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1799999999,
{V1@Add2,V1@Buf1}
end.

'enc_Location-quality'(Val) ->
if Val =:= 'loc-qual-bt1m' ->
<<0:3>>;
Val =:= 'loc-qual-bt5m' ->
<<1:3>>;
Val =:= 'loc-qual-bt12m' ->
<<2:3>>;
Val =:= 'loc-qual-bt50m' ->
<<3:3>>;
Val =:= 'loc-qual-bt125m' ->
<<4:3>>;
Val =:= 'loc-qual-bt500m' ->
<<5:3>>;
Val =:= 'loc-qual-bt1250m' ->
<<6:3>>;
Val =:= 'loc-qual-unknown' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


'dec_Location-quality'(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'loc-qual-bt1m';
1 -> 'loc-qual-bt5m';
2 -> 'loc-qual-bt12m';
3 -> 'loc-qual-bt50m';
4 -> 'loc-qual-bt125m';
5 -> 'loc-qual-bt500m';
6 -> 'loc-qual-bt1250m';
7 -> 'loc-qual-unknown'
end,
{V1@Int2,V1@Buf1}
end.

'enc_Location-tech'(Val) ->
if Val =:= 'loc-tech-unknown' ->
<<0:1,0:4>>;
Val =:= 'loc-tech-GNSS' ->
<<0:1,1:4>>;
Val =:= 'loc-tech-DGPS' ->
<<0:1,2:4>>;
Val =:= 'loc-tech-RTK' ->
<<0:1,3:4>>;
Val =:= 'loc-tech-PPP' ->
<<0:1,4:4>>;
Val =:= 'loc-tech-drGPS' ->
<<0:1,5:4>>;
Val =:= 'loc-tech-drDGPS' ->
<<0:1,6:4>>;
Val =:= 'loc-tech-dr' ->
<<0:1,7:4>>;
Val =:= 'loc-tech-nav' ->
<<0:1,8:4>>;
Val =:= 'loc-tech-fault' ->
<<0:1,9:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


'dec_Location-tech'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'loc-tech-unknown';
1 -> 'loc-tech-GNSS';
2 -> 'loc-tech-DGPS';
3 -> 'loc-tech-RTK';
4 -> 'loc-tech-PPP';
5 -> 'loc-tech-drGPS';
6 -> 'loc-tech-drDGPS';
7 -> 'loc-tech-dr';
8 -> 'loc-tech-nav';
9 -> 'loc-tech-fault';
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_MergeDivergeNodeAngle(Val) ->
Val@sub = Val - -180,
if 0 =< Val@sub, Val@sub < 361 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MergeDivergeNodeAngle(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -180,
{V1@Add2,V1@Buf1}
end.

enc_MessageBLOB(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 10,
if 0 =< Enc1@len@sub, Enc1@len@sub < 1991 ->
[<<Enc1@len@sub:11>>|Val]
end.


dec_MessageBLOB(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 10,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_MinuteOfTheYear(Val) ->
if 0 =< Val, Val < 527041 ->
<<Val:20>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MinuteOfTheYear(Bytes) ->
begin
<<V1@V0:20,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MsgCount(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_MsgCount(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_MultiVehicleResponse(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= singleVehicle ->
<<1:2>>;
Val =:= multiVehicle ->
<<2:2>>;
Val =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_MultiVehicleResponse(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> singleVehicle;
2 -> multiVehicle;
3 -> reserved
end,
{V1@Int2,V1@Buf1}
end.

enc_NodeAttributeXY(Val) ->
if Val =:= reserved ->
<<0:1,0:4>>;
Val =:= stopLine ->
<<0:1,1:4>>;
Val =:= roundedCapStyleA ->
<<0:1,2:4>>;
Val =:= roundedCapStyleB ->
<<0:1,3:4>>;
Val =:= mergePoint ->
<<0:1,4:4>>;
Val =:= divergePoint ->
<<0:1,5:4>>;
Val =:= downstreamStopLine ->
<<0:1,6:4>>;
Val =:= downstreamStartNode ->
<<0:1,7:4>>;
Val =:= closedToTraffic ->
<<0:1,8:4>>;
Val =:= safeIsland ->
<<0:1,9:4>>;
Val =:= curbPresentAtStepOff ->
<<0:1,10:4>>;
Val =:= hydrantPresent ->
<<0:1,11:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_NodeAttributeXY(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> stopLine;
2 -> roundedCapStyleA;
3 -> roundedCapStyleB;
4 -> mergePoint;
5 -> divergePoint;
6 -> downstreamStopLine;
7 -> downstreamStartNode;
8 -> closedToTraffic;
9 -> safeIsland;
10 -> curbPresentAtStepOff;
11 -> hydrantPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_ObstacleDistance(Val) ->
if Val bsr 15 =:= 0 ->
<<Val:15>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_ObstacleDistance(Bytes) ->
begin
<<V1@V0:15,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_Offset-B09'(Val) ->
Val@sub = Val - -256,
if Val@sub bsr 9 =:= 0 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B09'(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -256,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B10'(Val) ->
Val@sub = Val - -512,
if Val@sub bsr 10 =:= 0 ->
<<Val@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B10'(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -512,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B11'(Val) ->
Val@sub = Val - -1024,
if Val@sub bsr 11 =:= 0 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B11'(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1024,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B12'(Val) ->
Val@sub = Val - -2048,
if Val@sub bsr 12 =:= 0 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B13'(Val) ->
Val@sub = Val - -4096,
if Val@sub bsr 13 =:= 0 ->
<<Val@sub:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B13'(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -4096,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B14'(Val) ->
Val@sub = Val - -8192,
if Val@sub bsr 14 =:= 0 ->
<<Val@sub:14>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B14'(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -8192,
{V1@Add2,V1@Buf1}
end.

'enc_Offset-B16'(Val) ->
Val@sub = Val - -32768,
if Val@sub bsr 16 =:= 0 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Offset-B16'(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32768,
{V1@Add2,V1@Buf1}
end.

'enc_OffsetLL-B18'(Val) ->
Val@sub = Val - -131072,
if Val@sub bsr 18 =:= 0 ->
<<Val@sub:18>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_OffsetLL-B18'(Bytes) ->
begin
<<V1@V0:18,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -131072,
{V1@Add2,V1@Buf1}
end.

enc_PayloadData(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 11 =:= 0 ->
[<<Enc1@len@sub:11>>|Val]
end.


dec_PayloadData(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

enc_PositionConfidence(Val) ->
if Val =:= unavailable ->
<<0:4>>;
Val =:= a500m ->
<<1:4>>;
Val =:= a200m ->
<<2:4>>;
Val =:= a100m ->
<<3:4>>;
Val =:= a50m ->
<<4:4>>;
Val =:= a20m ->
<<5:4>>;
Val =:= a10m ->
<<6:4>>;
Val =:= a5m ->
<<7:4>>;
Val =:= a2m ->
<<8:4>>;
Val =:= a1m ->
<<9:4>>;
Val =:= a50cm ->
<<10:4>>;
Val =:= a20cm ->
<<11:4>>;
Val =:= a10cm ->
<<12:4>>;
Val =:= a5cm ->
<<13:4>>;
Val =:= a2cm ->
<<14:4>>;
Val =:= a1cm ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PositionConfidence(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> a500m;
2 -> a200m;
3 -> a100m;
4 -> a50m;
5 -> a20m;
6 -> a10m;
7 -> a5m;
8 -> a2m;
9 -> a1m;
10 -> a50cm;
11 -> a20cm;
12 -> a10cm;
13 -> a5cm;
14 -> a2cm;
15 -> a1cm
end,
{V1@Int2,V1@Buf1}
end.

enc_PrioritizationResponseStatus(Val) ->
if Val =:= unknown ->
<<0:1,0:3>>;
Val =:= requested ->
<<0:1,1:3>>;
Val =:= processing ->
<<0:1,2:3>>;
Val =:= watchOtherTraffic ->
<<0:1,3:3>>;
Val =:= granted ->
<<0:1,4:3>>;
Val =:= rejected ->
<<0:1,5:3>>;
Val =:= maxPresence ->
<<0:1,6:3>>;
Val =:= reserviceLocked ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_PrioritizationResponseStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> requested;
2 -> processing;
3 -> watchOtherTraffic;
4 -> granted;
5 -> rejected;
6 -> maxPresence;
7 -> reserviceLocked
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_Priority(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 1 ->
Val
end.


dec_Priority(Bytes) ->
begin
<<V1@V0:1/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_PrivilegedEventFlags(Val) ->
Enc1@bs = try bit_string_name2pos_19(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 16)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 16)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


dec_PrivilegedEventFlags(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_RadiusOfCurvature(Val) ->
Val@sub = Val - -32767,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RadiusOfCurvature(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32767,
{V1@Add2,V1@Buf1}
end.

enc_RegionId(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RegionId(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RequestID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RequestID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RequestImportanceLevel(Val) ->
if Val =:= requestImportanceLevelUnKnown ->
<<0:4>>;
Val =:= requestImportanceLevel1 ->
<<1:4>>;
Val =:= requestImportanceLevel2 ->
<<2:4>>;
Val =:= requestImportanceLevel3 ->
<<3:4>>;
Val =:= requestImportanceLevel4 ->
<<4:4>>;
Val =:= requestImportanceLevel5 ->
<<5:4>>;
Val =:= requestImportanceLevel6 ->
<<6:4>>;
Val =:= requestImportanceLevel7 ->
<<7:4>>;
Val =:= requestImportanceLevel8 ->
<<8:4>>;
Val =:= requestImportanceLevel9 ->
<<9:4>>;
Val =:= requestImportanceLevel10 ->
<<10:4>>;
Val =:= requestImportanceLevel11 ->
<<11:4>>;
Val =:= requestImportanceLevel12 ->
<<12:4>>;
Val =:= requestImportanceLevel13 ->
<<13:4>>;
Val =:= requestImportanceLevel14 ->
<<14:4>>;
Val =:= requestImportanceReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RequestImportanceLevel(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> requestImportanceLevelUnKnown;
1 -> requestImportanceLevel1;
2 -> requestImportanceLevel2;
3 -> requestImportanceLevel3;
4 -> requestImportanceLevel4;
5 -> requestImportanceLevel5;
6 -> requestImportanceLevel6;
7 -> requestImportanceLevel7;
8 -> requestImportanceLevel8;
9 -> requestImportanceLevel9;
10 -> requestImportanceLevel10;
11 -> requestImportanceLevel11;
12 -> requestImportanceLevel12;
13 -> requestImportanceLevel13;
14 -> requestImportanceLevel14;
15 -> requestImportanceReserved
end,
{V1@Int2,V1@Buf1}
end.

enc_RequestSubRole(Val) ->
if Val =:= requestSubRoleUnKnown ->
<<0:4>>;
Val =:= requestSubRole1 ->
<<1:4>>;
Val =:= requestSubRole2 ->
<<2:4>>;
Val =:= requestSubRole3 ->
<<3:4>>;
Val =:= requestSubRole4 ->
<<4:4>>;
Val =:= requestSubRole5 ->
<<5:4>>;
Val =:= requestSubRole6 ->
<<6:4>>;
Val =:= requestSubRole7 ->
<<7:4>>;
Val =:= requestSubRole8 ->
<<8:4>>;
Val =:= requestSubRole9 ->
<<9:4>>;
Val =:= requestSubRole10 ->
<<10:4>>;
Val =:= requestSubRole11 ->
<<11:4>>;
Val =:= requestSubRole12 ->
<<12:4>>;
Val =:= requestSubRole13 ->
<<13:4>>;
Val =:= requestSubRole14 ->
<<14:4>>;
Val =:= requestSubRoleReserved ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_RequestSubRole(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> requestSubRoleUnKnown;
1 -> requestSubRole1;
2 -> requestSubRole2;
3 -> requestSubRole3;
4 -> requestSubRole4;
5 -> requestSubRole5;
6 -> requestSubRole6;
7 -> requestSubRole7;
8 -> requestSubRole8;
9 -> requestSubRole9;
10 -> requestSubRole10;
11 -> requestSubRole11;
12 -> requestSubRole12;
13 -> requestSubRole13;
14 -> requestSubRole14;
15 -> requestSubRoleReserved
end,
{V1@Int2,V1@Buf1}
end.

enc_ResponseType(Val) ->
if Val =:= notInUseOrNotEquipped ->
<<0:1,0:3>>;
Val =:= emergency ->
<<0:1,1:3>>;
Val =:= nonEmergency ->
<<0:1,2:3>>;
Val =:= pursuit ->
<<0:1,3:3>>;
Val =:= stationary ->
<<0:1,4:3>>;
Val =:= slowMoving ->
<<0:1,5:3>>;
Val =:= stopAndGoMovement ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ResponseType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> notInUseOrNotEquipped;
1 -> emergency;
2 -> nonEmergency;
3 -> pursuit;
4 -> stationary;
5 -> slowMoving;
6 -> stopAndGoMovement;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_RestrictionClassID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RestrictionClassID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RoadRegulatorID(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RoadRegulatorID(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RoadSegmentID(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RoadSegmentID(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_RoadwayCrownAngle(Val) ->
Val@sub = Val - -128,
if Val@sub bsr 8 =:= 0 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_RoadwayCrownAngle(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -128,
{V1@Add2,V1@Buf1}
end.

enc_RTCMmessage(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 1023 ->
[<<Enc1@len@sub:10>>|Val]
end.


dec_RTCMmessage(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv5 = binary:copy(V1@V3),
{V1@Conv5,V1@Buf4}
end.

'enc_Scale-B12'(Val) ->
Val@sub = Val - -2048,
if Val@sub bsr 12 =:= 0 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_Scale-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end.

enc_SegmentAttributeXY(Val) ->
if Val =:= reserved ->
<<0:1,0:6>>;
Val =:= doNotBlock ->
<<0:1,1:6>>;
Val =:= whiteLine ->
<<0:1,2:6>>;
Val =:= mergingLaneLeft ->
<<0:1,3:6>>;
Val =:= mergingLaneRight ->
<<0:1,4:6>>;
Val =:= curbOnLeft ->
<<0:1,5:6>>;
Val =:= curbOnRight ->
<<0:1,6:6>>;
Val =:= loadingzoneOnLeft ->
<<0:1,7:6>>;
Val =:= loadingzoneOnRight ->
<<0:1,8:6>>;
Val =:= turnOutPointOnLeft ->
<<0:1,9:6>>;
Val =:= turnOutPointOnRight ->
<<0:1,10:6>>;
Val =:= adjacentParkingOnLeft ->
<<0:1,11:6>>;
Val =:= adjacentParkingOnRight ->
<<0:1,12:6>>;
Val =:= adjacentBikeLaneOnLeft ->
<<0:1,13:6>>;
Val =:= adjacentBikeLaneOnRight ->
<<0:1,14:6>>;
Val =:= sharedBikeLane ->
<<0:1,15:6>>;
Val =:= bikeBoxInFront ->
<<0:1,16:6>>;
Val =:= transitStopOnLeft ->
<<0:1,17:6>>;
Val =:= transitStopOnRight ->
<<0:1,18:6>>;
Val =:= transitStopInLane ->
<<0:1,19:6>>;
Val =:= sharedWithTrackedVehicle ->
<<0:1,20:6>>;
Val =:= safeIsland ->
<<0:1,21:6>>;
Val =:= lowCurbsPresent ->
<<0:1,22:6>>;
Val =:= rumbleStripPresent ->
<<0:1,23:6>>;
Val =:= audibleSignalingPresent ->
<<0:1,24:6>>;
Val =:= adaptiveTimingPresent ->
<<0:1,25:6>>;
Val =:= rfSignalRequestPresent ->
<<0:1,26:6>>;
Val =:= partialCurbIntrusion ->
<<0:1,27:6>>;
Val =:= taperToLeft ->
<<0:1,28:6>>;
Val =:= taperToRight ->
<<0:1,29:6>>;
Val =:= taperToCenterLine ->
<<0:1,30:6>>;
Val =:= parallelParking ->
<<0:1,31:6>>;
Val =:= headInParking ->
<<0:1,32:6>>;
Val =:= freeParking ->
<<0:1,33:6>>;
Val =:= timeRestrictionsOnParking ->
<<0:1,34:6>>;
Val =:= costToPark ->
<<0:1,35:6>>;
Val =:= midBlockCurbPresent ->
<<0:1,36:6>>;
Val =:= unEvenPavementPresent ->
<<0:1,37:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SegmentAttributeXY(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> doNotBlock;
2 -> whiteLine;
3 -> mergingLaneLeft;
4 -> mergingLaneRight;
5 -> curbOnLeft;
6 -> curbOnRight;
7 -> loadingzoneOnLeft;
8 -> loadingzoneOnRight;
9 -> turnOutPointOnLeft;
10 -> turnOutPointOnRight;
11 -> adjacentParkingOnLeft;
12 -> adjacentParkingOnRight;
13 -> adjacentBikeLaneOnLeft;
14 -> adjacentBikeLaneOnRight;
15 -> sharedBikeLane;
16 -> bikeBoxInFront;
17 -> transitStopOnLeft;
18 -> transitStopOnRight;
19 -> transitStopInLane;
20 -> sharedWithTrackedVehicle;
21 -> safeIsland;
22 -> lowCurbsPresent;
23 -> rumbleStripPresent;
24 -> audibleSignalingPresent;
25 -> adaptiveTimingPresent;
26 -> rfSignalRequestPresent;
27 -> partialCurbIntrusion;
28 -> taperToLeft;
29 -> taperToRight;
30 -> taperToCenterLine;
31 -> parallelParking;
32 -> headInParking;
33 -> freeParking;
34 -> timeRestrictionsOnParking;
35 -> costToPark;
36 -> midBlockCurbPresent;
37 -> unEvenPavementPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_SemiMajorAxisAccuracy(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SemiMajorAxisAccuracy(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SemiMajorAxisOrientation(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SemiMajorAxisOrientation(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SemiMinorAxisAccuracy(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SemiMinorAxisAccuracy(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SignalGroupID(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SignalGroupID(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SignalReqScheme(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 1 ->
Val
end.


dec_SignalReqScheme(Bytes) ->
begin
<<V1@V0:1/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_SirenInUse(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= notInUse ->
<<1:2>>;
Val =:= inUse ->
<<2:2>>;
Val =:= reserved ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SirenInUse(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> notInUse;
2 -> inUse;
3 -> reserved
end,
{V1@Int2,V1@Buf1}
end.

enc_SpeedConfidence(Val) ->
if Val =:= unavailable ->
<<0:3>>;
Val =:= prec100ms ->
<<1:3>>;
Val =:= prec10ms ->
<<2:3>>;
Val =:= prec5ms ->
<<3:3>>;
Val =:= prec1ms ->
<<4:3>>;
Val =:= 'prec0-1ms' ->
<<5:3>>;
Val =:= 'prec0-05ms' ->
<<6:3>>;
Val =:= 'prec0-01ms' ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SpeedConfidence(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec100ms;
2 -> prec10ms;
3 -> prec5ms;
4 -> prec1ms;
5 -> 'prec0-1ms';
6 -> 'prec0-05ms';
7 -> 'prec0-01ms'
end,
{V1@Int2,V1@Buf1}
end.

enc_SpeedLimitType(Val) ->
if Val =:= unknown ->
<<0:1,0:4>>;
Val =:= maxSpeedInSchoolZone ->
<<0:1,1:4>>;
Val =:= maxSpeedInSchoolZoneWhenChildrenArePresent ->
<<0:1,2:4>>;
Val =:= maxSpeedInConstructionZone ->
<<0:1,3:4>>;
Val =:= vehicleMinSpeed ->
<<0:1,4:4>>;
Val =:= vehicleMaxSpeed ->
<<0:1,5:4>>;
Val =:= vehicleNightMaxSpeed ->
<<0:1,6:4>>;
Val =:= truckMinSpeed ->
<<0:1,7:4>>;
Val =:= truckMaxSpeed ->
<<0:1,8:4>>;
Val =:= truckNightMaxSpeed ->
<<0:1,9:4>>;
Val =:= vehiclesWithTrailersMinSpeed ->
<<0:1,10:4>>;
Val =:= vehiclesWithTrailersMaxSpeed ->
<<0:1,11:4>>;
Val =:= vehiclesWithTrailersNightMaxSpeed ->
<<0:1,12:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_SpeedLimitType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unknown;
1 -> maxSpeedInSchoolZone;
2 -> maxSpeedInSchoolZoneWhenChildrenArePresent;
3 -> maxSpeedInConstructionZone;
4 -> vehicleMinSpeed;
5 -> vehicleMaxSpeed;
6 -> vehicleNightMaxSpeed;
7 -> truckMinSpeed;
8 -> truckMaxSpeed;
9 -> truckNightMaxSpeed;
10 -> vehiclesWithTrailersMinSpeed;
11 -> vehiclesWithTrailersMaxSpeed;
12 -> vehiclesWithTrailersNightMaxSpeed;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_Speed(Val) ->
if Val bsr 13 =:= 0 ->
<<Val:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Speed(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SSPindex(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SSPindex(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_StabilityControlStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_StabilityControlStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V1@Int2,V1@Buf1}
end.

enc_StationID(Val) ->
if Val bsr 32 =:= 0 ->
<<Val:32>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_StationID(Bytes) ->
begin
<<V1@V0:32,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_SteeringWheelAngle(Val) ->
Val@sub = Val - -126,
if 0 =< Val@sub, Val@sub < 254 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_SteeringWheelAngle(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -126,
{V1@Add2,V1@Buf1}
end.

enc_TemporaryID(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 4 ->
Val
end.


dec_TemporaryID(Bytes) ->
begin
<<V1@V0:4/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

enc_ThrottleConfidence(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= prec10percent ->
<<1:2>>;
Val =:= prec1percent ->
<<2:2>>;
Val =:= 'prec0-5percent' ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_ThrottleConfidence(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> prec10percent;
2 -> prec1percent;
3 -> 'prec0-5percent'
end,
{V1@Int2,V1@Buf1}
end.

enc_TimeConfidence(Val) ->
if Val =:= unavailable ->
<<0:6>>;
Val =:= 'time-100-000' ->
<<1:6>>;
Val =:= 'time-050-000' ->
<<2:6>>;
Val =:= 'time-020-000' ->
<<3:6>>;
Val =:= 'time-010-000' ->
<<4:6>>;
Val =:= 'time-002-000' ->
<<5:6>>;
Val =:= 'time-001-000' ->
<<6:6>>;
Val =:= 'time-000-500' ->
<<7:6>>;
Val =:= 'time-000-200' ->
<<8:6>>;
Val =:= 'time-000-100' ->
<<9:6>>;
Val =:= 'time-000-050' ->
<<10:6>>;
Val =:= 'time-000-020' ->
<<11:6>>;
Val =:= 'time-000-010' ->
<<12:6>>;
Val =:= 'time-000-005' ->
<<13:6>>;
Val =:= 'time-000-002' ->
<<14:6>>;
Val =:= 'time-000-001' ->
<<15:6>>;
Val =:= 'time-000-000-5' ->
<<16:6>>;
Val =:= 'time-000-000-2' ->
<<17:6>>;
Val =:= 'time-000-000-1' ->
<<18:6>>;
Val =:= 'time-000-000-05' ->
<<19:6>>;
Val =:= 'time-000-000-02' ->
<<20:6>>;
Val =:= 'time-000-000-01' ->
<<21:6>>;
Val =:= 'time-000-000-005' ->
<<22:6>>;
Val =:= 'time-000-000-002' ->
<<23:6>>;
Val =:= 'time-000-000-001' ->
<<24:6>>;
Val =:= 'time-000-000-000-5' ->
<<25:6>>;
Val =:= 'time-000-000-000-2' ->
<<26:6>>;
Val =:= 'time-000-000-000-1' ->
<<27:6>>;
Val =:= 'time-000-000-000-05' ->
<<28:6>>;
Val =:= 'time-000-000-000-02' ->
<<29:6>>;
Val =:= 'time-000-000-000-01' ->
<<30:6>>;
Val =:= 'time-000-000-000-005' ->
<<31:6>>;
Val =:= 'time-000-000-000-002' ->
<<32:6>>;
Val =:= 'time-000-000-000-001' ->
<<33:6>>;
Val =:= 'time-000-000-000-000-5' ->
<<34:6>>;
Val =:= 'time-000-000-000-000-2' ->
<<35:6>>;
Val =:= 'time-000-000-000-000-1' ->
<<36:6>>;
Val =:= 'time-000-000-000-000-05' ->
<<37:6>>;
Val =:= 'time-000-000-000-000-02' ->
<<38:6>>;
Val =:= 'time-000-000-000-000-01' ->
<<39:6>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TimeConfidence(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> 'time-100-000';
2 -> 'time-050-000';
3 -> 'time-020-000';
4 -> 'time-010-000';
5 -> 'time-002-000';
6 -> 'time-001-000';
7 -> 'time-000-500';
8 -> 'time-000-200';
9 -> 'time-000-100';
10 -> 'time-000-050';
11 -> 'time-000-020';
12 -> 'time-000-010';
13 -> 'time-000-005';
14 -> 'time-000-002';
15 -> 'time-000-001';
16 -> 'time-000-000-5';
17 -> 'time-000-000-2';
18 -> 'time-000-000-1';
19 -> 'time-000-000-05';
20 -> 'time-000-000-02';
21 -> 'time-000-000-01';
22 -> 'time-000-000-005';
23 -> 'time-000-000-002';
24 -> 'time-000-000-001';
25 -> 'time-000-000-000-5';
26 -> 'time-000-000-000-2';
27 -> 'time-000-000-000-1';
28 -> 'time-000-000-000-05';
29 -> 'time-000-000-000-02';
30 -> 'time-000-000-000-01';
31 -> 'time-000-000-000-005';
32 -> 'time-000-000-000-002';
33 -> 'time-000-000-000-001';
34 -> 'time-000-000-000-000-5';
35 -> 'time-000-000-000-000-2';
36 -> 'time-000-000-000-000-1';
37 -> 'time-000-000-000-000-05';
38 -> 'time-000-000-000-000-02';
39 -> 'time-000-000-000-000-01';
_ -> exit({error,{asn1,{decode_enumerated,V1@V0}}})
end,
{V1@Int2,V1@Buf1}
end.

enc_TimeOffset(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_TimeOffset(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

enc_TractionControlStatus(Val) ->
if Val =:= unavailable ->
<<0:2>>;
Val =:= off ->
<<1:2>>;
Val =:= on ->
<<2:2>>;
Val =:= engaged ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TractionControlStatus(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> unavailable;
1 -> off;
2 -> on;
3 -> engaged
end,
{V1@Int2,V1@Buf1}
end.

enc_TransitStatus(Val) ->
Enc1@bs = try bit_string_name2pos_27(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 6)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 6)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 6 ->
Enc1@bs
end.


dec_TransitStatus(Bytes) ->
begin
<<V1@V0:6/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{none,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{occM,4},{occL,5}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_TransmissionState(Val) ->
if Val =:= neutral ->
<<0:3>>;
Val =:= park ->
<<1:3>>;
Val =:= forwardGears ->
<<2:3>>;
Val =:= reverseGears ->
<<3:3>>;
Val =:= reserved1 ->
<<4:3>>;
Val =:= reserved2 ->
<<5:3>>;
Val =:= reserved3 ->
<<6:3>>;
Val =:= unavailable ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_TransmissionState(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> neutral;
1 -> park;
2 -> forwardGears;
3 -> reverseGears;
4 -> reserved1;
5 -> reserved2;
6 -> reserved3;
7 -> unavailable
end,
{V1@Int2,V1@Buf1}
end.

'enc_URL-Link'(Val) ->
Enc1@len = length(Val),
Enc1@bin = encode_chars(Val, 7),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 255 ->
[Enc1@len@sub|Enc1@bin]
end.


'dec_URL-Link'(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
<<V1@V3:V1@Add2/binary-unit:7,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V5,V1@Buf6}  = {decode_chars(V1@V3, 7),V1@Buf4},
{V1@V5,V1@Buf6}
end.

enc_VehicleEventFlags(Val) ->
Enc1@bs = try bit_string_name2pos_24(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 13)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 13)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 13 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1,Enc1@bits:8>>|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1,2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>|encode_fragmented(Enc1@bs, 1)]
end.


dec_VehicleEventFlags(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:13/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@V8:V1@V6/binary-unit:1,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<1:1,0:1,V1@V7:14,V1@V9:V1@V7/binary-unit:1,V1@Buf10/bitstring>> ->
{V1@V9,V1@Buf10};
<<1:1,1:1,V1@V7:6,V1@Buf8/bitstring>> ->
{V1@V9,V1@Buf10}  = decode_fragmented(V1@V7, V1@Buf8, 1),
{V1@V9,V1@Buf10}
end,
{V1@V3,V1@Buf4}
end,
{V1@V11,V1@Buf12}  = {decode_named_bit_string(V1@V0, [{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]),V1@Buf1},
{V1@V11,V1@Buf12}
end.

enc_VehicleHeight(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleHeight(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VehicleLength(Val) ->
if Val bsr 12 =:= 0 ->
<<Val:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleLength(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VehicleMass(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleMass(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VehicleType(Val) ->
if Val =:= none ->
<<0:1,0:4>>;
Val =:= unknown ->
<<0:1,1:4>>;
Val =:= special ->
<<0:1,2:4>>;
Val =:= moto ->
<<0:1,3:4>>;
Val =:= car ->
<<0:1,4:4>>;
Val =:= carOther ->
<<0:1,5:4>>;
Val =:= bus ->
<<0:1,6:4>>;
Val =:= axleCnt2 ->
<<0:1,7:4>>;
Val =:= axleCnt3 ->
<<0:1,8:4>>;
Val =:= axleCnt4 ->
<<0:1,9:4>>;
Val =:= axleCnt4Trailer ->
<<0:1,10:4>>;
Val =:= axleCnt5Trailer ->
<<0:1,11:4>>;
Val =:= axleCnt6Trailer ->
<<0:1,12:4>>;
Val =:= axleCnt5MultiTrailer ->
<<0:1,13:4>>;
Val =:= axleCnt6MultiTrailer ->
<<0:1,14:4>>;
Val =:= axleCnt7MultiTrailer ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_VehicleType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> none;
1 -> unknown;
2 -> special;
3 -> moto;
4 -> car;
5 -> carOther;
6 -> bus;
7 -> axleCnt2;
8 -> axleCnt3;
9 -> axleCnt4;
10 -> axleCnt4Trailer;
11 -> axleCnt5Trailer;
12 -> axleCnt6Trailer;
13 -> axleCnt5MultiTrailer;
14 -> axleCnt6MultiTrailer;
15 -> axleCnt7MultiTrailer
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_VehicleWidth(Val) ->
if Val bsr 10 =:= 0 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VehicleWidth(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_Velocity(Val) ->
if Val bsr 13 =:= 0 ->
<<Val:13>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_Velocity(Bytes) ->
begin
<<V1@V0:13,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_VerticalAccelerationThreshold(Val) ->
Enc1@bs = try bit_string_name2pos_28(Val) of
Enc1@positions ->
bitstring_from_positions(Enc1@positions, 5)
catch throw:invalid ->
adjust_trailing_zeroes(Val, 5)
end,
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 5 ->
Enc1@bs
end.


dec_VerticalAccelerationThreshold(Bytes) ->
begin
<<V1@V0:5/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_named_bit_string(V1@V0, [{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

enc_VerticalAcceleration(Val) ->
Val@sub = Val - -127,
if 0 =< Val@sub, Val@sub < 255 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_VerticalAcceleration(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -127,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B08'(Val) ->
Val@sub = Val - -128,
if Val@sub bsr 8 =:= 0 ->
[Val@sub];
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B08'(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -128,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B09'(Val) ->
Val@sub = Val - -256,
if Val@sub bsr 9 =:= 0 ->
<<Val@sub:9>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B09'(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -256,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B10'(Val) ->
Val@sub = Val - -512,
if Val@sub bsr 10 =:= 0 ->
<<Val@sub:10>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B10'(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -512,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B11'(Val) ->
Val@sub = Val - -1024,
if Val@sub bsr 11 =:= 0 ->
<<Val@sub:11>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B11'(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -1024,
{V1@Add2,V1@Buf1}
end.

'enc_VertOffset-B12'(Val) ->
Val@sub = Val - -2048,
if Val@sub bsr 12 =:= 0 ->
<<Val@sub:12>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


'dec_VertOffset-B12'(Bytes) ->
begin
<<V1@V0:12,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -2048,
{V1@Add2,V1@Buf1}
end.

enc_WiperRate(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_WiperRate(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

enc_WiperStatus(Val) ->
if Val =:= unavailable ->
<<0:1,0:3>>;
Val =:= off ->
<<0:1,1:3>>;
Val =:= intermittent ->
<<0:1,2:3>>;
Val =:= low ->
<<0:1,3:3>>;
Val =:= high ->
<<0:1,4:3>>;
Val =:= washerInUse ->
<<0:1,5:3>>;
Val =:= automaticPresent ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_enumerated,Val}}})
end.


dec_WiperStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unavailable;
1 -> off;
2 -> intermittent;
3 -> low;
4 -> high;
5 -> washerInUse;
6 -> automaticPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

enc_YawRate(Val) ->
Val@sub = Val - -32767,
if 0 =< Val@sub, Val@sub < 65535 ->
<<Val@sub:16>>;
true ->
exit({error,{asn1,{illegal_integer,Val}}})
end.


dec_YawRate(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -32767,
{V1@Add2,V1@Buf1}
end.

unknownVehicleClass() ->
0.

specialVehicleClass() ->
1.

'passenger-Vehicle-TypeUnknown'() ->
10.

'passenger-Vehicle-TypeOther'() ->
11.

'lightTruck-Vehicle-TypeUnknown'() ->
20.

'lightTruck-Vehicle-TypeOther'() ->
21.

'truck-Vehicle-TypeUnknown'() ->
25.

'truck-Vehicle-TypeOther'() ->
26.

'truck-axleCnt2'() ->
27.

'truck-axleCnt3'() ->
28.

'truck-axleCnt4'() ->
29.

'truck-axleCnt4Trailer'() ->
30.

'truck-axleCnt5Trailer'() ->
31.

'truck-axleCnt6Trailer'() ->
32.

'truck-axleCnt5MultiTrailer'() ->
33.

'truck-axleCnt6MultiTrailer'() ->
34.

'truck-axleCnt7MultiTrailer'() ->
35.

'motorcycle-TypeUnknown'() ->
40.

'motorcycle-TypeOther'() ->
41.

'motorcycle-Cruiser-Standard'() ->
42.

'motorcycle-SportUnclad'() ->
43.

'motorcycle-SportTouring'() ->
44.

'motorcycle-SuperSport'() ->
45.

'motorcycle-Touring'() ->
46.

'motorcycle-Trike'() ->
47.

'motorcycle-wPassengers'() ->
48.

'transit-TypeUnknown'() ->
50.

'transit-TypeOther'() ->
51.

'transit-BRT'() ->
52.

'transit-ExpressBus'() ->
53.

'transit-LocalBus'() ->
54.

'transit-SchoolBus'() ->
55.

'transit-FixedGuideway'() ->
56.

'transit-Paratransit'() ->
57.

'transit-Paratransit-Ambulance'() ->
58.

'emergency-TypeUnknown'() ->
60.

'emergency-TypeOther'() ->
61.

'emergency-Fire-Light-Vehicle'() ->
62.

'emergency-Fire-Heavy-Vehicle'() ->
63.

'emergency-Fire-Paramedic-Vehicle'() ->
64.

'emergency-Fire-Ambulance-Vehicle'() ->
65.

'emergency-Police-Light-Vehicle'() ->
66.

'emergency-Police-Heavy-Vehicle'() ->
67.

'emergency-Other-Responder'() ->
68.

'emergency-Other-Ambulance'() ->
69.

'otherTraveler-TypeUnknown'() ->
80.

'otherTraveler-TypeOther'() ->
81.

'otherTraveler-Pedestrian'() ->
82.

'otherTraveler-Visually-Disabled'() ->
83.

'otherTraveler-Physically-Disabled'() ->
84.

'otherTraveler-Bicycle'() ->
85.

'otherTraveler-Vulnerable-Roadworker'() ->
86.

'infrastructure-TypeUnknown'() ->
90.

'infrastructure-Fixed'() ->
91.

'infrastructure-Movable'() ->
92.

'equipped-CargoTrailer'() ->
93.

'reservedMessageId-D'() ->
0.

'alaCarteMessage-D'() ->
1.

'basicSafetyMessage-D'() ->
2.

'basicSafetyMessageVerbose-D'() ->
3.

'commonSafetyRequest-D'() ->
4.

'emergencyVehicleAlert-D'() ->
5.

'intersectionCollision-D'() ->
6.

'mapData-D'() ->
7.

'nmeaCorrections-D'() ->
8.

'probeDataManagement-D'() ->
9.

'probeVehicleData-D'() ->
10.

'roadSideAlert-D'() ->
11.

'rtcmCorrections-D'() ->
12.

'signalPhaseAndTimingMessage-D'() ->
13.

'signalRequestMessage-D'() ->
14.

'signalStatusMessage-D'() ->
15.

'travelerInformation-D'() ->
16.

'uperFrame-D'() ->
17.

unknownFuel() ->
0.

gasoline() ->
1.

ethanol() ->
2.

diesel() ->
3.

electric() ->
4.

hybrid() ->
5.

hydrogen() ->
6.

natGasLiquid() ->
7.

natGasComp() ->
8.

propane() ->
9.

noRegion() ->
0.

addGrpA() ->
1.

addGrpB() ->
2.

addGrpC() ->
3.

typeinfo('AccelerationSet4Way') ->
  {sequence,'AccelerationSet4Way',4,[{<<108,111,110,103>>,{'INTEGER',{-2000,2001}},mandatory},{<<108,97,116>>,{'INTEGER',{-2000,2001}},mandatory},{<<118,101,114,116>>,{'INTEGER',{-127,127}},mandatory},{<<121,97,119>>,{'INTEGER',{-32767,32767}},mandatory}]};
typeinfo('AntennaOffsetSet') ->
  {sequence,'AntennaOffsetSet',3,[{<<97,110,116,79,102,102,115,101,116,88>>,{'INTEGER',{-2048,2047}},mandatory},{<<97,110,116,79,102,102,115,101,116,89>>,{'INTEGER',{-256,255}},mandatory},{<<97,110,116,79,102,102,115,101,116,90>>,{'INTEGER',{-512,511}},mandatory}]};
typeinfo('BrakeSystemStatus') ->
  {sequence,'BrakeSystemStatus',6,[{<<119,104,101,101,108,66,114,97,107,101,115>>,{{bit_string_nnl,[{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5},mandatory},{<<116,114,97,99,116,105,111,110>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}},mandatory},{<<97,98,115>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}},mandatory},{<<115,99,115>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}},mandatory},{<<98,114,97,107,101,66,111,111,115,116>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0}},mandatory},{<<97,117,120,66,114,97,107,101,115>>,{'ENUMERATED',#{off => 1,on => 2,unavailable => 0,reserved => 3}},mandatory}]};
typeinfo('BSMcoreData') ->
  {sequence,'BSMcoreData',14,[{<<109,115,103,67,110,116>>,{'INTEGER',{0,127}},mandatory},{<<105,100>>,octet_string,mandatory},{<<115,101,99,77,97,114,107>>,{'INTEGER',{0,65535}},mandatory},{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory},{<<108,111,110,103>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<101,108,101,118>>,{'INTEGER',{-4096,61439}},mandatory},{<<97,99,99,117,114,97,99,121>>,{typeinfo,{'Common','PositionalAccuracy'}},mandatory},{<<116,114,97,110,115,109,105,115,115,105,111,110>>,{'ENUMERATED',#{neutral => 0,unavailable => 7,park => 1,forwardGears => 2,reverseGears => 3,reserved1 => 4,reserved2 => 5,reserved3 => 6}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},mandatory},{<<97,110,103,108,101>>,{'INTEGER',{-126,127}},mandatory},{<<97,99,99,101,108,83,101,116>>,{typeinfo,{'Common','AccelerationSet4Way'}},mandatory},{<<98,114,97,107,101,115>>,{typeinfo,{'Common','BrakeSystemStatus'}},mandatory},{<<115,105,122,101>>,{typeinfo,{'Common','VehicleSize'}},mandatory}]};
typeinfo('BumperHeights') ->
  {sequence,'BumperHeights',2,[{<<102,114,111,110,116>>,{'INTEGER',{0,127}},mandatory},{<<114,101,97,114>>,{'INTEGER',{0,127}},mandatory}]};
typeinfo('ComputedLane') ->
  {sequence,'ComputedLane',7,[{<<114,101,102,101,114,101,110,99,101,76,97,110,101,73,100>>,{'INTEGER',{0,255}},mandatory},{<<111,102,102,115,101,116,88,97,120,105,115>>,{choice,#{<<108,97,114,103,101>> => {'INTEGER',{-32767,32767}},<<115,109,97,108,108>> => {'INTEGER',{-2047,2047}}}},mandatory},{<<111,102,102,115,101,116,89,97,120,105,115>>,{choice,#{<<108,97,114,103,101>> => {'INTEGER',{-32767,32767}},<<115,109,97,108,108>> => {'INTEGER',{-2047,2047}}}},mandatory},{<<114,111,116,97,116,101,88,89>>,{'INTEGER',{0,28800}},'OPTIONAL'},{<<115,99,97,108,101,88,97,120,105,115>>,{'INTEGER',{-2048,2047}},'OPTIONAL'},{<<115,99,97,108,101,89,97,120,105,115>>,{'INTEGER',{-2048,2047}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'ComputedLane_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_1}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('DDate') ->
  {sequence,'DDate',3,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},mandatory},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory},{<<100,97,121>>,{'INTEGER',{0,31}},mandatory}]};
typeinfo('DDateTime') ->
  {sequence,'DDateTime',7,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},'OPTIONAL'},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},'OPTIONAL'},{<<100,97,121>>,{'INTEGER',{0,31}},'OPTIONAL'},{<<104,111,117,114>>,{'INTEGER',{0,31}},'OPTIONAL'},{<<109,105,110,117,116,101>>,{'INTEGER',{0,60}},'OPTIONAL'},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<111,102,102,115,101,116>>,{'INTEGER',{-840,840}},'OPTIONAL'}]};
typeinfo('DFullTime') ->
  {sequence,'DFullTime',5,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},mandatory},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory},{<<100,97,121>>,{'INTEGER',{0,31}},mandatory},{<<104,111,117,114>>,{'INTEGER',{0,31}},mandatory},{<<109,105,110,117,116,101>>,{'INTEGER',{0,60}},mandatory}]};
typeinfo('DMonthDay') ->
  {sequence,'DMonthDay',2,[{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory},{<<100,97,121>>,{'INTEGER',{0,31}},mandatory}]};
typeinfo('DTime') ->
  {sequence,'DTime',4,[{<<104,111,117,114>>,{'INTEGER',{0,31}},mandatory},{<<109,105,110,117,116,101>>,{'INTEGER',{0,60}},mandatory},{<<115,101,99,111,110,100>>,{'INTEGER',{0,65535}},mandatory},{<<111,102,102,115,101,116>>,{'INTEGER',{-840,840}},'OPTIONAL'}]};
typeinfo('DYearMonth') ->
  {sequence,'DYearMonth',2,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},mandatory},{<<109,111,110,116,104>>,{'INTEGER',{0,12}},mandatory}]};
typeinfo('EmergencyDetails') ->
  {sequence,'EmergencyDetails',6,[{<<110,111,116,85,115,101,100>>,{'INTEGER',{0,31}},mandatory},{<<115,105,114,101,110,85,115,101>>,{'ENUMERATED',#{unavailable => 0,reserved => 3,notInUse => 1,inUse => 2}},mandatory},{<<108,105,103,104,116,115,85,115,101>>,{'ENUMERATED',#{unavailable => 0,notInUse => 1,inUse => 2,yellowCautionLights => 3,schooldBusLights => 4,arrowSignsActive => 5,slowMovingVehicle => 6,freqStops => 7}},mandatory},{<<109,117,108,116,105>>,{'ENUMERATED',#{unavailable => 0,reserved => 3,singleVehicle => 1,multiVehicle => 2}},mandatory},{<<101,118,101,110,116,115>>,{typeinfo,{'Common','PrivilegedEvents'}},'OPTIONAL'},{<<114,101,115,112,111,110,115,101,84,121,112,101>>,{'ENUMERATED_EXT',#{emergency => 1,slowMoving => 5,notInUseOrNotEquipped => 0,nonEmergency => 2,pursuit => 3,stationary => 4,stopAndGoMovement => 6}},'OPTIONAL'}]};
typeinfo('FullPositionVector') ->
  {sequence,'FullPositionVector',10,[{<<117,116,99,84,105,109,101>>,{typeinfo,{'Common','DDateTime'}},'OPTIONAL'},{<<108,111,110,103>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory},{<<101,108,101,118,97,116,105,111,110>>,{'INTEGER',{-4096,61439}},'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,28800}},'OPTIONAL'},{<<115,112,101,101,100>>,{typeinfo,{'Common','TransmissionAndSpeed'}},'OPTIONAL'},{<<112,111,115,65,99,99,117,114,97,99,121>>,{typeinfo,{'Common','PositionalAccuracy'}},'OPTIONAL'},{<<116,105,109,101,67,111,110,102,105,100,101,110,99,101>>,{'ENUMERATED',#{'time-000-000-000-000-01' => 39,'time-000-000-5' => 16,'time-050-000' => 2,'time-020-000' => 3,'time-000-020' => 11,'time-000-000-05' => 19,'time-000-000-1' => 18,'time-100-000' => 1,'time-000-000-001' => 24,'time-000-050' => 10,'time-000-000-000-000-2' => 35,'time-000-000-000-05' => 28,'time-000-000-000-000-5' => 34,'time-000-000-000-02' => 29,'time-000-000-000-001' => 33,'time-000-000-2' => 17,'time-000-000-000-005' => 31,'time-000-200' => 8,'time-000-000-000-5' => 25,'time-000-000-002' => 23,'time-000-002' => 14,'time-000-000-000-002' => 32,unavailable => 0,'time-002-000' => 5,'time-000-100' => 9,'time-000-000-000-000-05' => 37,'time-000-000-02' => 20,'time-000-000-005' => 22,'time-010-000' => 4,'time-000-000-000-2' => 26,'time-000-000-000-000-1' => 36,'time-000-000-01' => 21,'time-000-005' => 13,'time-000-000-000-1' => 27,'time-000-010' => 12,'time-000-001' => 15,'time-001-000' => 6,'time-000-000-000-000-02' => 38,'time-000-000-000-01' => 30,'time-000-500' => 7}},'OPTIONAL'},{<<112,111,115,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'Common','PositionConfidenceSet'}},'OPTIONAL'},{<<115,112,101,101,100,67,111,110,102,105,100,101,110,99,101>>,{typeinfo,{'Common','SpeedandHeadingandThrottleConfidence'}},'OPTIONAL'}]};
typeinfo('Header') ->
  {sequence,'Header',4,[{<<121,101,97,114>>,{'INTEGER',{0,4095}},'OPTIONAL'},{<<116,105,109,101,83,116,97,109,112>>,{'INTEGER',{0,527040}},'OPTIONAL'},{<<115,101,99,77,97,114,107>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<109,115,103,73,115,115,117,101,82,101,118,105,115,105,111,110>>,{'INTEGER',{0,127}},'OPTIONAL'}]};
typeinfo('IntersectionAccessPoint') ->
  {choice,#{<<97,112,112,114,111,97,99,104>> => {'INTEGER',{0,15}},<<99,111,110,110,101,99,116,105,111,110>> => {'INTEGER',{0,255}},<<108,97,110,101>> => {'INTEGER',{0,255}}}};
typeinfo('IntersectionReferenceID') ->
  {sequence,'IntersectionReferenceID',2,[{<<114,101,103,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<105,100>>,{'INTEGER',{0,65535}},mandatory}]};
typeinfo('LaneDataAttribute') ->
  {choice,#{<<108,97,110,101,65,110,103,108,101>> => {'INTEGER',{-180,180}},<<108,97,110,101,67,114,111,119,110,80,111,105,110,116,67,101,110,116,101,114>> => {'INTEGER',{-128,127}},<<108,97,110,101,67,114,111,119,110,80,111,105,110,116,76,101,102,116>> => {'INTEGER',{-128,127}},<<108,97,110,101,67,114,111,119,110,80,111,105,110,116,82,105,103,104,116>> => {'INTEGER',{-128,127}},<<112,97,116,104,69,110,100,80,111,105,110,116,65,110,103,108,101>> => {'INTEGER',{-150,150}},<<114,101,103,105,111,110,97,108>> => {sof,{sequence,'LaneDataAttribute_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_2}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},<<115,112,101,101,100,76,105,109,105,116,115>> => {typeinfo,{'Common','SpeedLimitList'}}}};
typeinfo('LaneDataAttributeList') ->
  {sof,{typeinfo,{'Common','LaneDataAttribute'}}};
typeinfo('Node-LLmD-64b') ->
  {sequence,'Node-LLmD-64b',2,[{<<108,111,110>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory}]};
typeinfo('Node-XY-20b') ->
  {sequence,'Node-XY-20b',2,[{<<120>>,{'INTEGER',{-512,511}},mandatory},{<<121>>,{'INTEGER',{-512,511}},mandatory}]};
typeinfo('Node-XY-22b') ->
  {sequence,'Node-XY-22b',2,[{<<120>>,{'INTEGER',{-1024,1023}},mandatory},{<<121>>,{'INTEGER',{-1024,1023}},mandatory}]};
typeinfo('Node-XY-24b') ->
  {sequence,'Node-XY-24b',2,[{<<120>>,{'INTEGER',{-2048,2047}},mandatory},{<<121>>,{'INTEGER',{-2048,2047}},mandatory}]};
typeinfo('Node-XY-26b') ->
  {sequence,'Node-XY-26b',2,[{<<120>>,{'INTEGER',{-4096,4095}},mandatory},{<<121>>,{'INTEGER',{-4096,4095}},mandatory}]};
typeinfo('Node-XY-28b') ->
  {sequence,'Node-XY-28b',2,[{<<120>>,{'INTEGER',{-8192,8191}},mandatory},{<<121>>,{'INTEGER',{-8192,8191}},mandatory}]};
typeinfo('Node-XY-32b') ->
  {sequence,'Node-XY-32b',2,[{<<120>>,{'INTEGER',{-32768,32767}},mandatory},{<<121>>,{'INTEGER',{-32768,32767}},mandatory}]};
typeinfo('NodeAttributeSetXY') ->
  {sequence,'NodeAttributeSetXY',7,[{<<108,111,99,97,108,78,111,100,101>>,{typeinfo,{'Common','NodeAttributeXYList'}},'OPTIONAL'},{<<100,105,115,97,98,108,101,100>>,{typeinfo,{'Common','SegmentAttributeXYList'}},'OPTIONAL'},{<<101,110,97,98,108,101,100>>,{typeinfo,{'Common','SegmentAttributeXYList'}},'OPTIONAL'},{<<100,97,116,97>>,{typeinfo,{'Common','LaneDataAttributeList'}},'OPTIONAL'},{<<100,87,105,100,116,104>>,{'INTEGER',{-512,511}},'OPTIONAL'},{<<100,69,108,101,118,97,116,105,111,110>>,{'INTEGER',{-512,511}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'NodeAttributeSetXY_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_3}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('NodeAttributeXYList') ->
  {sof,{'ENUMERATED_EXT',#{reserved => 0,stopLine => 1,roundedCapStyleA => 2,roundedCapStyleB => 3,mergePoint => 4,divergePoint => 5,downstreamStopLine => 6,downstreamStartNode => 7,closedToTraffic => 8,safeIsland => 9,curbPresentAtStepOff => 10,hydrantPresent => 11}}};
typeinfo('NodeListXY') ->
  {choice,#{<<99,111,109,112,117,116,101,100>> => {typeinfo,{'Common','ComputedLane'}},<<110,111,100,101,115>> => {typeinfo,{'Common','NodeSetXY'}}}};
typeinfo('NodeOffsetPointXY') ->
  {choice,#{<<110,111,100,101,45,76,97,116,76,111,110>> => {typeinfo,{'Common','Node-LLmD-64b'}},<<110,111,100,101,45,88,89,49>> => {typeinfo,{'Common','Node-XY-20b'}},<<110,111,100,101,45,88,89,50>> => {typeinfo,{'Common','Node-XY-22b'}},<<110,111,100,101,45,88,89,51>> => {typeinfo,{'Common','Node-XY-24b'}},<<110,111,100,101,45,88,89,52>> => {typeinfo,{'Common','Node-XY-26b'}},<<110,111,100,101,45,88,89,53>> => {typeinfo,{'Common','Node-XY-28b'}},<<110,111,100,101,45,88,89,54>> => {typeinfo,{'Common','Node-XY-32b'}},<<114,101,103,105,111,110,97,108>> => {sequence,'NodeOffsetPointXY_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_4}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}}};
typeinfo('NodeSetXY') ->
  {sof,{typeinfo,{'Common','NodeXY'}}};
typeinfo('NodeXY') ->
  {sequence,'NodeXY',2,[{<<100,101,108,116,97>>,{typeinfo,{'Common','NodeOffsetPointXY'}},mandatory},{<<97,116,116,114,105,98,117,116,101,115>>,{typeinfo,{'Common','NodeAttributeSetXY'}},'OPTIONAL'}]};
typeinfo('PathHistory') ->
  {sequence,'PathHistory',3,[{<<105,110,105,116,105,97,108,80,111,115,105,116,105,111,110>>,{typeinfo,{'Common','FullPositionVector'}},'OPTIONAL'},{<<99,117,114,114,71,78,83,83,115,116,97,116,117,115>>,{{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8},'OPTIONAL'},{<<99,114,117,109,98,68,97,116,97>>,{typeinfo,{'Common','PathHistoryPointList'}},mandatory}]};
typeinfo('PathHistoryPointList') ->
  {sof,{typeinfo,{'Common','PathHistoryPoint'}}};
typeinfo('PathHistoryPoint') ->
  {sequence,'PathHistoryPoint',7,[{<<108,97,116,79,102,102,115,101,116>>,{'INTEGER',{-131072,131071}},mandatory},{<<108,111,110,79,102,102,115,101,116>>,{'INTEGER',{-131072,131071}},mandatory},{<<101,108,101,118,97,116,105,111,110,79,102,102,115,101,116>>,{'INTEGER',{-2048,2047}},mandatory},{<<116,105,109,101,79,102,102,115,101,116>>,{'INTEGER',{1,65535}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},'OPTIONAL'},{<<112,111,115,65,99,99,117,114,97,99,121>>,{typeinfo,{'Common','PositionalAccuracy'}},'OPTIONAL'},{<<104,101,97,100,105,110,103>>,{'INTEGER',{0,240}},'OPTIONAL'}]};
typeinfo('PathPrediction') ->
  {sequence,'PathPrediction',2,[{<<114,97,100,105,117,115,79,102,67,117,114,118,101>>,{'INTEGER',{-32767,32767}},mandatory},{<<99,111,110,102,105,100,101,110,99,101>>,{'INTEGER',{0,200}},mandatory}]};
typeinfo('Position3D') ->
  {sequence,'Position3D',4,[{<<108,97,116>>,{'INTEGER',{-900000000,900000001}},mandatory},{<<108,111,110,103>>,{'INTEGER',{-1799999999,1800000001}},mandatory},{<<101,108,101,118,97,116,105,111,110>>,{'INTEGER',{-4096,61439}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'Position3D_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_5}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('PositionalAccuracy') ->
  {sequence,'PositionalAccuracy',3,[{<<115,101,109,105,77,97,106,111,114>>,{'INTEGER',{0,255}},mandatory},{<<115,101,109,105,77,105,110,111,114>>,{'INTEGER',{0,255}},mandatory},{<<111,114,105,101,110,116,97,116,105,111,110>>,{'INTEGER',{0,65535}},mandatory}]};
typeinfo('PositionConfidenceSet') ->
  {sequence,'PositionConfidenceSet',2,[{<<112,111,115>>,{'ENUMERATED',#{unavailable => 0,a500m => 1,a200m => 2,a100m => 3,a50m => 4,a20m => 5,a10m => 6,a5m => 7,a2m => 8,a1m => 9,a50cm => 10,a20cm => 11,a10cm => 12,a5cm => 13,a2cm => 14,a1cm => 15}},mandatory},{<<101,108,101,118,97,116,105,111,110>>,{'ENUMERATED',#{unavailable => 0,'elev-500-00' => 1,'elev-200-00' => 2,'elev-100-00' => 3,'elev-050-00' => 4,'elev-020-00' => 5,'elev-010-00' => 6,'elev-005-00' => 7,'elev-002-00' => 8,'elev-001-00' => 9,'elev-000-50' => 10,'elev-000-20' => 11,'elev-000-10' => 12,'elev-000-05' => 13,'elev-000-02' => 14,'elev-000-01' => 15}},mandatory}]};
typeinfo('PrivilegedEvents') ->
  {sequence,'PrivilegedEvents',2,[{<<110,111,116,85,115,101,100>>,{'INTEGER',{0,31}},mandatory},{<<101,118,101,110,116>>,{{bit_string_nnl,[{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]},16},mandatory}]};
typeinfo('RegulatorySpeedLimit') ->
  {sequence,'RegulatorySpeedLimit',2,[{<<116,121,112,101>>,{'ENUMERATED_EXT',#{unknown => 0,maxSpeedInSchoolZone => 1,maxSpeedInSchoolZoneWhenChildrenArePresent => 2,maxSpeedInConstructionZone => 3,vehicleMinSpeed => 4,vehicleMaxSpeed => 5,vehicleNightMaxSpeed => 6,truckMinSpeed => 7,truckMaxSpeed => 8,truckNightMaxSpeed => 9,vehiclesWithTrailersMinSpeed => 10,vehiclesWithTrailersMaxSpeed => 11,vehiclesWithTrailersNightMaxSpeed => 12}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory}]};
typeinfo('RequestorType') ->
  {sequence,'RequestorType',6,[{<<114,111,108,101>>,{'ENUMERATED_EXT',#{dot => 15,emergency => 6,transit => 16,basicVehicle => 0,publicTransport => 1,specialTransport => 2,dangerousGoods => 3,roadWork => 4,roadRescue => 5,safetyCar => 7,'none-unknown' => 8,truck => 9,motorcycle => 10,roadSideSource => 11,police => 12,fire => 13,ambulance => 14,slowMoving => 17,stopNgo => 18,cyclist => 19,pedestrian => 20,nonMotorized => 21,military => 22}},mandatory},{<<115,117,98,114,111,108,101>>,{'ENUMERATED',#{requestSubRoleUnKnown => 0,requestSubRole1 => 1,requestSubRole2 => 2,requestSubRole3 => 3,requestSubRole4 => 4,requestSubRole5 => 5,requestSubRole6 => 6,requestSubRole7 => 7,requestSubRole8 => 8,requestSubRole9 => 9,requestSubRole10 => 10,requestSubRole11 => 11,requestSubRole12 => 12,requestSubRole13 => 13,requestSubRole14 => 14,requestSubRoleReserved => 15}},'OPTIONAL'},{<<114,101,113,117,101,115,116>>,{'ENUMERATED',#{requestImportanceLevelUnKnown => 0,requestImportanceLevel1 => 1,requestImportanceLevel2 => 2,requestImportanceLevel3 => 3,requestImportanceLevel4 => 4,requestImportanceLevel5 => 5,requestImportanceLevel6 => 6,requestImportanceLevel7 => 7,requestImportanceLevel8 => 8,requestImportanceLevel9 => 9,requestImportanceLevel10 => 10,requestImportanceLevel11 => 11,requestImportanceLevel12 => 12,requestImportanceLevel13 => 13,requestImportanceLevel14 => 14,requestImportanceReserved => 15}},'OPTIONAL'},{<<105,115,111,51,56,56,51>>,{'INTEGER',{0,100}},'OPTIONAL'},{<<104,112,109,115,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sequence,'RequestorType_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_6}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]},'OPTIONAL'}]};
typeinfo('RoadSegmentReferenceID') ->
  {sequence,'RoadSegmentReferenceID',2,[{<<114,101,103,105,111,110>>,{'INTEGER',{0,65535}},'OPTIONAL'},{<<105,100>>,{'INTEGER',{0,65535}},mandatory}]};
typeinfo('RTCMheader') ->
  {sequence,'RTCMheader',2,[{<<115,116,97,116,117,115>>,{{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8},mandatory},{<<111,102,102,115,101,116,83,101,116>>,{typeinfo,{'Common','AntennaOffsetSet'}},mandatory}]};
typeinfo('RTCMmessageList') ->
  {sof,octet_string};
typeinfo('SegmentAttributeXYList') ->
  {sof,{'ENUMERATED_EXT',#{adaptiveTimingPresent => 25,unEvenPavementPresent => 37,turnOutPointOnLeft => 9,transitStopOnRight => 18,timeRestrictionsOnParking => 34,partialCurbIntrusion => 27,loadingzoneOnLeft => 7,mergingLaneRight => 4,taperToLeft => 28,audibleSignalingPresent => 24,adjacentBikeLaneOnRight => 14,curbOnLeft => 5,transitStopInLane => 19,adjacentParkingOnLeft => 11,rfSignalRequestPresent => 26,sharedWithTrackedVehicle => 20,curbOnRight => 6,costToPark => 35,taperToRight => 29,midBlockCurbPresent => 36,headInParking => 32,transitStopOnLeft => 17,turnOutPointOnRight => 10,adjacentBikeLaneOnLeft => 13,reserved => 0,taperToCenterLine => 30,parallelParking => 31,safeIsland => 21,adjacentParkingOnRight => 12,doNotBlock => 1,whiteLine => 2,rumbleStripPresent => 23,bikeBoxInFront => 16,loadingzoneOnRight => 8,freeParking => 33,sharedBikeLane => 15,mergingLaneLeft => 3,lowCurbsPresent => 22}}};
typeinfo('SpeedandHeadingandThrottleConfidence') ->
  {sequence,'SpeedandHeadingandThrottleConfidence',3,[{<<104,101,97,100,105,110,103>>,{'ENUMERATED',#{unavailable => 0,prec10deg => 1,prec05deg => 2,prec01deg => 3,'prec0-1deg' => 4,'prec0-05deg' => 5,'prec0-01deg' => 6,'prec0-0125deg' => 7}},mandatory},{<<115,112,101,101,100>>,{'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}},mandatory},{<<116,104,114,111,116,116,108,101>>,{'ENUMERATED',#{unavailable => 0,prec10percent => 1,prec1percent => 2,'prec0-5percent' => 3}},mandatory}]};
typeinfo('SpeedLimitList') ->
  {sof,{typeinfo,{'Common','RegulatorySpeedLimit'}}};
typeinfo('TransmissionAndSpeed') ->
  {sequence,'TransmissionAndSpeed',2,[{<<116,114,97,110,115,109,105,115,115,111,110>>,{'ENUMERATED',#{neutral => 0,unavailable => 7,park => 1,forwardGears => 2,reverseGears => 3,reserved1 => 4,reserved2 => 5,reserved3 => 6}},mandatory},{<<115,112,101,101,100>>,{'INTEGER',{0,8191}},mandatory}]};
typeinfo('VehicleClassification') ->
  {sequence,'VehicleClassification',9,[{<<107,101,121,84,121,112,101>>,{'INTEGER',{0,255}},'OPTIONAL'},{<<114,111,108,101>>,{'ENUMERATED_EXT',#{dot => 15,emergency => 6,transit => 16,basicVehicle => 0,publicTransport => 1,specialTransport => 2,dangerousGoods => 3,roadWork => 4,roadRescue => 5,safetyCar => 7,'none-unknown' => 8,truck => 9,motorcycle => 10,roadSideSource => 11,police => 12,fire => 13,ambulance => 14,slowMoving => 17,stopNgo => 18,cyclist => 19,pedestrian => 20,nonMotorized => 21,military => 22}},'OPTIONAL'},{<<105,115,111,51,56,56,51>>,{'INTEGER',{0,100}},'OPTIONAL'},{<<104,112,109,115,84,121,112,101>>,{'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}},'OPTIONAL'},{<<118,101,104,105,99,108,101,84,121,112,101>>,{'ENUMERATED_EXT',#{'diesel-powered-vehicles' => 9248,'abnormal-loads' => 9238,'gas-powered-vehicles' => 9247,'articulated-buses' => 9229,'maintenance-vehicles' => 9240,'cars-and-light-vehicles' => 9222,'vehicles-with-even-numbered-license-plates' => 9242,'vehicles-with-parking-permits' => 9244,'military-convoys' => 9250,'lPG-vehicles' => 9249,'heavy-vehicles' => 9226,'exceptional-loads' => 9237,'light-vehicles' => 9221,buses => 9228,'long-vehicles' => 9235,'military-vehicles' => 9251,convoys => 9239,cars => 9220,'hazardous-loads' => 9236,'vehicles-with-double-trailers' => 9232,bicycles => 9218,trucks => 9227,'cars-with-trailers' => 9223,'school-buses' => 9230,'vehicles-without-catalytic-converters' => 9246,'all-vehicles' => 9217,'cars-with-recreational-trailers' => 9224,'vehicles-with-catalytic-converters' => 9245,'high-profile-vehicles' => 9233,motorcycles => 9219,'wide-vehicles' => 9234,'delivery-vehicles' => 9241,'vehicles-with-semi-trailers' => 9231,'vehicles-with-odd-numbered-license-plates' => 9243,'vehicles-with-trailers' => 9225}},'OPTIONAL'},{<<114,101,115,112,111,110,115,101,69,113,117,105,112>>,{'ENUMERATED_EXT',#{'aLS-unit' => 10060,'mobile-crane' => 10095,'chief-officer-car' => 10076,'privately-owned-vehicle' => 10083,snowplow => 10102,'supervisor-vehicle' => 10109,'aircraft-rescue-firefighting' => 10001,aircraft => 9988,tractor => 10006,'aircraft-other' => 10024,'road-grader' => 10112,'boat-no-pump' => 10036,'rotary-snow-blower' => 10111,'track-laying-vehicle' => 10105,'marine-equipment' => 9989,'construction-vehicle' => 10088,'brush-truck' => 10000,'sand-truck' => 10101,'light-and-air-unit' => 10046,'heavy-ground-equipment' => 9986,'hedge-cutting-machines' => 10093,'medical-rescue-unit-other' => 10054,'steam-roller' => 10103,'combine-harvester' => 10087,'refuse-collection-vehicle' => 10096,'dozer-or-plow' => 10005,'dump-truck' => 10108,'urban-search-rescue-unit' => 10056,'light-tow' => 10094,'steam-truck' => 10113,engine => 9995,'aircraft-fixed-wing-tanker' => 10025,'white-lining-vehicle' => 10107,'snow-blower' => 10110,ambulance => 10085,'hAZMAT-unit' => 10077,'swat-team-van' => 10104,'support-equipment' => 9990,other => 9993,'flatbed-tow' => 10114,'heavy-tow' => 10092,'bomb-squad-van' => 10086,'type-ii-hand-crew' => 10079,'breathing-apparatus-support' => 10045,'crash-fire-rescue' => 10058,'road-sweeper' => 10098,'support-apparatus-other' => 10044,'high-angle-rescue' => 10057,quint => 9997,'salvage-vehicle' => 10100,'resurfacing-vehicle' => 10097,'hAZMAT-containment-tow' => 10091,'roadside-litter-collection-crews' => 10099,'rescue-unit' => 10055,helitanker => 10026,'tanker-pumper-combination' => 9998,'marine-equipment-other' => 10034,'mobile-command-post' => 10075,'other-apparatus-resource' => 10084,'tanker-or-tender' => 10008,'type-i-hand-crew' => 10078,'farm-tractor' => 10089,'medical-rescue-unit' => 9991,'bLS-unit' => 10059,'ground-fire-suppression' => 9985,'unknown-vehicle' => 10106,helicopter => 10027,'heavy-ground-equipment-other' => 10004,'ground-fire-suppression-other' => 9994,'fire-boat-with-pump' => 10035,'truck-or-aerial' => 9996,'grass-cutting-machines' => 10090}},'OPTIONAL'},{<<114,101,115,112,111,110,100,101,114,84,121,112,101>>,{'ENUMERATED_EXT',#{'emergency-vehicle-units' => 9729,'federal-law-enforcement-units' => 9730,'state-police-units' => 9731,'county-police-units' => 9732,'local-police-units' => 9733,'ambulance-units' => 9734,'rescue-units' => 9735,'fire-units' => 9736,'hAZMAT-units' => 9737,'light-tow-unit' => 9738,'heavy-tow-unit' => 9739,'freeway-service-patrols' => 9740,'transportation-response-units' => 9741,'private-contractor-response-units' => 9742}},'OPTIONAL'},{<<102,117,101,108,84,121,112,101>>,{'INTEGER',{0,15}},'OPTIONAL'},{<<114,101,103,105,111,110,97,108>>,{sof,{sequence,'VehicleClassification_regional_SEQOF',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_7}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}},'OPTIONAL'}]};
typeinfo('VehicleID') ->
  {choice,#{<<101,110,116,105,116,121,73,68>> => octet_string,<<115,116,97,116,105,111,110,73,68>> => {'INTEGER',{0,4294967295}}}};
typeinfo('VehicleSafetyExtensions') ->
  {sequence,'VehicleSafetyExtensions',4,[{<<101,118,101,110,116,115>>,{bit_string_nnl,[{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]},'OPTIONAL'},{<<112,97,116,104,72,105,115,116,111,114,121>>,{typeinfo,{'Common','PathHistory'}},'OPTIONAL'},{<<112,97,116,104,80,114,101,100,105,99,116,105,111,110>>,{typeinfo,{'Common','PathPrediction'}},'OPTIONAL'},{<<108,105,103,104,116,115>>,{bit_string_nnl,[{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]},'OPTIONAL'}]};
typeinfo('VehicleSize') ->
  {sequence,'VehicleSize',2,[{<<119,105,100,116,104>>,{'INTEGER',{0,1023}},mandatory},{<<108,101,110,103,116,104>>,{'INTEGER',{0,4095}},mandatory}]};
typeinfo('VerticalOffset') ->
  {choice,#{<<101,108,101,118,97,116,105,111,110>> => {'INTEGER',{-4096,61439}},<<111,102,102,115,101,116,49>> => {'INTEGER',{-64,63}},<<111,102,102,115,101,116,50>> => {'INTEGER',{-128,127}},<<111,102,102,115,101,116,51>> => {'INTEGER',{-256,255}},<<111,102,102,115,101,116,52>> => {'INTEGER',{-512,511}},<<111,102,102,115,101,116,53>> => {'INTEGER',{-1024,1023}},<<111,102,102,115,101,116,54>> => {'INTEGER',{-2048,2047}},<<114,101,103,105,111,110,97,108>> => {sequence,'VerticalOffset_regional',2,[{<<114,101,103,105,111,110,73,100>>,{'INTEGER',{0,255}},mandatory},{<<114,101,103,69,120,116,86,97,108,117,101>>,{'ObjClassFieldType',{regionId,1},{componentrelation,{objectset,121,{'Externaltypereference',undefined,'Common',internal_object_set_argument_8}},[{outermost,[{'Externalvaluereference',121,'Common',regionId}]}]}},mandatory}]}}};
typeinfo('WiperSet') ->
  {sequence,'WiperSet',4,[{<<115,116,97,116,117,115,70,114,111,110,116>>,{'ENUMERATED_EXT',#{high => 4,low => 3,off => 1,unavailable => 0,intermittent => 2,washerInUse => 5,automaticPresent => 6}},mandatory},{<<114,97,116,101,70,114,111,110,116>>,{'INTEGER',{0,127}},mandatory},{<<115,116,97,116,117,115,82,101,97,114>>,{'ENUMERATED_EXT',#{high => 4,low => 3,off => 1,unavailable => 0,intermittent => 2,washerInUse => 5,automaticPresent => 6}},'OPTIONAL'},{<<114,97,116,101,82,101,97,114>>,{'INTEGER',{0,127}},'OPTIONAL'}]};
typeinfo('Acceleration') ->
  {'INTEGER',{-2000,2001}};
typeinfo('AmbientAirPressure') ->
  {'INTEGER',{0,255}};
typeinfo('AmbientAirTemperature') ->
  {'INTEGER',{0,191}};
typeinfo('Angle') ->
  {'INTEGER',{0,28800}};
typeinfo('AntiLockBrakeStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}};
typeinfo('ApproachID') ->
  {'INTEGER',{0,15}};
typeinfo('AuxiliaryBrakeStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,reserved => 3}};
typeinfo('BasicVehicleClass') ->
  {'INTEGER',{0,255}};
typeinfo('BasicVehicleRole') ->
  {'ENUMERATED_EXT',#{dot => 15,emergency => 6,transit => 16,basicVehicle => 0,publicTransport => 1,specialTransport => 2,dangerousGoods => 3,roadWork => 4,roadRescue => 5,safetyCar => 7,'none-unknown' => 8,truck => 9,motorcycle => 10,roadSideSource => 11,police => 12,fire => 13,ambulance => 14,slowMoving => 17,stopNgo => 18,cyclist => 19,pedestrian => 20,nonMotorized => 21,military => 22}};
typeinfo('BrakeAppliedStatus') ->
  {{bit_string_nnl,[{unavailable,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5};
typeinfo('BrakeBoostApplied') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0}};
typeinfo('BumperHeight') ->
  {'INTEGER',{0,127}};
typeinfo('CoarseHeading') ->
  {'INTEGER',{0,240}};
typeinfo('CodeWord') ->
  octet_string;
typeinfo('CoefficientOfFriction') ->
  {'INTEGER',{0,50}};
typeinfo('Confidence') ->
  {'INTEGER',{0,200}};
typeinfo('Count') ->
  {'INTEGER',{0,32}};
typeinfo('DDay') ->
  {'INTEGER',{0,31}};
typeinfo('DeltaAngle') ->
  {'INTEGER',{-150,150}};
typeinfo('DescriptiveName') ->
  string;
typeinfo('DHour') ->
  {'INTEGER',{0,31}};
typeinfo('DMinute') ->
  {'INTEGER',{0,60}};
typeinfo('DMonth') ->
  {'INTEGER',{0,12}};
typeinfo('DOffset') ->
  {'INTEGER',{-840,840}};
typeinfo('DrivenLineOffsetLg') ->
  {'INTEGER',{-32767,32767}};
typeinfo('DrivenLineOffsetSm') ->
  {'INTEGER',{-2047,2047}};
typeinfo('DSecond') ->
  {'INTEGER',{0,65535}};
typeinfo('Duration') ->
  {'INTEGER',{0,3600}};
typeinfo('DYear') ->
  {'INTEGER',{0,4095}};
typeinfo('ElevationConfidence') ->
  {'ENUMERATED',#{unavailable => 0,'elev-500-00' => 1,'elev-200-00' => 2,'elev-100-00' => 3,'elev-050-00' => 4,'elev-020-00' => 5,'elev-010-00' => 6,'elev-005-00' => 7,'elev-002-00' => 8,'elev-001-00' => 9,'elev-000-50' => 10,'elev-000-20' => 11,'elev-000-10' => 12,'elev-000-05' => 13,'elev-000-02' => 14,'elev-000-01' => 15}};
typeinfo('Elevation') ->
  {'INTEGER',{-4096,61439}};
typeinfo('Extent') ->
  {'ENUMERATED',#{useInstantlyOnly => 0,useFor3meters => 1,useFor10meters => 2,useFor50meters => 3,useFor100meters => 4,useFor500meters => 5,useFor1000meters => 6,useFor5000meters => 7,useFor10000meters => 8,useFor50000meters => 9,useFor100000meters => 10,useFor500000meters => 11,useFor1000000meters => 12,useFor5000000meters => 13,useFor10000000meters => 14,forever => 15}};
typeinfo('ExteriorLights') ->
  {bit_string_nnl,[{lowBeamHeadlightsOn,0},{highBeamHeadlightsOn,1},{leftTurnSignalOn,2},{rightTurnSignalOn,3},{hazardSignalOn,4},{automaticLightControlOn,5},{daytimeRunningLightsOn,6},{fogLightOn,7},{parkingLightsOn,8}]};
typeinfo('FuelType') ->
  {'INTEGER',{0,15}};
typeinfo('FurtherInfoID') ->
  octet_string;
typeinfo('GNSSstatus') ->
  {{bit_string_nnl,[{unavailable,0},{isHealthy,1},{isMonitored,2},{baseStationType,3},{aPDOPofUnder5,4},{inViewOfUnder5,5},{localCorrectionsPresent,6},{networkCorrectionsPresent,7}]},8};
typeinfo('GrossSpeed') ->
  {'INTEGER',{0,31}};
typeinfo('HeadingConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec10deg => 1,prec05deg => 2,prec01deg => 3,'prec0-1deg' => 4,'prec0-05deg' => 5,'prec0-01deg' => 6,'prec0-0125deg' => 7}};
typeinfo('Heading') ->
  {'INTEGER',{0,28800}};
typeinfo('HeadingSlice') ->
  {{bit_string_nnl,[{'from000-0to022-5degrees',0},{'from022-5to045-0degrees',1},{'from045-0to067-5degrees',2},{'from067-5to090-0degrees',3},{'from090-0to112-5degrees',4},{'from112-5to135-0degrees',5},{'from135-0to157-5degrees',6},{'from157-5to180-0degrees',7},{'from180-0to202-5degrees',8},{'from202-5to225-0degrees',9},{'from225-0to247-5degrees',10},{'from247-5to270-0degrees',11},{'from270-0to292-5degrees',12},{'from292-5to315-0degrees',13},{'from315-0to337-5degrees',14},{'from337-5to360-0degrees',15}]},16};
typeinfo('IntersectionID') ->
  {'INTEGER',{0,65535}};
typeinfo('Iso3833VehicleType') ->
  {'INTEGER',{0,100}};
typeinfo('TrailerWeight') ->
  {'INTEGER',{0,64255}};
typeinfo('LaneConnectionID') ->
  {'INTEGER',{0,255}};
typeinfo('LaneID') ->
  {'INTEGER',{0,255}};
typeinfo('LaneWidth') ->
  {'INTEGER',{0,32767}};
typeinfo('Latitude') ->
  {'INTEGER',{-900000000,900000001}};
typeinfo('LightbarInUse') ->
  {'ENUMERATED',#{unavailable => 0,notInUse => 1,inUse => 2,yellowCautionLights => 3,schooldBusLights => 4,arrowSignsActive => 5,slowMovingVehicle => 6,freqStops => 7}};
typeinfo('Longitude') ->
  {'INTEGER',{-1799999999,1800000001}};
typeinfo('Location-quality') ->
  {'ENUMERATED',#{'loc-qual-bt1m' => 0,'loc-qual-bt5m' => 1,'loc-qual-bt12m' => 2,'loc-qual-bt50m' => 3,'loc-qual-bt125m' => 4,'loc-qual-bt500m' => 5,'loc-qual-bt1250m' => 6,'loc-qual-unknown' => 7}};
typeinfo('Location-tech') ->
  {'ENUMERATED_EXT',#{'loc-tech-unknown' => 0,'loc-tech-GNSS' => 1,'loc-tech-DGPS' => 2,'loc-tech-RTK' => 3,'loc-tech-PPP' => 4,'loc-tech-drGPS' => 5,'loc-tech-drDGPS' => 6,'loc-tech-dr' => 7,'loc-tech-nav' => 8,'loc-tech-fault' => 9}};
typeinfo('MergeDivergeNodeAngle') ->
  {'INTEGER',{-180,180}};
typeinfo('MessageBLOB') ->
  octet_string;
typeinfo('MinuteOfTheYear') ->
  {'INTEGER',{0,527040}};
typeinfo('MsgCount') ->
  {'INTEGER',{0,127}};
typeinfo('MultiVehicleResponse') ->
  {'ENUMERATED',#{unavailable => 0,reserved => 3,singleVehicle => 1,multiVehicle => 2}};
typeinfo('NodeAttributeXY') ->
  {'ENUMERATED_EXT',#{reserved => 0,stopLine => 1,roundedCapStyleA => 2,roundedCapStyleB => 3,mergePoint => 4,divergePoint => 5,downstreamStopLine => 6,downstreamStartNode => 7,closedToTraffic => 8,safeIsland => 9,curbPresentAtStepOff => 10,hydrantPresent => 11}};
typeinfo('ObstacleDistance') ->
  {'INTEGER',{0,32767}};
typeinfo('Offset-B09') ->
  {'INTEGER',{-256,255}};
typeinfo('Offset-B10') ->
  {'INTEGER',{-512,511}};
typeinfo('Offset-B11') ->
  {'INTEGER',{-1024,1023}};
typeinfo('Offset-B12') ->
  {'INTEGER',{-2048,2047}};
typeinfo('Offset-B13') ->
  {'INTEGER',{-4096,4095}};
typeinfo('Offset-B14') ->
  {'INTEGER',{-8192,8191}};
typeinfo('Offset-B16') ->
  {'INTEGER',{-32768,32767}};
typeinfo('OffsetLL-B18') ->
  {'INTEGER',{-131072,131071}};
typeinfo('PayloadData') ->
  octet_string;
typeinfo('PositionConfidence') ->
  {'ENUMERATED',#{unavailable => 0,a500m => 1,a200m => 2,a100m => 3,a50m => 4,a20m => 5,a10m => 6,a5m => 7,a2m => 8,a1m => 9,a50cm => 10,a20cm => 11,a10cm => 12,a5cm => 13,a2cm => 14,a1cm => 15}};
typeinfo('PrioritizationResponseStatus') ->
  {'ENUMERATED_EXT',#{unknown => 0,rejected => 5,requested => 1,processing => 2,watchOtherTraffic => 3,granted => 4,maxPresence => 6,reserviceLocked => 7}};
typeinfo('Priority') ->
  octet_string;
typeinfo('PrivilegedEventFlags') ->
  {{bit_string_nnl,[{peUnavailable,0},{peEmergencyResponse,1},{peEmergencyLightsActive,2},{peEmergencySoundActive,3},{peNonEmergencyLightsActive,4},{peNonEmergencySoundActive,5}]},16};
typeinfo('RadiusOfCurvature') ->
  {'INTEGER',{-32767,32767}};
typeinfo('RegionId') ->
  {'INTEGER',{0,255}};
typeinfo('RequestID') ->
  {'INTEGER',{0,255}};
typeinfo('RequestImportanceLevel') ->
  {'ENUMERATED',#{requestImportanceLevelUnKnown => 0,requestImportanceLevel1 => 1,requestImportanceLevel2 => 2,requestImportanceLevel3 => 3,requestImportanceLevel4 => 4,requestImportanceLevel5 => 5,requestImportanceLevel6 => 6,requestImportanceLevel7 => 7,requestImportanceLevel8 => 8,requestImportanceLevel9 => 9,requestImportanceLevel10 => 10,requestImportanceLevel11 => 11,requestImportanceLevel12 => 12,requestImportanceLevel13 => 13,requestImportanceLevel14 => 14,requestImportanceReserved => 15}};
typeinfo('RequestSubRole') ->
  {'ENUMERATED',#{requestSubRoleUnKnown => 0,requestSubRole1 => 1,requestSubRole2 => 2,requestSubRole3 => 3,requestSubRole4 => 4,requestSubRole5 => 5,requestSubRole6 => 6,requestSubRole7 => 7,requestSubRole8 => 8,requestSubRole9 => 9,requestSubRole10 => 10,requestSubRole11 => 11,requestSubRole12 => 12,requestSubRole13 => 13,requestSubRole14 => 14,requestSubRoleReserved => 15}};
typeinfo('ResponseType') ->
  {'ENUMERATED_EXT',#{emergency => 1,slowMoving => 5,notInUseOrNotEquipped => 0,nonEmergency => 2,pursuit => 3,stationary => 4,stopAndGoMovement => 6}};
typeinfo('RestrictionClassID') ->
  {'INTEGER',{0,255}};
typeinfo('RoadRegulatorID') ->
  {'INTEGER',{0,65535}};
typeinfo('RoadSegmentID') ->
  {'INTEGER',{0,65535}};
typeinfo('RoadwayCrownAngle') ->
  {'INTEGER',{-128,127}};
typeinfo('RTCMmessage') ->
  octet_string;
typeinfo('Scale-B12') ->
  {'INTEGER',{-2048,2047}};
typeinfo('SegmentAttributeXY') ->
  {'ENUMERATED_EXT',#{adaptiveTimingPresent => 25,unEvenPavementPresent => 37,turnOutPointOnLeft => 9,transitStopOnRight => 18,timeRestrictionsOnParking => 34,partialCurbIntrusion => 27,loadingzoneOnLeft => 7,mergingLaneRight => 4,taperToLeft => 28,audibleSignalingPresent => 24,adjacentBikeLaneOnRight => 14,curbOnLeft => 5,transitStopInLane => 19,adjacentParkingOnLeft => 11,rfSignalRequestPresent => 26,sharedWithTrackedVehicle => 20,curbOnRight => 6,costToPark => 35,taperToRight => 29,midBlockCurbPresent => 36,headInParking => 32,transitStopOnLeft => 17,turnOutPointOnRight => 10,adjacentBikeLaneOnLeft => 13,reserved => 0,taperToCenterLine => 30,parallelParking => 31,safeIsland => 21,adjacentParkingOnRight => 12,doNotBlock => 1,whiteLine => 2,rumbleStripPresent => 23,bikeBoxInFront => 16,loadingzoneOnRight => 8,freeParking => 33,sharedBikeLane => 15,mergingLaneLeft => 3,lowCurbsPresent => 22}};
typeinfo('SemiMajorAxisAccuracy') ->
  {'INTEGER',{0,255}};
typeinfo('SemiMajorAxisOrientation') ->
  {'INTEGER',{0,65535}};
typeinfo('SemiMinorAxisAccuracy') ->
  {'INTEGER',{0,255}};
typeinfo('SignalGroupID') ->
  {'INTEGER',{0,255}};
typeinfo('SignalReqScheme') ->
  octet_string;
typeinfo('SirenInUse') ->
  {'ENUMERATED',#{unavailable => 0,reserved => 3,notInUse => 1,inUse => 2}};
typeinfo('SpeedConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec100ms => 1,prec10ms => 2,prec5ms => 3,prec1ms => 4,'prec0-1ms' => 5,'prec0-05ms' => 6,'prec0-01ms' => 7}};
typeinfo('SpeedLimitType') ->
  {'ENUMERATED_EXT',#{unknown => 0,maxSpeedInSchoolZone => 1,maxSpeedInSchoolZoneWhenChildrenArePresent => 2,maxSpeedInConstructionZone => 3,vehicleMinSpeed => 4,vehicleMaxSpeed => 5,vehicleNightMaxSpeed => 6,truckMinSpeed => 7,truckMaxSpeed => 8,truckNightMaxSpeed => 9,vehiclesWithTrailersMinSpeed => 10,vehiclesWithTrailersMaxSpeed => 11,vehiclesWithTrailersNightMaxSpeed => 12}};
typeinfo('Speed') ->
  {'INTEGER',{0,8191}};
typeinfo('SSPindex') ->
  {'INTEGER',{0,31}};
typeinfo('StabilityControlStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}};
typeinfo('StationID') ->
  {'INTEGER',{0,4294967295}};
typeinfo('SteeringWheelAngle') ->
  {'INTEGER',{-126,127}};
typeinfo('TemporaryID') ->
  octet_string;
typeinfo('ThrottleConfidence') ->
  {'ENUMERATED',#{unavailable => 0,prec10percent => 1,prec1percent => 2,'prec0-5percent' => 3}};
typeinfo('TimeConfidence') ->
  {'ENUMERATED',#{'time-000-000-000-000-01' => 39,'time-000-000-5' => 16,'time-050-000' => 2,'time-020-000' => 3,'time-000-020' => 11,'time-000-000-05' => 19,'time-000-000-1' => 18,'time-100-000' => 1,'time-000-000-001' => 24,'time-000-050' => 10,'time-000-000-000-000-2' => 35,'time-000-000-000-05' => 28,'time-000-000-000-000-5' => 34,'time-000-000-000-02' => 29,'time-000-000-000-001' => 33,'time-000-000-2' => 17,'time-000-000-000-005' => 31,'time-000-200' => 8,'time-000-000-000-5' => 25,'time-000-000-002' => 23,'time-000-002' => 14,'time-000-000-000-002' => 32,unavailable => 0,'time-002-000' => 5,'time-000-100' => 9,'time-000-000-000-000-05' => 37,'time-000-000-02' => 20,'time-000-000-005' => 22,'time-010-000' => 4,'time-000-000-000-2' => 26,'time-000-000-000-000-1' => 36,'time-000-000-01' => 21,'time-000-005' => 13,'time-000-000-000-1' => 27,'time-000-010' => 12,'time-000-001' => 15,'time-001-000' => 6,'time-000-000-000-000-02' => 38,'time-000-000-000-01' => 30,'time-000-500' => 7}};
typeinfo('TimeOffset') ->
  {'INTEGER',{1,65535}};
typeinfo('TractionControlStatus') ->
  {'ENUMERATED',#{off => 1,on => 2,unavailable => 0,engaged => 3}};
typeinfo('TransitStatus') ->
  {{bit_string_nnl,[{none,0},{anADAuse,1},{aBikeLoad,2},{doorOpen,3},{occM,4},{occL,5}]},6};
typeinfo('TransmissionState') ->
  {'ENUMERATED',#{neutral => 0,unavailable => 7,park => 1,forwardGears => 2,reverseGears => 3,reserved1 => 4,reserved2 => 5,reserved3 => 6}};
typeinfo('URL-Link') ->
  string;
typeinfo('VehicleEventFlags') ->
  {bit_string_nnl,[{eventHazardLights,0},{eventStopLineViolation,1},{eventABSactivated,2},{eventTractionControlLoss,3},{eventStabilityControlactivated,4},{eventHazardousMaterials,5},{eventReserved1,6},{eventHardBraking,7},{eventLightsChanged,8},{eventWipersChanged,9},{eventFlatTire,10},{eventDisabledVehicle,11},{eventAirBagDeployment,12}]};
typeinfo('VehicleHeight') ->
  {'INTEGER',{0,127}};
typeinfo('VehicleLength') ->
  {'INTEGER',{0,4095}};
typeinfo('VehicleMass') ->
  {'INTEGER',{0,255}};
typeinfo('VehicleType') ->
  {'ENUMERATED_EXT',#{none => 0,unknown => 1,special => 2,moto => 3,car => 4,carOther => 5,bus => 6,axleCnt2 => 7,axleCnt3 => 8,axleCnt4 => 9,axleCnt4Trailer => 10,axleCnt5Trailer => 11,axleCnt6Trailer => 12,axleCnt5MultiTrailer => 13,axleCnt6MultiTrailer => 14,axleCnt7MultiTrailer => 15}};
typeinfo('VehicleWidth') ->
  {'INTEGER',{0,1023}};
typeinfo('Velocity') ->
  {'INTEGER',{0,8191}};
typeinfo('VerticalAccelerationThreshold') ->
  {{bit_string_nnl,[{notEquipped,0},{leftFront,1},{leftRear,2},{rightFront,3},{rightRear,4}]},5};
typeinfo('VerticalAcceleration') ->
  {'INTEGER',{-127,127}};
typeinfo('VertOffset-B08') ->
  {'INTEGER',{-128,127}};
typeinfo('VertOffset-B09') ->
  {'INTEGER',{-256,255}};
typeinfo('VertOffset-B10') ->
  {'INTEGER',{-512,511}};
typeinfo('VertOffset-B11') ->
  {'INTEGER',{-1024,1023}};
typeinfo('VertOffset-B12') ->
  {'INTEGER',{-2048,2047}};
typeinfo('WiperRate') ->
  {'INTEGER',{0,127}};
typeinfo('WiperStatus') ->
  {'ENUMERATED_EXT',#{high => 4,low => 3,off => 1,unavailable => 0,intermittent => 2,washerInUse => 5,automaticPresent => 6}};
typeinfo('YawRate') ->
  {'INTEGER',{-32767,32767}};
typeinfo(Type) ->
  exit({error,{asn1,{undefined_type,Type}}}).


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    complete(element(1, Arg)),
    ok.

bit_string_name2pos_1([unavailable | T]) ->
    [0 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([leftFront | T]) ->
    [1 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([leftRear | T]) ->
    [2 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([rightFront | T]) ->
    [3 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([rightRear | T]) ->
    [4 | bit_string_name2pos_1(T)];
bit_string_name2pos_1([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_1(T)];
bit_string_name2pos_1([]) ->
    [];
bit_string_name2pos_1(_) ->
    throw(invalid).

bit_string_name2pos_14([unavailable | T]) ->
    [0 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([isHealthy | T]) ->
    [1 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([isMonitored | T]) ->
    [2 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([baseStationType | T]) ->
    [3 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([aPDOPofUnder5 | T]) ->
    [4 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([inViewOfUnder5 | T]) ->
    [5 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([localCorrectionsPresent | T]) ->
    [6 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([networkCorrectionsPresent | T]) ->
    [7 | bit_string_name2pos_14(T)];
bit_string_name2pos_14([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_14(T)];
bit_string_name2pos_14([]) ->
    [];
bit_string_name2pos_14(_) ->
    throw(invalid).

bit_string_name2pos_19([peUnavailable | T]) ->
    [0 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([peEmergencyResponse | T]) ->
    [1 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([peEmergencyLightsActive | T]) ->
    [2 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([peEmergencySoundActive | T]) ->
    [3 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([peNonEmergencyLightsActive | T]) ->
    [4 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([peNonEmergencySoundActive | T]) ->
    [5 | bit_string_name2pos_19(T)];
bit_string_name2pos_19([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_19(T)];
bit_string_name2pos_19([]) ->
    [];
bit_string_name2pos_19(_) ->
    throw(invalid).

bit_string_name2pos_24([eventHazardLights | T]) ->
    [0 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventStopLineViolation | T]) ->
    [1 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventABSactivated | T]) ->
    [2 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventTractionControlLoss | T]) ->
    [3 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventStabilityControlactivated | T]) ->
    [4 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventHazardousMaterials | T]) ->
    [5 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventReserved1 | T]) ->
    [6 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventHardBraking | T]) ->
    [7 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventLightsChanged | T]) ->
    [8 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventWipersChanged | T]) ->
    [9 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventFlatTire | T]) ->
    [10 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventDisabledVehicle | T]) ->
    [11 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([eventAirBagDeployment | T]) ->
    [12 | bit_string_name2pos_24(T)];
bit_string_name2pos_24([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_24(T)];
bit_string_name2pos_24([]) ->
    [];
bit_string_name2pos_24(_) ->
    throw(invalid).

bit_string_name2pos_25([lowBeamHeadlightsOn | T]) ->
    [0 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([highBeamHeadlightsOn | T]) ->
    [1 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([leftTurnSignalOn | T]) ->
    [2 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([rightTurnSignalOn | T]) ->
    [3 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([hazardSignalOn | T]) ->
    [4 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([automaticLightControlOn | T]) ->
    [5 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([daytimeRunningLightsOn | T]) ->
    [6 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([fogLightOn | T]) ->
    [7 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([parkingLightsOn | T]) ->
    [8 | bit_string_name2pos_25(T)];
bit_string_name2pos_25([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_25(T)];
bit_string_name2pos_25([]) ->
    [];
bit_string_name2pos_25(_) ->
    throw(invalid).

bit_string_name2pos_26(['from000-0to022-5degrees' | T]) ->
    [0 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from022-5to045-0degrees' | T]) ->
    [1 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from045-0to067-5degrees' | T]) ->
    [2 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from067-5to090-0degrees' | T]) ->
    [3 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from090-0to112-5degrees' | T]) ->
    [4 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from112-5to135-0degrees' | T]) ->
    [5 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from135-0to157-5degrees' | T]) ->
    [6 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from157-5to180-0degrees' | T]) ->
    [7 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from180-0to202-5degrees' | T]) ->
    [8 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from202-5to225-0degrees' | T]) ->
    [9 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from225-0to247-5degrees' | T]) ->
    [10 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from247-5to270-0degrees' | T]) ->
    [11 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from270-0to292-5degrees' | T]) ->
    [12 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from292-5to315-0degrees' | T]) ->
    [13 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from315-0to337-5degrees' | T]) ->
    [14 | bit_string_name2pos_26(T)];
bit_string_name2pos_26(['from337-5to360-0degrees' | T]) ->
    [15 | bit_string_name2pos_26(T)];
bit_string_name2pos_26([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_26(T)];
bit_string_name2pos_26([]) ->
    [];
bit_string_name2pos_26(_) ->
    throw(invalid).

bit_string_name2pos_27([none | T]) ->
    [0 | bit_string_name2pos_27(T)];
bit_string_name2pos_27([anADAuse | T]) ->
    [1 | bit_string_name2pos_27(T)];
bit_string_name2pos_27([aBikeLoad | T]) ->
    [2 | bit_string_name2pos_27(T)];
bit_string_name2pos_27([doorOpen | T]) ->
    [3 | bit_string_name2pos_27(T)];
bit_string_name2pos_27([occM | T]) ->
    [4 | bit_string_name2pos_27(T)];
bit_string_name2pos_27([occL | T]) ->
    [5 | bit_string_name2pos_27(T)];
bit_string_name2pos_27([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_27(T)];
bit_string_name2pos_27([]) ->
    [];
bit_string_name2pos_27(_) ->
    throw(invalid).

bit_string_name2pos_28([notEquipped | T]) ->
    [0 | bit_string_name2pos_28(T)];
bit_string_name2pos_28([leftFront | T]) ->
    [1 | bit_string_name2pos_28(T)];
bit_string_name2pos_28([leftRear | T]) ->
    [2 | bit_string_name2pos_28(T)];
bit_string_name2pos_28([rightFront | T]) ->
    [3 | bit_string_name2pos_28(T)];
bit_string_name2pos_28([rightRear | T]) ->
    [4 | bit_string_name2pos_28(T)];
bit_string_name2pos_28([{bit, Pos} | T]) when is_integer(Pos) ->
    [Pos | bit_string_name2pos_28(T)];
bit_string_name2pos_28([]) ->
    [];
bit_string_name2pos_28(_) ->
    throw(invalid).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> reserved;
1 -> stopLine;
2 -> roundedCapStyleA;
3 -> roundedCapStyleB;
4 -> mergePoint;
5 -> divergePoint;
6 -> downstreamStopLine;
7 -> downstreamStartNode;
8 -> closedToTraffic;
9 -> safeIsland;
10 -> curbPresentAtStepOff;
11 -> hydrantPresent;
_ -> exit({error,{asn1,{decode_enumerated,V1@V3}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11};
<<1:1,1:1,V1@V10:6,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
V1@Mul12 = V1@V10 * 16384,
{V1@Mul12,V1@Buf11}
end,
<<V1@V13:V1@V6/unit:8,V1@Buf14/bitstring>> = V1@Buf7,
{V1@V13,V1@Buf14}
end,
V1@Int15 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int15,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = dec_NodeXY(Bytes),
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components15(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components15(Num, Bytes, Acc) ->
{Term,Remain} = dec_PathHistoryPoint(Bytes),
dec_components15(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = dec_Position3D_regional_RegionalExtension(Bytes),
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes,
V2@Add2 = V2@V0 + 1,
<<V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv5 = binary:copy(V2@V3),
{V2@Conv5,V2@Buf4}
end,
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components21(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components21(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V3@V0,V3@Buf1} = case Bytes of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> reserved;
1 -> doNotBlock;
2 -> whiteLine;
3 -> mergingLaneLeft;
4 -> mergingLaneRight;
5 -> curbOnLeft;
6 -> curbOnRight;
7 -> loadingzoneOnLeft;
8 -> loadingzoneOnRight;
9 -> turnOutPointOnLeft;
10 -> turnOutPointOnRight;
11 -> adjacentParkingOnLeft;
12 -> adjacentParkingOnRight;
13 -> adjacentBikeLaneOnLeft;
14 -> adjacentBikeLaneOnRight;
15 -> sharedBikeLane;
16 -> bikeBoxInFront;
17 -> transitStopOnLeft;
18 -> transitStopOnRight;
19 -> transitStopInLane;
20 -> sharedWithTrackedVehicle;
21 -> safeIsland;
22 -> lowCurbsPresent;
23 -> rumbleStripPresent;
24 -> audibleSignalingPresent;
25 -> adaptiveTimingPresent;
26 -> rfSignalRequestPresent;
27 -> partialCurbIntrusion;
28 -> taperToLeft;
29 -> taperToRight;
30 -> taperToCenterLine;
31 -> parallelParking;
32 -> headInParking;
33 -> freeParking;
34 -> timeRestrictionsOnParking;
35 -> costToPark;
36 -> midBlockCurbPresent;
37 -> unEvenPavementPresent;
_ -> exit({error,{asn1,{decode_enumerated,V3@V3}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11};
<<1:1,1:1,V3@V10:6,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
V3@Mul12 = V3@V10 * 16384,
{V3@Mul12,V3@Buf11}
end,
<<V3@V13:V3@V6/unit:8,V3@Buf14/bitstring>> = V3@Buf7,
{V3@V13,V3@Buf14}
end,
V3@Int15 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int15,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,
dec_components21(Num-1, Remain, [Term|Acc]).

dec_components22(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components22(Num, Bytes, Acc) ->
{Term,Remain} = dec_RegulatorySpeedLimit(Bytes),
dec_components22(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = dec_VehicleClassification_regional_RegionalExtension(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = dec_ComputedLane_regional_RegionalExtension(Bytes),
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components6(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components6(Num, Bytes, Acc) ->
{Term,Remain} = dec_LaneDataAttribute_regional_RegionalExtension(Bytes),
dec_components6(Num-1, Remain, [Term|Acc]).

dec_components8(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components8(Num, Bytes, Acc) ->
{Term,Remain} = dec_LaneDataAttribute(Bytes),
dec_components8(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = dec_NodeAttributeSetXY_regional_RegionalExtension(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

dec_os_Type12(Bytes, Id) when Id =:= 2 ->
{Term,_} = 'AddGrpB':'dec_NodeOffsetPointXY-addGrpB'(Bytes),
Term;
dec_os_Type12(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type18(Bytes, Id) when Id =:= 2 ->
{Term,_} = 'AddGrpB':'dec_Position3D-addGrpB'(Bytes),
Term;
dec_os_Type18(Bytes, Id) when Id =:= 3 ->
{Term,_} = 'AddGrpC':'dec_Position3D-addGrpC'(Bytes),
Term;
dec_os_Type18(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type4(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Type7(Bytes, Id) when Id =:= 2 ->
{Term,_} = 'AddGrpB':'dec_LaneDataAttribute-addGrpB'(Bytes),
Term;
dec_os_Type7(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Type11(Val, Id) ->
if Id =:= 2 ->
'AddGrpB':'enc_NodeOffsetPointXY-addGrpB'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Type16(Val, Id) ->
if Id =:= 2 ->
'AddGrpB':'enc_Position3D-addGrpB'(Val);
Id =:= 3 ->
'AddGrpC':'enc_Position3D-addGrpC'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Type2(Val, Id) ->
open_type_to_binary(Val).

enc_os_Type5(Val, Id) ->
if Id =:= 2 ->
'AddGrpB':'enc_LaneDataAttribute-addGrpB'(Val);
true ->
open_type_to_binary(Val)
end.

adjust_trailing_zeroes(Bs0, Lb) ->
    case bit_size(Bs0) of
        Sz when Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        Lb ->
            Bs0;
        _ ->
            <<_:Lb/bits,Tail/bits>> = Bs0,
            Sz = Lb + bit_size(bs_drop_trailing_zeroes(Tail)),
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end.

bitstring2json(BitStr) when is_binary(BitStr) ->
    octetstring2json(binary_to_list(BitStr));
bitstring2json(BitStr) ->
    Pad = 8 - bit_size(BitStr) rem 8,
    NewStr = <<BitStr/bitstring,0:Pad>>,
    octetstring2json(binary_to_list(NewStr)).

bitstring_from_positions(L0, Lb) ->
    L1 = lists:sort(L0),
    L = diff(L1, -1, Lb - 1),
    << 
      <<B:(N + 0)>> ||
          {B, N} <- L
    >>.

bs_drop_trailing_zeroes(Bs) ->
    bs_drop_trailing_zeroes(Bs, bit_size(Bs)).

bs_drop_trailing_zeroes(Bs, 0) ->
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) when Sz0 < 8 ->
    <<Byte:Sz0>> = Bs0,
    Sz = Sz0 - ntz(Byte),
    <<Bs:Sz/bits,_/bits>> = Bs0,
    Bs;
bs_drop_trailing_zeroes(Bs0, Sz0) ->
    Sz1 = Sz0 - 8,
    <<Bs1:Sz1/bits,Byte:8>> = Bs0,
    case ntz(Byte) of
        8 ->
            bs_drop_trailing_zeroes(Bs1, Sz1);
        Ntz ->
            Sz = Sz0 - Ntz,
            <<Bs:Sz/bits,_:Ntz/bits>> = Bs0,
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_chars(Val, N) ->
    [ 
     C ||
         <<C:N>> <= Val
    ].

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>, Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_jer(Module, Type, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val).

decode_jer({'ENUMERATED', _EnumList}, Val) when is_binary(Val) ->
    binary_to_existing_atom(Val, utf8);
decode_jer({'ENUMERATED', _EnumList}, Val) when is_boolean(Val) ->
    Val;
decode_jer({'ENUMERATED', _EnumList}, null) ->
    null;
decode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({'ENUMERATED_EXT', EnumList}, Val) ->
    decode_jer({'ENUMERATED', EnumList}, Val);
decode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    decode_jer(Type, Val);
decode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    decode_jer(TypeInfo, Val);
decode_jer({sequence, Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    DecodedComps = decode_jer_component(CompInfos, Value, []),
    list_to_tuple([Sname | DecodedComps]);
decode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    decode_jer_component_map(CompInfos, Value, []);
decode_jer(string, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer({string, _Prop}, Str) when is_binary(Str) ->
    binary_to_list(Str);
decode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
decode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
decode_jer({Type = {'INTEGER_NNL', _NNList}, _}, Int) ->
    decode_jer(Type, Int);
decode_jer({'INTEGER_NNL', NNList}, Int) ->
    case lists:keyfind(Int, 2, NNList) of
        {NewName, _} ->
            NewName;
        _ ->
            Int
    end;
decode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
decode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
decode_jer('NULL', null) ->
    'NULL';
decode_jer(legacy_octet_string, Str) when is_binary(Str) ->
    json2octetstring2string(binary_to_list(Str));
decode_jer(octet_string, Str) when is_binary(Str) ->
    json2octetstring2binary(binary_to_list(Str));
decode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     decode_jer(Type, Val) ||
         Val <- Vals
    ];
decode_jer({choice, ChoiceTypes}, ChoiceVal) ->
    [{Alt, Val}] = maps:to_list(ChoiceVal),
    case ChoiceTypes of
        #{Alt := Type} ->
            Type = maps:get(Alt, ChoiceTypes),
            {binary_to_atom(Alt, utf8), decode_jer(Type, Val)};
        _ ->
            exit({error,
                  {asn1, {invalid_choice, Alt, maps:keys(ChoiceTypes)}}})
    end;
decode_jer(bit_string, #{<<"value">> := Str, <<"length">> := Length}) ->
    json2bitstring(binary_to_list(Str), Length);
decode_jer({bit_string, FixedLength}, Str) when is_binary(Str) ->
    json2bitstring(binary_to_list(Str), FixedLength);
decode_jer({bit_string_nnl, NNL},
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2names(BitStr, NNL);
decode_jer({{bit_string_nnl, NNL}, FixedLength}, Str)
    when is_binary(Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    jer_bitstr2names(BitStr, NNL);
decode_jer({compact_bit_string_nnl, NNL}, Value) ->
    decode_jer({bit_string_nnl, NNL}, Value);
decode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    decode_jer({{bit_string_nnl, NNL}, FixedLength}, Value);
decode_jer(compact_bit_string,
           #{<<"value">> := Str, <<"length">> := Length}) ->
    BitStr = json2bitstring(binary_to_list(Str), Length),
    jer_bitstr2compact(BitStr);
decode_jer({compact_bit_string, FixedLength}, Str) ->
    BitStr = json2bitstring(binary_to_list(Str), FixedLength),
    Unused = (8 - FixedLength rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>};
decode_jer('OBJECT IDENTIFIER', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer('RELATIVE-OID', OidBin) when is_binary(OidBin) ->
    json2oid(OidBin);
decode_jer({'ObjClassFieldType', _, _}, Bin) when is_binary(Bin) ->
    Bin;
decode_jer('ASN1_OPEN_TYPE', Bin) when is_binary(Bin) ->
    Bin;
decode_jer({container, Type, _Containing}, Val) ->
    decode_jer(Type, Val);
decode_jer(Type, Val) ->
    exit({error, {asn1, {{decode, Type}, Val}}}).

decode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component(CompInfos, VMap, [Dec | Acc]);
decode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [asn1_NOVALUE | Acc]);
decode_jer_component([{_Name, _Type, {'DEFAULT', Dvalue}} | CompInfos],
                     VMap, Acc) ->
    decode_jer_component(CompInfos, VMap, [Dvalue | Acc]);
decode_jer_component([{Name, _Type, _OptOrDefault} | _CompInfos],
                     VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component([], _, Acc) ->
    lists:reverse(Acc).

decode_jer_component_map([{Name, AtomName, Type, _OptOrDefault} |
                          CompInfos],
                         VMap, Acc)
    when is_map_key(Name, VMap) ->
    Value = maps:get(Name, VMap),
    Dec = decode_jer(Type, Value),
    decode_jer_component_map(CompInfos, VMap, [{AtomName, Dec} | Acc]);
decode_jer_component_map([{_Name, _AtomName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap, Acc);
decode_jer_component_map([{_Name, AtomName, _Type, {'DEFAULT', Dvalue}} |
                          CompInfos],
                         VMap, Acc) ->
    decode_jer_component_map(CompInfos, VMap,
                             [{AtomName, Dvalue} | Acc]);
decode_jer_component_map([{Name, _AtomName, _Type, _OptOrDefault} |
                          _CompInfos],
                         VMap, _Acc) ->
    exit({error,
          {asn1, {{decode, {mandatory_component_missing, Name}}, VMap}}});
decode_jer_component_map([], _, Acc) ->
    maps:from_list(Acc).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct, Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val, Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error, {asn1, {decode_length, {nyi, above_16k}}}}).

decode_named_bit_string(Val, NNL) ->
    Bits =
        [ 
         B ||
             <<B:1>> <= Val
        ],
    decode_named_bit_string_1(0, Bits, NNL, []).

decode_named_bit_string_1(Pos, [0 | Bt], Names, Acc) ->
    decode_named_bit_string_1(Pos + 1, Bt, Names, Acc);
decode_named_bit_string_1(Pos, [1 | Bt], Names, Acc) ->
    case lists:keyfind(Pos, 2, Names) of
        {Name, _} ->
            decode_named_bit_string_1(Pos + 1, Bt, Names, [Name | Acc]);
        false ->
            decode_named_bit_string_1(Pos + 1,
                                      Bt, Names,
                                      [{bit, Pos} | Acc])
    end;
decode_named_bit_string_1(_Pos, [], _Names, Acc) ->
    lists:reverse(Acc).

diff([H | T], Prev, Last) ->
    [{1, H - Prev} | diff(T, H, Last)];
diff([], Prev, Last) when Last >= Prev ->
    [{0, Last - Prev}];
diff([], _, _) ->
    [].

encode_chars(Val, NumBits) ->
    << 
      <<C:NumBits>> ||
          C <- Val
    >>.

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>, B | encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len, Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>, Bin]
            end
    end.

encode_jer(Module, Type, Val) ->
    Info = Module:typeinfo(Type),
    Enc = encode_jer(Info, Val),
    EncFun =
        fun({'KV_LIST', Value}, Encode) ->
               json:encode_key_value_list(Value, Encode);
           (Other, Encode) ->
               json:encode_value(Other, Encode)
        end,
    iolist_to_binary(json:encode(Enc, EncFun)).

encode_jer({sequence_tab, Simple, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component_tab(CompInfos, Clist, Simple, #{});
encode_jer({sequence_map, _Sname, _Arity, CompInfos}, Value)
    when is_map(Value) ->
    encode_jer_component_map(CompInfos, Value, []);
encode_jer({sequence, Sname, Arity, CompInfos}, Value)
    when tuple_size(Value) == Arity + 1 ->
    [Sname | Clist] = tuple_to_list(Value),
    encode_jer_component(CompInfos, Clist, []);
encode_jer(string, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer({string, _Prop}, Str) when is_list(Str) ->
    list_to_binary(Str);
encode_jer(string, Str) when is_binary(Str) ->
    Str;
encode_jer({string, _Prop}, Str) when is_binary(Str) ->
    Str;
encode_jer('INTEGER', Int) when is_integer(Int) ->
    Int;
encode_jer({'INTEGER', {Min, Max}}, Int)
    when is_integer(Int), Max >= Int, Int >= Min ->
    Int;
encode_jer({'INTEGER_NNL', _NNL}, Int) when is_integer(Int) ->
    Int;
encode_jer(Type = {'INTEGER_NNL', NNList}, Int) when is_atom(Int) ->
    case lists:keyfind(Int, 1, NNList) of
        {_, NewVal} ->
            NewVal;
        _ ->
            exit({error, {asn1, {Type, Int}}})
    end;
encode_jer({Type = {'INTEGER_NNL', _NNList}, _Constraint}, Int)
    when is_atom(Int) ->
    encode_jer(Type, Int);
encode_jer({{'INTEGER_NNL', _NNList}, Constraint}, Int)
    when is_integer(Int) ->
    encode_jer({'INTEGER', Constraint}, Int);
encode_jer('BOOLEAN', Bool) when is_boolean(Bool) ->
    Bool;
encode_jer({'BOOLEAN', _Prop}, Bool) when is_boolean(Bool) ->
    Bool;
encode_jer('NULL', _) ->
    null;
encode_jer(legacy_octet_string, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer({legacy_octet_string, _Prop}, Value) when is_list(Value) ->
    bitstring2json(list_to_binary(Value));
encode_jer(octet_string, Value) when is_binary(Value) ->
    encode_jer({octet_string, []}, Value);
encode_jer({octet_string, _Prop}, Value) when is_binary(Value) ->
    bitstring2json(Value);
encode_jer({'ENUMERATED', EnumMap}, Val) when is_map_key(Val, EnumMap) ->
    Val;
encode_jer({Type = {'ENUMERATED', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({'ENUMERATED_EXT', _EnumMap}, Val) when is_atom(Val) ->
    Val;
encode_jer({Type = {'ENUMERATED_EXT', _EnumList}, _Constr}, Val) ->
    encode_jer(Type, Val);
encode_jer({typeinfo, {Module, Type}}, Val) ->
    TypeInfo = Module:typeinfo(Type),
    encode_jer(TypeInfo, Val);
encode_jer({sof, Type}, Vals) when is_list(Vals) ->
    [ 
     encode_jer(Type, Val) ||
         Val <- Vals
    ];
encode_jer({choice, Choices}, {Alt, Value}) ->
    case is_map_key(AltBin = atom_to_binary(Alt, utf8), Choices) of
        true ->
            EncodedVal = encode_jer(maps:get(AltBin, Choices), Value),
            #{AltBin => EncodedVal};
        false ->
            exit({error, {asn1, {invalid_choice, Alt, Choices}}})
    end;
encode_jer(bit_string, Value) ->
    Str = bitstring2json(Value),
    #{value => Str, length => bit_size(Value)};
encode_jer({bit_string, FixedLength}, Value)
    when is_bitstring(Value), is_integer(FixedLength) ->
    Value2 = jer_padbitstr(Value, FixedLength),
    bitstring2json(Value2);
encode_jer(compact_bit_string, Compact) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer(bit_string, BitStr);
encode_jer({compact_bit_string, FixedLength},
           Compact = {_Unused, Binary})
    when is_binary(Binary) ->
    BitStr = jer_compact2bitstr(Compact),
    encode_jer({bit_string, FixedLength}, BitStr);
encode_jer({bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer({compact_bit_string_nnl, NNL}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer(bit_string, Value1);
encode_jer({{compact_bit_string_nnl, NNL}, FixedLength}, Value) ->
    Value1 = jer_bit_str2bitstr(Value, NNL),
    encode_jer({bit_string, FixedLength}, Value1);
encode_jer('OBJECT IDENTIFIER', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer('RELATIVE-OID', Oid) when is_tuple(Oid) ->
    oid2json(Oid);
encode_jer({'ObjClassFieldType', _, _}, Val) when is_binary(Val) ->
    Val;
encode_jer('ASN1_OPEN_TYPE', Val) when is_binary(Val) ->
    Val;
encode_jer({container, Type, _Containing}, Val) ->
    encode_jer(Type, Val);
encode_jer(Type, Val) ->
    exit({error, {asn1, {{encode, Type}, Val}}}).

encode_jer_component([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                     [asn1_NOVALUE | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                     [asn1_DEFAULT | Rest],
                     Acc) ->
    encode_jer_component(CompInfos, Rest, Acc);
encode_jer_component([{Name, Type, _OptOrDefault} | CompInfos],
                     [Value | Rest],
                     Acc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component(CompInfos, Rest, [{Name, Enc} | Acc]);
encode_jer_component([], _, Acc) ->
    {'KV_LIST', lists:reverse(Acc)}.

encode_jer_component_map([{Name, AName, Type, _OptOrDefault} |
                          CompInfos],
                         MapVal, Acc)
    when is_map_key(AName, MapVal) ->
    Value = maps:get(AName, MapVal),
    Enc = encode_jer(Type, Value),
    encode_jer_component_map(CompInfos, MapVal, [{Name, Enc} | Acc]);
encode_jer_component_map([{_Name, _AName, _Type, 'OPTIONAL'} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([{_Name, _AName, _Type, {'DEFAULT', _}} |
                          CompInfos],
                         MapVal, Acc) ->
    encode_jer_component_map(CompInfos, MapVal, Acc);
encode_jer_component_map([], MapVal, Acc)
    when map_size(MapVal) =:= length(Acc) ->
    {'KV_LIST', lists:reverse(Acc)};
encode_jer_component_map(_, MapVal, Acc) ->
    ErroneousKeys =
        maps:keys(MapVal)
        --
        [ 
         K ||
             {K, _V} <- Acc
        ],
    exit({error,
          {asn1,
           {{encode, 'SEQUENCE'}, {erroneous_keys, ErroneousKeys}}}}).

encode_jer_component_tab([{_Name, _Type, 'OPTIONAL'} | CompInfos],
                         [asn1_NOVALUE | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{_Name, _Type, {'DEFAULT', _}} | CompInfos],
                         [asn1_DEFAULT | Rest],
                         Simple, MapAcc) ->
    encode_jer_component_tab(CompInfos, Rest, Simple, MapAcc);
encode_jer_component_tab([{Name, Type, _OptOrDefault} | CompInfos],
                         [Value | Rest],
                         Simple, MapAcc) ->
    Enc = encode_jer(Type, Value),
    encode_jer_component_tab(CompInfos, Rest, Simple,
                             MapAcc#{Name => Enc});
encode_jer_component_tab([], _, _Simple, MapAcc) ->
    MapAcc.

jer_bit_str2bitstr(Compact = {_Unused, _Binary}, _NamedBitList) ->
    jer_compact2bitstr(Compact);
jer_bit_str2bitstr(Int, _NamedBitList) when is_integer(Int) ->
    jer_compact2bitstr(Int);
jer_bit_str2bitstr(BitList = [Bit | _], _NamedBitList)
    when Bit == 1; Bit == 0 ->
    Int =
        list_to_integer([ 
                         case B of
                             0 ->
                                 $0;
                             1 ->
                                 $1
                         end ||
                             B <- BitList
                        ],
                        2),
    Len = length(BitList),
    <<Int:Len>>;
jer_bit_str2bitstr([H | _] = Bits, NamedBitList) when is_atom(H) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([{bit, _} | _] = Bits, NamedBitList) ->
    jer_do_encode_named_bit_string(Bits, NamedBitList);
jer_bit_str2bitstr([], _NamedBitList) ->
    <<>>;
jer_bit_str2bitstr(BitStr, _NamedBitList) when is_bitstring(BitStr) ->
    BitStr.

jer_bitstr2compact(BitStr) ->
    Size = bit_size(BitStr),
    Unused = (8 - Size rem 8) band 7,
    {Unused, <<BitStr/bitstring,0:Unused>>}.

jer_bitstr2names(<<1:1,BitStr/bitstring>>,
                 [{Name, Pos} | Rest],
                 Pos, Acc) ->
    jer_bitstr2names(BitStr, Rest, Pos + 1, [Name | Acc]);
jer_bitstr2names(<<1:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, [{bit, Num} | Acc]);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, [{_, Num} | Rest], Num, Acc) ->
    jer_bitstr2names(BitStr, Rest, Num + 1, Acc);
jer_bitstr2names(<<0:1,BitStr/bitstring>>, NNL, Num, Acc) ->
    jer_bitstr2names(BitStr, NNL, Num + 1, Acc);
jer_bitstr2names(<<>>, _, _, Acc) ->
    lists:reverse(Acc).

jer_bitstr2names(BitStr, []) ->
    BitStr;
jer_bitstr2names(BitStr, NNL) ->
    SortedList = lists:keysort(2, NNL),
    jer_bitstr2names(BitStr, SortedList, 0, []).

jer_compact2bitstr({Unused, Binary}) ->
    Size = bit_size(Binary) - Unused,
    <<BitStr:Size/bitstring,_/bitstring>> = Binary,
    BitStr;
jer_compact2bitstr(Int) when is_integer(Int) ->
    jer_int2bitstr(Int);
jer_compact2bitstr(BitList = [Bit | _]) when Bit == 1; Bit == 0 ->
    IntStr = jer_skip_trailing_zeroes(BitList, []),
    Int = list_to_integer(IntStr, 2),
    Len = length(IntStr),
    <<Int:Len>>.

jer_do_encode_named_bit_string([FirstVal | RestVal], NamedBitList) ->
    ToSetPos =
        jer_get_all_bitposes([FirstVal | RestVal], NamedBitList, []),
    Size = lists:max(ToSetPos) + 1,
    BitList = jer_make_and_set_list(Size, ToSetPos, 0),
    jer_encode_bitstring(BitList).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest]) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, <<Val>>);
jer_encode_bitstring(Val) ->
    jer_unused_bitlist(Val, <<>>).

jer_encode_bitstring([B8, B7, B6, B5, B4, B3, B2, B1 | Rest], Acc) ->
    Val =
        B8 bsl 7 bor (B7 bsl 6) bor (B6 bsl 5) bor (B5 bsl 4)
        bor
        (B4 bsl 3)
        bor
        (B3 bsl 2)
        bor
        (B2 bsl 1)
        bor
        B1,
    jer_encode_bitstring(Rest, [Acc, Val]);
jer_encode_bitstring([], Acc) ->
    Acc;
jer_encode_bitstring(Rest, Acc) ->
    jer_unused_bitlist(Rest, Acc).

jer_get_all_bitposes([{bit, ValPos} | Rest], NamedBitList, Ack) ->
    jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
jer_get_all_bitposes([Val | Rest], NamedBitList, Ack) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedBitList) of
        {_ValName, ValPos} ->
            jer_get_all_bitposes(Rest, NamedBitList, [ValPos | Ack]);
        _ ->
            exit({error, {asn1, {bitstring_namedbit, Val}}})
    end;
jer_get_all_bitposes([], _NamedBitList, Ack) ->
    lists:sort(Ack).

jer_int2bitstr(0, Acc) ->
    Acc;
jer_int2bitstr(Int, Acc) ->
    Bit = Int band 1,
    jer_int2bitstr(Int bsr 1, <<Acc/bitstring,Bit:1>>).

jer_int2bitstr(Int) when is_integer(Int), Int >= 0 ->
    jer_int2bitstr(Int, <<>>).

jer_make_and_set_list(0, [], _) ->
    [];
jer_make_and_set_list(0, _, _) ->
    exit({error, {asn1, bitstring_sizeconstraint}});
jer_make_and_set_list(Len, [XPos | SetPos], XPos) ->
    [1 | jer_make_and_set_list(Len - 1, SetPos, XPos + 1)];
jer_make_and_set_list(Len, [Pos | SetPos], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [Pos | SetPos], XPos + 1)];
jer_make_and_set_list(Len, [], XPos) ->
    [0 | jer_make_and_set_list(Len - 1, [], XPos + 1)].

jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) == FixedLength ->
    BitStr;
jer_padbitstr(BitStr, FixedLength) when bit_size(BitStr) < FixedLength ->
    Len = bit_size(BitStr),
    PadLen = FixedLength - Len,
    <<BitStr/bitstring,0:PadLen>>.

jer_skip_trailing_zeroes([1 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$1 | Acc]);
jer_skip_trailing_zeroes([0 | Rest], Acc) ->
    jer_skip_trailing_zeroes(Rest, [$0 | Acc]);
jer_skip_trailing_zeroes([], [$0 | Acc]) ->
    jer_skip_trailing_zeroes([], Acc);
jer_skip_trailing_zeroes([], Acc) ->
    lists:reverse(Acc).

jer_unused_bitlist([], Acc) ->
    Acc;
jer_unused_bitlist([Bit | Rest], Acc) ->
    jer_unused_bitlist(Rest, <<Acc/bitstring,Bit:1>>).

json2bitstring(Value, Length) ->
    json2bitstring(Value, Length, []).

json2bitstring([A1, A2], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16) bsr (8 - Length),
    Bin = list_to_binary(lists:reverse(Acc)),
    <<Bin/binary,Int:Length>>;
json2bitstring([A1, A2 | Rest], Length, Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2bitstring(Rest, Length - 8, [Int | Acc]);
json2bitstring([], 0, Acc) ->
    Bin = list_to_binary(lists:reverse(Acc)),
    Bin.

json2octetstring([A1, A2 | Rest], Acc) ->
    Int = list_to_integer([A1, A2], 16),
    json2octetstring(Rest, [Int | Acc]);
json2octetstring([], Acc) ->
    lists:reverse(Acc).

json2octetstring2binary(Value) ->
    list_to_binary(json2octetstring(Value, [])).

json2octetstring2string(Value) ->
    json2octetstring(Value, []).

json2oid(OidStr) when is_binary(OidStr) ->
    OidList = binary:split(OidStr, [<<".">>], [global]),
    OidNumList =
        [ 
         binary_to_integer(Num) ||
             Num <- OidList
        ],
    list_to_tuple(OidNumList).

ntz(Byte) ->
    T = {8, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2,
         0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3, 0,
         1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1,
         0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0,
         2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0, 3,
         0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0,
         1, 0, 7, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1,
         0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1, 0,
         3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2,
         0, 1, 0, 6, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0,
         1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5, 0, 1, 0, 2, 0, 1,
         0, 3, 0, 1, 0, 2, 0, 1, 0, 4, 0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0,
         2, 0, 1, 0},
    element(Byte + 1, T).

octetstring2json(List) when is_list(List) ->
    list_to_binary([ 
                    begin
                        Num = integer_to_list(X, 16),
                        if
                            length(Num) == 1 ->
                                "0" ++ Num;
                            true ->
                                Num
                        end
                    end ||
                        X <- List
                   ]).

oid2json(Oid) when is_tuple(Oid) ->
    OidList = tuple_to_list(Oid),
    OidNumberStr =
        [ 
         integer_to_list(V) ||
             V <- OidList
        ],
    oid2json(OidNumberStr, []).

oid2json([Num | T], []) ->
    oid2json(T, [Num]);
oid2json([Num | T], Acc) ->
    oid2json(T, [Num, $. | Acc]);
oid2json([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

open_type_to_binary({asn1_OPENTYPE, Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len, Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
